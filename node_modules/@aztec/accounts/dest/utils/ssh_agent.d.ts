/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Buffer } from 'buffer';
import net from 'net';
/**
 * Connect to the SSH agent via a TCP socket using the standard env variable
 */
export declare function connectToAgent(): net.Socket;
/**
 * Type representing a stored key in the SSH agent.
 */
type StoredKey = {
    /**
     * Type of the key.
     */
    type: string;
    /**
     * Public key in base64 encoding.
     */
    publicKey: string;
    /**
     * Comment associated with the key.
     */
    comment: string;
};
/**
 * Retrieve the identities stored in the SSH agent.
 */
export declare function getIdentities(): Promise<StoredKey[]>;
/**
 * Sign data using a key stored in the SSH agent. The private signing key is identified by its corresponding public key.
 */
export declare function signWithAgent(keyType: Buffer, curveName: Buffer, publicKey: Buffer, data: Buffer): Promise<Buffer>;
export {};
//# sourceMappingURL=ssh_agent.d.ts.map