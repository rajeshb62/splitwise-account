var _SSHEcdsaRAuthWitnessProvider_instances, _SSHEcdsaRAuthWitnessProvider_parseECDSASignature;
import { __classPrivateFieldGet } from "tslib";
import { AuthWitness } from '@aztec/circuit-types';
import { EcdsaSignature } from '@aztec/circuits.js/barretenberg';
import { DefaultAccountContract } from '../../defaults/account_contract.js';
import { signWithAgent } from '../../utils/ssh_agent.js';
import { EcdsaRAccountContractArtifact } from './artifact.js';
const secp256r1N = 115792089210356248762697446949407573529996955224135760342422259061068512044369n;
/**
 * Account contract that authenticates transactions using ECDSA signatures
 * verified against a secp256r1 public key stored in an immutable encrypted note.
 * Since this implementation relays signatures to an SSH agent, we provide the
 * public key here not for signature verification, but to identify actual identity
 * that will be used to sign authwitnesses.
 */
export class EcdsaRSSHAccountContract extends DefaultAccountContract {
    constructor(signingPublicKey) {
        super(EcdsaRAccountContractArtifact);
        this.signingPublicKey = signingPublicKey;
    }
    getDeploymentArgs() {
        return [this.signingPublicKey.subarray(0, 32), this.signingPublicKey.subarray(32, 64)];
    }
    getAuthWitnessProvider(_address) {
        return new SSHEcdsaRAuthWitnessProvider(this.signingPublicKey);
    }
}
/** Creates auth witnesses using ECDSA signatures. */
class SSHEcdsaRAuthWitnessProvider {
    constructor(signingPublicKey) {
        _SSHEcdsaRAuthWitnessProvider_instances.add(this);
        this.signingPublicKey = signingPublicKey;
    }
    async createAuthWit(messageHash) {
        // Key type and curve name
        const keyType = Buffer.from('ecdsa-sha2-nistp256');
        const curveName = Buffer.from('nistp256');
        const data = await signWithAgent(keyType, curveName, this.signingPublicKey, messageHash.toBuffer());
        const signature = __classPrivateFieldGet(this, _SSHEcdsaRAuthWitnessProvider_instances, "m", _SSHEcdsaRAuthWitnessProvider_parseECDSASignature).call(this, data);
        return new AuthWitness(messageHash, [...signature.r, ...signature.s]);
    }
}
_SSHEcdsaRAuthWitnessProvider_instances = new WeakSet(), _SSHEcdsaRAuthWitnessProvider_parseECDSASignature = function _SSHEcdsaRAuthWitnessProvider_parseECDSASignature(data) {
    // Extract ECDSA signature components
    let offset = 0;
    const sigTypeLen = data.readUInt32BE(offset);
    offset += 4;
    const sigType = data.subarray(offset, offset + sigTypeLen).toString();
    offset += sigTypeLen;
    if (sigType !== 'ecdsa-sha2-nistp256') {
        throw new Error(`Unexpected signature type: ${sigType}`);
    }
    offset += 4;
    const rLen = data.readUInt32BE(offset);
    offset += 4;
    let r = data.subarray(offset, offset + rLen);
    offset += rLen;
    const sLen = data.readUInt32BE(offset);
    offset += 4;
    let s = data.subarray(offset, offset + sLen);
    // R and S are encoded using ASN.1 DER format, which may include a leading zero byte to avoid interpreting the value as negative
    if (r.length > 32) {
        r = Buffer.from(Uint8Array.prototype.slice.call(r, 1));
    }
    if (s.length > 32) {
        s = Buffer.from(Uint8Array.prototype.slice.call(s, 1));
    }
    const maybeHighS = BigInt(`0x${s.toString('hex')}`);
    // ECDSA signatures must have a low S value so they can be used as a nullifier. BB forces a value of 27 for v, so
    // only one PublicKey can verify the signature (and not its negated counterpart) https://ethereum.stackexchange.com/a/55728
    if (maybeHighS > secp256r1N / 2n + 1n) {
        s = Buffer.from((secp256r1N - maybeHighS).toString(16), 'hex');
    }
    return new EcdsaSignature(r, s, Buffer.from([0]));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudF9jb250cmFjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9lY2RzYS9zc2hfZWNkc2Ffci9hY2NvdW50X2NvbnRyYWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBd0IsTUFBTSxzQkFBc0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFJakUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDNUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3pELE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU5RCxNQUFNLFVBQVUsR0FBRywrRUFBK0UsQ0FBQztBQUNuRzs7Ozs7O0dBTUc7QUFDSCxNQUFNLE9BQU8sd0JBQXlCLFNBQVEsc0JBQXNCO0lBQ2xFLFlBQW9CLGdCQUF3QjtRQUMxQyxLQUFLLENBQUMsNkJBQWlELENBQUMsQ0FBQztRQUR2QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQVE7SUFFNUMsQ0FBQztJQUVELGlCQUFpQjtRQUNmLE9BQU8sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pGLENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxRQUF5QjtRQUM5QyxPQUFPLElBQUksNEJBQTRCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDakUsQ0FBQztDQUNGO0FBRUQscURBQXFEO0FBQ3JELE1BQU0sNEJBQTRCO0lBQ2hDLFlBQW9CLGdCQUF3Qjs7UUFBeEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFRO0lBQUcsQ0FBQztJQTRDaEQsS0FBSyxDQUFD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