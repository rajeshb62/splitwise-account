/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { type AuthWitnessProvider } from '@aztec/aztec.js/account';
import { type CompleteAddress } from '@aztec/circuit-types';
import { DefaultAccountContract } from '../../defaults/account_contract.js';
/**
 * Account contract that authenticates transactions using ECDSA signatures
 * verified against a secp256r1 public key stored in an immutable encrypted note.
 * Since this implementation relays signatures to an SSH agent, we provide the
 * public key here not for signature verification, but to identify actual identity
 * that will be used to sign authwitnesses.
 */
export declare class EcdsaRSSHAccountContract extends DefaultAccountContract {
    private signingPublicKey;
    constructor(signingPublicKey: Buffer);
    getDeploymentArgs(): Buffer[];
    getAuthWitnessProvider(_address: CompleteAddress): AuthWitnessProvider;
}
//# sourceMappingURL=account_contract.d.ts.map