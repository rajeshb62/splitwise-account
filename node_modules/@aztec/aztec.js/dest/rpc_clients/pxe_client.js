import { AuthWitness, CountedNoteLog, CountedPublicExecutionRequest, EncryptedL2Log, EncryptedL2NoteLog, EncryptedNoteL2BlockL2Logs, ExtendedNote, ExtendedUnencryptedL2Log, L2Block, LogId, Note, NullifierMembershipWitness, PrivateExecutionResult, SiblingPath, Tx, TxEffect, TxExecutionRequest, TxHash, TxProvingResult, TxReceipt, TxSimulationResult, UnencryptedL2BlockL2Logs, UnencryptedL2Log, UniqueNote, } from '@aztec/circuit-types';
import { AztecAddress, CompleteAddress, EthAddress, Fr, FunctionSelector, GrumpkinScalar, Point, PrivateCircuitPublicInputs, PublicKeys, } from '@aztec/circuits.js';
import { NoteSelector } from '@aztec/foundation/abi';
import { Buffer32 } from '@aztec/foundation/buffer';
import { createJsonRpcClient, makeFetch } from '@aztec/foundation/json-rpc/client';
/**
 * Creates a JSON-RPC client to remotely talk to PXE.
 * @param url - The URL of the PXE.
 * @param fetch - The fetch implementation to use.
 * @returns A JSON-RPC client of PXE.
 */
export const createPXEClient = (url, fetch = makeFetch([1, 2, 3], false)) => createJsonRpcClient(url, {
    AuthWitness,
    AztecAddress,
    CompleteAddress,
    FunctionSelector,
    EthAddress,
    ExtendedNote,
    UniqueNote,
    ExtendedUnencryptedL2Log,
    Fr,
    GrumpkinScalar,
    L2Block,
    TxEffect,
    LogId,
    Note,
    Point,
    PublicKeys,
    TxExecutionRequest,
    TxHash,
    Buffer32,
    SiblingPath,
}, {
    EncryptedNoteL2BlockL2Logs,
    EncryptedL2NoteLog,
    EncryptedL2Log,
    UnencryptedL2Log,
    NoteSelector,
    NullifierMembershipWitness,
    TxSimulationResult,
    TxProvingResult,
    PrivateCircuitPublicInputs,
    PrivateExecutionResult,
    CountedPublicExecutionRequest,
    CountedNoteLog,
    Tx,
    TxReceipt,
    UnencryptedL2BlockL2Logs,
}, false, 'pxe', fetch);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHhlX2NsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9ycGNfY2xpZW50cy9weGVfY2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxXQUFXLEVBQ1gsY0FBYyxFQUNkLDZCQUE2QixFQUM3QixjQUFjLEVBQ2Qsa0JBQWtCLEVBQ2xCLDBCQUEwQixFQUMxQixZQUFZLEVBQ1osd0JBQXdCLEVBQ3hCLE9BQU8sRUFDUCxLQUFLLEVBQ0wsSUFBSSxFQUNKLDBCQUEwQixFQUUxQixzQkFBc0IsRUFDdEIsV0FBVyxFQUNYLEVBQUUsRUFDRixRQUFRLEVBQ1Isa0JBQWtCLEVBQ2xCLE1BQU0sRUFDTixlQUFlLEVBQ2YsU0FBUyxFQUNULGtCQUFrQixFQUNsQix3QkFBd0IsRUFDeEIsZ0JBQWdCLEVBQ2hCLFVBQVUsR0FDWCxNQUFNLHNCQUFzQixDQUFDO0FBQzlCLE9BQU8sRUFDTCxZQUFZLEVBQ1osZUFBZSxFQUNmLFVBQVUsRUFDVixFQUFFLEVBQ0YsZ0JBQWdCLEVBQ2hCLGNBQWMsRUFDZCxLQUFLLEVBQ0wsMEJBQTBCLEVBQzFCLFVBQVUsR0FDWCxNQUFNLG9CQUFvQixDQUFDO0FBQzVCLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDcEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFNBQVMsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRW5GOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZUFBZSxHQUFHLENBQUMsR0FBVyxFQUFFLEtBQUssR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFPLEVBQUUsQ0FDdkYsbUJBQW1CLENBQ2pCLEdBQUcsRUFDSDtJQUNFLFdBQVc7SUFDWCxZQUFZO0lBQ1osZUFBZTtJQUNmLGdCQUFnQjtJQUNoQixVQUFVO0lBQ1YsWUFBWTtJQUNaLFVBQVU7SUFDVix3QkFBd0I7SUFDeEIsRUFBRTtJQUNGLGNBQWM7SUFDZCxPQUFPO0lBQ1AsUUFBUTtJQUNSLEtBQUs7SUFDTCxJQUFJO0lBQ0osS0FBSztJQUNMLFVBQVU7SUFDVixrQkFBa0I7SUFDbEIsTUFBTTtJQUNOLFFBQVE7SUFDUixXQUFXO0NBQ1osRUFDRDtJQUNFLDBCQUEwQjtJQUMxQixrQkFBa0I7SUFDbEIsY0FBYztJQUNkLGdCQUFnQjtJQUNoQixZQUFZO0lBQ1osMEJBQTBCO0lBQzFCLGtCQUFrQjtJQUNsQixlQUFlO0lBQ2YsMEJBQTBCO0lBQzFCLHNCQUFzQjtJQUN0Qiw2QkFBNkI7SUFDN0IsY0FBYztJQUNkLEVBQUU7SUFDRixTQUFTO0lBQ1Qsd0JBQXdCO0NBQ3pCLEVBQ0QsS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLENBQ0MsQ0FBQyJ9