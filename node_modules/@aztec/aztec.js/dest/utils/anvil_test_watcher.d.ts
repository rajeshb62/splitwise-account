import { type EthCheatCodes } from '@aztec/aztec.js';
import { type EthAddress } from '@aztec/circuits.js';
import { type HttpTransport, type PublicClient } from 'viem';
import type * as chains from 'viem/chains';
/**
 * Represents a watcher for a rollup contract.
 *
 * It started on a network like anvil where time traveling is allowed, and auto-mine is turned on
 * it will periodically check if the current slot have already been filled, e.g., there was an L2
 * block within the slot. And if so, it will time travel into the next slot.
 */
export declare class AnvilTestWatcher {
    private cheatcodes;
    private rollup;
    private filledRunningPromise?;
    private logger;
    constructor(cheatcodes: EthCheatCodes, rollupAddress: EthAddress, publicClient: PublicClient<HttpTransport, chains.Chain>);
    start(): Promise<void>;
    stop(): Promise<void>;
    mineIfSlotFilled(): Promise<void>;
}
//# sourceMappingURL=anvil_test_watcher.d.ts.map