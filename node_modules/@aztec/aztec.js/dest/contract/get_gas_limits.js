import { PublicKernelPhase } from '@aztec/circuit-types';
import { Gas } from '@aztec/circuits.js';
/**
 * Returns suggested total and teardown gas limits for a simulated tx.
 * Note that public gas usage is only accounted for if the publicOutput is present.
 * @param pad - Percentage to pad the suggested gas limits by, defaults to 10%.
 */
export function getGasLimits(simulationResult, simulationTeardownGasLimits, pad = 0.1) {
    const simulatedTx = simulationResult.toSimulatedTx();
    const privateGasUsed = simulatedTx.data.publicInputs.end.gasUsed
        .sub(simulationTeardownGasLimits)
        .add(simulatedTx.data.forPublic?.endNonRevertibleData.gasUsed ?? Gas.empty());
    if (simulationResult.publicOutput) {
        const publicGasUsed = Object.values(simulationResult.publicOutput.gasUsed)
            .filter(Boolean)
            .reduce((total, current) => total.add(current), Gas.empty());
        const teardownGas = simulationResult.publicOutput.gasUsed[PublicKernelPhase.TEARDOWN] ?? Gas.empty();
        return {
            totalGas: privateGasUsed.add(publicGasUsed).mul(1 + pad),
            teardownGas: teardownGas.mul(1 + pad),
        };
    }
    return { totalGas: privateGasUsed.mul(1 + pad), teardownGas: Gas.empty() };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0X2dhc19saW1pdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJhY3QvZ2V0X2dhc19saW1pdHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUEyQixNQUFNLHNCQUFzQixDQUFDO0FBQ2xGLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV6Qzs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBQyxnQkFBb0MsRUFBRSwyQkFBZ0MsRUFBRSxHQUFHLEdBQUcsR0FBRztJQUM1RyxNQUFNLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUNyRCxNQUFNLGNBQWMsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsT0FBTztTQUM3RCxHQUFHLENBQUMsMkJBQTJCLENBQUM7U0FDaEMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLG9CQUFvQixDQUFDLE9BQU8sSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztJQUNoRixJQUFJLGdCQUFnQixDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2xDLE1BQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQzthQUN2RSxNQUFNLENBQUMsT0FBTyxDQUFDO2FBQ2YsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUMvRCxNQUFNLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUVyRyxPQUFPO1lBQ0wsUUFBUSxFQUFFLGNBQWMsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDeEQsV0FBVyxFQUFFLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztTQUN0QyxDQUFDO0lBQ0osQ0FBQztJQUNELE9BQU8sRUFBRSxRQUFRLEVBQUUsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDO0FBQzdFLENBQUMifQ==