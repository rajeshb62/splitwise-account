import { GasSettings } from '@aztec/circuits.js';
import { createDebugLogger } from '@aztec/foundation/log';
import { getGasLimits } from './get_gas_limits.js';
import { ProvenTx } from './proven_tx.js';
import { SentTx } from './sent_tx.js';
/**
 * Base class for an interaction with a contract, be it a deployment, a function call, or a batch.
 * Implements the sequence create/simulate/send.
 */
export class BaseContractInteraction {
    constructor(wallet) {
        this.wallet = wallet;
        this.log = createDebugLogger('aztec:js:contract_interaction');
    }
    /**
     * Creates a transaction execution request, simulates and proves it. Differs from .prove in
     * that its result does not include the wallet nor the composed tx object, but only the proving result.
     * This object can then be used to either create a ProvenTx ready to be sent, or directly send the transaction.
     * @param options - optional arguments to be used in the creation of the transaction
     * @returns The proving result.
     */
    async proveInternal(options = {}) {
        const txRequest = await this.create(options);
        const txSimulationResult = await this.wallet.simulateTx(txRequest, !options.skipPublicSimulation, undefined, true);
        return await this.wallet.proveTx(txRequest, txSimulationResult.privateExecutionResult);
    }
    /**
     * Proves a transaction execution request and returns a tx object ready to be sent.
     * @param options - optional arguments to be used in the creation of the transaction
     * @returns The resulting transaction
     */
    async prove(options = {}) {
        const txProvingResult = await this.proveInternal(options);
        return new ProvenTx(this.wallet, txProvingResult.toTx());
    }
    /**
     * Sends a transaction to the contract function with the specified options.
     * This function throws an error if called on an unconstrained function.
     * It creates and signs the transaction if necessary, and returns a SentTx instance,
     * which can be used to track the transaction status, receipt, and events.
     * @param options - An optional object containing 'from' property representing
     * the AztecAddress of the sender. If not provided, the default address is used.
     * @returns A SentTx instance for tracking the transaction status and information.
     */
    send(options = {}) {
        const promise = (async () => {
            const txProvingResult = await this.proveInternal(options);
            return this.wallet.sendTx(txProvingResult.toTx());
        })();
        return new SentTx(this.wallet, promise);
    }
    /**
     * Estimates gas for a given tx request and returns gas limits for it.
     * @param opts - Options.
     * @returns Gas limits.
     */
    async estimateGas(opts) {
        const txRequest = await this.create({ ...opts, estimateGas: false });
        const simulationResult = await this.wallet.simulateTx(txRequest, true);
        const { totalGas: gasLimits, teardownGas: teardownGasLimits } = getGasLimits(simulationResult, (opts?.fee?.gasSettings ?? GasSettings.default()).teardownGasLimits);
        return { gasLimits, teardownGasLimits };
    }
    /**
     * Helper method to return fee options based on the user opts, estimating tx gas if needed.
     * @param request - Request to execute for this interaction.
     * @returns Fee options for the actual transaction.
     */
    async getFeeOptionsFromEstimatedGas(request) {
        const fee = request.fee;
        if (fee) {
            const txRequest = await this.wallet.createTxExecutionRequest(request);
            const simulationResult = await this.wallet.simulateTx(txRequest, true);
            const { totalGas: gasLimits, teardownGas: teardownGasLimits } = getGasLimits(simulationResult, fee.gasSettings.teardownGasLimits);
            this.log.debug(`Estimated gas limits for tx: DA=${gasLimits.daGas} L2=${gasLimits.l2Gas} teardownDA=${teardownGasLimits.daGas} teardownL2=${teardownGasLimits.l2Gas}`);
            const gasSettings = GasSettings.default({ ...fee.gasSettings, gasLimits, teardownGasLimits });
            return { ...fee, gasSettings };
        }
        return fee;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZV9jb250cmFjdF9pbnRlcmFjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cmFjdC9iYXNlX2NvbnRyYWN0X2ludGVyYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBVyxXQUFXLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUkxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFtQnRDOzs7R0FHRztBQUNILE1BQU0sT0FBZ0IsdUJBQXVCO0lBRzNDLFlBQXNCLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBRjFCLFFBQUcsR0FBRyxpQkFBaUIsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0lBRTVCLENBQUM7SUFTeEM7Ozs7OztPQU1HO0lBQ08sS0FBSyxDQUFDLGFBQWEsQ0FBQyxVQUE2QixFQUFFO1FBQzNELE1BQU0sU0FBUyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QyxNQUFNLGtCQUFrQixHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLENBQUMsT0FBTyxDQUFDLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuSCxPQUFPLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLGtCQUFrQixDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFDekYsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQTZCLEVBQUU7UUFDaEQsTUFBTSxlQUFlLEdBQUcs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