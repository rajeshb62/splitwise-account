/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { type AuthWitness, type PXE, type TxExecutionRequest } from '@aztec/circuit-types';
import { type AztecAddress, Fr } from '@aztec/circuits.js';
import { type AccountInterface } from '../account/interface.js';
import { ContractFunctionInteraction } from '../contract/contract_function_interaction.js';
import { type ExecutionRequestInit } from '../entrypoint/entrypoint.js';
import { type IntentAction, type IntentInnerHash } from '../utils/authwit.js';
import { BaseWallet } from './base_wallet.js';
/**
 * A wallet implementation that forwards authentication requests to a provided account.
 */
export declare class AccountWallet extends BaseWallet {
    protected account: AccountInterface;
    constructor(pxe: PXE, account: AccountInterface);
    createTxExecutionRequest(exec: ExecutionRequestInit): Promise<TxExecutionRequest>;
    getChainId(): Fr;
    getVersion(): Fr;
    /**
     * Computes an authentication witness from either a message hash or an intent.
     *
     * If a message hash is provided, it will create a witness for the hash directly.
     * Otherwise, it will compute the message hash using the intent, along with the
     * chain id and the version values provided by the wallet.
     *
     * @param messageHashOrIntent - The message hash of the intent to approve
     * @returns The authentication witness
     */
    createAuthWit(messageHashOrIntent: Fr | Buffer | IntentAction | IntentInnerHash): Promise<AuthWitness>;
    /**
     * Returns a function interaction to set a message hash as authorized or revoked in this account.
     *
     * Public calls can then consume this authorization.
     *
     * @param messageHashOrIntent - The message hash or intent to authorize/revoke
     * @param authorized - True to authorize, false to revoke authorization.
     * @returns - A function interaction.
     */
    setPublicAuthWit(messageHashOrIntent: Fr | Buffer | IntentInnerHash | IntentAction, authorized: boolean): ContractFunctionInteraction;
    private getInnerHashAndConsumer;
    /**
     * Returns the message hash for the given intent
     *
     * @param intent - A tuple of (consumer and inner hash) or (caller and action)
     * @returns The message hash
     */
    private getMessageHash;
    /**
     * Lookup the validity of an authwit in private and public contexts.
     *
     * Uses the chain id and version of the wallet.
     *
     * @param onBehalfOf - The address of the "approver"
     * @param intent - The consumer and inner hash or the caller and action to lookup
     *
     * @returns - A struct containing the validity of the authwit in private and public contexts.
     */
    lookupValidity(onBehalfOf: AztecAddress, intent: IntentInnerHash | IntentAction): Promise<{
        /** boolean flag indicating if the authwit is valid in private context */
        isValidInPrivate: boolean;
        /** boolean flag indicating if the authwit is valid in public context */
        isValidInPublic: boolean;
    }>;
    /** Returns the complete address of the account that implements this wallet. */
    getCompleteAddress(): import("@aztec/circuit-types").CompleteAddress;
    /** Returns the address of the account that implements this wallet. */
    getAddress(): AztecAddress;
    private getSetAuthorizedAbi;
    private getLookupValidityAbi;
    private getIsConsumableAbi;
}
//# sourceMappingURL=account_wallet.d.ts.map