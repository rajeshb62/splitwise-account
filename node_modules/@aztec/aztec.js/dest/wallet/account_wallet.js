import { Fr } from '@aztec/circuits.js';
import { FunctionType } from '@aztec/foundation/abi';
import { ProtocolContractAddress } from '@aztec/protocol-contracts';
import { ContractFunctionInteraction } from '../contract/contract_function_interaction.js';
import { computeAuthWitMessageHash, computeInnerAuthWitHashFromAction, } from '../utils/authwit.js';
import { BaseWallet } from './base_wallet.js';
/**
 * A wallet implementation that forwards authentication requests to a provided account.
 */
export class AccountWallet extends BaseWallet {
    constructor(pxe, account) {
        super(pxe, [account.getAddress()]);
        this.account = account;
    }
    createTxExecutionRequest(exec) {
        return this.account.createTxExecutionRequest(exec);
    }
    getChainId() {
        return this.account.getChainId();
    }
    getVersion() {
        return this.account.getVersion();
    }
    /**
     * Computes an authentication witness from either a message hash or an intent.
     *
     * If a message hash is provided, it will create a witness for the hash directly.
     * Otherwise, it will compute the message hash using the intent, along with the
     * chain id and the version values provided by the wallet.
     *
     * @param messageHashOrIntent - The message hash of the intent to approve
     * @returns The authentication witness
     */
    async createAuthWit(messageHashOrIntent) {
        let messageHash;
        if (Buffer.isBuffer(messageHashOrIntent)) {
            messageHash = Fr.fromBuffer(messageHashOrIntent);
        }
        else if (messageHashOrIntent instanceof Fr) {
            messageHash = messageHashOrIntent;
        }
        else {
            messageHash = this.getMessageHash(messageHashOrIntent);
        }
        const witness = await this.account.createAuthWit(messageHash);
        await this.pxe.addAuthWitness(witness);
        return witness;
    }
    /**
     * Returns a function interaction to set a message hash as authorized or revoked in this account.
     *
     * Public calls can then consume this authorization.
     *
     * @param messageHashOrIntent - The message hash or intent to authorize/revoke
     * @param authorized - True to authorize, false to revoke authorization.
     * @returns - A function interaction.
     */
    setPublicAuthWit(messageHashOrIntent, authorized) {
        let messageHash;
        if (Buffer.isBuffer(messageHashOrIntent)) {
            messageHash = Fr.fromBuffer(messageHashOrIntent);
        }
        else if (messageHashOrIntent instanceof Fr) {
            messageHash = messageHashOrIntent;
        }
        else {
            messageHash = this.getMessageHash(messageHashOrIntent);
        }
        return new ContractFunctionInteraction(this, ProtocolContractAddress.AuthRegistry, this.getSetAuthorizedAbi(), [
            messageHash,
            authorized,
        ]);
    }
    getInnerHashAndConsumer(intent) {
        if ('caller' in intent && 'action' in intent) {
            const action = intent.action instanceof ContractFunctionInteraction ? intent.action.request() : intent.action;
            return {
                innerHash: computeInnerAuthWitHashFromAction(intent.caller, action),
                consumer: action.to,
            };
        }
        else if (Buffer.isBuffer(intent.innerHash)) {
            return { innerHash: Fr.fromBuffer(intent.innerHash), consumer: intent.consumer };
        }
        return { innerHash: intent.innerHash, consumer: intent.consumer };
    }
    /**
     * Returns the message hash for the given intent
     *
     * @param intent - A tuple of (consumer and inner hash) or (caller and action)
     * @returns The message hash
     */
    getMessageHash(intent) {
        const chainId = this.getChainId();
        const version = this.getVersion();
        return computeAuthWitMessageHash(intent, { chainId, version });
    }
    /**
     * Lookup the validity of an authwit in private and public contexts.
     *
     * Uses the chain id and version of the wallet.
     *
     * @param onBehalfOf - The address of the "approver"
     * @param intent - The consumer and inner hash or the caller and action to lookup
     *
     * @returns - A struct containing the validity of the authwit in private and public contexts.
     */
    async lookupValidity(onBehalfOf, intent) {
        const { innerHash, consumer } = this.getInnerHashAndConsumer(intent);
        const messageHash = this.getMessageHash(intent);
        const results = { isValidInPrivate: false, isValidInPublic: false };
        // Check private
        const witness = await this.getAuthWitness(messageHash);
        if (witness !== undefined) {
            results.isValidInPrivate = (await new ContractFunctionInteraction(this, onBehalfOf, this.getLookupValidityAbi(), [
                consumer,
                innerHash,
            ]).simulate());
        }
        // check public
        results.isValidInPublic = (await new ContractFunctionInteraction(this, ProtocolContractAddress.AuthRegistry, this.getIsConsumableAbi(), [onBehalfOf, messageHash]).simulate());
        return results;
    }
    /** Returns the complete address of the account that implements this wallet. */
    getCompleteAddress() {
        return this.account.getCompleteAddress();
    }
    /** Returns the address of the account that implements this wallet. */
    getAddress() {
        return this.getCompleteAddress().address;
    }
    getSetAuthorizedAbi() {
        return {
            name: 'set_authorized',
            isInitializer: false,
            functionType: FunctionType.PUBLIC,
            isInternal: true,
            isStatic: false,
            parameters: [
                {
                    name: 'message_hash',
                    type: { kind: 'field' },
                    visibility: 'private',
                },
                {
                    name: 'authorize',
                    type: { kind: 'boolean' },
                    visibility: 'private',
                },
            ],
            returnTypes: [],
        };
    }
    getLookupValidityAbi() {
        return {
            name: 'lookup_validity',
            isInitializer: false,
            functionType: FunctionType.UNCONSTRAINED,
            isInternal: false,
            isStatic: false,
            parameters: [{ name: 'message_hash', type: { kind: 'field' }, visibility: 'private' }],
            returnTypes: [{ kind: 'boolean' }],
        };
    }
    getIsConsumableAbi() {
        return {
            name: 'unconstrained_is_consumable',
            isInitializer: false,
            functionType: FunctionType.UNCONSTRAINED,
            isInternal: false,
            isStatic: false,
            parameters: [
                {
                    name: 'address',
                    type: {
                        fields: [{ name: 'inner', type: { kind: 'field' } }],
                        kind: 'struct',
                        path: 'authwit::aztec::protocol_types::address::aztec_address::AztecAddress',
                    },
                    visibility: 'private',
                },
                { name: 'message_hash', type: { kind: 'field' }, visibility: 'private' },
            ],
            returnTypes: [{ kind: 'boolean' }],
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3VudF93YWxsZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvd2FsbGV0L2FjY291bnRfd2FsbGV0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBcUIsRUFBRSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDM0QsT0FBTyxFQUFpRCxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNwRyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUdwRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQztBQUUzRixPQUFPLEVBR0wseUJBQXlCLEVBQ3pCLGlDQUFpQyxHQUNsQyxNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUU5Qzs7R0FFRztBQUNILE1BQU0sT0FBTyxhQUFjLFNBQVEsVUFBVTtJQUMzQyxZQUFZLEdBQVEsRUFBWSxPQUF5QjtRQUN2RCxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQURMLFlBQU8sR0FBUCxPQUFPLENBQWtCO0lBRXpELENBQUM7SUFFRCx3QkFBd0IsQ0FBQyxJQUEwQjtRQUNqRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVELFVBQVU7UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELFVBQVU7UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVEOzs7Ozs7Ozs7T0FTRztJQUNILEtBQUssQ0FBQyxhQUFhLENBQUMsbUJBQWlFO1FBQ25GLElBQUksV0FBZSxDQUFDO1FBQ3BCLElBQUksTUFBTSxDQUFDLFFBQVEs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