var _EntrypointPayload_packedArguments, _EntrypointPayload_functionCalls, _EntrypointPayload_nonce, _EntrypointPayload_generatorIndex, _FeeEntrypointPayload_isFeePayer;
import { __classPrivateFieldGet, __classPrivateFieldSet } from "tslib";
import { FunctionCall, PackedValues } from '@aztec/circuit-types';
import { Fr, GeneratorIndex } from '@aztec/circuits.js';
import { FunctionType } from '@aztec/foundation/abi';
import { padArrayEnd } from '@aztec/foundation/collection';
import { poseidon2HashWithSeparator } from '@aztec/foundation/crypto';
// These must match the values defined in:
// - noir-projects/aztec-nr/aztec/src/entrypoint/app.nr
const APP_MAX_CALLS = 4;
// - and noir-projects/aztec-nr/aztec/src/entrypoint/fee.nr
const FEE_MAX_CALLS = 2;
/* eslint-enable camelcase */
/** Assembles an entrypoint payload */
export class EntrypointPayload {
    constructor(functionCalls, generatorIndex, nonce = Fr.random()) {
        _EntrypointPayload_packedArguments.set(this, []);
        _EntrypointPayload_functionCalls.set(this, []);
        _EntrypointPayload_nonce.set(this, void 0);
        _EntrypointPayload_generatorIndex.set(this, void 0);
        for (const call of functionCalls) {
            __classPrivateFieldGet(this, _EntrypointPayload_packedArguments, "f").push(PackedValues.fromValues(call.args));
        }
        /* eslint-disable camelcase */
        __classPrivateFieldSet(this, _EntrypointPayload_functionCalls, functionCalls.map((call, index) => ({
            args_hash: __classPrivateFieldGet(this, _EntrypointPayload_packedArguments, "f")[index].hash,
            function_selector: call.selector.toField(),
            target_address: call.to.toField(),
            is_public: call.type == FunctionType.PUBLIC,
            is_static: call.isStatic,
        })), "f");
        /* eslint-enable camelcase */
        __classPrivateFieldSet(this, _EntrypointPayload_generatorIndex, generatorIndex, "f");
        __classPrivateFieldSet(this, _EntrypointPayload_nonce, nonce, "f");
    }
    /* eslint-disable camelcase */
    /**
     * The function calls to execute. This uses snake_case naming so that it is compatible with Noir encoding
     * @internal
     */
    get function_calls() {
        return __classPrivateFieldGet(this, _EntrypointPayload_functionCalls, "f");
    }
    /* eslint-enable camelcase */
    /**
     * The nonce
     * @internal
     */
    get nonce() {
        return __classPrivateFieldGet(this, _EntrypointPayload_nonce, "f");
    }
    /**
     * The packed arguments for the function calls
     */
    get packedArguments() {
        return __classPrivateFieldGet(this, _EntrypointPayload_packedArguments, "f");
    }
    /**
     * Hashes the payload
     * @returns The hash of the payload
     */
    hash() {
        return poseidon2HashWithSeparator(this.toFields(), __classPrivateFieldGet(this, _EntrypointPayload_generatorIndex, "f"));
    }
    /** Serializes the function calls to an array of fields. */
    functionCallsToFields() {
        return __classPrivateFieldGet(this, _EntrypointPayload_functionCalls, "f").flatMap(call => [
            call.args_hash,
            call.function_selector,
            call.target_address,
            new Fr(call.is_public),
            new Fr(call.is_static),
        ]);
    }
    /**
     * Creates an execution payload for a dapp from a set of function calls
     * @param functionCalls - The function calls to execute
     * @returns The execution payload
     */
    static fromFunctionCalls(functionCalls) {
        return new AppEntrypointPayload(functionCalls, 0);
    }
    /**
     * Creates an execution payload for the app-portion of a transaction from a set of function calls
     * @param functionCalls - The function calls to execute
     * @param nonce - The nonce for the payload, used to emit a nullifier identifying the call
     * @returns The execution payload
     */
    static fromAppExecution(functionCalls, nonce = Fr.random()) {
        if (functionCalls.length > APP_MAX_CALLS) {
            throw new Error(`Expected at most ${APP_MAX_CALLS} function calls, got ${functionCalls.length}`);
        }
        const paddedCalls = padArrayEnd(functionCalls, FunctionCall.empty(), APP_MAX_CALLS);
        return new AppEntrypointPayload(paddedCalls, GeneratorIndex.SIGNATURE_PAYLOAD, nonce);
    }
    /**
     * Creates an execution payload to pay the fee for a transaction
     * @param sender - The address sending this payload
     * @param feeOpts - The fee payment options
     * @returns The execution payload
     */
    static async fromFeeOptions(sender, feeOpts) {
        const calls = (await feeOpts?.paymentMethod.getFunctionCalls(feeOpts?.gasSettings)) ?? [];
        const feePayer = await feeOpts?.paymentMethod.getFeePayer(feeOpts?.gasSettings);
        const isFeePayer = !!feePayer && feePayer.equals(sender);
        const paddedCalls = padArrayEnd(calls, FunctionCall.empty(), FEE_MAX_CALLS);
        return new FeeEntrypointPayload(paddedCalls, GeneratorIndex.FEE_PAYLOAD, isFeePayer);
    }
}
_EntrypointPayload_packedArguments = new WeakMap(), _EntrypointPayload_functionCalls = new WeakMap(), _EntrypointPayload_nonce = new WeakMap(), _EntrypointPayload_generatorIndex = new WeakMap();
/** Entrypoint payload for app phase execution. */
class AppEntrypointPayload extends EntrypointPayload {
    toFields() {
        return [...this.functionCallsToFields(), this.nonce];
    }
}
/** Entrypoint payload for fee payment to be run during setup phase. */
class FeeEntrypointPayload extends EntrypointPayload {
    constructor(functionCalls, generatorIndex, isFeePayer) {
        super(functionCalls, generatorIndex);
        _FeeEntrypointPayload_isFeePayer.set(this, void 0);
        __classPrivateFieldSet(this, _FeeEntrypointPayload_isFeePayer, isFeePayer, "f");
    }
    toFields() {
        return [...this.functionCallsToFields(), this.nonce, new Fr(__classPrivateFieldGet(this, _FeeEntrypointPayload_isFeePayer, "f"))];
    }
    /* eslint-disable camelcase */
    /** Whether the sender should be appointed as fee payer. */
    get is_fee_payer() {
        return __classPrivateFieldGet(this, _FeeEntrypointPayload_isFeePayer, "f");
    }
}
_FeeEntrypointPayload_isFeePayer = new WeakMap();
/**
 * Computes a hash of a combined payload.
 * @param appPayload - An app payload.
 * @param feePayload - A fee payload.
 * @returns A hash of a combined payload.
 */
export function computeCombinedPayloadHash(appPayload, feePayload) {
    return poseidon2HashWithSeparator([appPayload.hash(), feePayload.hash()], GeneratorIndex.COMBINED_PAYLOAD);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bG9hZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbnRyeXBvaW50L3BheWxvYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xFLE9BQU8sRUFBcUIsRUFBRSxFQUFvQixjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM3RixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDckQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzNELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBZXRFLDBDQUEwQztBQUMxQyx1REFBdUQ7QUFDdkQsTUFBTSxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBQ3hCLDJEQUEyRDtBQUMzRCxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUM7QUFnQnhCLDZCQUE2QjtBQUU3QixzQ0FBc0M7QUFDdEMsTUFBTSxPQUFnQixpQkFBaUI7SUFNckMsWUFBc0IsYUFBNkIsRUFBRSxjQUFzQixFQUFFLEtBQUssR0FBRyxFQUFFLENBQUMsTUFBTSxFQUFFO1FBTGhHLDZDQUFtQyxFQUFFLEVBQUM7UUFDdEMsMkNBQXdDLEVBQUUsRUFBQztRQUMzQywyQ0FBVztRQUNYLG9EQUF3QjtRQUd0QixLQUFLLE1BQU0sSUFBSSxJQUFJLGFBQWEsRUFBRSxDQUFDO1lBQ2pDLHVCQUFBLElBQUksMENBQWlCLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDakUsQ0FBQztRQUVELDhCQUE4QjtRQUM5Qix1QkFBQSxJQUFJLG9DQUFrQixhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztZQUN4RCxTQUFTLEVBQUUsdUJB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