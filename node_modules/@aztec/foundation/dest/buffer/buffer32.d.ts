/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { type Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
/**
 * A class representing a 32 byte Buffer.
 */
export declare class Buffer32 {
    /**
     * The buffer containing the hash.
     */
    buffer: Buffer;
    /**
     * The size of the hash in bytes.
     */
    static SIZE: number;
    /**
     * Buffer32 with value zero.
     */
    static ZERO: Buffer32;
    constructor(
    /**
     * The buffer containing the hash.
     */
    buffer: Buffer);
    /**
     * Returns the raw buffer of the hash.
     * @returns The buffer containing the hash.
     */
    toBuffer(): Buffer;
    /**
     * Creates a Buffer32 from a buffer.
     * @param buffer - The buffer to create from.
     * @returns A new Buffer32 object.
     */
    static fromBuffer(buffer: Buffer | BufferReader): Buffer32;
    /**
     * Checks if this hash and another hash are equal.
     * @param hash - A hash to compare with.
     * @returns True if the hashes are equal, false otherwise.
     */
    equals(hash: Buffer32): boolean;
    /**
     * Returns true if this hash is zero.
     * @returns True if this hash is zero.
     */
    isZero(): boolean;
    /**
     * Convert this hash to a hex string.
     * @returns The hex string.
     */
    toString(): string;
    to0xString(): `0x${string}`;
    /**
     * Convert this hash to a big int.
     * @returns The big int.
     */
    toBigInt(): bigint;
    /**
     * Creates a Buffer32 from a bigint.
     * @param hash - The tx hash as a big int.
     * @returns The Buffer32.
     */
    static fromBigInt(hash: bigint): Buffer32;
    static fromField(hash: Fr): Buffer32;
    /**
     * Converts this hash from a buffer of 28 bytes.
     * Verifies the input is 28 bytes.
     * @param buffer - The 28 byte buffer to construct from.
     * @returns A Buffer32 created from the input buffer with 4 bytes 0 padding at the front.
     */
    static fromBuffer28(buffer: Buffer): Buffer32;
    /**
     * Converts a string into a Buffer32 object.
     * @param str - The TX hash in string format.
     * @returns A new Buffer32 object.
     */
    static fromStringUnchecked(str: string): Buffer32;
    /**
     * Converts a string into a Buffer32 object.
     * NOTE: this method includes checks for the 0x prefix and the length of the string.
     *       if you dont need this checks, use fromStringUnchecked instead.
     *
     * @param str - The TX hash in string format.
     * @returns A new Buffer32 object.
     */
    static fromString(str: string): Buffer32;
    /**
     * Converts a number into a Buffer32 object.
     * @param num - The number to convert.
     * @returns A new Buffer32 object.
     */
    static fromNumber(num: number): Buffer32;
    /**
     * Generates a random Buffer32.
     * @returns A new Buffer32 object.
     */
    static random(): Buffer32;
}
//# sourceMappingURL=buffer32.d.ts.map