import * as fs from 'fs/promises';
import * as path from 'path';
// Create a random directory underneath a 'base' directory
// Calls a provided method, ensures the random directory is cleaned up afterwards unless the operation fails
export async function runInDirectory(workingDirBase, fn, skipCleanup) {
    // Create random directory to be used for temp files
    const workingDirectory = await fs.mkdtemp(path.join(workingDirBase, 'tmp-'));
    await fs.access(workingDirectory);
    try {
        return await fn(workingDirectory);
    }
    catch (err) {
        skipCleanup = true;
        throw err;
    }
    finally {
        if (!skipCleanup) {
            await fs.rm(workingDirectory, { recursive: true, force: true });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuX2luX2Rpci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9mcy9ydW5faW5fZGlyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2xDLE9BQU8sS0FBSyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRTdCLDBEQUEwRDtBQUMxRCw0R0FBNEc7QUFDNUcsTUFBTSxDQUFDLEtBQUssVUFBVSxjQUFjLENBQ2xDLGNBQXNCLEVBQ3RCLEVBQStCLEVBQy9CLFdBQWdDO0lBRWhDLG9EQUFvRDtJQUNwRCxNQUFNLGdCQUFnQixHQUFHLE1BQU0sRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBRTdFLE1BQU0sRUFBRSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRWxDLElBQUksQ0FBQztRQUNILE9BQU8sTUFBTSxFQUFFLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQztRQUNiLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDbkIsTUFBTSxHQUFHLENBQUM7SUFDWixDQUFDO1lBQVMsQ0FBQztRQUNULElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUNqQixNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2xFLENBQUM7SUFDSCxDQUFDO0FBQ0gsQ0FBQyJ9