import { FifoMemoryQueue } from './fifo_memory_queue.js';
/**
 * A more specialized fifo queue that enqueues functions to execute. Enqueued functions are executed in serial.
 */
export class SerialQueue {
    constructor() {
        this.queue = new FifoMemoryQueue();
    }
    /**
     * Initializes the execution of enqueued functions in the serial queue.
     * Functions are executed in the order they were added to the queue, with each function
     * waiting for the completion of the previous one before starting its execution.
     * This method should be called once to start processing the queue.
     */
    start() {
        this.runningPromise = this.queue.process(fn => fn());
    }
    /**
     * Returns the current number of enqueued functions in the serial queue.
     * This provides a way to check the size of the queue and monitor its progress.
     *
     * @returns The length of the serial queue as a number.
     */
    length() {
        return this.queue.length();
    }
    /**
     * Cancels the processing of the remaining functions in the serial queue and resolves the running promise.
     * Any enqueued functions that have not yet been executed will be discarded. The queue can still accept new
     * functions after cancellation, but the previously enqueued functions will not be re-processed.
     *
     * @returns The running promise which resolves when the current executing function (if any) completes.
     */
    cancel() {
        this.queue.cancel();
        return this.runningPromise;
    }
    /**
     * Signals the SerialQueue that it should finish processing its current task and stop accepting new tasks.
     * The returned Promise resolves when all enqueued tasks have completed execution.
     *
     * @returns A Promise that resolves when the queue is completely emptied and no new tasks are allowed.
     */
    end() {
        this.queue.end();
        return this.runningPromise;
    }
    /**
     * Enqueues fn for execution on the serial queue.
     * Returns the result of the function after execution.
     * @param fn - The function to enqueue.
     * @returns A resolution promise. Rejects if the function does, or if the function could not be enqueued.
     */
    put(fn) {
        return new Promise((resolve, reject) => {
            const accepted = this.queue.put(async () => {
                try {
                    const res = await fn();
                    resolve(res);
                }
                catch (e) {
                    reject(e);
                }
            });
            if (!accepted) {
                reject(new Error('Could not enqueue function'));
            }
        });
    }
    /**
     * Awaiting this ensures the queue is empty before resuming.
     */
    async syncPoint() {
        await this.put(async () => { });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsX3F1ZXVlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3F1ZXVlL3NlcmlhbF9xdWV1ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFekQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sV0FBVztJQUF4QjtRQUNtQixVQUFLLEdBQUcsSUFBSSxlQUFlLEVBQXVCLENBQUM7SUEwRXRFLENBQUM7SUF2RUM7Ozs7O09BS0c7SUFDSSxLQUFLO1FBQ1YsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdkQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksTUFBTTtRQUNYLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksTUFBTTtRQUNYLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDcEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQzdCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLEdBQUc7UUFDUixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM3QixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxHQUFHLENBQUksRUFBb0I7UUFDaEMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBRTtnQkFDekMsSUFBSSxDQUFDO29CQUNILE1BQU0sR0FBRyxHQUFHLE1BQU0sRUFBRSxFQUFFLENBQUM7b0JBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDZixDQUFDO2dCQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUM7b0JBQ1gsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNaLENBQUM7WUFDSCxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDZCxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUFDO1lBQ2xELENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNJLEtBQUssQ0FBQyxTQUFTO1FBQ3BCLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLElBQUksRUFBRSxHQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Q0FDRiJ9