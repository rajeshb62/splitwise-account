import { FifoMemoryQueue } from './fifo_memory_queue.js';
/**
 * Allows the acquiring of up to `size` tokens before calls to acquire block, waiting for a call to release().
 */
export class Semaphore {
    constructor(size) {
        this.queue = new FifoMemoryQueue();
        new Array(size).fill(true).map(() => this.queue.put(true));
    }
    /**
     * Acquires a token from the Semaphore, allowing access to a limited resource.
     * If no tokens are available, the call will block and wait until a token is released.
     * Use in conjunction with the release() method to manage access to resources with limited capacity.
     *
     * @returns A Promise that resolves when a token is acquired.
     */
    async acquire() {
        await this.queue.get();
    }
    /**
     * Releases a token back into the semaphore, allowing another acquire call to proceed.
     * If there are any pending calls to acquire(), one of them will be unblocked and allowed to proceed.
     * This method should only be called by the holder of the acquired token to ensure proper functionality
     * and avoid unexpected behavior.
     */
    release() {
        this.queue.put(true);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VtYXBob3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3F1ZXVlL3NlbWFwaG9yZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFekQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sU0FBUztJQUdwQixZQUFZLElBQVk7UUFGUCxVQUFLLEdBQUcsSUFBSSxlQUFlLEVBQVcsQ0FBQztRQUd0RCxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLEtBQUssQ0FBQyxPQUFPO1FBQ2xCLE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxPQUFPO1FBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkIsQ0FBQztDQUNGIn0=