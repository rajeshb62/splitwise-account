/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { type Tuple } from '../serialize/types.js';
/**
 * Pads an array to the target length by appending an element to its end. Throws if target length exceeds the input array length. Does not modify the input array.
 * @param arr - Array with elements to pad.
 * @param elem - Element to use for padding.
 * @param length - Target length.
 * @returns A new padded array.
 */
export declare function padArrayEnd<T, N extends number>(arr: T[], elem: T, length: N): Tuple<T, N>;
/** Removes the right-padding for an array. Does not modify original array. */
export declare function removeArrayPaddingEnd<T>(arr: T[], isEmpty: (item: T) => boolean): T[];
/**
 * Pads an array to the target length by prepending elements at the beginning. Throws if target length exceeds the input array length. Does not modify the input array.
 * @param arr - Array with elements to pad.
 * @param elem - Element to use for padding.
 * @param length - Target length.
 * @returns A new padded array.
 */
export declare function padArrayStart<T, N extends number>(arr: T[], elem: T, length: N): Tuple<T, N>;
/**
 * Returns if an array is composed of empty items.
 * @param arr - Array to check.
 * @returns True if every item in the array isEmpty.
 */
export declare function isArrayEmpty<T>(arr: T[], isEmpty: (item: T) => boolean): boolean;
/**
 * Returns the number of non-empty items in an array.
 * @param arr - Array to check.
 * @returns Number of non-empty items in an array.
 */
export declare function arrayNonEmptyLength<T>(arr: T[], isEmpty: (item: T) => boolean): number;
/**
 * Executes the given function n times and returns the results in an array.
 * @param n - How many times to repeat.
 * @param fn - Mapper from index to value.
 * @returns The array with the result from all executions.
 */
export declare function times<T>(n: number, fn: (i: number) => T): T[];
/**
 * Returns the serialized size of all non-empty items in an array.
 * @param arr - Array
 * @returns The serialized size in bytes.
 */
export declare function arraySerializedSizeOfNonEmpty(arr: (({
    isZero: () => boolean;
} | {
    isEmpty: () => boolean;
}) & {
    toBuffer: () => Buffer;
})[]): number;
/**
 * Removes duplicates from the given array.
 * @param arr - The array.
 * @returns A new array.
 */
export declare function unique<T>(arr: T[]): T[];
/**
 * Removes all undefined elements from the array.
 * @param arr - The array.
 * @returns A new array.
 */
export declare function compactArray<T>(arr: (T | undefined)[]): T[];
/**
 * Returns whether two arrays are equal. The arrays are equal if they have the same length and all elements are equal.
 */
export declare function areArraysEqual<T>(a: T[], b: T[], eq?: (a: T, b: T) => boolean): boolean;
//# sourceMappingURL=array.d.ts.map