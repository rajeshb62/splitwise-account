/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '../../fields/fields.js';
import { type Bufferable } from '../../serialize/serialize.js';
export declare function sha256(data: Buffer): Buffer;
export declare function sha256Trunc(data: Buffer): Buffer;
export declare function sha256ToField(data: Bufferable[]): Fr;
/**
 * The "SHA256 Compression" operation (component operation of SHA256 "Hash").
 * WARNING: modifies `state` in place (and also returns it)
 *
 * This algorithm is extracted from the hash.js package
 * and modified to take in an initial state to operate on.
 *
 * @param state - The initial state to operate on (modified in-place). 8 u32s.
 * @param inputs - The inputs to compress into the state. 16 u32s.
 * @returns The modified state. 8 u32s.
 */
export declare function sha256Compression(state: Uint32Array, inputs: Uint32Array): Uint32Array;
//# sourceMappingURL=index.d.ts.map