/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Buffer32 } from '../../buffer/buffer32.js';
import { EthAddress } from '../../eth-address/index.js';
import { Signature } from '../../eth-signature/eth_signature.js';
export declare function makeEthSignDigest(message: Buffer32): Buffer32;
/**
 * Converts a private key to a public key.
 * @param privateKey - The private key to convert.
 * @returns The public key.
 */
export declare function publicKeyFromPrivateKey(privateKey: Buffer): Buffer;
/**
 * Converts a private key to an address.
 * @param privateKey - The private key to convert.
 * @returns The address.
 */
export declare function addressFromPrivateKey(privateKey: Buffer): EthAddress;
/**
 * Recovers an address from a hash and a signature.
 * @param hash - The hash to recover the address from.
 * @param signature - The signature to recover the address from.
 * @returns The address.
 */
export declare function recoverAddress(hash: Buffer32, signature: Signature): EthAddress;
/**
 * Signs a message using ecdsa over the secp256k1 curve.
 * @param message - The message to sign.
 * @param privateKey - The private key to sign the message with.
 * @returns The signature.
 */
export declare function signMessage(message: Buffer32, privateKey: Buffer): Signature;
/**
 * Recovers a public key from a hash and a signature.
 * @param hash - The hash to recover the public key from.
 * @param signature - The signature to recover the public key from.
 * @returns The public key.
 */
export declare function recoverPublicKey(hash: Buffer32, signature: Signature): Buffer;
//# sourceMappingURL=utils.d.ts.map