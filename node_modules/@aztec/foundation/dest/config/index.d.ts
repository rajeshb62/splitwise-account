import { type EnvVar } from './env_var.js';
export { EnvVar } from './env_var.js';
export interface ConfigMapping {
    env?: EnvVar;
    parseEnv?: (val: string) => any;
    defaultValue?: any;
    printDefault?: (val: any) => string;
    description: string;
    isBoolean?: boolean;
}
export declare function isBooleanConfigValue<T>(obj: T, key: keyof T): boolean;
export type ConfigMappingsType<T> = Record<keyof T, ConfigMapping>;
export declare function getConfigFromMappings<T>(configMappings: ConfigMappingsType<T>): T;
/**
 * Filters out a service's config mappings to exclude certain keys.
 * @param configMappings - The service's config mappings
 * @param keysToFilter - The keys to filter out
 * @returns The filtered config mappings
 */
export declare function filterConfigMappings<T, K extends keyof T>(configMappings: ConfigMappingsType<T>, keysToFilter: K[]): ConfigMappingsType<Omit<T, K>>;
/**
 * Generates parseEnv and default values for a numerical config value.
 * @param defaultVal - The default numerical value to use if the environment variable is not set or is invalid
 * @returns Object with parseEnv and default values for a numerical config value
 */
export declare function numberConfigHelper(defaultVal: number): Pick<ConfigMapping, 'parseEnv' | 'defaultValue'>;
/**
 * Generates parseEnv and default values for a numerical config value.
 * @param defaultVal - The default numerical value to use if the environment variable is not set or is invalid
 * @returns Object with parseEnv and default values for a numerical config value
 */
export declare function bigintConfigHelper(defaultVal?: bigint): Pick<ConfigMapping, 'parseEnv' | 'defaultValue'>;
/**
 * Generates parseEnv for an optional numerical config value.
 */
export declare function optionalNumberConfigHelper(): Pick<ConfigMapping, 'parseEnv'>;
/**
 * Generates parseEnv and default values for a boolean config value.
 * @param defaultVal - The default value to use if the environment variable is not set or is invalid
 * @returns Object with parseEnv and default values for a boolean config value
 */
export declare function booleanConfigHelper(defaultVal?: boolean): Required<Pick<ConfigMapping, 'parseEnv' | 'defaultValue' | 'isBoolean'> & {
    parseVal: (val: string) => boolean;
}>;
/**
 * Picks specific keys from the given configuration mappings.
 *
 * @template T - The type of the full configuration object.
 * @template K - The keys to pick from the configuration object.
 * @param {ConfigMappingsType<T>} configMappings - The full configuration mappings object.
 * @param {K[]} keys - The keys to pick from the configuration mappings.
 * @returns {ConfigMappingsType<Pick<T, K>>} - A new configuration mappings object containing only the specified keys.
 */
export declare function pickConfigMappings<T, K extends keyof T>(configMappings: ConfigMappingsType<T>, keys: K[]): ConfigMappingsType<Pick<T, K>>;
/**
 * Extracts the default configuration values from the given configuration mappings.
 *
 * @template T - The type of the configuration object.
 * @param {ConfigMappingsType<T>} configMappings - The configuration mappings object.
 * @returns {T} - The configuration object with default values.
 */
export declare function getDefaultConfig<T>(configMappings: ConfigMappingsType<T>): T;
//# sourceMappingURL=index.d.ts.map