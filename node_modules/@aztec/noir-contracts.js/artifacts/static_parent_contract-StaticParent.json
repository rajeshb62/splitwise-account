{"transpiled":true,"noir_version":"0.36.0+1094f036be7b102252a3a5c0d4b8c621779cf4bd-x8664","name":"StaticParent","functions":[{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"3469988399892582431":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"private_nested_static_call","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZphT+MwDIb/Sz/vQ2IntsNfOZ3QgIEmTQPBOOmE+O+XjiXrtrSVWbvbnfoFEebHffs2dRKPj+phcff+dLtcPz6/VTc/PqrV8/18s3xex9FHZd32b28v83U9fNvMXzfVjaVgZtVi/RB/ZWM+Z9XjcrWobpyXz9lJNLDwLhrEhBxtyRai0ZHsotE72xNtrSGbpFjDLscj+FK8A0jhrpEdXTE5hJybpRn8c1ZZP1nTZg1N1rRZw1dvTZAsP95LnzUilMKD8WdZI5M1bdaEyZoWa8Ccbw0Gl8oBBub9zQptL2HHvwSULoEAGQLhnkvEZ5Btcn1y/pV6CXjlxvy1ee8mY8rG+MmYsjHUZww632eMh7SIWO/34m0o3ayXVCHJ7jPH0FoND6GGszkEfWpsfDq5LHky7qQIy/VJCpeXRK4hicKxJDTXJ8kOIIn9fjlvXqIoKUB6iQM2Y00hljjJYEMHsbV0uGbp7FI94caiX45FCJA1+779ZdxR+FxJTLTocnUQcbL80pa7yfJLW+6v2vIce2x5LX2A9hGRJHOI4XBdLWxU8p6MsBFreCtngJYNsccsh6FHzn95VI+Du9flarV8uj1oMZv6B5Z7P9bsj50gRztIDHrGmW8wVsvEga1Dy20bwuSRNPyM5aG9ndGNWD0CegT1iNMjxaoleVaJkxOE9AjrEdEjQY2U99bdiNUjoEdQjzg9Un764hISwgFSqpy5cAbcl5840VrXleHS87jp5dz0SD6tE80W3i59GDV9ufAOl96Omx7GTY/jpnfjpvfjpqcB08vJa+V43PQybvriWxuA8k6cj4usN3rE6hHQI6hHnB7xeoTUCH0DYT1SnFzg0oQB4uMJQ0GNsNEjVo+AHkE94vSI1yOkR4pPv3NDwKJHghoRo0esHgE9gkokjmB7KitXfJcO6NL8evarBVD+14RuJKiR8tmvG7F6BJRIHGH7GZ3zV72xWXR8rfKmshMpbxS7EatEPuPw1/x1Ob9bLeoeRP3p+/o+tSTicPP75euTGPwH","brillig_names":["pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","pack_returns_oracle_wrapper"]},{"name":"public_call","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"arg","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARwABJAAEAwAkAgQDBCQCBAAFHxgABQAEgEMdAASARIBEKwiAQwABKwiARAACKwiARQADIgANKwQAAYBGOACARgABIgBaHAwAAgUqCAECAAABAgEkAgQBBioOBgIqCAEHAAABAgEkAgQBCSQCBAILADgJCwoqCAEIABABCgEkAwQBCAAoCAIKKg4JCiQCBAIKADgICgkqDAkKKg4FCioOCAckAgQABSoMBQQgACUKOAQFCCECAEcACCAAKCoNAgMqDQcCKQIAMGROcuExoCm4UEW2gYFYXSgz6Eh5uXCRQ+H1k/AAAAAABCYCANVEGw0ABioIAQckAgQDCAAQAQgBJAMEAQcAKAcCCCoMCAkqDgQJACgJAgkqDgQJACgHAggAKAICCyoNCwoAKAsCCSoIAQskAgQCDAAQAQwBJAMEAQsAKAsCDTY/lQAIAAEACQAKAA0AAQAMAAYkAgIBAQo4DAECIQIAQwACOQEAAAAoCwICADgCBQMqDQMBIwo4BAUIIQIASgAIOQEAACoNAggqDQcJACgIAgorBAAJgAMlAAQAAYAEIgBfKwiABQALKwiABgAMKg4DDCoNCwgAKAgCCCoOCAsqDgoCKg4LByoMBgQgACUlAAR4AIAEDQAAAIAEgAMhAABegAM5AQAAIwEAgAMAAoAHKwGAB4AHAQCAB4AEgAglAAQAAoAKAQCACIAKgAkrAAABgAUBAAABgAkAASUBBAABgAUBAIAFAAKACSsCgAiACSUABAACgAoBAIADgAqACSUABAACgAsBAIAFgAuACiUABAAAgAwNAIAMgAeADRcAgA2ADSEAAHeADQEAgAmADIAOKwGADoALAQCACoAMgA4rAoALgA4BAIAMAAKADCAAbgEAgAqAB4AGIysAGMoYyg==","debug_symbols":"zdrBasJAEMbxd9lzDruzO7OzvkopJWqUQIiisVAk797EJqnF0hys8l3E6Mj+Dusfs3g262J52r6V9WZ3NIuXs6l2q7wpd3V3dW4zszyUVVVu365fNrZ/cOEyf9zndX95bPJDYxZCmpmiXnfPJHWf35RVYRaBtc1uZkl8GIZJxE7TTvmX6ahpGFar0yxRaF8z4/gfMDRh4n0YQcJEJIwiYRIQhiwSxiFhCAnjkTABCYNUYEIqMCEVmJAKTEgF9kgF9kgF9kgF9kgF9k/+ajtxo8ZJRxinhXtNsM/WBJk0V7/fB42D0ty/h6O1o0Z9nNFoIDfumxDdj+me47E4AYvDWBzB4kQsjmJxEhSHLRbHYXGwqsxYVWasKjNWlRmryoxVZcaqMmNVWbCqLFhVFqwqy/1VTswjJ0m8WSA8egF+9ALy6AVm6qZsZxZwFNWP92ekLs1sCgpuuvnr9sf3nbdNF5CigRIYKDqks4lIUBoPpQlQGobSyLM1f50ixQilUShNQtIo1FmoQp2FKkFpPJQmQGkYSgPVYgVqcdtdveeHMl9WxfDHqc2pXl39j6r52H+90w1/Ag==","brillig_names":["public_call"],"assert_messages":{"73":"Index out of bounds","66":"Nested call failed!","93":"Stack too deep"}},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"14336010898202591232":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["public_dispatch"],"assert_messages":{"896":"attempt to add with overflow","1140":"attempt to add with overflow","1070":"attempt to add with overflow","869":"Index out of bounds","799":"attempt to add with overflow","1049":"Array index out of bounds","138":"Nested call failed!","1162":"attempt to add with overflow","1028":"attempt to add with overflow","1092":"attempt to add with overflow","1144":"Array index out of bounds","821":"attempt to add with overflow","1074":"Array index out of bounds","937":"attempt to add with overflow","1126":"attempt to add with overflow","803":"Array index out of bounds","425":"Nested static call failed!","279":"Nested static call failed!","785":"attempt to add with overflow","1038":"attempt to add with overflow","1151":"Array index out of bounds","1017":"Array index out of bounds","1081":"Array index out of bounds","810":"Array index out of bounds","615":"Nested static call failed!","874":"Array index out of bounds","993":"attempt to add with overflow","1060":"attempt to add with overflow","1042":"Array index out of bounds","710":"Stack too deep"}},{"name":"enqueue_public_get_value_from_child","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZbhboIwEMffpZ/50Guv7dVXWYxBRUNC0CguWYzvvoNRUFdC3NwSE/hAevBr7+7f9tqzWGfL03aRl5vdUczezqLYrdIq35VsnQXo5ttxn5a1eazSQyVmYL1MRFauuemkvCRikxeZmKGhS/KNVo5cSyuSvqPBQoTWaKmltUEYoQGkDzjwozpeKxPjiWzAvTQ9jdHBle/GdnQNzxMBOEkzJI2ZpBmSxv5eGu0RQrLeuT5Zso0L9/cuKObCWKPaTsYBjbggq7ClySL2LvxrT7CfpBmQRslJmiFp4BnSmF4a50ekMRTKgYU+dEbraNQzoqGQLzk9NlFARoeCw22km4oTOR0YCsFwm+C+Qin9+ingv6fgAbFb0c2ivw6JreUhL4p8u7i5JMr6paNHAm+pThNQdLfOtH+8D8of9IFH+7ABzf03ftD5MAXOXO0zLgHzC5vv6SFPl0VWi1P/PZWroBWb1cf+6w/Dnw==","brillig_names":["pack_arguments_oracle_wrapper","enqueue_public_function_call_internal"]},{"name":"private_call","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZndbiIxDIXfZa65SGzHdvoqq1VFW1ohIVq1dKVV1XffQEkYIDMjL0y3W3GDCPhzTk5+Jsm8NXezm9eH6/ny/vGlufrx1iweb6er+eMyld4aT5vfXp6my3XxZTV9XjVXnqObNLPlXfoqzr1Pmvv5YtZcUdD3yVE0iMo2GtTFEu3ZV6KRWLfRGMgPRHvv2Gcp3gmVeIRQiyeAHE6t7EjV5BBLbtF28M9J48PFmi5r+GJNlzXy5a2JWuSntgxZo8o5PLpwkjV6sabLmnixpsMacKdbg5HycoBRZNdY5U0VfvwqoFqFD6G0XGmgCo8sRRFy9HuVVCRBzKsaYhgaEGnJDHn8pO/iP7GL8WJOtzl0DnPElechCuqAOWkAl8b6XXAydS0onEUQ6U7QYG/5tESVJ3RgR0fzi7+iKPkXophaojgeidKvKCoOiQLkAVERsqSIrQqiq8SmGbyNFcd7sUkMus8VI5Snv7R2qvXY/2bZQn8x8XQT4WLi6SbiJ5tYYg9NXIuh07eazJqbywI0sPaGsnFnbMU62cg5wx0HS8AiR2BAzrc8paTCzfN8sZg/XO/drrn1R8ckBiweA+PBHqtjzPYwqeA3F3rVJylj1q6tdqaJ2H3C6ke8HQE7gnaE7Eh1DmjpbSU9QtiOiB1ROxLNSH230494OwJ2BO0I2ZF67ytlJMY9pLailQUt7uYkpoG2Ts/jppdx0+up6ZHzUxbbt7Db9HHU9OTGTe/HTQ/jpsdx09O46cO46fmM6fVoWpGMm17HTV+dtRG47JDlcJENzo54OwJ2BO0I2ZFgR9iM8F8gYkeqgwsoDxhgORwwHM2IODvi7QjYEbQjZEeCHWE7Uu393g2BqB2JZkSdHfF2BOwIGpFUgs2prL7iUz44a/uN0cfRvP62tB+JZqR+9utHvB0BI5JKuDk7V02Q8rZegjusq76p7EXqG8V+xBuR91T8NX2eT28Ws/XdwPrf1+VtvipIxdXvp49/UvAf","brillig_names":["pack_arguments_array_oracle_wrapper","call_private_function_internal","unpack_returns","pack_returns_oracle_wrapper"]},{"name":"private_get_value_from_child","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZndbuIwEIXfJddc2DP2zLivslpVtKUVEqJVS1daId59HYqNAZNoCkFsxQ3CMN/k5PgnY2fZPE0ePl/up/Pn14/m7teymb0+jhfT13lsLRuL698+3sbztvmxGL8vmjtLwYyayfwpfmVjVqPmeTqbNHfOy2p0EA0svIkGMSFHW7KVaHQkm2j0zvZEW2vIJinWsMvxCL4W7wBSuCuyo6smh5Bzs5TBv0eNdTdrjlnjb9Ycs4au3pogWX68lz5rRCiFB+NPsoZv1hyzRk63BoNLYx4D8/ZmhdaXCINfAkztEiAOc5cF7LlE7IRsky9i+X/uXrA3Y+rGQJ8xoZBzZFACpcUbQYpBGWo36yXZSIWNMbRVg2dQgzZPEfR9amzsnfzk8WTcwZRy1yfJX14SuUIShQNJdH2S+AySnPg8jcuOqEoKkCZxwEJOMJVY4nSvbGgntpUu1yydXVpPmF1PLEKAbZ/2VQuxaPSpuIjf2V5wHQw3yy9sOZqb5Ze23F615Tl23/JWOpxePRNJMocYdp+rlUIl12SERazhtZwzHNsQe8xyGHrk/MiNV2w8vE9ns+nL/c6pmGk/sL4ns2Z7sgCyV0Fi0DPOfIOxWiY27PrAr6qQMHkkhZ9xeTi+retGrB4BPYJ6xOmRar0reVSJkwOE9AjrEdEjQY3Un5PdiNUjoEdQjzg9Uu99cQkJYQeprZx54Sw2+RgHWpuehk3Pw6aXU9Mj5ad5eUq7SR8GTV9feM+X3g6bHoZNj8Omd8Om98OmpzOml4Np5XjY9DJs+uqsDUC5Euf9RdYbPWL1COgR1CNOj3g9QmqEvoGwHqkfHrk0YIB4f8BQUCNs9IjVI6BHUI84PeL1COmR+hFmV0HAokeCGhGjR6weAT2CSiS2YL0rq6/4+WBEypdtX0cA9VeG3UhQI/W9Xzdi9QgokdjC43t0zm/z2Zv9a9WLyk6kXih2I1aJrGLzz/h9On6YTdoziPbfz/ljOpKIzcXft69/YvA/","brillig_names":["pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","pack_returns_oracle_wrapper"]},{"name":"private_nested_static_call_3_args","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZrhTuMwDMffpZ/3IbEdO+FVTic0YKBJ00AwTjqhvfulg2TdlrZnaHc71C+IbP657j+p47h7q+4WN68P18v1/eNLdfXjrVo93s43y8d1HL1VlnafvTzN1/XwZTN/3lRXloOZVYv1XfxXjNnOqvvlalFdkfPb2Yk1iJcPa/AmZGvLtmCNxP7DGh3ZHmtrDdsUijVC2R7BlewJIJlTwztS0TmE7Ft80/jnrLJukqZNGp6kaZNGLl6a4HP48V76pPGek3kw7kvS+EmaNmnCJE2LNGAmadqksV+XBgOlTIlBZH+znneXgPEvgaVLIJskE7KEnkvEOcgyUV84/8tWAnThwvyzde8mYcrC8CRMWRiZhCkL4/uEEZQ+YRyk3dU6tw/ehtLNOp+2Drb70KNpHU0YIhrJ4jD0RWPj7OR87djQ8e6E5vJCsucPiakREoeTkODyQsIBQhK3r3OalyiGFCA9xAGbtqZgy5KKCjF8YFuHTpcculDKJ9Kohsq2CCFNEqLrK7xjqeVyJjFRovPlQXST5OeWnCfJzy25XLTk2fZY8jr0AZpHzD6JwwKH+2qhUMk1GWPD1sgunAEaNiwOczgCPeF8yx5GHNw8L1er5cP1wWsJU/9pmXJr9udx8EcVZMu8dDJkPsFYLRMHtjYtt/oYk0a+oWdMD+0tsG7E6hHQI6hHSI8U92afV5Unf4KwHhE94vVIUCPlE0g3YvUI6BHUI6RHyrPvKSEhHCClzJkTZ8B9+okLrbUKGc69jOvef9U9sst7P524D6O6Lyfe4dzbcd3DuO5xXPc0rns3rnse0L0/eaxIxnXvx3VffGoDcK7E5TjJOqNHrB4BPYJ6hPSI0yOsRvgTiOiR4uICSgsGWI4XDAc1IkaPWD0CegT1COkRp0dYjxRnv7MgEK9HghrxRo9YPQJ6BJVIHMHuVFbO+JQO6L753vq9BVD+OUs3EtRI+ezXjVg9AkokjrD9jC75HXhsFm3/qnXSiZQLxW7EKpFtHP6aPy/nN6tF3YOov31d36aWRBxufj+9fxON/wA=","brillig_names":["pack_arguments_oracle_wrapper","call_private_function_internal","unpack_returns","pack_returns_oracle_wrapper"]},{"name":"public_nested_static_call","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARwABJAAEAwAkAgQDBCQCBAAFHxgABQAEgEMdAASARIBEKwiAQwABKwiARAACJQIEgEUAAyQCBAEFKggBBCQCBAIGABABBgEkAwQBBAAoBAIGKwQAA4ADKwQABoAEKwQABYAFIgAYKgwEAyIAIysEAAGARjgAgEYAASUABAAAgAcNAIAHgAWACBcAgAiACCEAACKACAEAgAOAB4AJKwGACYAGAQCABIAHgAkrAoAGgAkBAIAHAAKAByAAGSMiAJ8eAgAABCQCBAAFACgDAgcAOAcFCCoNCAYkAgQBAyQCBAAIJAIEAgoAOAgKCSoIAQcAEAEJASQDBAEHACgHAgkqDggJJAIEAgkAOAcJCCQCBAEJJAIEAgsAOAkLCioIAQgAEAEKASQDBAEIACgIAgoqDgkKJAIEAgoAOAgKCSoMCQoqDgEKJAIEDAsqCAAMKgwFDSoMBw4qDAMPKgwIEAAQAAsAIgCkKgQAACoMDQkqDA4KHAwAAgEkAgQBByQCBAILADgHCwgqCAECABABCAEkAwQBAgAoAgIIKg4HCCQCBAIIADgCCAcqDAcIKg4BCCQCBAwLKggADCoMCQ0qDAoOKgwDDyoMAhAAEAALACIApCoEAAAqDA0HKgwOCAAoBwIBKwQACIADJQAEAAGABCIA2CsIgAUAAisIgAYACSoOBgkmAgB0LNmSAAYkAgQBCCQCBAIKADgICgkqCAEHABABCQEkAwQBBwAoBwIJKg4ICSQCBAIJADgHCQgqDAgJKg4GCSQCBAsKKggACyoMAwwqDAcNKgwBDioMAg8AEAAKACIApCoEAAAqDAwIKgwNCSoIAQEkAgQDAgAQAQIBJAMEAQEAKAECAioMAgMpAgAwZE5y4TGgKbhQRbaBgVhdKDPoSHm5cJFD4fWT8AAAAAAGKg4GAwAoAwIDKg4GAyYCANVEGw0AAgAoAQIDACgJAgsqDQsKACgLAgcqCAELJAIEAgwAEAEMASQDBAELACgLAg03P5UAAwAEAAcACgANAAEADAACJAICAQEKOAwBAiECAJsAAjkBAAAAKAsCAgA4AgUDKg0DASMlAAR4AIAEDQAAAIAEgAMhAACjgAM5AQAAIyIAnyoIAQYAAAECASoOAQYqCAEBAAABAgEqDgIBJAIEAQIkAgEBByQCBAAIKgwIBSAAsAw4BQMIIQIAuAAIIACzKg0GAioNAQMqDAIBKgwDAiMMOAUDCCECALsACDkBAAAAKAQCCSoNCQkMOAUJCiECAMAACjkBAAAkAgQCCgA4BAoJADgJBQoqDQoIKg0GCSoNAQoAKAkCCysEAAqAAyUABAABgAQiANgrCIAFAAwrCIAGAA0qDggNKg0MCAAoCAIIKg4IDCoOCwYqDgwBADgFAggOOAUICSECANYACTkBAAAqDAgFIACwAQCAAwACgAcrAYAHgAcBAIAHgASACCUABAACgAoBAIAIgAqACSsAAAGABQEAAAGACQABJQEEAAGABQEAgAUAAoAJKwKACIAJJQAEAAKACgEAgAOACoAJJQAEAAKACwEAgAWAC4AKJQAEAACADA0AgAyAB4ANFwCADYANIQAA8IANAQCACYAMgA4rAYAOgAsBAIAKgAyADisCgAuADgEAgAwAAoAMIADnAQCACoAHgAYjKwAYyhjK","debug_symbols":"1ZzRTuMwEEX/Jc998IzHYw+/slqhAgVVqgqCstIK8e+b0iZtt5GiHe1F9gsiMLf3JvKZqRqnH93D6u796Xa9fXx+625+fHSb5/vlbv287Y8+Phfd3et6s1k/3Z7/uQv7H1G/6t9eltv94dtu+brrbsSEF91q+7D/Vbl/hcf1ZtUfpPK5uKqOpulYHS3LWE0lTVSrFDpWq1i+qP656GKeCpQCDxYpxMtAe1HxiMwhkuAR0fRFHkViFmYuMgU7FhPJlQGjDSLaQNAGCW2gaIOMNihoAwMbpIA2QJOc0CQnNMkJTXJCk5zQJCc0yQlNckKTrGiSFU2yoklWNMmKJlnRJCuaZEWTrGiSFU1yRpOc0SRnNMkZTXJGk5yhJF/XCsnwwjGOtczyFQZNfUZTn9HUZzT1BU19QVNf0NQXNPUFTX1Bz++CJrmgSS5okguaZEOTbGiSDU2yoUk2NMmGJtnQJBuaZEOTbGiSKQS4A8EdGO4Q4Q4Cd0hwhzmgU0g045CIy1BNenofT0ZTt5niWB2j6qn6cOOIQq4uUakukdWWiEJ1iai6RFxdolhdIqkuUaouUXU9m6rr2VRdz6bqejZX17O5up7N1fVsrq5nc3U9m6vr2Vxdz+bqejZX17O5up4dv79niww3aWIq5SLRdXXRNCQpmfg6PzWenxvPHxvPL43nT43n18bz58bzl8bzW9v5pfH5K43PX2l8/krj83d2g3/t+Rufv9L4/JXG5680Pn+l8fmbGp+/6fvnrwYd8iuV60RcXaJYXSKpLtH/mGNsY3Ukm0nUf2BY4rG8P5Xz+kkSWGh4+JSFT1k42OEMtPkzyK2fwfSTG/3Ns3HLCIdTD4t9P/tSqUuVXariUplHNf2Iw6xq+moojSrl074bPeA7vXGbVHQUafhbNL0Ze04kjnjTO4LnRJ4LMb1zd05UPCJziCx4ROQRsUcUPSLPijDPijDPijDPirDiQMMcEHIIHhF5ROwRRY9IPKLkEalHlD2i4hF5VgR5VgR5VgR5VgT984r47I9+LV/Xy7vN6vjNI4/v2/uzLyLZ/X45/Kcv/gM=","brillig_names":["public_nested_static_call"],"assert_messages":{"213":"attempt to add with overflow","186":"Index out of bounds","154":"Nested static call failed!","162":"Stack too deep","191":"Array index out of bounds"}},{"name":"private_static_call","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZnRbtswDEX/xc95EEmJpPorwzCkbVoECNKiTQcMRf99ihupTqLY4BJ33eCXwmp4qOtriZbk1+Z2cf1y/2O5vnt4bq6+vTarh5v5ZvmwTq3XBnz7v+fH+XrbfN7MnzbNFXB0s2axvk2X4tzbrLlbrhbNlQ/6NjuKRlHZRaO6WKKBoRJNnnUXTcHDQDSAY8hSwIkv8YShFu8Rc7jvZCdfTY6x5BbtBn+fNRAma05Zw5M1p6yRL29N1CI/3cuQNaqcw6MLZ1mjkzWnrImTNSesQXe+NRR9LgcURT5uVrntAsbvAmtdoIvlkQHRQBfggamUKVC/10lFEsZc1YjC0IBIJTNkMela4BMfMU3mnDbHX8Sc6Is5SDBgThrA5WbhQ1CEVlC4hCAs0yVdDz4tSCWqvKEDO380v/gripK/IYp9RxTHI1H6FUXFQVEaBkRFzG+oSJ0OoqvEphm8ixXHe7FJDLnPFSM+T3/prFTrsf9M2SKYTDzfRJxMPN9E+mQTS+yhiVsx/vylJrPm22XBodobysKdqRPrpJVzgTMOlkBFjuCAnP9yl5Ia10/L1Wp5/2PvdM1t/9QnMSAVj5HpYI1VH7N9TGpAe6BXfZMyZe3auc80EU/vsPoRsCNoR8iOeDtSnQNanrZ6PULYjogdUTsSzUh9tdOPgB1BO0J2xNuR+tPXvF3SGPeQWkUrBS1+zElKA22bnsdNL+Om13PTE4dcv7unsLv0cdT03o2bHsZNj+Omp3HT+3HTh3HT8wXT69G08jJueh03fXXWRuSyQpbDIhucHQE7gnaE7Ii3I8GOsBnhP0DEjtSPj3weMMhyOGA4mhFxdgTsCNoRsiPejgQ7wnakfjzZtyAQtSPRjKizI2BH0I6QEUktbHdl9Yrv88ZZu1+M3rfm9a+l/Ug0I/W9Xz8CdgSNSGpRu3eumiDla70Ed9hXfVHZi9QXiv0IGJG31Pw5f1rOr1eL7dnA9teX9U0+KkjNza/H919S8G8=","brillig_names":["pack_arguments_array_oracle_wrapper","call_private_function_internal","unpack_returns","pack_returns_oracle_wrapper"]},{"name":"public_static_call","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARwABJAAEAwAkAgQDBCQCBAAFHxgABQAEgEMdAASARIBEKwiAQwABKwiARAACJQIEgEUAAyQCBAEFKggBBCQCBAIGABABBgEkAwQBBAAoBAIGKwQAA4ADKwQABoAEKwQABYAFIgAYKgwEAyIAIysEAAGARjgAgEYAASUABAAAgAcNAIAHgAWACBcAgAiACCEAACKACAEAgAOAB4AJKwGACYAGAQCABIAHgAkrAoAGgAkBAIAHAAKAByAAGSMiAIkkAgQBBwYoBwIFJAIEAgkAOAcJCCoIAQYAEAEIASQDBAEGACgGAggqDgcIJAIEAgkAOAYJCAAoAwIJKwQACYADKwQACIAEKwQAB4AFIgAYHAwAAgMqCAECAAABAgEkAgQBByoOBwIqCAEIAAABAgEkAgQBCiQCBAIMADgKDAsqCAEJABABCwEkAwQBCQAoCQILKg4KCyQCBAILADgJCwoqDAoLKg4DCyoOCQgkAgQAAyoMAwQgAEsKOAQDBSECAG0ABSAATioNAgQqDQgCKggBBSQCBAMGABABBgEkAwQBBQAoBQIGKgwGBykCADBkTnLhMaApuFBFtoGBWF0oM+hIeblwkUPh9ZPwAAAAAAgqDggHACgHAgcqDggHJgIA1UQbDQAGACgFAgcAKAICCyoNCwoAKAsCCSoIAQskAgQCDAAQAQwBJAMEAQsAKAsCDTc/lQAHAAEACQAKAA0AAQAMAAYkAgIBAQo4DAECIQIAaQACOQEAAAAoCwICADgCAwQqDQQBIwo4BAMFIQIAcAAFOQEAAAAoBgIJKg0JCQw4AwkKIQIAdQAKOQEAACQCBAIKADgGCgkAOAkDCioNCgUqDQIJKg0ICgAoCQILKwQACoADJQAEAAGABCIAjisIgAUADCsIgAYADSoOBQ0qDQwFACgFAgUqDgUMKg4LAioODAgqDAcEIABLJQAEeACABA0AAACABIADIQAAjYADOQEAACMBAIADAAKABysBgAeABwEAgAeABIAIJQAEAAKACgEAgAiACoAJKwAAAYAFAQAAAYAJAAElAQQAAYAFAQCABQACgAkrAoAIgAklAAQAAoAKAQCAA4AKgAklAAQAAoALAQCABYALgAolAAQAAIAMDQCADIAHgA0XAIANgA0hAACmgA0BAIAJgAyADisBgA6ACwEAgAqADIAOKwKAC4AOAQCADAACgAwgAJ0BAIAKgAeABiMrABjKGMo=","debug_symbols":"zZrNauswEIXfxessNKPRaKavcrkUp02KwTglSS9cQt69Tlql6Q8NqME9mxDZc6xvMf5AknfN/WL+9HDbDcvVprn5s2v61V277VbDONrtZ8183fV993B7frkJh5+ox/rNYzschpttu942N0LOs2Yx3I9/OaTxCcuuX4yDZPu/sybmmpDVhLwiJKEmRDUhrgnFmpDUhFJNqKYjpKYjpKYjpKYjUk1HpJqOSF93RNBQQhTsXWj2qTrGWKpjTHqqJktfVGfz12I7ezKzHHHiNXDYTjj6MxzBwklYOIqFk7FwDAvHoXA0YOEQFg5j4WBZWbGsrFhWViwrK5aVFcvKimXljGXljGXlPPmLTkqFh3SEKNWajjw2PY/oiUfDRx7H4rFrdLOIFJ5kdoHHNKXSP5n4XfUBiNCAGA0oogEJGlBCA1I0oIwGZGhADgbkaKZ2NFM7mqkdzdSOZmpHM7WjmdrRTO1opnY0U1NAUzWFa7haQ1lIRCX7PAdPMEecYA6ZYI6L3mO7NAdxtlhWdmzkF3qEhcopFwvT28o9+AuTAjJlQCbH2uIgCmhAhAbEaEARDUjQgMA2EokUDSijARkaEJqpGc3UjGZqRjM1/4Kpv9uwJxY0oIQGpGhAGQ0I7FSMGOxYjGJAAyI0IEYDQjN1hDL1fhz9a9ddO+8Xr5+QL5+Gu7Mvyrf/H1/ujMXP","brillig_names":["public_static_call"],"assert_messages":{"104":"Nested static call failed!","111":"Index out of bounds","116":"Array index out of bounds","140":"Stack too deep"}},{"name":"public_get_value_from_child","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARgABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMrCIBDAAErCIBEAAIiAAsrBAABgEU4AIBFAAEiAFgqCAEEAAABAgEkAgQBBSoOBQQqCAEGAAABAgEmAgCloN9hAAckAgQBCSQCBAILADgJCwoqCAEIABABCgEkAwQBCAAoCAIKKg4JCiQCBAIKADgICgkqDAkKKg4HCioOCAYkAgQAByoMBwMgACMKOAMHCCECAEUACCAAJioNBAIqDQYDKQIAMGROcuExoCm4UEW2gYFYXSgz6Eh5uXCRQ+H1k/AAAAAABCoIAQUkAgQDBgAQAQYBJAMEAQUAKAUCBioMBggqDgQIACgIAggqDgQIJgIA1UQbDQAGACgFAggAKAMCCyoNCwoAKAsCCSoIAQskAgQCDAAQAQwBJAMEAQsAKAsCDTc/lQAIAAEACQAKAA0AAQAMAAYkAgIBAQo4DAECIQIAQQACOQEAAAAoCwICADgCBwMqDQMBIwo4AwcIIQIASAAIOQEAACoNBAgqDQYJACgIAgorBAAJgAMlAAQAAYAEIgBdKwiABQALKwiABgAMKg4CDCoNCwgAKAgCCCoOCAsqDgoEKg4LBioMBQMgACMlAAR4AIAEDQAAAIAEgAMhAABcgAM5AQAAIwEAgAMAAoAHKwGAB4AHAQCAB4AEgAglAAQAAoAKAQCACIAKgAkrAAABgAUBAAABgAkAASUBBAABgAUBAIAFAAKACSsCgAiACSUABAACgAoBAIADgAqACSUABAACgAsBAIAFgAuACiUABAAAgAwNAIAMgAeADRcAgA2ADSEAAHWADQEAgAmADIAOKwGADoALAQCACoAMgA4rAoALgA4BAIAMAAKADCAAbAEAgAqAB4AGIysAGMoYyg==","debug_symbols":"1ZvLasMwEEX/xessPCONNO6vlBKcJwbjhDwKJeTf66SRSZtgbUqYuzGWfZGPFvIBjXQqFsvZcT1tutVmX7y9n4p2M68PzabrW6fzpJjtmrZt1tP7x0V5uRBf8/tt3V2a+0O9OxRv3itNimW36G/FVX0Pq6ZdXhp6njyk1ZUprc6FIU0VPUk7x3pL9+G7tMqTdNQqdV3qkGX2549JQQ4Z3iPDCzJ8QIaPyPCKDF8Bw3OJDE/I8MiGZWTDMrJhGdmwjGxYRjYsIxuWkQ3rkA3rkA3rjP8qKVCip9Ajp3SQK73xGUvBh4E+lH/pjU/ZcXr/+jnrvU/0opqh1yCS+o7Ev9IXfMLGZ2x8h43vsfEFGz9g40dsfMXGr6DxBdu6gm1dwbauYFtXsK0r2NYVbOsKtnUF27qCbd2Abd3weuuGMi0duED6AMTWgJw1IG8N6D/s5TV9QoXKDBBxVJfWn1ipykwC9sS3OHumIc1ldR1AQB9ARB+A+fXOsbXmaLxGkaE3XqTI0BvfB5ChN74RIEPvrdOPVSmi+frWKL3xvQAZeuObATL00LXFCF1bVPOuHaU379pRevOuHaU379pRemjXKrBrz33rs9419axd3g5+rI7d/O4cyOFr+/OmD38D","brillig_names":["public_get_value_from_child"],"assert_messages":{"64":"Nested static call failed!","71":"Index out of bounds","91":"Stack too deep"}},{"name":"private_static_call_3_args","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZrbbuIwEIbfJddceA6esfsqq1VFW1ohIVq1dKVV1XdfkxI3gJNoFsK2q9wgTOYbj//EY3vCW3W3uHl9uF6u7x9fqqsfb9Xq8Xa+WT6uU+utAq5/e3mar7fNl838eVNdgUQ3qxbru/RVnXufVffL1aK6Yh/eZ0fWqEF31hhczNYgULAmlrCzJs8wYA3gBJpQwClne0JfsmfExpxb3omLzjFm3xraxj9nFfhJmi5pZJKmSxr98tLEkMNPYxmSJgRpzKPzJ0kTJmm6pImTNB3SoJuk6ZIGTpeGIjeZkqLq52CD1F3g+F1QqQv0rlEVPfNAF8AglDM4BN7rpBASxibhE/mhByKtJpjH64TocssJ8iROtzj+G4jj9VMchQsmB5nE6RZHzyJO5CwOEgyIk1JfHix8BhShDiicIyDMiTZ9H7xbkBa3PBW9OD7KzPELBkXuXwQl3ApK4lFQ8BWDwsGgogwEFbExjtTqILqCbZrBO1t1sme7DYYuG4xyM/21dfwr236btEU8iXi6iH4S8XQR5cIiZttDEbfBnKHmIhKa4YriUO71+cgn1LJ1WodzhjqHqKccjuJAOP/l+TY1bp6Xq9Xy4XqvZO22H+W1DZCyxih0sMcqL0F9TGpAXSUvboSEmthDa5xpInaXLfoRsCNoR8iOsB0pJtmQ73bgcISIHVE7EuxINCPlTWo/AnYE7QjZEbYj5bsfmuNSiHEPKWW0nNBiq6KQHrTOxed87nVc9+FU9yS+yd/tVxs793FU9+zGdQ/jusdx3dO47nlc935c93JG9+FoWrGO6z6M6744ayNK3iHrYZL1zo6AHUE7QnaE7Yi3I2JG5C8QtSPl6h83DwyKHj4wEs2IOjsCdgTtCNkRtiPejogdKVeW+zYEGuxINCPB2RGwI2hHyIikFtansnLG5+bgHNrvGj+O5uW/IPQj0YyUz379CNgRNCKpRfXZuSiC5tdy6t1hX+VNZS9S3ij2I2BE3lPz1/x5Ob9ZLba1ge3V1/VtUypIzc3vp48ryfgP","brillig_names":["pack_arguments_array_oracle_wrapper","call_private_function_internal","unpack_returns","pack_returns_oracle_wrapper"]},{"name":"enqueue_static_nested_call_to_pub_function","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7Zdtb4IwEMe/S1/zotenu/pVFmNQ0ZAQNIpLFuN3X2G24CwhTrdpwhvC0X/bu1+vV3pky2x+WM/ycrXZs8nbkRWbRVrlm9JZRwaq+bbfpmVt7qt0V7EJGMsTlpVL94qcnxK2youMTZSmU3KlFkh4VgviNqjBQEQtlaGzWmoFA2oAbsC7AhxV0EuhY3olhJerzuhSRQcXNoyN1BVPEwZ6RNOHxoxo+tDg06OxFNx3sQyhITJebrm+Cw2NaPrQ2PvRSKt8zkuL2AZLpp5C8N+fAmJTGBB+yYwwMDCFRu23okZslwDsS5cFIZ4ezX/lvpAjmj406hFoKKAhjgNonMQPDa3rTlp7ox/gDQEGb8zQQgFpGTYsaUUXFSdyOjiRD9a9E1xVKPP6IeCfh2Bd9QsZ3SR91yVnzXd5UeTr2cXVgtcPGT/zgbd1WNC3PJP29j6K/6AP3NrHGdDcmqJRaesXDnXnz8SVgOnJme/pLk/nRVbDqVsP5cKzcmb1sf1qceJP","brillig_names":["pack_arguments_oracle_wrapper","enqueue_public_function_call_internal"]},{"name":"private_call_3_args","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"H4sIAAAAAAAA/+2dBXgTSRvHN0nTUtzv4JCgpWjSJG2CFih2itxxirQ0xVsoLXLac3d3zt3dOXd3d3fh/Ljv/8IuHYZtOOhsv/t/zzfP83uy2d3M/t7Zze6szfisdWmM37I6+9cN+0DA/pRRIW2c86kOB13ma+IyrpnLuBYu41q5jGsPCrVxXVzm6+oyLuQyrpvLuF4u43LscWry2Z+F9mc0nB+LpQryUpFopDiclyxJxMOxeEl+IpKIxBPx0rxENJpKxBIFyZJkQTgZiUVTkbJ4MloWXpdC/tq8wvVKebO89Oy25Z75+ghxawMyFFcphzX2cG+rdjhHGe5mz+P8rju+9wA9QS9/7XgnBbQyCNcvRfoYzKu739y66W1sGwqHvSy/XIN59TBYfjkk5dfXYF49DZZfH4Pl57Zv6K3sG3KU4T7KcC9t35CL731BP9DfZd/gN7xuelnmynOAufKMqMczyTeklYPp48TALXeP6SM2dZyQ/bEznKsMD9S2hUH4HgYRkNcAxwmT/9NBBv+nUY//p1Fl3YSV4YgynKetmxi+x0E+KLDXTVDJ0/kMWOm323D9kslje9grx1wCx74eOK7dIJyTDcvjDaG3FwF44JlD4hnzc3gOIPEMmMsr7Fc8E/aXpN/a8Cw44VJrMF17Shg8yg32qPY02C6HoB2/z9o4mV7ZScNHbMfRGR7i30QA9V0ZQxvoX1Vfz2Fb7pmnj9hUtXWIMjxUGR6mVY2G4/sI8QIjG+AUJmnwTzjc4HqXP1xAidctmSoD9c9R17YWrl+KDPHiP2FqoxuF76NBkX/dteFNbXT13VBMFmw/y5udjemYfQZj7k8Ss99gzANIYjZYVYsMbKCYw/VLkUEGyy/XzxFz2GDMo0hOQyIWh2ceiWeUxDNG4hkn8cwn8Swg8UyQeCZJPAeTeA4h8RxK4jmMxHM4iecIEs9CEs+RJJ6jSDxHk3gWkXiOIfEcS+I5jsRzPInnBBLPbUk8tyPx3J7EcwcSzx1JPHci8ZxI4jmJxHMyiecUEs+dSTx3IfGcSuK5K4nnbiSeu5N47kHiuSeJ514kntNIPKeTeM4g8ZxJ4llM4llC4jmLxLOUxDNF4llG4jmbxHMOiedcEs95JJ7zSTwXkHguJPEsJ/GsIPFcROK5mMSzksRzCYlnFYlnNYnnUhLPZSSey0k8V5B47k3iuQ+J574knvuReO5P4nkAiWcNieeBJJ4HkXgeTOJ5CInnoSSeh5F4Hk7ieQSJ55EknkeReB5N4nkMieexJJ7HkXgeT+J5AonniSSeJ5F4nkzieQqJ56kknqeReJ5O4nkGieeZJJ5nkXieTeJ5DonnuSSe55F4nk/iuZLE8wISzwtJPC8i8byYxPMSEs9LSTwvI/G8nMTzChLPK0k8ryLxvJrE8xoSz2tJPK8j8byexPMGEs8bSTxvIvG8mcTzFhLPW0k8byPxvJ3E8w4SzztJPO8i8bybxPMeEs97STzvI/FcReJ5P4nnAySeD5J4PkTi+TCJ5yMkno+SeD5G4vk4iecTJJ5Pkng+ReL5NInnMySez5J4Pkfi+TyJ5wskni+SeL5E4vkyiecrJJ6vkni+RuL5OonnGySeb5J4vkXi+TaJ5zsknu+SeL5H4vk+iecHJJ4fknh+ROL5MYnnJySen5J4fkbi+TmJ5xcknl+SeH5F4vk1iec3JJ7fknh+R+L5PYnnDySeP5J4/kTiuZrE82cSz19IPH8l8fyNxPN3Es8/SDz/JPH8i8RzDYnn3ySekiGDp4/E00/iGSDxzCDxDJJ4ZpJ4ZpF4NiLxzCbxbEzi2YTEsymJZzMSz+Ykni1IPFuSeLYi8WxN4tmGxLOtR55+zTMazo/FUgV5qUg0UhzOS5Yk4uFYvCQ/EUlE4ol4aV4iGk0lYomCZEmyIJyMxKKpSFk8GS2z8/YZjLkdScy9DcbcniTmHIMxb0USc8BgzFs3UMzh+qVIB5+58ov5OWLuaDDmJEnM2xiMeQBJzJ0MxpzwKGbT9YjOJPWdLiSeXUk8QySe3Ug8u5N49iDx7Eni2YvEszeJZw6JZx8Sz1wSz74knv1IPPuTeA4g8RxI4jmIxDNM4hkh8cwj8YySeMZIPOMknvkkngUkngkSzySJ52ASzyEknkNJPIeReA4n8RxB4llI4jmSxHMUiedoEs8iEs8xJJ5jSTzHkXiOJ/GcQOK5LYnndiSe25N47kDiuSOJ504knhNJPCeReE4m8ZxC4rkziecuJJ5TSTx3JfHcjcRzdxLPPUg89yTx3IvEcxqJ53QSzxkknjNJPItJPEtIPGeReJaSeKZIPMtIPGeTeM4h8ZxL4jmPxHM+iecCEs+FJJ7lJJ4VJJ6LSDwXk3hWknguIfGsIvGsJvFcSuK5jMRzOYnnChLPvUk89yHx3JfEcz8Sz/1JPA8g8awh8TyQxPMgEs+DSTwPIfE8lMTzMBLPw0k8jyDxPJLE8ygSz6NJPI8h8TyWxPM4Es/jSTxPIPE8kcTzJBLPk0k8TyHxPJXE8zQSz9NJPM8g8TyTxPMsEs+zSTzPIfE8l8TzPBLP80k8V3rk6dc869uObi+DMV/QQDGH65ciF/rMld9gP8f2eBHJ/+ZiEs9LSDwvJfG8jMTzchLPK0g8ryTxvIrE82oSz2tIPK8l8byOxPN6Es8bSDxvJPG8icTzZhLPW0g8byXxvI3E83YSzztIPO8k8byLxPNuEs97SDzvJfG8j8RzFYnn/SSeD5B4Pkji+RCJ58Mkno+QeD5K4vkYiefjJJ5PkHg+SeL5FInn0ySez5B4Pkvi+RyJ5/Mkni+QeL5I4vkSiefLJJ6vkHi+SuL5Gonn6ySeb5B4vkni+RaJ59sknu+QeL5L4vkeief7JJ4fkHh+SOL5EYnnxySen5B4fkri+RmJ5+cknl+QeH5J4vkViefXJJ7fkHh+S+L5HYnn9ySeP5B4/kji+ROJ52oSz59JPH8h8fyVxPM3Es/fSTz/IPH8k8TzLxLPNR55+jXP+r4HnWEw5r9JYg4ajFnkGGLONBizjyTmLIMx+0libmQw5gBJzNkGY84gibmxwZiDJDE3MRhzJknMTQ3GnEUSczODMTciibm5wZizSWJuYTDmxiQxtzQYcxOSmFsZjLkpScytDcbcjCTmNgZjbk4Sc1uDMbcgibmdwZhbksTc3mDMrUhi3spgzK1JYt7aYMxtSGLuYDDmtiQxdzQYczuSmLcxGHN7kpg7GYx5K5KYOxuMeWuSmLsYjLkDScxdDcbckSTmkMGYtyGJuZvBmDuRxNzdYMydSWLuYTDmLiQx9zQYc1eDMWfYsa62HwzoB/qDAWAgGCTLABGQJ+UAYiAO8kEBSIAkGAyGgKFgGBgORthxjwSjwGhQBMaAsWAcGA8mgG3BdmB7sAPYEewEJoJJYDKYAnYGu4CpYFewG9gd7AH2BHuBaWA6mAFmgmJQAmaBUpACZWA2mAPmgnlgPlgAFoJyUAEWgcWgEiwBVaAaLAXLwHKwAuwN9gH7gv3A/uAAUAMOBAeBg8Eh4FBwGDgcHAGOBEeBo8Ex4FhwHDgenABOBCeBk8Ep4FRwGjgdnAHOBGeBs8E54FxwHjgfrAQXgAvBReBicAm4FFwGLgdXgCvBVeBqcA24FlwHrgc3gBvBTeBmcAu4FdwGbgd3gDvBXeBucA+4F9wHVoH7wQPgQfAQeBg8Ah4Fj4HHwRPgSfAUeBo8A54Fz4HnwQvgRfASeBm8Al4Fr4HXwRvgTfAWeBu8A94F74H3wQfgQ/AR+Bh8Aj4Fn4HPwRfgS/AV+Bp8A74F34HvwQ/gR/ATWA1+Br+AX8Fv4HfwB/gT/AXWgL+BPHTjA34QABkgCDJBFmgEskFj0AQ0Bc1Ac9ACtAStQGvQBrQF7UB7sBXYGnQAHcE2oBPoDLqAriAEuoHuoAfoCXqB3iAH9AG5oC/oB/qDAWAgGATCIALyQBTEQBzkgwKQAEkwGAwBQ8EwMByMkGdlwEgwCowGRWAMGAvGgfFgAtgWbAe2BzuAHcFOYCKYBCaDKWBnsAuYCnYFu4HdwR5gT7AXmAamgxlgJigGJWAWKAUpUAZmgzlgLpgH5oMFYCEoBxVgEVgMKsESUAWqgfRpL/3FS1/s0s+59CEu/XNL39fSr7T02Sz9IdcA6cdX+siV/melb1fpN1X6JJX+PqUvTemnUvqAlP4Vpe9C6RdQ+tyT/uykrzjph036OJP+w6RvLun3SvqUkv6apC8k6WdI+vCR/nGk7xnp10X6TJH+SFYC6ftC+pWQfhakDwPpH0Da3pd27aXNeGmPXdo6l3bEpY1uaf9a2paWdpulTWRpb1ja8pV2cqUNWmnfVdpOlXZJpc1PaU9T2qqUdiCljUVpv1DaBpR291YBaS9O2mKTds6kDTFpn0vavpJ2paTNJmkPSdoaknZ8pI0caX9G2naRdlOkTRJp70Pa0pB2KqQNCGlfQdoukHYB5J17eZ9d3hWX97DlHWd5f1jezZX3XuWdUnlfU96FlPcM5R0+eT9O3j2T97rknSl5H0ne9ZH3aOQdFXn/Q96tkPcW5J0Aed5enmWX58TlGWw5Xsqzw/JcrjzzKs+TyrOa8hykPGMoz+/Js3HyrJgcYOVZInm2Rp41kWcv5FkEuTcv96rl3q3cy5R7e3KvS+79yL0QuTcg18rl2rFcS5Vri3KtTa49ybUYuTYh5+py7irncnJuI3V9qftKXVDqRlJX8K/bBVlyrJfUz6pNtp4VsKfLM2PyDJU8UyTP2MgzJ/IMhjyTIPfo5Z613MOVe5pyj0/ueck9ILknIvcI5Jq5XEOWa6pyjVGuuck1KLkmI9co5JxdzmHlnC4EuoHuQOqEUkeS/l56gxzQB+SCvtbGqZEy3F4Z7mR/FldVpRYuqgpVVYSKS0tDy+ZWzQlVLE1Vli2okEP22uVvzm98dgyW7eek5vbnlKriWfPxy4pQaSolO4z1uY7YrLnHKXN3sD9HVlYWrwjNLS9NLQ9VVFeFKspCJRXV5aVL1B9O2oKAQvZ8Of9IsZc9ZeAm516/pfWxP7PtT6dWLdnJFldofw/XL0WylXxN558Ix/KzrQ2TYf9otlX7T/Qy/4A3+a99AlHS6Jra/PVYnO3AZ3m2nryOM9pMi81SYnGWneHNsmM+bXmWFqelLb+x5ek2FfFpy3N89PJxhps589TU+vi0aRk1G8fhTAvWbBiHJDkKtFXm07ctvzKfs8eXI9VYOy8nOf/vLG0Zhfb4cD2T49TIzj+oxJCluDgx+rX59eGgNq6LEvPaeJR5neUElHHOMlvY3zOVac5v0+WV4ZJXS5f5M7W8slzyUsc5cUsNpJ09LDUPWX89rNq89G0sYG247tW8pNbS2h5ehKPUyMrZ1QtT5VVL1h5W1V/oew5Lm+a29EAd0y3NzonE2dIyajZcZqE9PlyPVJCo3dKcta1uaWrKUKar8ztVgdaWe5IYptrD5Ef14oY6qmd6k3/cyT/Lm/xdj+pqLM50Z/sqqqkty6KaDZ2cedQ979g65hmnzDNOmUeSvpdX/dyOzkXaNPW/MEabph7JxmrTgtbGTrJXaq14SRpfU+urH90mKNMcxzbKb9Sj1VBrw+Vn1i5+oxqHR+s/+k9rHM7yG1uebu/raxxZmo9ePuqev409PKt4wYKJlXOXFlelxlaXz6qaW1Gu77KztJ+n26U786ibhT6fW0UxoH3P0L4HXfKt6/f6OGfZLayNK0KZmqO+Sus6eLas4/eS3P6Kvjo+neVYm1iOm3O6SvfmLsfrE6GWlnulW1ILl2Xr5RrQ4tDHpVsv+kmWRycicbddopOaWZveXtTdlf5fs7T41aTGJLvIkUq++ny6j1uZB7Q43LaLgLVxWQY1R/13erln17GcQvt7uH4p3+0Qocevlrm+Phop0zZ3faw/EbE2b32oZZSlTVP/0wFtmurn5MFQrS60v6erVquHfbd9hb5/V8tQ3795dAjO04+VTjnoPpnKdHX+8ZsoB5+18bacbj+o+6jzq2XguDllp/4Xs7Rp/7IyT1vtcStzZ37nf51Zx/zqOlTnn2x/1rWO3I7VAW2a32U5bv9vZz3I9p9rD5OfVsbJLxZH/i0Xi9Od6sm22lL5jZqHZaWv03oZH9Z/zOP6V8TtQqp+kTWjZsNlq9OCyjS1PuXcbpJTpiJlHmd6TyUfvbx9DVC2Yfv4oy7PstxPSZ1xDXUR3K3e7nYR3LmFKqm6XC5HTk5VVVeWL1HlfXUEpU5Xk1uh+OoYb1npr5SrlSnWq+E9lLgk/S9cDe9oDzNUdp27vukqu87Dlv8/2KdNXt/RzPP4YOV6sHc7WQ5o87n9Jl2FwMtKUUMc1BvqxM3t4oXbSYTb9XJfHZ+W5X68cpbV2PJ0G46kiy3dxTP1JNApg//menC7SLW5lb2gNq2uyl5HZT63/40zn/PQj1QKx9h5WUpZSWKtJ/RUYl4bjzIvaz3BeUbNuaDkPOuXbrtzq6i6XfAIanm5VXqDLnk1tX0kuVR53bK3XLJRF+2Mr+tw4nbfxe+SN0N1apD9PV116j9rA8jlR58BAA==","debug_symbols":"7ZrdbuIwEIXfJddc2DPjGbuvslpVtKUVEqJVS1daId59HYpNACfRLISlq9xUNcw3PjmJxz9hXT3NHj5f7ufL59eP6u7Hulq8Pk5X89dlbK0rS9vPPt6my7r5sZq+r6o7y8FMqtnyKf4rxmwm1fN8MavuyPnN5CQaxMsuGrwJOdqyLUQjsd9FoyPbE22tYZukWCOU4xFcKZ4AUjg1siMVk0PIucU3g39OKutGa9qs4dGaNmvk5q0JPsuP19JnjfecwoNxZ1njR2varAmjNS3WgBmtabPGnm8NBkqVEoPI/mI9b7uA4bvAYhckuYK73i4ssmRFyMEedFKQBCEVfETX90DE2QRydsOI15tOgEZz2s1x38AcJ3tzxF6xOPBoTrs5cglzxORwFPQ95sTSly/W7oOjqbUgfxFB5PeCeu+WjZNbHoqODZ1U5nCDotD8C1FMDVEcTkTZWxQFvaIc9IgKkCQFbHQQTCGWc2IxfBBbi8HrihFKw18a279y7LcpW0ijieeb6EYTzzeRr2xijj02sRZzgTMXZp8ulwWop/a6vOVjbMQa2cq5wDkHi8MsR6BHzn+5v42Nh/f5YjF/uT84sjb1n5a5DTB7DIxHa6yWKaiDiQ27PSUvLoQYk3bfuM44ENuPLboRq0dAj6AeIT1SLLI+321P/gRhPSJ6xOuRoEbKi9RuxOoR0COoR0iPlO++p4SEcICUKlouaKFxohAftNbJ53LpZdj0/tz0yC7V7+arjV36MGh6MsOmt8Omh2HT47Dpadj0btj0fMH0/mRYkQyb3g+bvjhqA3BeIctxkXVGj1g9AnoE9QjpEadHWI3wXyCiR4oPF1B6YIDl+IHhoEbE6BGrR0CPoB4hPeL0COuR4t3vXBCI1yNBjXijR6weAT2CSiS2YLsrK1d8Shtn33zX+LU1L/8EoRsJaqS89+tGrB4BJRJbuN07F02Q/FpOnDnuq7yo7ETKC8VuxCqRTWz+mr7Ppw+LWX02UH/7uXxMRwWxufr99vVNDP4D","brillig_names":["pack_arguments_array_oracle_wrapper","call_private_function_internal","unpack_returns","pack_returns_oracle_wrapper"]},{"name":"enqueue_call","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7VfbbsIwDP2XPPchtnNx+JUJoQIFVaoKgjJpQvz70o6kZbSqJthFU1+quDm1j0/tXM5inS1P20VebnZHMXs5i2K3Sqt8V3rrLEA17477tKzNY5UeKjED42QisnLth1bKSyI2eZGJmdJ8Se7QaNle0cjSRTQY6EGTMnxFk1YwggaQBgIVkFZFPKHuwyvEAFcd76R6naOLvi13wfNEgJ6kGZLGTNIMSWP/vDSOI32fy5g0zCbAndQPScOTNEPSuMelIadCzZOztk2WTR0C5feHgN4QrFQIwRZHQngWWrWMrL4J0kMJXWhdIj1WEH5d0KF+/NjCz/1ixEmcYXFoEmdYHPUUcVhHcQBxRBzf3TFZaAk5aAjpZxACwpZQZ4vuJwSsKW7prBWP4NGDgn8/ZrhbrMx/SML+QhIOWveuqf4uKW8tD3lR5NvFzU1D1g/qXwSR4iaEhj5VG9FXv/EGNJeb3gOHjm1vu13ve3R+8eZresjTZZHVpOvZU7kKOXizett/zHjwOw==","brillig_names":["pack_arguments_array_oracle_wrapper","enqueue_public_function_call_internal"]},{"name":"enqueue_static_call_to_pub_function","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZfbjoIwEIbfpddcdDqdHnyVjTGoaEgIGsVNNsZ334G1BVcI2egesuGGdOCnM/N1ptCzWGfL03aRl5vdUcxezqLYrdIq35VsnQXo5t5xn5a1eazSQyVmYLxMRFaueWilvCRikxeZmGlyl+ROrayzV7Vy0kc1GOhRozbuqkbSMKIGkAZCKCCtjnpU1KfXSgW57syOundy5ePc1nXF80QATWiG0JgJzRAa++fReBfD51zG0DhngtxLegiNm9AMofGPo0GvQ82jt7ZN1pnahZLf7wL6XBA6ur5EWo25AEsqLoIl7W+c9ISkfGhdRBorCN4XKNQPjy383BIrNcEZhoMTnGE4+ilwyLdwvBmBw90dk4U2IA9NQPSMgIyMgKzRbiQgcITxk+5oVK9YFJaXxw7uNivzH5Kwv5CE53+kWNpN9XeDYmt5yIsi3y5uThqyvmDvJggK40dIGfxUbYhffYcNaA43vT8cFNvedruee3R+YfM1PeTpssjqoOunp3IVcmCzett/PGHxOw==","brillig_names":["pack_arguments_array_oracle_wrapper","enqueue_public_function_call_internal"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"fields":[{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"fields":[{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"StaticChild"}},{"name":"fields","value":{"fields":[{"name":"current_value","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"a_private_value","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::public_nested_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::public_nested_static_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::enqueue_call_parameters"}}],"kind":"struct","path":"StaticParent::enqueue_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":3,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::private_call_3_args_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::private_call_3_args_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":3,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::private_nested_static_call_3_args_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::private_nested_static_call_3_args_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::private_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::private_static_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::public_get_value_from_child_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::public_get_value_from_child_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::enqueue_static_call_to_pub_function_parameters"}}],"kind":"struct","path":"StaticParent::enqueue_static_call_to_pub_function_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"value","type":{"kind":"field"}},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"StaticParent::private_get_value_from_child_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::private_get_value_from_child_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::public_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::public_static_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::enqueue_static_nested_call_to_pub_function_parameters"}}],"kind":"struct","path":"StaticParent::enqueue_static_nested_call_to_pub_function_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":3,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::private_static_call_3_args_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::private_static_call_3_args_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::private_nested_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::private_nested_static_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::enqueue_public_get_value_from_child_parameters"}}],"kind":"struct","path":"StaticParent::enqueue_public_get_value_from_child_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::private_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::private_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"arg","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::public_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::public_call_abi"}]}},"file_map":{"105":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"106":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"107":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_returns_oracle_wrapper(returns) };\n}\n\npub unconstrained fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\npub unconstrained fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"109":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}},\n};\n\nuse dep::protocol_types::{\n    hash::{\n        compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n        compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    }, utils::arr_copy_slice,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash =\n                compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"161":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n    }, point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice},\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER,\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"178":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\nuse crate::{\n    oracle::{\n        keys::get_public_keys_and_partial_address,\n        key_validation_request::get_key_validation_request,\n    }, keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) =\n        unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    hinted_canonical_public_keys\n}\n"},"185":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Serialize<N>,\n    {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N],\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"186":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n        key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n        call_private_function::call_private_function_internal, header::get_header_at,\n        logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext, function_selector::FunctionSelector,\n        max_block_number::MaxBlockNumber,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n        nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash},\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL,\n        MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR,\n    }, header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests: BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator {\n                request,\n                sk_app_generator: sk_generators[key_index],\n            };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(\n        &mut self,\n        note_hash_counter: u32,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context,\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        let call_request = PublicCallRequest { call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.public_teardown_call_request = PublicCallRequest { call_context, args_hash, counter };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"},"190":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n    packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe { unpack_returns(self.packed_returns) };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"191":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs,\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {}\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n"},"209":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"},"224":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"234":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{\n        decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI,\n    };\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"284":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: u32,\n) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"},"305":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"312":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, public_keys_hash::PublicKeysHash,\n        salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils,\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [pub_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        ))\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        functino_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys_hash: PublicKeysHash,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            functino_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys_hash, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"325":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash}, note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n        MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX,\n    }, merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), unique_note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256(\n            [log_hash.contract_address.to_field(), log_hash.log_hash.value],\n        )\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n            0,\n        ))\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk<let N: u32>(\n    _vk: VerificationKey<N>,\n) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"376":{"path":"/usr/src/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n        traits::Serialize, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n    }, macros::notes::note,\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    }, oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n"},"457":{"path":"/usr/src/noir-projects/noir-contracts/contracts/static_child_contract/src/main.nr","source":"// A contract used along with `StaticParent` contract to test static calls.\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract StaticChild {\n    use dep::aztec::prelude::{AztecAddress, PublicMutable, PrivateSet};\n\n    use dep::aztec::{\n        note::note_getter_options::NoteGetterOptions,\n        encrypted_logs::encrypted_note_emission::encode_and_encrypt_note,\n        keys::getters::get_public_keys, utils::comparison::Comparator,\n        macros::{storage::storage, functions::{private, public, view}},\n    };\n    use dep::value_note::value_note::ValueNote;\n\n    #[storage]\n    struct Storage<Context> {\n        current_value: PublicMutable<Field, Context>,\n        a_private_value: PrivateSet<ValueNote, Context>,\n    }\n\n    // Returns base_value + chain_id + version + block_number + timestamp statically\n    #[public]\n    #[view]\n    fn pub_get_value(base_value: Field) -> Field {\n        let return_value = base_value\n            + context.chain_id()\n            + context.version()\n            + context.block_number()\n            + context.timestamp() as Field;\n\n        return_value\n    }\n\n    // Sets `current_value` to `new_value`\n    #[public]\n    fn pub_set_value(new_value: Field) -> Field {\n        storage.current_value.write(new_value);\n        context.emit_unencrypted_log(new_value);\n        new_value\n    }\n\n    // View function that attempts to modify state. Should always fail regardless how it's called.\n    #[private]\n    #[view]\n    fn private_illegal_set_value(new_value: Field, owner: AztecAddress) -> Field {\n        let msg_sender_keys = get_public_keys(context.msg_sender());\n        let owner_keys = get_public_keys(owner);\n\n        let mut note = ValueNote::new(new_value, owner_keys.npk_m.hash());\n\n        storage.a_private_value.insert(&mut note).emit(encode_and_encrypt_note(\n            &mut context,\n            msg_sender_keys.ovpk_m,\n            owner_keys.ivpk_m,\n            owner,\n        ));\n        new_value\n    }\n\n    // Modify a note\n    #[private]\n    fn private_set_value(\n        new_value: Field,\n        owner: AztecAddress,\n        outgoing_viewer: AztecAddress,\n    ) -> Field {\n        let owner_keys = get_public_keys(owner);\n        let outgoing_viewer_keys = get_public_keys(outgoing_viewer);\n\n        let mut note = ValueNote::new(new_value, owner_keys.npk_m.hash());\n        storage.a_private_value.insert(&mut note).emit(encode_and_encrypt_note(\n            &mut context,\n            outgoing_viewer_keys.ovpk_m,\n            owner_keys.ivpk_m,\n            owner,\n        ));\n        new_value\n    }\n\n    // Retrieve note value statically\n    #[private]\n    #[view]\n    fn private_get_value(amount: Field, owner: AztecAddress) -> Field {\n        let owner_npk_m_hash = get_public_keys(owner).npk_m.hash();\n        let mut options = NoteGetterOptions::new();\n        options = options\n            .select(ValueNote::properties().value, Comparator.EQ, amount)\n            .select(ValueNote::properties().npk_m_hash, Comparator.EQ, owner_npk_m_hash)\n            .set_limit(1);\n        let notes = storage.a_private_value.get_notes(options);\n        notes.get(0).value\n    }\n\n    // Increments `current_value` by `new_value`\n    #[public]\n    fn pub_inc_value(new_value: Field) -> Field {\n        let old_value = storage.current_value.read();\n        storage.current_value.write(old_value + new_value);\n        context.emit_unencrypted_log(new_value);\n        new_value\n    }\n\n    // View function that attempts to modify state. Should always fail regardless how it's called.\n    #[public]\n    #[view]\n    fn pub_illegal_inc_value(new_value: Field) -> Field {\n        let old_value = storage.current_value.read();\n        storage.current_value.write(old_value + new_value);\n        context.emit_unencrypted_log(new_value);\n        new_value\n    }\n}\n"},"458":{"path":"/usr/src/noir-projects/noir-contracts/contracts/static_parent_contract/src/main.nr","source":"// A contract used along with `StaticChild` contract to test static calls.\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract StaticParent {\n    use dep::aztec::prelude::{AztecAddress, FunctionSelector};\n    use dep::aztec::{context::gas::GasOpts, macros::functions::{private, public, view}};\n    use dep::static_child_contract::StaticChild;\n\n    // Public function to directly call another public function to the target_contract using the selector and value provided\n    #[public]\n    fn public_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        arg: Field,\n    ) -> Field {\n        context\n            .call_public_function(\n                target_contract,\n                target_selector,\n                [arg].as_slice(),\n                GasOpts::default(),\n            )\n            .deserialize_into()\n    }\n\n    // Private function to directly call another private function to the target_contract using the selector and args provided\n    #[private]\n    fn private_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 2],\n    ) -> Field {\n        context.call_private_function(target_contract, target_selector, args).unpack_into()\n    }\n\n    // Just like function above but with 3 args.\n    #[private]\n    fn private_call_3_args(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 3],\n    ) -> Field {\n        context.call_private_function(target_contract, target_selector, args).unpack_into()\n    }\n\n    // Private function to enqueue a call to a public function of another contract, passing the target arguments provided\n    #[private]\n    fn enqueue_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1],\n    ) {\n        context.call_public_function(target_contract, target_selector, args);\n    }\n\n    #[private]\n    fn private_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 2],\n    ) -> Field {\n        context.static_call_private_function(target_contract, target_selector, args).unpack_into()\n    }\n\n    // Private function to statically call another private function to the target_contract using the selector and values provided\n    #[private]\n    fn private_static_call_3_args(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 3],\n    ) -> Field {\n        context.static_call_private_function(target_contract, target_selector, args).unpack_into()\n    }\n\n    // Same as above but using a specific function from the interface\n    #[private]\n    fn private_get_value_from_child(\n        target_contract: AztecAddress,\n        value: Field,\n        owner: AztecAddress,\n    ) -> Field {\n        StaticChild::at(target_contract).private_get_value(value, owner).view(&mut context)\n    }\n\n    // Private function to set a static context and verify correct propagation for nested private calls\n    #[private]\n    fn private_nested_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 2],\n    ) -> Field {\n        StaticParent::at(context.this_address())\n            .private_call(target_contract, target_selector, args)\n            .view(&mut context)\n    }\n\n    // Just like function above but with 3 args.\n    #[private]\n    fn private_nested_static_call_3_args(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 3],\n    ) -> Field {\n        StaticParent::at(context.this_address())\n            .private_call_3_args(target_contract, target_selector, args)\n            .view(&mut context)\n    }\n\n    // Public function to statically call another public function to the target_contract using the selector and value provided\n    #[public]\n    fn public_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1],\n    ) -> Field {\n        context\n            .static_call_public_function(\n                target_contract,\n                target_selector,\n                args.as_slice(),\n                GasOpts::default(),\n            )\n            .deserialize_into()\n    }\n\n    // Same as above but using a specific function from the interface\n    #[public]\n    fn public_get_value_from_child(target_contract: AztecAddress, value: Field) -> Field {\n        StaticChild::at(target_contract).pub_get_value(value).view(&mut context)\n    }\n\n    // Public function to set a static context and verify correct propagation for nested public calls\n    #[public]\n    fn public_nested_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1],\n    ) -> Field {\n        // Call the target public function through the pub entrypoint statically\n        StaticParent::at(context.this_address())\n            .public_call(target_contract, target_selector, args[0])\n            .view(&mut context)\n    }\n\n    // Private function to enqueue a static call to a public function of another contract, passing the target arguments provided\n    #[private]\n    fn enqueue_static_call_to_pub_function(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1],\n    ) {\n        context.static_call_public_function(target_contract, target_selector, args);\n    }\n\n    // Same as above but using a specific function from the interface\n    #[private]\n    fn enqueue_public_get_value_from_child(target_contract: AztecAddress, value: Field) {\n        StaticChild::at(target_contract).pub_get_value(value).enqueue_view(&mut context);\n    }\n\n    // Private function to set a static context and verify correct propagation of nested enqueuing of public calls\n    #[private]\n    fn enqueue_static_nested_call_to_pub_function(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1],\n    ) {\n        // Call the target public function through the pub entrypoint statically\n        StaticParent::at(context.this_address())\n            .public_call(target_contract, target_selector, args[0])\n            .enqueue_view(&mut context)\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"91":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_oracle_wrapper(args) };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_array_oracle_wrapper(args) };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"93":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{\n    KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"}}}