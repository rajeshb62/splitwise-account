{"transpiled":true,"noir_version":"0.36.0+1094f036be7b102252a3a5c0d4b8c621779cf4bd-x8664","name":"Parent","functions":[{"name":"enqueue_call_to_child","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"target_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7VfbbsIwDP2XPPMQ27nyKxNCBQqqVBUEZdKE+Pe5HQllpKom2EVTX6q4ObWPT+1cTmKVL46beVGttwcxfTmJcrvM6mJbsXUSoNp3h11WNeahzva1mILxciLyasVDK+V5ItZFmYupIjhP7tBonb2g0Ukf0WBSaFLGXdCkFQygAaSBQAWkVRFPqFN4hRjgquOdVNI5+ujbui54NhGgR2n6pDGjNH3S2D8vjXeRPucyJI1zJsC91A9J40Zp+qTxj0tDXoWaJ2/tNVlnmhAovz8EpEIgxhBI4AZCMAutroysvgmSoIQ+tC6RHioIXhd0qB8eW/i5X4w4itMvDo3i9IujniKO01EcQBwQh7s7Jttx7qElpJ9BCAivhDpbdJoQOE1xS3dauQE8Mij457GDu8XK/Ick7C8k4fmMFEu7rf4uKbYW+6Isi8385qYhmwclF0FAipsQGvpUbURf/YYNaC83yQOHjm1vu13PPTo7s/ma7YtsUeYN6Wb2WC1DDmzWb7uPGQa/Aw==","brillig_names":["pack_arguments_array_oracle_wrapper","enqueue_public_function_call_internal"]},{"name":"private_static_call","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"H4sIAAAAAAAA/+2dBXjbRhvHZTtOmjJvK7qYco2JU0xXHha2jtcmjVNO2jQpDDNmZu6YmbljZmZmho7Xff+3lZbrRXHBp3z779k9z++xLMnS7z3J0ukk3fmstWmE37I6+NcO+0DA/pRRIW2c86kOB13ma+IyrpnLuBYu41q5jGsPirRxXVzm6+oyLuQyrpvLuF4u4/LscWry2Z9F9mcsnB+PpwqiqUgsUhyOFpYkE+F4oiQ/GUlGEslEaTQZi6WS8WRBYUlhQbgwEo+lImWJwlhZeG3q6q9dVjijFJ3ppWdo0z0T+ghxawOyFFfJh9X2cG+rdjhPGQ7Z8zi/64bv3UEP0NNfO95JAS0PwpmlSB+Dy+rmN7dtehnbh8JhL/Ovr8FldTeYf70N5p/bvt1L3beV4R7KcE9t387D9z6gL+jnsm/7DW+bXpa5/OxvLj8j6vFYlhvS8sH0cW7AprvH9BHrO87J8cQZ7qsMD9D2hYH4PggMBmF7Xwhq8Tvn7HR5E84smTz+hb1y7OuB45rMdgo7lseZ3NuLADzwzCPxHOjn8Ozvkadl2FM9yDhfon5r3ZJzxOVIbfqMFTFYAoh5dMaK2fkQtOP3WXWT6R0parg04zg6w/H1nWYy3RiJBvrHZuqZv+meUX3E+ooKcWU4oQzna0WFAnxPgkIwpAGKjVGDf8ICg9td/nABq26RSE2m8kD9c9S3r4UzS5G4F/8JUzvdUHwfBob719YnrW+ny3RHMZmx/SxvDjamY/YZjLk/Scx+gzEPIIk5YDDmgQ0UczizFBlkMP/y/BwxDzYY81CSS5ywxeEZIfGMknjGSDzjJJ4JEs98Es8CEs8kiWchiecQEs+hJJ7DSDyHk3iOIPEcSeJZROI5isRzSxLP0SSeY0g8x5J4jiPxHE/iOYHEcyKJ51YknluTeG5D4rktied2JJ7bk3hOIvGcTOI5hcRzKonnDiSeO5J4TiPx3InEc2cSz11IPHcl8dyNxHN3Es89SDz3JPGcTuI5g8SzmMSzhMRzJolnKYlnisSzjMRzFonnbBLPOSSec0k855F4zifxXEDiWU7iWUHiuZDEcxGJZyWJ52ISzyoSz2oSzyUknktJPJeReC4n8dyLxHNvEs99SDz3JfHcj8RzfxLPGhLPA0g8DyTxPIjE82ASz0NIPA8l8TyMxPNwEs8jSDyPJPE8isTzaBLPY0g8jyXxPI7E83gSzxNIPE8k8TyJxPNkEs9TSDxPJfE8jcTzdBLPM0g8zyTxPIvE82wSz3NIPM8l8TyPxHMFief5JJ4XkHheSOJ5EYnnxSSel5B4XkrieRmJ5+UknleQeF5J4nkViefVJJ7XkHheS+J5HYnn9SSeN5B43kjieROJ580knreQeN5K4nkbieftJJ53kHjeSeJ5F4nn3SSe95B43kviuZLE8z4Sz/tJPB8g8XyQxPMhEs+HSTwfIfF8lMTzMRLPx0k8nyDxfJLE8ykSz6dJPJ8h8XyWxPM5Es/nSTxfIPF8kcTzJRLPl0k8XyHxfJXE8zUSz9dJPN8g8XyTxPMtEs+3STzfIfF8l8TzPRLP90k8PyDx/JDE8yMSz49JPD8h8fyUxPMzEs/PSTy/IPH8ksTzKxLPr0k8vyHx/JbE8zsSz+9JPH8g8fyRxHMViedPJJ4/k3j+QuL5K4nnbySev5N4/kHi+SeJ52oSz79IPGWBDJ4+Ek8/iWeAxDOLxDNI4plN4plD4tmIxDOXxLMxiWcTEs+mJJ7NSDybk3i2IPFsSeLZisSzNYlnG488/ZpnLJwfj6cKoqlILFIcjhaWJBPheKIkPxlJRhLJRGk0GYulkvFkQWFJYUG4MBKPpSJlicJYmb1sn8GY25LE3NtgzO1IYs4zGHN7kv/gZj5z+Zdu24QzS5HNDXoO9DfM/hjOLEW2MBhzlCTmDgZj7k8Sc0eDMUf8HMedTiTHx84knl1IPLuSeIZIPLuReHYn8exB4tmTxLMXiWdvEs88Es8+JJ59STz7kXj2J/EcQOI5kMRzEInnYBLPMIlnhMQzSuIZI/GMk3gmSDzzSTwLSDyTJJ6FJJ5DSDyHkngOI/EcTuI5gsRzJIlnEYnnKBLPLUk8R5N4jiHxHEviOY7EczyJ5wQSz4kknluReG5N4rkNiee2JJ7bkXhuT+I5icRzMonnFBLPqSSeO5B47kjiOY3EcycSz51JPHch8dyVxHM3Es/dSTz3IPHck8RzOonnDBLPYhLPEhLPmSSepSSeKRLPMhLPWSSes0k855B4ziXxnEfiOZ/EcwGJZzmJZwWJ50ISz0UknpUknotJPKtIPKtJPJeQeC4l8VxG4rmcxHMvEs+9STz3IfHcl8RzPxLP/Uk8a0g8DyDxPJDE8yASz4NJPA8h8TyUxPMwEs/DSTyPIPE8ksTzKBLPo0k8jyHxPJbE8zgSz+NJPE8g8TyRxPMkEs+TSTxPIfE8lcTzNBLP00k8zyDxPJPE8ywSz7NJPM8h8TyXxPM8jzz9mmem7ej2MhjzigaKOZxZipzvM5d/MT/H/ngByf/mQhLPi0g8LybxvITE81ISz8tIPC8n8byCxPNKEs+rSDyvJvG8hsTzWhLP60g8ryfxvIHE80YSz5tIPG8m8byFxPNWEs/bSDxvJ/G8g8TzThLPu0g87ybxvIfE814Sz5UknveReN5P4vkAieeDJJ4PkXg+TOL5CInnoySej5F4Pk7i+QSJ55Mknk+ReD5N4vkMieezJJ7PkXg+T+L5AonniySeL5F4vkzi+QqJ56sknq+ReL5O4vkGieebJJ5vkXi+TeL5DonnuySe75F4vk/i+QGJ54cknh+ReH5M4vkJieenJJ6fkXh+TuL5BYnnlySeX5F4fk3i+Q2J57cknt+ReH5P4vkDieePJJ6rSDx/IvH8mcTzFxLPX0k8fyPx/J3E8w8Szz898vRrnpm+B51lMObVJDEHDcb8F0nM2QZjFjmGmHMMxuwjibmRwZj9JDHnGow5QBJzY4MxZ5HE3MRgzEGSmJsajDmbJOZmBmPOIYm5ucGYG5HE3MJgzLkkMbc0GHNjkphbGYy5CUnMrQ3G3JQk5jYGY25GEnNbgzE3J4m5ncGYW5DE3N5gzC1JYt7MYMytSGLe3GDMrUli3sJgzG1IYu5gMOa2JDF3NBhzO5KYOxmMuT1JzJ0NxrwZScxdDMa8OUnMXQ3GvAVJzCGDMXcgibmbwZg7ksTc3WDMnUhi7mEw5s4kMfc0GHMXgzFn2bGush8M6Af6gwFgIBgEBst6QAREJS9AHCRAPigASVAIhoChYBgYDkaAkXbso8CWYDQYA8aCcWA8mAAmgq3A1mAbsC3YDmwPJoHJYAqYCnYAO4JpYCewM9gF7Ap2A7uDPcCeYDqYAYpBCZgJSkEKlIFZYDaYA+aCeWA+WADKQQVYCBaBSrAYVIFqsAQsBcvAcrAX2BvsA/YF+4H9QQ04ABwIDgIHg0PAoeAwcDg4AhwJjgJHg2PAseA4cDw4AZwITgIng1PAqeA0cDo4A5wJzgJng3PAueA8sAKcDy4AF4KLwMXgEnApuAxcDq4AV4KrwNXgGnAtuA5cD24AN4KbwM3gFnAruA3cDu4Ad4K7wN3gHnAvWAnuA/eDB8CD4CHwMHgEPAoeA4+DJ8CT4CnwNHgGPAueA8+DF8CL4CXwMngFvApeA6+DN8Cb4C3wNngHvAveA++DD8CH4CPwMfgEfAo+A5+DL8CX4CvwNfgGfAu+A9+DH8CPYBX4CfwMfgG/gt/A7+AP8CdYDf4C8uCND/hBAGSBIMgGOaARyAWNQRPQFDQDzUEL0BK0Aq1BG9AWtAPtwWZgc7AF6AA6gk6gM+gCuoIQ6Aa6gx6gJ+gFeoM80Af0Bf1AfzAADASDwGAQBhEQBTEQBwmQDwpAEhSCIWAoGAaGgxFgpDw7AkaBLcFoMAaMBePAeDABTARbga3BNmBbsB3YHkwCk8EUMBXsAHYE08BOYGewC9gV7AZ2B3uAPcF0MAMUgxIwE5SCFCgDs8BsMAfMBfPAfLAAlIMKsBAsApVgMagC0qe99BcvfbFLP+fSh7j0zy19X0u/0tJns/SHLH0N1wDpI1f6n5W+XaXfVOmTVPr7lL40pZ9K6QNS+leUvgulX0Dpc0/6s5O+4qQfNunjTPoPk765pN8r6VNK+muSvpCknyHpw0f6x5G+Z6RfF+kzRfojkb4+VgDpV0L6WZA+DKR/AGl7X9q1lzbjpT12aetc2hGXNrql/WtpW1rabZY2kaW9YWnLV9rJlTZopX1XaTtV2iWVNj+lPU1pq1LagZQ2FqX9QmkbUNrdkzbtVgJpi03aOZM2xKR9Lmn7StqVkjabpD0kaWtI2vGRNnKk/Rlp20XaTZE2SaS9D2lLQ9qpkDYgpH0FabtA2gWQd+7lfXZ5V1zew5Z3nOX9YXk3V957lXdK5X1NeRdS3jOUd/jk/Th590ze65J3puR9JHnXR96jkXdU5P0PebdC3luQdwLkeXt5ll2eE5dnsOX5ZjlnynO58syrPE8qz2rKc5DyjKE8vyfPxsmzYvLslJxk5dkaedZEnr2QZxHk3rzcq5Z7t3IvU+7tyb0uufcj90Lk3oDUlUvdsdSlSt2i1LVJ3ZPUxUjdhFyry7WrXMvJtY2U9aXsK2VBKRtJWcG/9vBjybleUj+rNtlqVsCeLs+MyTNU8kyRPGMjz5zIMxjyTILco5d71nIPV+5pyj0+uecl94DknojcI5A6c6lDljpVqWOUOjepg5I6GamjkGt2uYaVa7oQ6Aa6AykTShlJ+nvpDfJAH9DXqpsaKcPtlOFO9mdxVVVqwcKqUFVFqLi0NLR0TtXsUMWSVGXZ/Iql6nwb+hufHYtluzmpuf05tap45jz8siJUmkrJgWJN1JJGbtTc45W5nXGjKiuLl4fmlJemloUqqqtCFWWhkorq8tLF6g8nb0JAne358jZIsbs9ZdB65/57L+tjf+ban06JWhYne1uR/T2cWYrkKss1vfwkyvi51rrJsH8s16r9F3qw/GiuskwPlr/m6UNJo2tql6/H4uwHPsuz7RTzOM5oMy02S4nFWXeWR/uIT1ufpcVpaetvbHm6T0V82vocHz1/nOFmzjw1tT4+bVpWTd04nGnBmnXjkCRngbbKfPq+5Vfm62oPy1lqrL0sJzn/7xxtHUX2+HCGyXFqZC8/qMSQo7g4Mfq1+fXhoDauixLzmniUeZ31BJRxzjpb2N+zlWnOb9MtK8tlWS1d5s/WlpXjsix1nBO3lD6cs7qUOmT79bBql6XvYwFr3W2vLktKLK3t4YU4S42qnFW9IFVetXjNaVX9hX7ksLRpbmv31zPdcjGRSJw9Latm3XUW2ePDGaSCZO2e5mxtdU9TU5YyXZ3fKQq0ttyTxDDNHiY/qxc31Fk925vlJ5zl53izfNezuhqLM93Zv8bU1OblmJp1nZx5xinzjKtnnvHKPOOVeSTpR3nVz+3sPEabpv4XxmrT1DPZOG1a0KrrJEel1oqXpAk1tb762W2iMs1xbKP8Rj1bDbPWXX927errlDg82v4bXOJw1t/Y8nR//7vEkaP56PmjHvnb2MMzi+fPn1Q5Z0lxVWpcdfnMqjkV5fohO0f7+YYc0tXdQp/PraAY0L5nad+DLsut7/f6OGfdLay6BaFszVHfpPWdPFvW83tJbn9FXz2fznqs9azHzTldoXtj1+P1hVBLy73QLamFy7r1fA1ocejj0m0X/SLLowuRhNsh0UnNrPXvL+rhSv+vWVr8alJjkkPkKGW5+ny6j1ueB7Q43PaLgFU3L4Oao/47Pd9z61lPkf09nFnKdztF6PGrea5vj0bKtI3dHn9fiFgbtz3UPMrRpqn/6YA2TfVzlsFQrC6yv6crVqunfbdjhX58V/NQP755dAqO6udKJx90n2xlujr/hPXkg8+quy+nOw7qPur8ah44bk7eqf/FHG3aPyzP0xZ73PLcmd/5X2fXM7+6DdX5p9if9W0jt3N1QJvmd1mP2//b2Q6y/zvV/P9VFqdNXlcWR/4plcXpLvVkX22p/EZdhmWlL9N6GR+2f9zj8lfErSJVr2TNqll33eq0oDJNLU85d5LkkmmMMo8zvaeyHD2/fQ2Qt2H7/KOuz7LcL0mdcQ1VCe5WbnerBHdun0qqLpfqyCmpqurK8sWqvK+eoNTpanLLFF894y0rfU25WphirQ3vocQl6d9QG97BHmYo7Dp3fdMVdp0HLf872adNnt/R9Phk5Xqyd7tYDmjzuf0mXYHAy0JRQ5zUG+rCza3ywu0iwq2+3FfPp2W5n6+cdTW2PN2HI+liS1d5pl4EOnnw/9wObpVUG1vYC2rT6ivsdVDmc/vfOPP1sof/jXfNeyoxr4lHmZe1nNDRHnYqlPpbtcuqb79zK6i6VXgEtWW5FXqDLstqavtIcinyui3eclmMumpnfH2nE7f7Ln6XZTMUpwbb39MVp/4HvmNvXiubAQA=","debug_symbols":"7ZnbTuMwEIbfJde98Bw8Y/MqqxUqUFClqiAoK60Q775uqd20dRPNtmFZlBsU0/nG49+eie28NXezm9eH6/ny/vGlufrx1iweb6er+eMytd4a4M3/Xp6my3XzZTV9XjVXINFNmtnyLj2qc++T5n6+mDVXTPA+ObJGDbq1xuBisQapWRNL2FqTZ+ixBnACORRwysWe0NfsGTGbc8s7cdU5xuJbQ9v456QBP0pzShoZpTkljX55aWIo4aex9EkTgmTz6PxZ0oRRmlPSxFGaE9KgO18aipzLAUXV3WCDbLqA4bvAWhfCmKdMWKinC2AQKmUKAu91UgkJY65qRL5vQaSS6XMw6VnhE6eYRnFOi8MXESdyEQcJesRJC7gMFnYBRdgE5C8REJZ0Sc+9swWpRJU3tBfHR/klXzEo/RdBJf+7oCQeBRW+YlCxLygPvieoiPkNFanVQXQV25TBW1t1smebgiH3ucEo5/TX1k61bvvflC2CUcTzRcRRxPNFpE8WsdgeirgOhs/faoqEPFxR7Ku9vmzchVq2TjfhXOCOQ9RTCUexJ5xveUpJjZvn+WIxf7jeu11z6z/1JAakojG2Xrgfe6z6mu1iUgM2F3r1Nynl2ENrnCkRT5+wuhGwI2hHyI6wHanmQCizHTgcIWJH1I4EOxLNSH23042AHUE7QnaE7Uh99kM+LoUY95BaRSsFLe5yktJCW7uXYd3rsO7Due5JfK7f7VvYrfs4qHt2w7qHYd3jsO5pWPc8rHs/rHu5oPtwlFasw7oPw7qvZm1EKTtkPSyy3tkRsCNoR8iOsB3xdkTMiPwFonakuriQ84JB0cMFI9GMqLMjYEfQjpAdYTvi7YjYkersd24INNiRaEaCsyNgR9COkBFJLdycyuoVn/PBObS/GH0czetfS7uRaEbqZ79uBOwIGpHUos3ZuSqClq/16t1hX/VNZSdS3yh2I2BE3lPz1/R5Pr1ZzNZ3A+tfX5e3+aogNVe/nz5+ScZ/AA==","brillig_names":["pack_arguments_array_oracle_wrapper","call_private_function_internal","unpack_returns","pack_returns_oracle_wrapper"]},{"name":"enqueue_static_nested_call_to_pub_function","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZfbjoJADIbfZa69mLZzqq+yMQYVDQlBo7jJxvjuO7DOgCuEbHTdQ7ghFH6m7TdtgZNYpYvjZp4V6+1BTF9OIt8ukzLbFt46CVD1tcMuKSrzUCb7UkzBsJyItFj5UyvleSLWWZ6KqSI4T27UaJ29qNFJjmowXWpSxl3UpBUMqAGkgRAKSKuinlB36RVikKvW6qQ6F0eOa1vXFs8mAvSIpg+NGdH0obG/Hg27GL7PZQiNcybIWeq70LgRTR8avh8NsQo1T2xtk6wzlQuU3+8Culyw4bBlbAkHXIDVGDfBasVXTjpCQg6tS6SHCsLPBYz5SkP0vMGA+AfgaNvAsfC8+kca4fTDUQ+Bo7mBw2YAju/umCw0ATHUAelHBGRkBGSNcgMBgdMUX+lOD+rRi8L2+nMHN8PK/Ick7A8kwX4UxtKuq78dlLcW+yzPs8386k9DVgfqHIKAFIcyGvpUbURffcYbUP/cdH5w6Nj2tt31vkdnZ2++JvssWeRpFXR191gsQw7eLN92H3e8+B0=","brillig_names":["pack_arguments_array_oracle_wrapper","enqueue_public_function_call_internal"]},{"name":"enqueue_calls_to_child_with_nested_last","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZjdbuIwEIXfJddceH48HvdVVquKtrRCQrQqdKUV4t3XYbEJYIimJW13BRcohvmOjyf2xM6qeZjcvT3dTuePz4vm5seqmT3fj5fT53lqrRrgzW+Ll/G8bS6W49dlcwMS3aiZzB/SZXBuPWoep7NJc8ME69FRNAYN22hUF0s0SC2aWHQbTZ6hJxrAxRwO6YMlntDX4lUlh0fnd9FcFcdYtIN2g3+OGvDX1JxKjVxTcyo14eOpociQBxtD2A1WZdOFDt9FrHVBvqSJBLini+RCfXEEiHudHMcnGznawS6tEVpD6C5hCAh3hgL3GAL1lJOUrll74jEFZf10rXCYVYT/YRD4BYOIwFwW6GYNH5iiqiklyqZUsM8USSgriCRCjynCmMdA5PsKGDjBou6EqK8kMZYMcafgvaMkIV+Tczo5/h9Ijt9VRgnweQ8zlGtyTicnXCI5wZXqTIH6qvP5Z6RexBDrzlDv3YK0GStL0Yvjo8ocv6Epcl9hSrhjSuKRKfh2plLr7nU6m02fbvdOja79oupGAJDKakehgylKZGVSAzYH1erk9qVWhG6pSAu7BfFTbdLGZnW6C+U6op2ak+rV6a3teQTsCNoRsiNsR6oPYC2VV7tb1i0idiTYEbUj0YzUS9F5BOwI2hGyI2xH6ndf825fY9xDau8RymuE2Nk3tiUgycuw8mFYef2oPEk+gVPnkJXl46Dy7IaVh2HlcVh5Glaeh5X3w8rLBeX1aFlxGFZeh5WvrtqI+VgTKRwWWe/sCNgRtCNkR9iOeDsiZkTegQQ7Up1cyHnCoITDCSPRjARnR8COoB0hO8J2xNsRsSPVu392QxDUjkQzos6OgB1BO0JGZJ2av8av0/HdbNIeXNt/3+b3+RybmsvfL3//ScF/AA==","brillig_names":["pack_arguments_array_oracle_wrapper","enqueue_public_function_call_internal","pack_arguments_array_oracle_wrapper","call_private_function_internal"]},{"name":"pub_entry_point","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"init_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARwABJAAEAwAkAgQDBCQCBAAFHxgABQAEgEMdAASARIBEKwiAQwABKwiARAACKwiARQADIgANKwQAAYBGOACARgABIgBaHAwAAgUqCAECAAABAgEkAgQBBioOBgIqCAEHAAABAgEkAgQBCSQCBAILADgJCwoqCAEIABABCgEkAwQBCAAoCAIKKg4JCiQCBAIKADgICgkqDAkKKg4FCioOCAckAgQABSoMBQQgACUKOAQFCCECAEcACCAAKCoNAgMqDQcCKQIAMGROcuExoCm4UEW2gYFYXSgz6Eh5uXCRQ+H1k/AAAAAABCYCANVEGw0ABioIAQckAgQDCAAQAQgBJAMEAQcAKAcCCCoMCAkqDgQJACgJAgkqDgQJACgHAggAKAICCyoNCwoAKAsCCSoIAQskAgQCDAAQAQwBJAMEAQsAKAsCDTY/lQAIAAEACQAKAA0AAQAMAAYkAgIBAQo4DAECIQIAQwACOQEAAAAoCwICADgCBQMqDQMBIwo4BAUIIQIASgAIOQEAACoNAggqDQcJACgIAgorBAAJgAMlAAQAAYAEIgBfKwiABQALKwiABgAMKg4DDCoNCwgAKAgCCCoOCAsqDgoCKg4LByoMBgQgACUlAAR4AIAEDQAAAIAEgAMhAABegAM5AQAAIwEAgAMAAoAHKwGAB4AHAQCAB4AEgAglAAQAAoAKAQCACIAKgAkrAAABgAUBAAABgAkAASUBBAABgAUBAIAFAAKACSsCgAiACSUABAACgAoBAIADgAqACSUABAACgAsBAIAFgAuACiUABAAAgAwNAIAMgAeADRcAgA2ADSEAAHeADQEAgAmADIAOKwGADoALAQCACoAMgA4rAoALgA4BAIAMAAKADCAAbgEAgAqAB4AGIysAGMoYyg==","debug_symbols":"zdrBasJAEMbxd9mzh53Znd1ZX6UUiRolEKJoLBTJuzexSZqi1INVvosYHd3fIf4xS85mnS9P20VRbXZHM387m3K3yupiV7VH52ZmloeiLIvtYvqysd0D+cv8cZ9V3eGxzg61mSdHM5NX6/ZZ5Pbzm6LMzdw7amZXsxyc74c5BDtOk8qN6aipH1ar4yyzb95nhuQfMDxi4mOYgISJSBhFwiQgDFskDCFhGAnjkDAeCYNUYEYqMCMVmJEKzEgFdkgFdkgFdkgFdkgFdi/+aVOgQUOhJQzTQTqNt6/W+DBqJv/few1BaR4/h6O1g0ZdvKNRz8NXq4/0a7rjOCyOx+IIFidgcSIWR7E4CYojFotDWBysKgtWlQWryoJVZcGqsmBVWbCqLFhVDlhVDlhVDlhVDo9XOYkMnBTi1QL+2QvIsxcIz17gTt2IJldct1cgjuqGcVZKd84K9jRe/bUnyM+lt00XkcKJEpooEtL2RGQojYPSeCiNQGnCqzV/bSTFCKVRKE1C0ijUdqhCbYcqQ2kclMZDaQRKA9ViBWpx0x59ZIciW5Z5f+/U5lStJrdS1Z/773fa4S8=","brillig_names":["pub_entry_point"],"assert_messages":{"73":"Index out of bounds","66":"Nested call failed!","93":"Stack too deep"}},{"name":"pub_entry_point_twice","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"init_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARwABJAAEAwAkAgQDBCQCBAAFHxgABQAEgEMdAASARIBEKwiAQwABKwiARAACKwiARQADIgANKwQAAYBGOACARgABIgBdKggBBAAAAQIBJAIBAAUqDgUEKggBBgAAAQIBJAIAAAcqDgcGKggBCAAAAQIBJAIAAgkqDgkIJAIEAQkkAgQBCyQCBAINADgLDQwqCAEKABABDAEkAwQBCgAoCgIMKg4LDCQCBAIMADgKDAsqDAsMKg4DDCQCBA0MKggADSoMBA4qDAYPKgwIECoMAREqDAISKgwJEyoMChQqDAUVKgwHFioMBRcqDAcYABAADAAiAGIqBAAAKgwOCyQCBAADACgLAgwAOAwDDSoNDQokAgQBDCQCBAIOADgMDg0qCAELABABDQEkAwQBCwAoCwINKg4MDSQCBAINADgLDQwqDAwNKg4KDSQCBA4NKggADioMBA8qDAYQKgwIESoMARIqDAITKgwJFCoMCxUqDAUWKgwHFyoMBRgqDAcZABAADQAiAGIqBAAAKgwPDAAoDAICADgCAwQqDQQBIyUABHgAgAQNAAAAgASAAyEAAGGAAzkBAAAjIgBdHAwABQ0qCAEFAAABAgEkAgQBDioODgUqCAEPAAABAgEkAgQBESQCBAITADgRExIqCAEQABABEgEkAwQBEAAoEAISKg4REiQCBAISADgQEhEqDBESKg4NEioOEA8kAgEBDSQCBAAQKgwQDCAAeww4DAYBIQIApwABIAB+Kg0FAioNDwMpAgAwZE5y4TGgKbhQRbaBgVhdKDPoSHm5cJFD4fWT8AAAAAAFIQIAhQAIIACDKgwFASAAhyoMCQEgAIchAgCLAAogAIkqDAUGIACNKgwLBiAAjSoIAQUkAgQDBwAQAQcBJAMEAQUAKAUCByoMBwgqDgEIACgIAggqDgYIJgIA1UQbDQAHACgFAggAKAMCCyoNCwoAKAsCCSoIAQskAgQCDAAQAQwBJAMEAQsAKAsCDTY/lQAIAAQACQAKAA0AAQAMAAckAgIBAQo4DAECIQIApQACOQEAACoMCwEjDDgMBgEhAgCqAAE5AQAAACgHAgIqDQICDDgMAgMhAgCvAAM5AQAAJAIEAgMAOAcDAgA4AgwDKg0DASoNBQIqDQ8DACgCAhArBAADgAMlAAQAAYAEIgDHKwiABQARKwiABgASKg4BEioNEQEAKAECASoOAREqDhAFKg4RDwA4DA4BDjgMAQIhAgDFAAI5AQAAKgwBDCAAewEAgAMAAoAHKwGAB4AHAQCAB4AEgAglAAQAAoAKAQCACIAKgAkrAAABgAUBAAABgAkAASUBBAABgAUBAIAFAAKACSsCgAiACSUABAACgAoBAIADgAqACSUABAACgAsBAIAFgAuACiUABAAAgAwNAIAMgAeADRcAgA2ADSEAAN+ADQEAgAmADIAOKwGADoALAQCACoAMgA4rAoALgA4BAIAMAAKADCAA1gEAgAqAB4AGIysAGMoYyg==","debug_symbols":"zZvRaiJBEEX/ZZ596Kqu6qrOryxLMIkJgpgQzcIi/vtOjGPMOrvCjdX4Io7W9TR4Lo49uukeZndvT7fz5ePzqrv5sekWz/fT9fx52R9ttpPu7nW+WMyfbo8f7tL7DclufvUyXb4frtbT13V3Q6WmSTdbPvR3LaX+FR7ni1l3I5m2PycdKRIqSMiQkCOhCoQ4ISFCQoyEMhJCjGDECB43QjkPIS1yEjIk5EioAqGckBAhIUZCGQkJElIkhBiRESMyYkRGjBDECEGMEMQIQYwQxAhBjBDECEGMEMQIQYxQxAhFjFDECEWMUMQIRYzQs0aY8pfQ5HSazQ/j7FQP8+Q6Ms9CvB9nYTpMc6q7Jdn1Lcmvb0n16pZUxptoRQaGJ/1bwEJIiJFQRkKChBQJFSRkSMiRUAVChhhhiBGGGGGIEYYYYYgRhhhhiBGGGGGIEY4Y4YgRjhjhiBGOGOGIEY4Y4YgRjhjhZ42oVdt+JtV0fUui61vS6BvHJQ9L4lLSGYR53Q978k8Ay24/KKV/EA7LKvZNAoUTOJyQwwkSTtBwQgknWDjBwwk1mkDhnabwTlN4pym80xTeaQrvNIV3msI7TeGd5gu4RIUGBBX+3BAq+oEol0BIOSCOThwGhIUjxnd8ub9sMiA82xmE9ydKw3shRl+mdwxuwMgNGNKAoQ0YpQHDGjC8AaPGM8Y35i/MaNBzbdBzbdBzbdBzbdBzbdBzbdBzbdBzbdDz0qDn41cJuKoOjFrsNMVQKkMpgVIWfkJXPB5RwxGW4hEUj+B4RPxXBJN4hMYjSjwivt0W326Lb7fHt9sv0u7/ful0jkfkeITEIzQeEb+N4fHbGO7xiBqOqCkeEd/uGt/uGt/uGt/uGt/uGtzubX/0a/o6n94tZvsf/T++Le+P/gOw/v3y8Uw//Ac=","brillig_names":["pub_entry_point_twice"],"assert_messages":{"96":"Stack too deep","164":"Nested call failed!","169":"Index out of bounds","174":"Array index out of bounds","196":"attempt to add with overflow"}},{"name":"private_call","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZlhTyIxEIb/y37mQ6cznZn6Vy4Xg4qGhKBRvORi/O9XkJYFym7mYD3P7BdDZZ7pu2/boe2+NXezm9eH6/ny/vGlufrx1iweb6er+eMytd4aoM3/Xp6my3XzZTV9XjVXwNFNmtnyLn0U594nzf18MWuuCOF9chTtRWUb7dXFEg1ci0Zi3UZjIOiJBnAMWQo4oRKPPtTiyfscTq3sSNXkPpbcou3gn5MGwmjNKWt4tOaUNfLlrYla5Kdn6bNGlXN4dOEsa3S05pQ1cbTmhDXenW8NRsrlAKPI7mGVN13A8F34WhcsmIeMhbmnC0CWogg5wl4nFUk+5qqGGPomRCqZIYtJnwU+cYhxNOe0OXQJc8SV30MU1B5z0gQuDwu74GTqWlC4iCDSnaDe0YJUosovdGBHR+uLv6Io+ReimFqiOB6J0q8oKvaJ0tY8rIuKPkuK2OogukpsWsHbWHG8F5vEoPtcMUJ5+Utrp1qP/W/KFsJo4vkm+tHE803ETzaxxB6auBZD5281mTWWWu2pp/aGsnFnbMU62ci5wB0HS8AiR3yPnG95SkmNm+f5YjF/uN67XXPrP/VFDB6Lx57xYI9Vn7NdTGrA5kKv/kuKWbu2njMtxNMnrG4E7Ii3I2hHyI5U14CW0VbSI4TtiNgRtSPRjNR3O90I2BFvR9COkB2pj75SRmLcQ2oVrRS0uFuTmCbaOj0Pm16GTa/npkcOuX63b2G36eOg6ckNmx6GTe+HTY/Dpqdh04dh0/MF0+vRsiIZNr0Om766aqPnskOWwyIbnB0BO+LtCNoRsiPBjrAZ4b9AxI5UJ5enPGE8y+GE4WhGxNkRsCPejqAdITsS7Ajbkerod24IRO1INCPq7AjYEW9H0Iiklt+cyuoVn/LBWdtvjD6O5vW3pd1INCP1s183AnbEG5HUws3ZuWqClLf1EtxhX/VNZSdS3yh2I2BE3lPz1/R5Pr1ZzNZ3A+tvX5e3+aogNVe/nz6+ScF/AA==","brillig_names":["pack_arguments_array_oracle_wrapper","call_private_function_internal","unpack_returns","pack_returns_oracle_wrapper"]},{"name":"enqueue_call_to_pub_entry_point","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"target_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7VfbbsIwDP2XPPMQ27nyKxNCBQqqVBUEZdKE+Pe5HU3LSFVNMHZRX6q6ObGPj2ynOYlVujhu5lmx3h7E9OUk8u0yKbNtwdZJgKq/HXZJUZmHMtmXYgrGy4lIixW/WinPE7HO8lRMFcF5coNG6+wFjU76gAYTQ5My7oImrWAADSANNFRAWhXwhDqGV4gNXHW8k4o6Rx98W9cFzyYC9ChNnzRmlKZPGvvrpfEu0OdchqRxzjRwL/Vd0rhRmj5p/P3SkFdNzZO3tk3WmSoEyu8PAbEQmpvxskkDqYEQzEKrlpHVV0EilNA3rUukhwqCqWDIVxqi5w0GxD8gjratOBaeV/9Iozj94qiHiON0EAcQB8Th7g7JQkvIQ01IP4IQELaEOkd0nBA4TeFId1q5ATwyqPHP7w5uhpX5D0nYH0jC8ygMpV1Xf5cUW4t9lufZZn5105DVg6JDEJDCUEZDn6qN6Kt72ID6chP94dCh7W2367lHZ2c2X5N9lizytCJdrR6LZZMDm+Xb7mOFwe8=","brillig_names":["pack_arguments_array_oracle_wrapper","enqueue_public_function_call_internal"]},{"name":"enqueue_calls_to_child_with_nested_first","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZjhbuIwDMffpZ/5ENtJ7OxVTqcJNjZVQjABO+mE9u6X9pa0QKDyoNvuBB8QAf/+cRwnxt1Vj/PZ6/N9vXxabaq7H7tqsXqYbuvVMo52Fdj2u83LdNkMN9vpelvdgQ9mUs2Xj/EjG/M2qZ7qxby6swRvkyNrZOF3axQTsjX4kjVZL+/W5CwMWAOYkMwhvjDbE7qSvYhP5sG4ztoWxTFkbZa+8c9JBe4WmlOh8bfQnAoNXx4aChbSYgNzt1jx7RQy/hShNAUGTGHC4NzAFECes0fkA+xNUnApyieXyA0lBBiPWd14oqEttpjUwfYS6ANbjOYWnNPBgX8gOI674DB83uWAeAvO6eDQNYLDBnJwmGQgOPHqy4uFzjgGtXHIXsUhK51Dg7sFsbjlo+i8sYc3M7rv6JT/Cqe87Tnlw5FT/B2dKtZuAkpHmsDJkFNsxOVSD4gXJXm4hkNA2DnEdihK4iifUnF26JRiNEr68bPAYVTJ/A+LgC9YRIj1Pt/f7RXfdyqOZut6saif7/e6RtO8UbGYAWZ/AT0dZBuRlokDaBvVYp56SgVFesUnFq7T/9POI6BHUI+QHrF6pFgpJJdg6aesOXOPn0dYj4geCWqkfCecR0CPoB4hPWL1SHn3JZ12CWEPKTXouT8PvQYiJloj78eV53Hl5VJ58qkCU++STfJhVHlrxpWHceVxXHkaV96OK+/GlfdXlJejY2V5XHkZV754art2IRAfXrLO6BHQI6hHSI9YPeL0iFcj/gMI65FicqFNCYOeDxPGBzXCRo+AHkE9QnrE6hGnR7weKTf+5/4QsOiRoEbE6BHQI6hHSInEEX5qD0htD1jcJZefb3L/8WbrZhz+mq7r6WwxbxrX5tfX5UPqY+Nw+/vl7y/R+A8=","brillig_names":["pack_arguments_array_oracle_wrapper","call_private_function_internal","pack_arguments_array_oracle_wrapper","enqueue_public_function_call_internal"]},{"name":"enqueue_calls_to_pub_entry_point","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"target_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"H4sIAAAAAAAA/+2dBXAb1xpGJdmOAw1DmzZNHI6DkiXZUjgNltOmzAY5SQMOOGVwmZmZmZmZmZmZmfl9f6N93myUzOvzVWbOpHfmjFar1dX5966uVrsXwqHFaUwkFOoaWbwcFgXZR1tVEljnPfqXi3Js1yrHutY51rXNsa59jnVdxNjAuu45tuuRY11JjnU9c6zrm2Nd/+w6fwpnH8dmH+PR8kQiU1GWicVjldGydFUqGU0kq8pTsVQsmUrWlKXi8UwqkapIV6UroulYIp6J1SbT8dro4tQ90phXtEmprDqfnj3+f89EcIW5dRSFPlfbD39ml/uFGpf7+5Z7ZLfx3lei5z1FL9E70rjeSwWBfRBtWooNcJhXScRd2fRxdgzlLps+vrLp6Vvu5VvuHSibvnreT/QXA3KUTcRx2fR1eKyXutufMX99YvmWZJddHP8D9XyQGCyGwI7/gQ6P/6F5Pv6H+spmkG95sG95SKBshul5VMREWbZsinx5eo8FgTILOy6zfu7yiubLsT/AcUAeHJdIrivEUodfsHieKsR4tkIsCjWeTAaT64IMh/JbkE3NuzxTW11WnUzkcx8Mi+RnH7j2LIV4FoTc/gB5KREJuTtbSOp5uagQKdjZQtJhZZZ2XJkFyybtK5ty33KFbzkVKJvhej5CjBSj/j1bWK7jSna2EAvlSq7PFuIOv2Cj83S2MPrfs4Wl0oo4WxgO+RWOQzzzdbYwJhJaMgUriaZ+sV3uhNJQfgrLdcwOK4DYQEjMEYcxD4LE7PBLGRu8gmKONi3Fhjjcf30hle/QEMNzGMQzCvGMQTzLIJ5xiGcC4pmEeJZDPCsgnimIZxriORziOQLiORLiOQriORriOQbiORbiOQ7iuRbEczzEcwLEcyLEcxLEczLEcwrEc22I5zoQz3UhnutBPNeHeG4A8dwQ4jkV4rkRxHNjiOc0iOcmEM9NIZ6bQTw3h3huAfHcEuK5FcRza4jnNhDPbSGe20E8t4d47gDxrIR4VkE8qyGeNRDPDMSzFuI5HeI5A+I5E+K5I8RzFsRzNsRzDsRzLsSzDuI5D+I5H+K5AOK5EOJZD/FcBPHcCeK5M8RzF4jnrhDP3SCeu0M894B47gnx3AviuTfEswHiuQ/Ec1+I534Qz/0hngdAPA+EeB4E8TwY4nkIxPNQiOdhEM/DIZ5HQDyPhHgeBfE8GuJ5DMTzWIjncRDP4yGeJ0A8T4R4ngTxPBnieQrE81SI52kQz9MhnmdAPM+EeJ4F8Twb4nkOxPNciOd5EM/zIZ4XQDwvhHheBPG8GOJ5CcTzUojnZRDPyyGeV0A8r4R4XgXxvBrieQ3E81qI53UQz+shnjdAPG+EeN4E8bwZ4nkLxPNWiOdtEM/bIZ53QDzvhHjeBfG8G+J5D8TzXojnfRDP+yGeD0A8H4R4PgTxfBji+QjE81GI52MQz8chnk9APJ+EeD4F8Xwa4vkMxPNZiOdzEM/nIZ4vQDxfhHi+BPF8GeL5CsTzVYjnaxDP1yGeb0A834R4vgXxfBvi+Q7E812I53sQz/chnh9APD+EeH4E8fwY4vkJxPNTiOdnEM/PIZ5fQDy/hHh+BfH8GuL5DcTzW4jndxDP7yGeP0A8f4R4/gTx/Bni+QvE81eI528Qz98hnn9APP+EeP4F8bQMCZ5hiGcE4lkA8SyEeBZBPJtBPIshns0hni0gni0hnq0gnqtAPFtDPNtAPNtCPNtBPNtDPDtAPDtCPDtBPDtDPLtAPFeFeK4G8ewK8Vwd4rkGxLMbxHNNiGd3iGcPiGcJxLMnxLMXxLM3xLMPxLMvxLMfxLM/xHMAxLMU4jkQ4jkI4jkY4jkE4jkU4jkM4hmFeMYgnmV58owEPOPR8kQiU1GWicVjldGydFUqGU0kq8pTsVQsmUrWlKXi8UwqkapIV6UroulYIp6J1SbT8dps3mGHMcdXwpgTkOMxGW76/otVVlVlErWJfJZNgcOYy1fQ8RhtWopVhN3tv0SEEXPKYcylkZWv3kmvhHXtcEhdO2IlrGtHQuraUQ7rnTGQuna0w5jjEcZ3cAykrhgL8RwH8VwL4jke4jkB4jkR4jkJ4jkZ4jkF4rk2xHMdiOe6EM/1IJ7rQzw3gHhuCPGcCvHcCOK5McRzGsRzE4jnphDPzSCem0M8t4B4bgnx3AriuTXEcxuI57YQz+0gnttDPHeAeFZCPKsgntUQzxqIZwbiWQvxnA7xnAHxnAnx3BHiOQviORviOQfiORfiWQfxnAfxnA/xXADxXAjxrId4LoJ47gTx3BniuQvEc1eI524Qz90hnntAPPeEeO4F8dwb4tkA8dwH4rkvxHM/iOf+EM8DIJ4HQjwPgngeDPE8BOJ5KMTzMIjn4RDPIyCeR0I8j4J4Hg3xPAbieSzE8ziI5/EQzxMgnidCPE+CeJ4M8TwF4nkqxPM0iOfpEM8zIJ5n5skzEvBsaj/9vg5jPmsFxRxtWoqdHXa3/0ZHGMfjOZDvzbkQz/MgnudDPC+AeF4I8bwI4nkxxPMSiOelEM/LIJ6XQzyvgHheCfG8CuJ5NcTzGojntRDP6yCe10M8b4B43gjxvAnieTPE8xaI560Qz9sgnrdDPO+AeN4J8bwL4nk3xPMeiOe9EM/7IJ73QzwfgHg+CPF8COL5MMTzEYjnoxDPxyCej0M8n4B4PgnxfAri+TTE8xmI57MQz+cgns9DPF+AeL4I8XwJ4vkyxPMViOerEM/XIJ6vQzzfgHi+CfF8C+L5NsTzHYjnuxDP9yCe70M8P4B4fgjx/Aji+THE8xOI56cQz88gnp9DPL+AeH4J8fwK4vk1xPMbiOe3EM/vIJ7fQzx/gHj+CPH8CeL5M8TzF4jnrxDP3yCev+fJMxLwbGo/6EKHMf8BibnIYcx/QmJu5jDmvyAxFzuM2eQIMTd3GHMYEnMLhzFHIDG3dBhzASTmVg5jLoTEvIrDmIsgMbd2GHMzSMxtHMZcDIm5rcOYm0Nibucw5haQmNs7jLklJOYODmNuBYm5o8OYV4HE3MlhzK0hMXd2GHMbSMxdHMbcFhLzqg5jbgeJeTWHMbeHxNzVYcwdIDGv7jDmjpCY13AYcydIzN0cxtwZEvOaDmPuAom5u8OYV4XE3MNhzKtBYi5xGHNXSMw9Hca8OiTmXg5jXgMSc2+HMXeDxNzHYcxrOozZ7otbm4Afsg0DSsVAMUgMFkPEUDHMPkvERJntD5EQSVEuKkRKpMVwMUKMFKPEaDEmG/84sZYYLyaIiWKSmCymiLXFOmJdsZ5YX2wgNhRTxUZiYzFNbCI2FZuJzcUWYkuxldhabCO2FduJ7cUOolJUiWpRIzKiVkwXM8RMsaOYJWaLOWKuqBPzxHyxQCwU9WKR2EnsLHYRu4rdxO5iD7Gn2EvsLRrEPmJfsZ/YXxwgDhQHiYPFIeJQcZg4XBwhjhRHiaPFMeJYcZw4XpwgThQniZPFKeJUcZo4XZwhzhRnibPFOeJccZ44X1wgLhQXiYvFJeJScZm4XFwhrhRXiavFNeJacZ24XtwgbhQ3iZvFLeJWcZu4Xdwh7hR3ibvFPeJecZ+4XzwgHhQPiYfFI+JR8Zh4XDwhnhRPiafFM+JZ8Zx4XrwgXhQviZfFK+JV8Zp4Xbwh3hRvibfFO+Jd8Z54X3wgPhQfiY/FJ+JT8Zn4XHwhvhRfia/FN+Jb8Z34XvwgfhQ/iZ/FL+JX8Zv4Xfwh/hR/CfuihUVEFIhCUSSaiWLRXLQQLUUrsYpoLdqItqKdaC86iI6ik+gsuohVxWqiq1hdrCG6iTVFd9FDlIieopfoLfqIvqKf6C8GiFIxUAwSg8UQMVQME1ERE2UiLhIiKcpFhUiJtBguRoiRYpQYLcZYWwoxTqwlxosJYqKYJCaLKWJtsY5YV6wn1hcbiA3FVLGR2FhME5uITcVmYnOxhdhSbCW2FtuIbcV2Ynuxg6gUVaJa1IiMqBXTxQwxU+woZonZYo6YK+rEPDFfLBALhc1pb/PF21zsNs+5zSFu83Pb3Nc2r7TN2WzzIdtcwzaPb4Ow+WdtblebN9XmJLX5Pm0uTZun0uaAtPkVbe5CmxfQ5tyz+exsrjibh83mOLP5w2xuLpv3yuaUsvmabC4km2fI5vCx+XFs7hmb18XmTLH5SGyuD5v74mxh8yzYHAY2P4CNvW/j2tuY8TYeu411buOI2xjdNv61jS1t4zbbmMg23rCN5Wvj5NoYtDa+q42dauOS2pifNp6mjVVp40DaGIs2fqGNDWjj7tmYdjZe3N3CxjmzMcRsfC4b+8rGlbIxm2w8JBtryMbxsTFybPwZG9vFxk2xMUlsvA8bS8PGqbAxIGx8BRu7wMYFsD731p/d+opbP2zr42z9h61vrvV7tT6l1l/T+kJaP0Prw2f946zvmfXrsj5T1h/J+vpYPxrro2L9P6xvhfVbsD4B1t7e2rJbO3Frg23tm63tsP1uWptXa09qbTWtHaS1MbT2e9Y2ztqKWdspa0tkJxXW1sTaXlhbBLs3b/eq7d6t3cu0e3t2r8vu/di9ELs3YNfK7dqxXUu1a4t2rc2uPdm1GLs2Yf/V7b+r/Zez/zZ2rm/nvnYuaOdGdq4QWVz1hOy33lJpqDFltUIF2detzZi1obI2RdbGxtqcWBsMa5Ng9+jtnrXdw7V7mnaPz+552T0guydi9wjsmrldQ7ZrqnaN0a652TUouyZj1yjsP7v9h7X/dCWip+gl7JzQzpFsvpd+or8YEFo6FfuWO/mWu2UfK+vrM3Pm1ZfU15VU1tSU7DyzfkZJ3U6ZBbWz6+wn+m+Xf/qenv/wPeFs7KFsLF5qk32cVl9ZPUvvrCupyWSsUvl774R871r+1j3+Ud69/ue8/3vS6+34FtlHb71lZwfK2OzzaNNSrIUvX9f5p6KJ8hahJZNj/3iLUOMXKJ/5F+Qn/6j3ZRrf0Jh/MBbvOAiH8lZO+Y4z3joQW8gXi/fZhfn57EQ48HmhQJyhwOe3DOX1mIqFA5/n+QT3j7fc2tumodEnHHitsGHpOLzXihqWjMOS/bB08m0XPLYivu28ys5+YCZl8/KS9/0uDnzG2Oz6aBOT59Q8m3+RL4Zin4sXYySwfXC5KLCuuy/mv+Pxbet9ToFvnfeZbbPPm/le8967vLwKc+TVLsf2zQJ5FefIy7/Oi9tOHDpnl+2Ewcqvd6gxr+AxVhBasuz9ednJRofs8jz9So1bMH3RnMzc+oXjFiyo3NX/jmDNEQq8luvTC5bxeihg50XiHWmFDUt+5tjs+mgTUkWq8UjzStt/pPlToe91//b9s887hHIni8E79YH/qqdX1K96s/zkn/TyL85P/jl/1f2xeK97x9eEhsZ9OaFhSSdvG3/NO2kZ20z2bTPZt42lYC3v98v16zwh8Jr/uzAx8Jr/l2xS4LWi0NJOViu193lZmtLQ6Os5dgys997r1XBWQ3XNLmfmzl+UWZSZuqhq9szqSYvmVtfPrJs7vnL27GBF5S8IfyoKbBd8X/DUpSDwvDDwvChHvst6f3DdsgrN70+oFL3CWV6l+B/dC3TmeIQBAA==","debug_symbols":"7ZjbbsIwDIbfJddcxHaOvMqEUDmqUlUQh0kT4t2XMpIWSFdNdHSw3lR1+zf5/cmxpR7YbD7ZL8dpvlht2fDtwLLVNNmlq9xFBwbi9Gy7TvIi3O6SzY4NQVk+YPN85m4158cBW6TZnA0FwXFwo0Zt9FmNhtugBhVTk1DmrCYpoEENwBV4K8C1CHpCGdMLRC8XldVJRBdHG9bWpioeDRjIHk0dGtWjqUOj/zwaa4J9l0sTGmOUl1su70JjejR1aOz9aMgKX/NktS6TNarYAvnvbwGxLaQB/5E0ZBu2cC6kKB1pebFJxBJaf3SJZFNBuL6AIV+uiB7XGBCfAI7UJRwNj6t/pB5OPRzRChwjAxxAbIDjTndIFkpDFk6GZBuGgLA0VBnRcUNgJIWRbqQwDXp0Ir++uzdw06zUKyShO0jCulYYSvtU/VemonNece6Hq+Kk/u0YsE8Ap6tOR7yHUw8HWoHT3hggbMNQxx2U6BWSEB0k8f0YcNFkk2ZZuhxf/HDixSVeOYAUmjIquq42+uk3LoDTP67oPJLh2OvqqXdndHR04XuySZNJNi9MF2/3+dTn4MLdx/rrjRN/Ag==","brillig_names":["pack_arguments_array_oracle_wrapper","enqueue_public_function_call_internal"]},{"name":"enqueue_static_call_to_pub_function","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZfdbsIwDIXfJde9iO0kTniVCaECBVWqCoIyaUK8+9KOpmUEqgn2o6k3qKYH+/hLHNqjWGbzw3qWl6vNXkxejqLYLNIq35Q+OgpQzXf7bVrW4b5Kd5WYgHEyEVm59Jcs5SkRq7zIxEQRnJIrNbLlsxqtdEENJqYmZexZTVrBgBpAGmitgGQV9IQ6pleIrVz1spOKJkcXcrPti6eJAD2iuYXGjGhuoeE/j8bZYN/3MoTGWtPKndQPobEjmlto3ONoyKl2z5Nj7pq1pi6B8vtLQLSExG4YJTozUARYY1gG1spdlImYQtcOL5Ee2hL+ZNAc3BiGn1tkxBHPPTw04rmHRz0Jj3Ydnp4+jsdPecgOnSUHjSX9HEtGBkhslB2wBFZTyG/1oB69qF1if23h6tgy/6MN/pU2nH9iClu8mYK+LR/Nd3lR5OvZxXuHrD8ofiAihb8kNPRpzxF99Tc+gOZVJ/r4ocP4c3/6/axOTz58TXd5Oi+y2nR991Au2h58WL1tP+548Ts=","brillig_names":["pack_arguments_array_oracle_wrapper","enqueue_public_function_call_internal"]},{"name":"public_nested_static_call","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["public_nested_static_call"],"assert_messages":{"640":"Array index out of bounds","445":"attempt to add with overflow","390":"attempt to add with overflow","407":"Array index out of bounds","340":"Nested static call failed!","648":"Array index out of bounds","485":"attempt to subtract with overflow","508":"attempt to add with overflow","531":"Array index out of bounds","368":"Array index out of bounds","400":"Array index out of bounds","493":"Array index out of bounds","481":"attempt to subtract with overflow","347":"Index out of bounds","632":"Array index out of bounds","664":"attempt to add with overflow","550":"attempt to add with overflow","451":"Stack too deep"}},{"name":"entry_point","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZnRbuowDIbfpddcxHZix3uVo6OJbWxCQmwCdqQjxLuflJFSILTygaJpggtE4P+cP26SOmVdvUyePt8ep/PX92X18Gtdzd6fx6vp+zy11hX47XfLj/G8bi5X48WqegBWN6om85f0UZzbjKrX6WxSPXiCzehEjRJlp8botFEDl9TkOe7UFDz0qAGcZjmkFzZ6wlDSx8hZri7s1b4YHLWJLbEt/j2qINxTcy41fE/NudTI5akh9ZAHqyL7wUbedhGH70JLXQQfdkwQ39MBkLjcQ/pM8aCLU30ykdUO9mKF2g66K9jxcW9HoccOpEmGWR/Y+eMMIXw/S3h7S+xbllhPLNH3s+S7LTGGHkuK2ZBSK7y6gpYlLwJxfKCtrYRbWhGfty1pZb2sJdScRKLQtzmD47BfvWnIt9tuke8pvDSFck/hpSmMN01hoz1OYW1FLy8OmGMeLAv6nh03NKUWU0vrpLZD7gp2JFBjR7DHzo+sK1PjaTGdzaZvjwfHN1e/UfG+D0hNjpHpqKIisjKpAdsTY3GCMWXvsTXOtAzPl2/dCNgRtCNkR7wdKd7mY3O1o48nCNsRsSPRjqgZKW8B3QjYEbQjZEe8HSlf/egzonqAlHa0ZkPT/ZqkNNHq8DxseBk2fLw0PHG+yVLrZpjD66DhvRs2PAwbHocNT8OG98OGD8OG5yuGjyfLysuw4eOw4YurVpGbClmON9ng7AjYEbQjZEe8HQl2hM0I/wcidqQ4ubA5SyHL8YRhNSPi7AjYEbQjZEe8HQl2hO1I8ep3FgQS7YiakejsCNgRtCNkRFILt6ey8o7v88E5tp/xfx3Ny38jdCNqRspnv24E7AgakdSi7dm5mATB/NxJgjvuq1xUdiLlQrEbASOySc0/48V0/DSb1M8G6l8/58/5UUFqrv5+fP2SxP8A","brillig_names":["pack_arguments_array_oracle_wrapper","call_private_function_internal","unpack_returns","pack_returns_oracle_wrapper"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"3469988399892582431":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"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","debug_symbols":"7Z3dbhtHEoXfRde+6N/q7rzKYhE4iRMIMOwgdhZYGH73pWRxyNUMVWKxmjyl1E0QJ1Ot40/ddfoMOT3f7n778Mvff/x8/+n3z1/ufvrXt7uPn399//X+86fdn759f3f3y1/3Hz/e//Hz8X++Cw//KPXx+i9/vv/08McvX9//9fXupxjyu7sPn357+Le+q//9/uOHu59Kjt///e6u0NklNZ1X8m51bUtPl7a2XFnH49h54thl4th14tg0cew2cew+cewxb2wKE8eOE8eeuC5p4rqkieuSJq5LmrguaeK6pInrkiauyzZxXbaJ67JNXJdt4rpsE9dlm7gu28R12SauyzZxXbaJ67JPXJd94rrsE9dln7gu+8R12Seuyz5xXfaJ67JPXJd94rocE9flmLgux8R1OSauyzFxXY6J63JMXJdj4rocE9flmLguYwgzB48zB08zB88zBy8zB68zB6eZg7eZg/eZg89coXHmCo0zV2icuULjzBUaZ67QOHOFxpkrNM5coXHmCo0zV2iauULTzBWaZq7QNHOFppkrNM1coWnmCk0zV2iauULLxb9QCn08XUzx4Yqnq3f2vHF17iM+XZ1HzMvVqfyQU7HkEJachiWnY8kZUHJqwJITseQkLDkZSw5WV65YXblideWK1ZUrVleuWF2ZsLoyXXllUaT9xekwcupPaq48dSgvF5e6VjOQ1LQApSZCqUlQajKUmgKlRqHf0JGaxKhped9vWgnLtbnRDzUEpaZBqelQagaSmh6g1EQoNQlKTYZSU6DUXN6L48EZUoyXqSEoNQ1KTYdSM5DUXP4VI1U1EUpNglKTodQUKDVQvXhA9eIB1YsHVC8eSL04BaRenAJSL04BqRengNSLU0DqxSkg9eIUkHpxCki9OAWkXpwCVC+OUL04QvXiCNWLI1QvjlC9OEL14gjViyNML9742LFRe7o499XHjinCNO7zpcN0+bOlJxhLOF86jH+cLx3GbM6XDuNM50uHsbHzpcN43vnSYQzyfOl23TTZddNk102zXTfNdt0023XTbNdNs103zXbdNNt102zXTbNdN8123bTYddNi102LXTctdt1U4ZnHm0m366bFrpsWu25a7Lppseum1a6bVrtuWu26abXrpgrPqt5Mul03rXbdtNp102rXTatdNyW7bkp23ZTsuinZddPLT8K/nXS7bkp23ZTs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","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"14336010898202591232":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["public_dispatch"],"assert_messages":{"1018":"Stack too deep","1594":"Array index out of bounds","1012":"attempt to add with overflow","497":"Nested static call failed!","1204":"attempt to add with overflow","875":"Nested static call failed!","1512":"attempt to add with overflow","357":"Nested call failed!","1378":"attempt to add with overflow","1177":"Index out of bounds","1107":"attempt to add with overflow","1357":"Array index out of bounds","1610":"Array index out of bounds","967":"Array index out of bounds","1470":"attempt to add with overflow","1336":"attempt to add with overflow","1400":"attempt to add with overflow","1455":"Array index out of bounds","1129":"attempt to add with overflow","1382":"Array index out of bounds","1443":"attempt to subtract with overflow","1245":"attempt to add with overflow","1626":"attempt to add with overflow","1111":"Array index out of bounds","974":"Array index out of bounds","1093":"attempt to add with overflow","1346":"attempt to add with overflow","1602":"Array index out of bounds","1325":"Array index out of bounds","1389":"Array index out of bounds","1447":"attempt to subtract with overflow","292":"Nested call failed!","1118":"Array index out of bounds","1182":"Array index out of bounds","1368":"attempt to add with overflow","149":"Nested call failed!","1301":"attempt to add with overflow","1493":"Array index out of bounds","1350":"Array index out of bounds"}},{"name":"private_nested_static_call","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZndTuMwEIXfJddceH48Y/MqqxUqUFClqiAoK60Q775uwSZtnUSzbbqwyk1Vt/ONj0+cie28Nrfz65f7q8Xq7uG5ufzx2iwfbmbrxcMqtV4b4O1vz4+z1ab5vJ49rZtLkOgumvnqNn1V594umrvFct5cMsHbxUE0atCPaAwulmiQWjSxhI9o8gwD0QBOIEsBp1ziCX0tnhFzOLeyE1eTYyy5NbSDf1404CdruqyRyZoua/TLWxNDkZ/GMmRNCJLDo/NHWRMma7qsiZM1HdagO94aipzLAUXVz8EG2XYB43eBtS6UJI9cGcJAF8AgVMoUBN7ppCIJY65qRH5oQqSSiWW8TojOVzORvoE5Xj/NUTjj/OfJnG5z/GROtzlyEnMiF3OQYMCcVPrKYFvJI2wF6SkEYSm06fvg1YL0cCt1yovjg8ocvqKo+C9ECbdESdwXRe4rioIhUQJxQFTEvLaJ1OogukpsuoNzYic7sRsxeF4xyiVxa49Tj/02ZYtoMvF4E3ky8XgT/ZlNLLH7Jm7EnODMRSRk6aI4VHt92fIJtWKdbuWc4JxD1FORozgg57/c36bG9dNiuVzcX+2cy7rNR/1xAkjFYxTaW2PVq2cfkxqwPQqurjmEsvbQGme6Ebv35v0I2BG0I2RH2I5U60MoVztwOEDEjqgdCXYkmpH6erAfATuCdoTsCNuR+tUPebsUYtxBahWtFLTYOm5JE62z3p8uvY6bPhybnsTn+t0+v/9IH0dNz27c9DBuehw3PY2bnsdN78dNLydMHw5uK9Zx04dx01fv2ohSVsi6X2S9syNgR9COkB1hO+LtiJgR+QtE7Uh1ciHnCYOi+xNGohlRZ0fAjqAdITvCdsTbEbEj1avfuyDQYEeiGQnOjoAdQTtCRiS1cLsrq1d8zhvn0H7X+L41r79n70eiGanv/foRsCNoRFKLtnvn+rF+eWep3u33VV9U9iL1hWI/AkbkLTV/zZ4Ws+vlfHM2sPn3ZXWTjwpSc/378f2fFPwH","brillig_names":["pack_arguments_array_oracle_wrapper","call_private_function_internal","unpack_returns","pack_returns_oracle_wrapper"]},{"name":"enqueue_call_to_child_twice","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"target_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZjZbsIwEEX/xc88eBZv/EpVobAqUhQQS6UK8e91UuIEcBpVpKWieUE2ubHvnMyMoxzFfDE9rCZpvlzvxPjlKLL1LNmn69zPjgK4/G+3SfJiutsn270Yg3ZyJBb53A+NlKeRWKbZQoyZ4DS6UaOx5qxGK11Qg46pibU9q0kxdKgBpIbKCkjDQU+oYnpGrOTcWJ04uji6sLaxTfHrSIAa0LSh0QOaNjTmz6NxNtj3sXShsVZXcifVXWjsgKYNjbsfDTmucp6cMXWwVhdboPz5LSC2BVN4CExOd2zhXSiuHRl1sUnEErqqdIlUV0L4vqCq/PFjA7/3iBEHOO1waIDTDod7gWNVgAOIHXB8dYdgoTbkoDSk+jAEhLWhxhEdNwRWUTjSrWLboUcvqtb3Yws3zUo/QxDmAUE4/44UUrvM/itT0XOeORyurPD/FrMb4LTCIdkLnP46HUEfhh7cJAifIQh6QBBfdzo/m27TLEtXk4tvKrL4iUMHpPC6jZqus42+e4+fQPkZJ9pyVSh706x6X6OvJz99S7ZpMs0Wheni6iGfVTH46f5983nFiz8A","brillig_names":["pack_arguments_array_oracle_wrapper","enqueue_public_function_call_internal"]},{"name":"public_static_call","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARwABJAAEAwAkAgQDBCQCBAAFHxgABQAEgEMdAASARIBEKwiAQwABKwiARAACJQIEgEUAAyQCBAEFKggBBCQCBAIGABABBgEkAwQBBAAoBAIGKwQAA4ADKwQABoAEKwQABYAFIgAYKgwEAyIAIysEAAGARjgAgEYAASUABAAAgAcNAIAHgAWACBcAgAiACCEAACKACAEAgAOAB4AJKwGACYAGAQCABIAHgAkrAoAGgAkBAIAHAAKAByAAGSMiAIkkAgQBBwYoBwIFJAIEAgkAOAcJCCoIAQYAEAEIASQDBAEGACgGAggqDgcIJAIEAgkAOAYJCAAoAwIJKwQACYADKwQACIAEKwQAB4AFIgAYHAwAAgMqCAECAAABAgEkAgQBByoOBwIqCAEIAAABAgEkAgQBCiQCBAIMADgKDAsqCAEJABABCwEkAwQBCQAoCQILKg4KCyQCBAILADgJCwoqDAoLKg4DCyoOCQgkAgQAAyoMAwQgAEsKOAQDBSECAG0ABSAATioNAgQqDQgCKggBBSQCBAMGABABBgEkAwQBBQAoBQIGKgwGBykCADBkTnLhMaApuFBFtoGBWF0oM+hIeblwkUPh9ZPwAAAAAAgqDggHACgHAgcqDggHJgIA1UQbDQAGACgFAgcAKAICCyoNCwoAKAsCCSoIAQskAgQCDAAQAQwBJAMEAQsAKAsCDTc/lQAHAAEACQAKAA0AAQAMAAYkAgIBAQo4DAECIQIAaQACOQEAAAAoCwICADgCAwQqDQQBIwo4BAMFIQIAcAAFOQEAAAAoBgIJKg0JCQw4AwkKIQIAdQAKOQEAACQCBAIKADgGCgkAOAkDCioNCgUqDQIJKg0ICgAoCQILKwQACoADJQAEAAGABCIAjisIgAUADCsIgAYADSoOBQ0qDQwFACgFAgUqDgUMKg4LAioODAgqDAcEIABLJQAEeACABA0AAACABIADIQAAjYADOQEAACMBAIADAAKABysBgAeABwEAgAeABIAIJQAEAAKACgEAgAiACoAJKwAAAYAFAQAAAYAJAAElAQQAAYAFAQCABQACgAkrAoAIgAklAAQAAoAKAQCAA4AKgAklAAQAAoALAQCABYALgAolAAQAAIAMDQCADIAHgA0XAIANgA0hAACmgA0BAIAJgAyADisBgA6ACwEAgAqADIAOKwKAC4AOAQCADAACgAwgAJ0BAIAKgAeABiMrABjKGMo=","debug_symbols":"zZrRbuIwEEX/xc88eMbj8Qy/slpVoYUqUhQqoCutEP++gRJot9UieVF6XxCGufZ5mBzFTvbhabl4fX5o+9V6G+Y/9qFbPza7dt0Po/1hFhabtuva54f3P4d4/Eh6qt++NP1xuN01m12YGynNwrJ/On4tMsywartlmEuiw89ZSKUmZDUhrwhJrAlRTYhrQqkmJDWhXBOq6Qip6Qip6Qip6Yhc0xG5piPy1x0R2cdQLOVDaPapOqUUz9UpZb1Uk+Uvqotdp7ZLLbOccNI9cNguOPp/OIKFk7FwFAunYOEYFo5D4WjEwiEsHMbCwbKyYllZsaysWFZWLCsrlpUVy8oFy8oFy8pl8gt9uHcf5ybl68275hOPTc8jeuHR+DePY/HYPbpZREaebHaDxzTnce5C/KH6CERoQIwGlNCABA0oowEpGlBBAzI0IAcDcjRTO5qpHc3UjmZqRzO1o5na0UztaKZ2NFM7mqkpoqma4j1crXHcSCQl+7wGT7BGmmANmWCNm97jfGsN4mJp3Nmxkd/oERbiczkL03XnHv2NSQGZCiCTYx1xEEU0IEIDYjSghAYkaEBgB4lEigZU0IAMDQjN1IxmakYzNaOZmr/B1P86sCcWNKCMBqRoQAUNCOypGDHYYzFKEQ2I0IAYDQjN1AnK1Idh9KvZtM2iW55fIV+99o/v3ijf/X55+2co/gM=","brillig_names":["public_static_call"],"assert_messages":{"104":"Nested static call failed!","111":"Index out of bounds","116":"Array index out of bounds","140":"Stack too deep"}}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"fields":[{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"fields":[{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Child"}},{"name":"fields","value":{"fields":[{"name":"current_value","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"a_map_with_private_values","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"Parent::private_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::private_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}}],"kind":"struct","path":"Parent::entry_point_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::entry_point_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"Parent::private_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::private_static_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"Parent::enqueue_static_nested_call_to_pub_function_parameters"}}],"kind":"struct","path":"Parent::enqueue_static_nested_call_to_pub_function_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_value","type":{"kind":"field"}}],"kind":"struct","path":"Parent::enqueue_call_to_child_parameters"}}],"kind":"struct","path":"Parent::enqueue_call_to_child_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"init_value","type":{"kind":"field"}}],"kind":"struct","path":"Parent::pub_entry_point_twice_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::pub_entry_point_twice_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_value","type":{"kind":"field"}}],"kind":"struct","path":"Parent::enqueue_call_to_pub_entry_point_parameters"}}],"kind":"struct","path":"Parent::enqueue_call_to_pub_entry_point_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_value","type":{"kind":"field"}}],"kind":"struct","path":"Parent::enqueue_calls_to_pub_entry_point_parameters"}}],"kind":"struct","path":"Parent::enqueue_calls_to_pub_entry_point_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_value","type":{"kind":"field"}}],"kind":"struct","path":"Parent::enqueue_call_to_child_twice_parameters"}}],"kind":"struct","path":"Parent::enqueue_call_to_child_twice_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"Parent::private_nested_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::private_nested_static_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"Parent::public_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::public_static_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"Parent::enqueue_static_call_to_pub_function_parameters"}}],"kind":"struct","path":"Parent::enqueue_static_call_to_pub_function_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}}],"kind":"struct","path":"Parent::enqueue_calls_to_child_with_nested_first_parameters"}}],"kind":"struct","path":"Parent::enqueue_calls_to_child_with_nested_first_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"init_value","type":{"kind":"field"}}],"kind":"struct","path":"Parent::pub_entry_point_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::pub_entry_point_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"Parent::public_nested_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::public_nested_static_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}}],"kind":"struct","path":"Parent::enqueue_calls_to_child_with_nested_last_parameters"}}],"kind":"struct","path":"Parent::enqueue_calls_to_child_with_nested_last_abi"}]}},"file_map":{"105":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"106":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"107":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_returns_oracle_wrapper(returns) };\n}\n\npub unconstrained fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\npub unconstrained fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"109":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}},\n};\n\nuse dep::protocol_types::{\n    hash::{\n        compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n        compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    }, utils::arr_copy_slice,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash =\n                compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"161":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n    }, point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice},\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER,\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"178":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\nuse crate::{\n    oracle::{\n        keys::get_public_keys_and_partial_address,\n        key_validation_request::get_key_validation_request,\n    }, keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) =\n        unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    hinted_canonical_public_keys\n}\n"},"185":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Serialize<N>,\n    {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N],\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"186":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n        key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n        call_private_function::call_private_function_internal, header::get_header_at,\n        logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext, function_selector::FunctionSelector,\n        max_block_number::MaxBlockNumber,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n        nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash},\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL,\n        MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR,\n    }, header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests: BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator {\n                request,\n                sk_app_generator: sk_generators[key_index],\n            };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(\n        &mut self,\n        note_hash_counter: u32,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context,\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        let call_request = PublicCallRequest { call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.public_teardown_call_request = PublicCallRequest { call_context, args_hash, counter };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"},"190":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n    packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe { unpack_returns(self.packed_returns) };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"209":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"},"224":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"234":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{\n        decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI,\n    };\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"284":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: u32,\n) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"286":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"},"305":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"312":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, public_keys_hash::PublicKeysHash,\n        salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils,\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [pub_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        ))\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        functino_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys_hash: PublicKeysHash,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            functino_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys_hash, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"325":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash}, note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n        MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX,\n    }, merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), unique_note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256(\n            [log_hash.contract_address.to_field(), log_hash.log_hash.value],\n        )\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n            0,\n        ))\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk<let N: u32>(\n    _vk: VerificationKey<N>,\n) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"376":{"path":"/usr/src/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n        traits::Serialize, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n    }, macros::notes::note,\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    }, oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n"},"431":{"path":"/usr/src/noir-projects/noir-contracts/contracts/parent_contract/src/main.nr","source":"// A contract used along with `Child` contract to test nested calls.\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract Parent {\n    use dep::aztec::prelude::{AztecAddress, FunctionSelector};\n    use dep::aztec::{context::gas::GasOpts, macros::functions::{private, public}};\n    // Private function to call another private function in the target_contract using the provided selector\n    #[private]\n    fn entry_point(target_contract: AztecAddress, target_selector: FunctionSelector) -> Field {\n        // Call the target private function\n        context.call_private_function(target_contract, target_selector, [0]).unpack_into()\n    }\n    // Public function to directly call another public function to the target_contract using the selector and value provided\n    #[public]\n    fn pub_entry_point(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        init_value: Field,\n    ) -> Field {\n        context\n            .call_public_function(\n                target_contract,\n                target_selector,\n                [init_value].as_slice(),\n                GasOpts::default(),\n            )\n            .deserialize_into()\n    }\n    // Same as pub_entry_point, but calls the target contract twice, using the return value from the first invocation as the argument for the second.\n    #[public]\n    fn pub_entry_point_twice(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        init_value: Field,\n    ) -> Field {\n        let return_value: Field = context\n            .call_public_function(\n                target_contract,\n                target_selector,\n                [init_value].as_slice(),\n                GasOpts::default(),\n            )\n            .deserialize_into();\n        context\n            .call_public_function(\n                target_contract,\n                target_selector,\n                [return_value].as_slice(),\n                GasOpts::default(),\n            )\n            .deserialize_into()\n    }\n    // Private function to enqueue a call to the target_contract address using the selector and argument provided\n    #[private]\n    fn enqueue_call_to_child(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        target_value: Field,\n    ) {\n        context.call_public_function(target_contract, target_selector, [target_value]);\n    }\n    // Private function that enqueues two calls to a child contract:\n    // - one through a nested call to enqueue_call_to_child with value 10,\n    // - followed by one issued directly from this function with value 20.\n    #[private]\n    fn enqueue_calls_to_child_with_nested_first(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n    ) {\n        let enqueue_call_to_child_selector = comptime {\n            FunctionSelector::from_signature(\"enqueue_call_to_child((Field),(u32),Field)\")\n        };\n        let _ret = context.call_private_function(\n            context.this_address(),\n            enqueue_call_to_child_selector,\n            [target_contract.to_field(), target_selector.to_field(), 10],\n        );\n        context.call_public_function(target_contract, target_selector, [20]);\n    }\n    // Private function that enqueues two calls to a child contract:\n    // - one issued directly from this function with value 20,\n    // - followed by one through a nested call to enqueue_call_to_child with value 10.\n    #[private]\n    fn enqueue_calls_to_child_with_nested_last(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n    ) {\n        context.call_public_function(target_contract, target_selector, [20]);\n        let enqueue_call_to_child_selector = comptime {\n            FunctionSelector::from_signature(\"enqueue_call_to_child((Field),(u32),Field)\")\n        };\n        let _ret = context.call_private_function(\n            context.this_address(),\n            enqueue_call_to_child_selector,\n            [target_contract.to_field(), target_selector.to_field(), 10],\n        );\n    }\n    // Private function to enqueue a call to the target_contract address using the selector and argument provided\n    #[private]\n    fn enqueue_call_to_child_twice(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        target_value: Field,\n    ) {\n        // Enqueue the first public call\n        context.call_public_function(target_contract, target_selector, [target_value]);\n        // Enqueue the second public call\n        context.call_public_function(target_contract, target_selector, [target_value + 1]);\n    }\n    // Private function to enqueue a call to the pub_entry_point function of this same contract, passing the target arguments provided\n    #[private]\n    fn enqueue_call_to_pub_entry_point(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        target_value: Field,\n    ) {\n        let pub_entry_point_selector =\n            comptime { FunctionSelector::from_signature(\"pub_entry_point((Field),(u32),Field)\") };\n        let this_address = context.this_address();\n        let _void = context.call_public_function(\n            this_address,\n            pub_entry_point_selector,\n            [target_contract.to_field(), target_selector.to_field(), target_value],\n        );\n    }\n    // Private function to enqueue two calls to the pub_entry_point function of this same contract, passing the target arguments provided\n    #[private]\n    fn enqueue_calls_to_pub_entry_point(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        target_value: Field,\n    ) {\n        let pub_entry_point_selector =\n            comptime { FunctionSelector::from_signature(\"pub_entry_point((Field),(u32),Field)\") };\n        let this_address = context.this_address();\n        context.call_public_function(\n            this_address,\n            pub_entry_point_selector,\n            [target_contract.to_field(), target_selector.to_field(), target_value],\n        );\n        context.call_public_function(\n            this_address,\n            pub_entry_point_selector,\n            [target_contract.to_field(), target_selector.to_field(), target_value + 1],\n        );\n    }\n    #[private]\n    fn private_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 2],\n    ) -> Field {\n        // Call the target private function\n        context.static_call_private_function(target_contract, target_selector, args).unpack_into()\n    }\n    #[private]\n    fn private_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 2],\n    ) -> Field {\n        // Call the target private function\n        context.call_private_function(target_contract, target_selector, args).unpack_into()\n    }\n    // Private function to set a static context and verify correct propagation for nested private calls\n    #[private]\n    fn private_nested_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 2],\n    ) -> Field {\n        // Call the target private function statically\n        let private_call_selector =\n            FunctionSelector::from_signature(\"private_call((Field),(u32),[Field;2])\");\n        let this_address = context.this_address();\n        let return_value: Field = context\n            .static_call_private_function(\n                this_address,\n                private_call_selector,\n                [target_contract.to_field(), target_selector.to_field(), args[0], args[1]],\n            )\n            .unpack_into();\n        // Copy the return value from the call to this function's return values\n        return_value\n    }\n    // Public function to directly call another public function to the target_contract using the selector and value provided\n    #[public]\n    fn public_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1],\n    ) -> Field {\n        context\n            .static_call_public_function(\n                target_contract,\n                target_selector,\n                args.as_slice(),\n                GasOpts::default(),\n            )\n            .deserialize_into()\n    }\n    // Public function to set a static context and verify correct propagation for nested public calls\n    #[public]\n    fn public_nested_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1],\n    ) -> Field {\n        // Call the target public function through the pub entrypoint statically\n        let pub_entry_point_selector =\n            FunctionSelector::from_signature(\"pub_entry_point((Field),(u32),Field)\");\n        let this_address = context.this_address();\n        context\n            .static_call_public_function(\n                this_address,\n                pub_entry_point_selector,\n                [target_contract.to_field(), target_selector.to_field(), args[0]].as_slice(),\n                GasOpts::default(),\n            )\n            .deserialize_into()\n    }\n    // Private function to enqueue a static call to the pub_entry_point function of another contract, passing the target arguments provided\n    #[private]\n    fn enqueue_static_nested_call_to_pub_function(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1],\n    ) {\n        // Call the target public function through the pub entrypoint statically\n        let pub_entry_point_selector =\n            FunctionSelector::from_signature(\"pub_entry_point((Field),(u32),Field)\");\n        let this_address = context.this_address();\n        context.static_call_public_function(\n            this_address,\n            pub_entry_point_selector,\n            [target_contract.to_field(), target_selector.to_field(), args[0]],\n        );\n    }\n    // Private function to enqueue a static call to the pub_entry_point function of another contract, passing the target arguments provided\n    #[private]\n    fn enqueue_static_call_to_pub_function(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1],\n    ) {\n        // Call the target private function\n        context.static_call_public_function(target_contract, target_selector, args);\n    }\n    use dep::aztec::test::helpers::{cheatcodes, test_environment::TestEnvironment};\n    use dep::aztec::protocol_types::storage::map::derive_storage_slot_in_map;\n    use dep::aztec::note::note_getter::{MAX_NOTES_PER_PAGE, view_notes};\n    use dep::aztec::note::note_viewer_options::NoteViewerOptions;\n    use dep::child_contract::Child;\n    use dep::value_note::value_note::ValueNote;\n    #[test]\n    unconstrained fn test_private_call() {\n        // Setup env, generate keys\n        let mut env = TestEnvironment::new();\n        let owner = env.create_account();\n        // Deploy parent contract\n        let parent_contract = env.deploy_self(\"Parent\").without_initializer();\n        let parent_contract_address = parent_contract.to_address();\n        // Deploy child contract\n        let child_contract = env.deploy(\"./@child_contract\", \"Child\").without_initializer();\n        let child_contract_address = child_contract.to_address();\n        cheatcodes::advance_blocks_by(1);\n        // Set value in child through parent\n        let value_to_set = 7;\n        let result = Parent::at(parent_contract_address)\n            .private_call(\n                child_contract_address,\n                comptime { FunctionSelector::from_signature(\"private_set_value(Field,(Field))\") },\n                [value_to_set, owner.to_field()],\n            )\n            .call(&mut env.private());\n        assert(result == value_to_set);\n        // Read the stored value in the note. We have to change the contract address to the child contract in order to read its notes\n        env.impersonate(child_contract_address);\n        let counter_slot = Child::storage_layout().a_map_with_private_values.slot;\n        let owner_slot = derive_storage_slot_in_map(counter_slot, owner);\n        let mut options = NoteViewerOptions::new();\n        let notes: BoundedVec<ValueNote, MAX_NOTES_PER_PAGE> = view_notes(owner_slot, options);\n        let note_value = notes.get(0).value;\n        assert(note_value == value_to_set);\n        assert(note_value == result);\n        // Get value from child through parent\n        let read_result = Parent::at(parent_contract_address)\n            .private_call(\n                child_contract_address,\n                comptime { FunctionSelector::from_signature(\"private_get_value(Field,(Field))\") },\n                [7, owner.to_field()],\n            )\n            .call(&mut env.private());\n        assert(note_value == read_result);\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"91":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_oracle_wrapper(args) };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_array_oracle_wrapper(args) };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"93":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{\n    KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"}}}