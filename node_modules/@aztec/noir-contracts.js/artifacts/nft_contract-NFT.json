{"transpiled":true,"noir_version":"0.36.0+1094f036be7b102252a3a5c0d4b8c621779cf4bd-x8664","name":"NFT","functions":[{"name":"constructor","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"error_types":{},"parameters":[{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"name","type":{"kind":"string","length":31},"visibility":"private"},{"name":"symbol","type":{"kind":"string","length":31},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["constructor"],"assert_messages":{"637":"attempt to add with overflow","698":"Stack too deep","311":"attempt to add with overflow","692":"attempt to add with overflow","1073":"Array index out of bounds","619":"Array index out of bounds","875":"Array index out of bounds","293":"Array index out of bounds","933":"attempt to add with overflow","918":"Array index out of bounds","909":"attempt to subtract with overflow","772":"Array index out of bounds","1089":"Array index out of bounds","1016":"Array index out of bounds","300":"Array index out of bounds","675":"Array index out of bounds","669":"attempt to add with overflow","471":"Initializer address is not the contract deployer","791":"attempt to add with overflow","465":"Initialization hash does not match","913":"attempt to subtract with overflow","1105":"attempt to add with overflow","1081":"Array index out of bounds","179":"attempt to add with overflow","883":"attempt to add with overflow","289":"attempt to add with overflow","545":"Storage slot 0 not allowed. Storage slots must start from 1.","475":"invalid admin","652":"Array index out of bounds","966":"SharedImmutable already initialized","1027":"attempt to add with overflow"}},{"name":"_finalize_transfer_to_private_unsafe","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"hiding_point_slot","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["_finalize_transfer_to_private_unsafe"],"assert_messages":{"128":"Storage slot 0 not allowed. Storage slots must start from 1.","29":"Not initialized","570":"Stack too deep","701":"Array index out of bounds","468":"attempt to add with overflow","564":"attempt to add with overflow","494":"Array index out of bounds","622":"Array index out of bounds","456":"Array index out of bounds","197":"transfer not prepared","34":"Function _finalize_transfer_to_private_unsafe can only be called internally","546":"Array index out of bounds","444":"attempt to add with overflow","153":"invalid NFT owner","476":"Array index out of bounds","505":"attempt to add with overflow","400":"Array index out of bounds","630":"Array index out of bounds","720":"attempt to add with overflow","484":"attempt to add with overflow","449":"Array index out of bounds","414":"Array index out of bounds","516":"Array index out of bounds","408":"attempt to add with overflow","437":"attempt to add with overflow","527":"attempt to add with overflow","614":"Array index out of bounds","646":"attempt to add with overflow"}},{"name":"cancel_authwit","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZbdboMwDIXfJddc2M6f01eZpoq2tEJCtAI6aUJ992UdAbYFcYE2bSpcxcknJ+fYlmjFIdtdT9u8PJ5rsXlqRXHep01+Ln3UCpT3vfqSlu9h3aRVIzZoHCQiKw9+aQFuiTjmRSY2iviWfKPJsu1oYnA9jQYjtFSGO1pqhTM0IriAo/+o5yXpGM9sAu5AD7SKJifX57Y8hp8TgWq1ZsoavVozZY1ZrZmyxi63RjqFQayzdhDL5n4F//wVbvkVSFoFmnhUYI6VzOk+tzPw+UGR5kHWFLrHVw+/CiD47wIwKgANYN98RtPckAFg6GwCVLLnrYwpBqPDUPq1xd+bG6IH0ysfTK+a0Gto0MtqRq9mCLhmdIuHTP+5R/loV+VFkZ+2439Yv/2SVnm6K7IuPF7L/ei0eb18nPgUbw==","brillig_names":[]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"14336010898202591232":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"2560":"Stack too deep","3328":"attempt to add with overflow","4285":"Array index out of bounds","3438":"Storage slot 0 not allowed. Storage slots must start from 1.","2658":"Array index out of bounds","4383":"attempt to add with overflow","2378":"attempt to add with overflow","3524":"attempt to add with overflow","2689":"attempt to add with overflow","3634":"Array index out of bounds","3890":"attempt to add with overflow","3500":"attempt to subtract with overflow","2409":"attempt to add with overflow","294":"Array index out of bounds","2531":"attempt to add with overflow","3744":"attempt to add with overflow","1117":"Function public_get_symbol can only be called statically","4622":"attempt to add with overflow","1605":"invalid owner","3452":"Storage slot 0 not allowed. Storage slots must start from 1.","3641":"Array index out of bounds","301":"Array index out of bounds","1258":"Function is_minter can only be called statically","423":"invalid admin","4397":"attempt to add with overflow","3550":"SharedImmutable already initialized","1423":"invalid nonce","3404":"attempt to add with overflow","3849":"attempt to add with overflow","1734":"Function _store_point_in_transient_storage_unsafe can only be called internally","710":"caller is not an admin","4349":"Array index out of bounds","2490":"attempt to add with overflow","2679":"attempt to add with overflow","4605":"Array index out of bounds","4782":"attempt to add with overflow","607":"caller is not an admin","4758":"Array index out of bounds","2387":"attempt to add with overflow","3466":"Storage slot 0 not allowed. Storage slots must start from 1.","2619":"attempt to add with overflow","3320":"Array index out of bounds","3509":"Array index out of bounds","937":"token already exists","2473":"Array index out of bounds","4320":"Array index out of bounds","413":"Initialization hash does not match","4308":"attempt to add with overflow","3217":"Array index out of bounds","3662":"Not initialized","2693":"Array index out of bounds","2370":"Array index out of bounds","3894":"Array index out of bounds","4339":"attempt to add with overflow","3504":"attempt to subtract with overflow","4327":"Array index out of bounds","2535":"Array index out of bounds","3236":"attempt to add with overflow","3748":"Array index out of bounds","4315":"attempt to add with overflow","1688":"attempt to add with overflow","2456":"attempt to add with overflow","1554":"Nested call failed!","4705":"attempt to add with overflow","2700":"Array index out of bounds","4035":"transfer not prepared","3901":"Array index out of bounds","4279":"attempt to add with overflow","884":"caller is not a minter","4401":"Array index out of bounds","2542":"Array index out of bounds","3755":"Array index out of bounds","1061":"Function public_get_name can only be called statically","1561":"Message not authorized by account","4688":"Array index out of bounds","3652":"attempt to add with overflow","312":"attempt to add with overflow","4408":"Array index out of bounds","2415":"Index out of bounds","3616":"attempt to add with overflow","2391":"Array index out of bounds","4750":"Array index out of bounds","2891":"attempt to add with overflow","4360":"attempt to add with overflow","2178":"Function owner_of can only be called statically","831":"zero token ID not supported","2434":"Array index out of bounds","2398":"Array index out of bounds","1173":"Function get_admin can only be called statically","2874":"Array index out of bounds","3386":"Array index out of bounds","3630":"attempt to add with overflow","3429":"Storage slot 0 not allowed. Storage slots must start from 1.","290":"attempt to add with overflow","77":"attempt to add with overflow","3838":"Array index out of bounds","4539":"attempt to add with overflow","3125":"attempt to add with overflow","4271":"Array index out of bounds","2668":"Array index out of bounds","419":"Initializer address is not the contract deployer","2522":"attempt to add with overflow","2711":"attempt to add with overflow","3912":"attempt to add with overflow","2553":"attempt to add with overflow","182":"attempt to add with overflow","2230":"token does not exist","3766":"attempt to add with overflow","4522":"Array index out of bounds","3108":"Array index out of bounds","3876":"attempt to add with overflow","1950":"Function _finalize_transfer_to_private_unsafe can only be called internally","4766":"Array index out of bounds","3986":"invalid NFT owner","3730":"attempt to add with overflow","2060":"Function _finish_transfer_to_public can only be called internally","2505":"Array index out of bounds","4419":"attempt to add with overflow"}},{"name":"transfer_to_private","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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ksie11b0g+xFBONvnx/Wvm+EeQLnwI0Q6ItwY8jr+XUrn2+rbA56GUGf9vEvKqhHNEetwX6F+Q/Rj5vY5z4P9sdN+Hz7GPJ5YZJH63XsbfbXETE7fc2xxkQ0H3yEgMe+rxWS6O3zwVv6WmbRl5pPvQiXb/UfLujf0R+4YIudv0F4dt31bOde0Tx6hi4pPLjaIjzisYvnXruxpM+wS/RpP7Zk2y/cxmDpYy+x/ezXIfu+khgu1xXOQXepsXV43kT9Uj9O38y2Pfj9X7Q97L85Yelbc9u4pe2cJrqWlsyhb/63IAoLcnO6boj2hcvdd4rYarP07S+x7zg6/zv7W9LiF83/zh8/svnfO1/muUs0t3oY12Yfz0vNrW6xWduSv2ZauXk5dz5fj2zsel3GeeNi/XOy++LP8cZSYI4jtV2cO99vO9/wx0RB7nVl25fXB7t97T6Anzu/qK0v0XWafz37dVp0rIrOYfZjdegltpfIs1hjcLnnyvw+d37GJcbA6XnCR3HXgjG2v+ELCl7v4g+85aALkzxe7EPQVsDMRZ8nfIbtfYD/D/OEjzf/kRvzhM/i3nMoYTt27R6T6nWdnSc86708fiHmd+cJ55gsTVtO05bThHGadpymnUSTwmlSJJr2nKa9ROPOEx64bte484QHrts17jzhget2jTtPeOC6XePOEx64bte484QHrts17jzhget2jTtPeOC6XePOEx64bte484QHrts17jzhget2jTtPeOC6XePOEx64bte484QHrts17jzhget2jTtPeOC6XePOEx64bte484QHrts17jzhget2jTtPeOC6XePOEx64bte484QHrts17jzhget2jTtPeOC6XePOEx64bte484QHrts17jzhget2jTtPeOC6XePOEx64bte484QHrts17jzhget2jTtPeOC6XePOEx64bte484QHrts17jzhget2jTtPeOC6XePOEx64bte484QHrts17jzhget2jTtPeOC6XePOEx64bte484QHrts17jzhget2jTtPeOC6XePOEx64bte484QHrts17jzhget2jTtPeOC6XePOEx64bte484QHrts17jzhget2jTtPeOC6XePOEx64bte484QHrts17jzhget2jTtPeOC6XePOEx64bte484QHrts17jzhget2TX6YJ5zX5DRPuH0uZ2Ox5vGw5hoJ9wTmJJv/9oaw+Lxxce4c4lhziNufKzDnv3Vcak7qs2HZOvu+ZZ9D/N/ruSdwnvAIM4mfu9pa0OeuDg/P5r5YD6f913NwbdZr5ue5q8+ZSdbc1YW5Gu37n7VPhnv+21cJFhXMdf+4UVPbjU+fPGviVH9GtwlT/V0mjPTYFn7/4c9x9tc9Hhaoi5DkR3j+e660/i3qw6g3v891Z825n9Ncd15zHXruL2+cL7fm/opwpv94R+cW84rn/uJrsV43wqYT5eQHX+HQOMU5O6++N8YaN37O+ghBTfa5gO3nK9GjxyP2If/OnehxdB/Wc6qN57f2DdFc7NYY5OV24MfH7n0u1zMVtD3HeyarRuN6eTWnEx03lq6muW74In6OO48H3xfV4Gq+WA+nRfVFlc11yxfV92T3JdvvRL7Imh9aNE+j/W9Bvi/Rb2IYHsvaHyempo9pNXnktHH+8VOn2E0P/wIeQUf8i1vtsguKPSeC0/MLgqFqbP47J0NlHdDghioptwyVQyf4eKd/REJkqPharOet/avtnOyxbDsnkMnSpHCaFImmPadpz2mMJSdjJvrxrra25/hjoZ3tOf4PuRTbc/zJxmIyTnplOS5jsU/Iaizlbe1W7hXmunHSqmSu+8dPmuaf5u8xLW3sqPSUaePTp46aML5N6tix9hMYvyH4xf5LSvY80cmK/7f93aaCgn5l+fY22Ubj+RFOitbG+R/4KzMR/K/MOPevzEsvufBXZqz7V6by4v6VOee/Y+7EX5m80fB43L8y3b8y/9uX+1embcmtvzL//fkW87GCh74WL2eornCmf29hQX0VuPUrbHXy2zmZiMHqz9pGIjMfbnuOP2nyfGH0fLrHtkQIXstaynPr/F9TPKMzPyfmjbH6L+5M/8J9hf/ZruK256xtVkCQFyb5d7jtMSdtWA79lhQ8Z/VZXtD2f4Ve6aRcgDYA","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block","attach_len_to_msg_block","build_msg_block","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","pack_arguments_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"public_get_name","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAEceAgAAAh4CAAADMDgAAgADAAQkAgEBAiECABAABDkBAAAeAgoAAiQCAAEDCjgCAwQhAgAVAAQ5AQAAKggBAiQCBAIDABABAwEkAwQBAgAoAgIDKgwDBCQCAAAFKg4FBCoNAgMAKAMCAyoOAwIqCAEDAAABAgEqDgIDJAIEAQIkAgQABCQCAAIFKgwEASAAKAo4AQQGIQIAMQAGIAArKg0DAQAoAQIDADgDBAUqDQUCKgwCASMqDQMGHAwAAQcAOAUHCCwMAAgAByQCBAEJDDgBCQohAgA5AAo5AQAAKwQABoADJQAEAAKABCIATCsIgAUACAAoCAIJADgJAQoqDgcKADgBAgYOOAEGByECAEQABzkBAAAqDggDKgwGASAAKCUABHgAgAQNAAAAgASAAyEAAEuAAzkBAAAjKwGAA4AGCwCABgACgAchAABQgAcgAFIrAIADgAUgAGArAAABgAUBAAABgAQAASUABAAAgAkNAIAJgASAChcAgAqACiEAAF6ACgEAgAOACYALKwGAC4AIAQCABYAJgAsrAoAIgAsBAIAJAAKACSAAVSUBBAABgAUgAGAjKwAYyhjK","debug_symbols":"1ZrdbuIwEIXfxddcjD0/tnmV1aoKLVSRolABXWmFePdNujgFEsVa2m49NwjDcfzFM/bxRDmap/Xq9fmhbjfbvVn+OJpm+1gd6m3btY6nhVnt6qapnx8ufzbQf1h40+9fqrZv7g/V7mCWViIszLp96r56gO4Km7pZmyW5cFqM1JH5LI6eB60NdkKLUZIYo6cLNU+ohYI9q4Wiv1L/XBhrPw5vAV1SA7v/iu8+Ye6jHehtbvKt45jUeKWeovcew1ntfX+9G3r8XHq+pu9HoC8fgb98BPn4COwohY2dZMNGkNSe0I3C5v8VqO8U7ukU7+jk4J5Ok/sAdlmb1moAl9sHPOAwRK9I00ZuKiRCaddgEcyEhDH4pMYQbkPinG581I1PuvFZN77oxve68YNu/KgaH0E3vm7XRd2ui7pdF3W7LpW+dMlSUtNNpdfjl548hDDgo4zwvyF53JAO4kMGv6v1kxje5x4F3uBZM7xohi/9uDC/aLn4PUeGySc/etrFpR8XiN0cfunHBcL4jp9bJxFcSrUIPL5Z3f7ApR8uMvill/QZ/NJL+gx+6SV9Br/0kj6DX7xHz+JL8R49j1+8R8/jl+/Rs/i6XVd0u67odl3R7bqi23VFs+ueuuavaldXq2Z9fmFk89o+Xrw/cvj98vefTvwH","brillig_names":["public_get_name"],"assert_messages":{"56":"Array index out of bounds","74":"Stack too deep","15":"Not initialized","20":"Function public_get_name can only be called statically","67":"attempt to add with overflow"}},{"name":"finalize_transfer_to_private","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"hiding_point_slot","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["finalize_transfer_to_private"],"assert_messages":{"192":"transfer not prepared","541":"Array index out of bounds","439":"attempt to add with overflow","148":"invalid NFT owner","471":"Array index out of bounds","500":"attempt to add with overflow","395":"Array index out of bounds","625":"Array index out of bounds","715":"attempt to add with overflow","479":"attempt to add with overflow","28":"Not initialized","409":"Array index out of bounds","444":"Array index out of bounds","403":"attempt to add with overflow","432":"attempt to add with overflow","511":"Array index out of bounds","522":"attempt to add with overflow","609":"Array index out of bounds","641":"attempt to add with overflow","123":"Storage slot 0 not allowed. Storage slots must start from 1.","696":"Array index out of bounds","565":"Stack too deep","463":"attempt to add with overflow","559":"attempt to add with overflow","489":"Array index out of bounds","617":"Array index out of bounds","451":"Array index out of bounds"}},{"name":"prepare_transfer_to_private","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block","attach_len_to_msg_block","build_msg_block","emit_encrypted_note_log_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"_store_point_in_transient_storage_unsafe","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"slot","type":{"kind":"field"},"visibility":"private"},{"name":"point","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARwABJAAEAwAkAgQEBSQCBAAGHxgABgAFgEMdAAGARoBGKwiAQwABKwiARAACKwiARQADKwiARgAEIgANOACARwAAIgA+HgIAAAYeAgAABzA4AAYABwAIJAIBAQYhAgAUAAg5AQAAHgIBAAYeAgAABwo4BgcIIQIAGQAIOQEAABwMAAQGJAIEAAQkAgQBByQCBAMIKgwEBSAAHww4BQgEIQIAIwAEIAAiIxwMAAUEADgBBAkqCAEEJAIEBAoAEAEKASQDBAEEACgEAgoqDAoLKg4CCwAoCwILKg4DCwAoCwILKg4GCyQCBAMLDDgFCwwhAgA0AAw5AQAAACgEAgsAOAsFDCoNDAotDAAKAAkAOAUHBA44BQQJIQIAPAAJOQEAACoMBAUgAB8lAAR4AIAEDQAAAIAEgAMhAABCgAM5AQAAIysAGMoYyg==","debug_symbols":"zZjtboIwFIbvpb/90dOe0/Z4K8uy4GdICBrFJYvx3gcbZShkZIrs/DFWn7ZP3uob4KxW68Vp+5bmm91RzV/OKtstkyLd5eXofJmpxSHNsnT71v5Y6eoF8Is/7pO8Gh6L5FCoOTjWM7XOV+Vbr3W5wibN1mqOJlxmHZqJapg9NSwE6GEtuwhb9tiiqYd2GKCmHbK/ol9nCuhxedDWRFqTmVTfjZA9Q2MPQ+GDIY60vaL77L23oaa9r9a7sffj2tO1fbVDePoO/OwdjH58B9TNQaBGN/SjI4y0I2dvj83A40Kj/guM+atQNcneMwnvmdTbMaxdDJl14IG8nEaMCWjigbystjHcarWateArHQtj6Gjf6JghHfIcS4NCK5/6+CxNLhSaNCkQdoTc9EKGfxPy0wuRa4QcdYSCNCEWJoRamhBIEzLShKw0IZQmRNKEnDQhaU2N0poapTU1SWtqktbUJK2pSVpTk7Smpn9oaqAfoaFbTAYbb1EYfOeCl5wk/UrISxMK0oRYlNClHL4nhzRZZOv6EebmlC9bTzSLj/33NyX8CQ==","brillig_names":["_store_point_in_transient_storage_unsafe"],"assert_messages":{"24":"Function _store_point_in_transient_storage_unsafe can only be called internally","59":"attempt to add with overflow","51":"Array index out of bounds","65":"Stack too deep","19":"Not initialized"}},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"3469988399892582431":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"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","debug_symbols":"7Z3djhs3EoXfZa59wd8imVdZLAIncYIBDDuInQUWQd59NWOrNTuipkalonRqUjeBHXfRx9+QdXhaavZfd798+OnP3368//Tr5y93P/zrr7uPn39+//X+86fd7/76+93dT3/cf/x4/9uPT//3XXj4T6mP13/5/f2nh99++fr+j693P8Q+3t19+PTL7lej7Op/vf/44e6Hkvrf/353V+jskprOK3l3dG1L3y9tbbuyjsex88Kxy8Kx68KxaeHYbeHYfeHYY93YFBaOHReOvXBd0sJ1SQvXJS1cl7RwXdLCdUkL1yUtXJdt4bpsC9dlW7gu28J12Rauy7ZwXbaF67ItXJdt4bpsC9dlX7gu+8J12Reuy75wXfaF67IvXJd94brsC9dlX7gu+8J1ORauy7FwXY6F63IsXJdj4bocC9flWLgux8J1ORauy7FwXcYQVg4eVw6eVg6eVw5eVg5eVw5OKwdvKwfvKwdfuULjyhUaV67QuHKFxpUrNK5coXHlCo0rV2hcuULjyhUaV67QtHKFppUrNK1coWnlCk0rV2hauULTyhWaVq7QtHKFlot/oBS2iynmuF29s+fJ1bmP+P3qPGLerk7lm5yKJYew5DQsOR1LzoCSUwOWnIglJ2HJyVhysLpyxerKFasrV6yuXLG6csXqyoTVlenKK4si7S9+GG0vpn9Xc+WpQ3m7uNRjNQNJTQtQaiKUmgSlJkOpKVBqFPoNPVGTuPZH4dD9DiPn8E0NQalpUGo6lJqBpKYHKDURSk2CUpOh1BQoNZf34sPFlGK8TA1BqWlQajqUmoGk5vKvGKmqiVBqEpSaDKWmQKmB6sUDqhcPqF48oHrxQOrFKSD14hSQenEKSL04BaRenAJSL04BqRengNSLU0DqxSkg9eIUoHpxhOrFEaoXR6heHKF6cYTqxRGqF0eoXhxhevHk2kZtf3E/+tgxRZjGfb50mC5/tvQEYwnnS4fxj/Olw5jN+dJhnOl86TA2dr50GM87XzqMQZ4v3a6bJrtumuy6abbrptmum2a7bprtumm266bZrptmu26a7bpptuum2a6bFrtuWuy6abHrpsWumyo883gz6XbdtNh102LXTYtdNy123bTaddNq102rXTetdt1U4VnVm0m366bVrptWu25a7bppteumZNdNya6bkl03JbtuevlJ+LeTbtdNya6bkl03Jbtu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","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"transfer_in_public","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["transfer_in_public"],"assert_messages":{"224":"Nested call failed!","477":"Array index out of bounds","553":"Array index out of bounds","343":"Array index out of bounds","471":"attempt to add with overflow","500":"Stack too deep","494":"attempt to add with overflow","747":"Array index out of bounds","325":"Array index out of bounds","354":"attempt to add with overflow","415":"Array index out of bounds","572":"attempt to add with overflow","281":"Storage slot 0 not allowed. Storage slots must start from 1.","333":"attempt to add with overflow","231":"Message not authorized by account","391":"attempt to add with overflow","30":"Not initialized","731":"Array index out of bounds","763":"attempt to add with overflow","373":"Array index out of bounds","306":"invalid owner","437":"attempt to add with overflow","396":"Index out of bounds","41":"invalid nonce","454":"Array index out of bounds","739":"Array index out of bounds"}},{"name":"owner_of","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["owner_of"],"assert_messages":{"288":"Storage slot 0 not allowed. Storage slots must start from 1.","279":"Storage slot 0 not allowed. Storage slots must start from 1.","369":"attempt to add with overflow","302":"Storage slot 0 not allowed. Storage slots must start from 1.","415":"Array index out of bounds","28":"Not initialized","124":"Stack too deep","316":"Storage slot 0 not allowed. Storage slots must start from 1.","447":"attempt to add with overflow","470":"Array index out of bounds","423":"Array index out of bounds","33":"Function owner_of can only be called statically","254":"attempt to add with overflow","79":"token does not exist","236":"Array index out of bounds","431":"Array index out of bounds","358":"Array index out of bounds","489":"attempt to add with overflow"}},{"name":"public_get_symbol","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAEYeAgAAAh4CAAADMDgAAgADAAQkAgEBAiECABAABDkBAAAeAgoAAiQCAAEDCjgCAwQhAgAVAAQ5AQAAKggBAiQCBAIEABABBAEkAwQBAgAoAgIEKgwEBSQCAAAGKg4GBSoNAgQAKAQCBCoOBAIqCAEEAAABAgEqDgIEJAIEAAIkAgQBBSoMAgEgACcKOAECBiECADAABiAAKioNBAEAKAECBAA4BAIFKg0FAyoMAwEjKg0EBhwMAAEHADgDBwgsDAAIAAckAgQBCQw4AQkKIQIAOAAKOQEAACsEAAaAAyUABAACgAQiAEsrCIAFAAgAKAgCCQA4CQEKKg4HCgA4AQUGDjgBBgchAgBDAAc5AQAAKg4IBCoMBgEgACclAAR4AIAEDQAAAIAEgAMhAABKgAM5AQAAIysBgAOABgsAgAYAAoAHIQAAT4AHIABRKwCAA4AFIABfKwAAAYAFAQAAAYAEAAElAAQAAIAJDQCACYAEgAoXAIAKgAohAABdgAoBAIADgAmACysBgAuACAEAgAWACYALKwKACIALAQCACQACgAkgAFQlAQQAAYAFIABfIysAGMoYyg==","debug_symbols":"1ZrbbuIwEIbfxddcjD0H27zKalWFFqpIUaiArrRCvHuTFqccolilJ88Nwsnv+IvHmX9iZW8elovnx7u6Xa23Zv5nb5r1fbWr123X2h9mZrGpm6Z+vDs9bKD/sfCq3z5Vbd/c7qrNzsytRJiZZfvQ/fUA3RVWdbM0c3LhMLtSR+ajOHoetDbYES1GSWKMnk7UPKIWCvaoFor+TP13Zqz9PLwFdEkN7H4U333B3Ec70Nvc5FvHManxTD1G7z2Go9r7/noX9Pi19HxO349A3z4Cf/sI8vkR2FEKGzvJho0gqT2huwqb/yhQ3ync0ine0MnBLZ1G8wABpsgQsM/lAQ84DNEr0rSRGwuJUMoaLIKZkDAGn9QYwmVInNONj7rxSTc+68YX3fheN37QjR9V4yPoxtftuqjbdVG366Ju18XSMw9ZSmq6eNPr8Kn0tU8IAz7KFf4vrH03LAfxIYPfvesnMbzPPQq8wpNmeNYMX3q1k3loi885Mkw++avdLi692iF2U/ilVzuE8R0/95xEcGmpxVPudLO6/YFLr40y+KXXRhn80nckMvil70hk8EvfkcjgF+/R0/jFe/QkvhTv0dP45Xv0JL5u1xXdriu6XVd0u67odl3R7LqHrvmv2tTVolkePxhZPbf3J9+P7P4/vZ3pxC8=","brillig_names":["public_get_symbol"],"assert_messages":{"66":"attempt to add with overflow","55":"Array index out of bounds","20":"Function public_get_symbol can only be called statically","15":"Not initialized","73":"Stack too deep"}},{"name":"is_minter","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["is_minter"],"assert_messages":{"16":"Not initialized","163":"attempt to add with overflow","250":"Array index out of bounds","266":"Array index out of bounds","282":"attempt to add with overflow","206":"Stack too deep","152":"Array index out of bounds","21":"Function is_minter can only be called statically","117":"Storage slot 0 not allowed. Storage slots must start from 1.","200":"attempt to add with overflow","258":"Array index out of bounds","345":"attempt to add with overflow","326":"Array index out of bounds","182":"Array index out of bounds"}},{"name":"_finish_transfer_to_public","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["_finish_transfer_to_public"],"assert_messages":{"16":"Not initialized","144":"attempt to add with overflow","186":"Stack too deep","285":"Array index out of bounds","180":"attempt to add with overflow","304":"attempt to add with overflow","238":"Array index out of bounds","246":"Array index out of bounds","136":"Array index out of bounds","21":"Function _finish_transfer_to_public can only be called internally","117":"Storage slot 0 not allowed. Storage slots must start from 1.","162":"Array index out of bounds","262":"attempt to add with overflow","230":"Array index out of bounds"}},{"name":"set_minter","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"approve","type":{"kind":"boolean"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMdAAGARIBEKwiAQwABKwiARAACIgALOACARQAAIgDvKggBBAAAAQIBJAIBAAUqDgUEKggBBAAAAQIBJAIAAAYqDgYEKggBBAAAAQIBJAIAAgcqDgcEHgIAAAQeAgAABzA4AAQABwAIJAIBAQQhAgAeAAg5AQAAKggBByQCBAIIABABCAEkAwQBBwAoBwIIKgwICSoOBgkqDQcIACgIAggqDggHKggBCAAAAQIBKg4HCCQCAAMHJAIEAQkkAgQACioMCgMgADAKOAMKCyECANkACyAAMyoNCAcAKAcCCwA4CwoMKg0MCB4CAQAHCjgIBwshAgA7AAs5AQAAKggBByQCBAQIABABCAEkAwQBBwAoBwIIKgwICyoOBgsAKAsCCyoOBgsAKAsCCyoOBgsqDQcIACgIAggqDggHKg0HCAAoCAIIKg4IByoNBwgAKAgCCCoOCAcqDQcIACgIAggqDggHKggBCAAAAQIBKg4HCCoIAQckAgQFCwAQAQsBJAMEAQcAKAcCCyoMCwwqDgYMACgMAgwqDgYMACgMAgwqDgYMACgMAgwoAgAAAAAAAAAAAgAAAAAAAAAAAA0qDg0MKg0HCwAoCwILKg4LByoIAQsAAAECASoOBwsqCAEHAAABAgEqDgoHKggBDAAAAQIBKg4FDCQCAAQNJAIEAg4qDAoDIABzDDgDDg8hAgC1AA8gAHYqDQwDCjgDBQ0hAgB6AA05AQAAJAIEDQMqCAANKgwIDioMCw8qDAcQKgwMEQAQAAMAIgD0KgQAACoNCAMqDQsNKg0HDioOAwgqDg0LKg4OByoOBAwAKA0CBwA4BwoIKg0IBCoNAwcCKAcCByoOBwMqDQ0DAigDAgMqDgMNCjgEBgMKOAMFBiECAJcABjkBAAAcDAACAyoMCgEgAJoKOAEKAiECAJ4AAiAAnSMcDAABAgA4BAIFKggBAiQCBAIGABABBgEkAwQBAgAoAgIGKgwGByoOAwckAgQBBww4AQcIIQIAqwAIOQEAAAAoAgIHADgHAQgqDQgGLQwABgAFADgBCQIOOAECBSECALMABTkBAAAqDAIBIACaDDgDDg8hAgC4AA8gANMqCAEPJAIEAxAAEAEQASQDBAEPACgPAhAqDBARKg4NEQAoEQIRKg4BESQCBAIRDDgDERIhAgDFABI5AQAAACgPAhEAOBEDEioNEhAkAgQRDyoIABEqDAgSKgwLEyoMBxQqDAwVKgwQFgAQAA8AIgFBKgQAACAA0wA4AwkPDjgDDxAhAgDXABA5AQAAKgwPAyAAcyoNCAscDAADDAA4BwwNLAwADQAMJAIEAQ4MOAMODyECAOEADzkBAAArBAALgAMlAAQAAoAEIgGQKwiABQANACgNAg4AOA4DDyoODA8AOAMJCw44AwsMIQIA7AAMOQEAACoODQgqDAsDIAAwJQAEeACABA0AAACABIADIQAA84ADOQEAACMiAO8kAgQDBiQCBAEHJAIEAAgqDAgFIAD6DDgFBgghAgESAAggAP0qDQEFKg0DBioNBAcqDQIIJAIEBAkqCAEKJAIEBQsAEAELASQDBAEKACgIAgskAgQEDAAoCgINPA8ACwANKg0KCAAoCAIIKg4ICioOBQEqDgoCKg4GAyoOBwQjKg0DCAw4BQgJIQIBFgAJIAE7Kg0BCCoNAgkqDQMKKg0ECyoNAgwkAgQEDgw4BQ4PIQIBHwAPOQEAAAAoDAIOADgOBQ8qDQ8NKg0BDCQCBAMPDDgFDxAhAgEnABA5AQAAACgMAg8AOA8FECoNEA4AOA0ODCQCBAQODDgFDg8hAgEvAA85AQAAKwQACYADJQAEAAWABCIBkCsIgAUADQAoDQIOADgOBQ8qDgwPKg4IASoODQIqDgoDKg4LBCABOwA4BQcIDjgFCAkhAgE/AAk5AQAAKgwIBSAA+iIA7yoNBAYkAgEABwo4BgcIIQIBRwAIOQEAACoNAwYkAgQDBwo4BgcIJAIEAQYhAgFuAAggAU0qDQEHKg0CCCoNAwkqDQQKKg0DCyQCBAMNDDgLDQ4hAgFWAA45AQAAKwQAB4ADJQAEAASABCIBkCsIgAUADAAoDAINADgNCw4qDgUOKg4MASoOCAIqDgkDKg4KBCoNAQUqDQIHKg0ECCoNAwkAOAkGCg44CQoLIQIBaQALOQEAACoOBQEqDgcCKg4KAyoOCAQgAY8kAgQIByoIAAgqDAEJKgwCCioMAwsqDAQMABAABwAiAPQqBAAAKg0BByoNAggqDQMJKg0ECiQCBAALKwQAB4ADJQAEAASABCIBkCsIgAUADAAoDAINADgNCw4qDgUOKg4MASoOCAIqDgkDKg4KBCoNAQUqDQIHKg0ECCoOBQEqDgcCKg4GAyoOCAQgAY8jKwGAA4AGCwCABgACgAchAAGUgAcgAZYrAIADgAUgAaQrAAABgAUBAAABgAQAASUABAAAgAkNAIAJgASAChcAgAqACiEAAaKACgEAgAOACYALKwGAC4AIAQCABYAJgAsrAoAIgAsBAIAJAAKACSABmSUBBAABgAUgAaQjKwAYyhjK","debug_symbols":"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","brillig_names":["set_minter"],"assert_messages":{"224":"Array index out of bounds","29":"Not initialized","58":"caller is not an admin","302":"Array index out of bounds","235":"attempt to add with overflow","360":"attempt to add with overflow","150":"Storage slot 0 not allowed. Storage slots must start from 1.","214":"attempt to add with overflow","170":"Array index out of bounds","196":"Array index out of bounds","286":"Array index out of bounds","318":"attempt to add with overflow","341":"Array index out of bounds","178":"attempt to add with overflow","242":"Stack too deep","294":"Array index out of bounds"}},{"name":"set_admin","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"new_admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAk4AIBEAAAiAGwqCAEDAAABAgEkAgEABCoOBAMqCAEDAAABAgEkAgAABCoOBAMqCAEDAAABAgEkAgACBSoOBQMeAgAAAx4CAAAFMDgAAwAFAAYkAgEBAyECABwABjkBAAAqCAEDJAIEAgUAEAEFASQDBAEDACgDAgUqDAUGKg4EBioNAwUAKAUCBSoOBQMqCAEFAAABAgEqDgMFJAIEAAMkAgQBBCQCAAMGKgwDAiAALgo4AgMHIQIAVgAHIAAxKg0FBwAoBwIIADgIAwkqDQkFHgIBAAcKOAUHCCECADkACDkBAAAqDAMCIAA7CjgCAwUhAgA/AAUgAD4jHAwAAgUAOAYFByoIAQUkAgQCCAAQAQgBJAMEAQUAKAUCCCoMCAkqDgEJJAIEAQkMOAIJCiECAEwACjkBAAAAKAUCCQA4CQIKKg0KCC0MAAgABwA4AgQFDjgCBQchAgBUAAc5AQAAKgwFAiAAOyoNBQccDAACCAA4BggJLAwACQAIJAIEAQoMOAIKCyECAF4ACzkBAAArBAAHgAMlAAQAAoAEIgBxKwiABQAJACgJAgoAOAoCCyoOCAsAOAIEBw44AgcIIQIAaQAIOQEAACoOCQUqDAcCIAAuJQAEeACABA0AAACABIADIQAAcIADOQEAACMrAYADgAYLAIAGAAKAByEAAHWAByAAdysAgAOABSAAhSsAAAGABQEAAAGABAABJQAEAACACQ0AgAmABIAKFwCACoAKIQAAg4AKAQCAA4AJgAsrAYALgAgBAIAFgAmACysCgAiACwEAgAkAAoAJIAB6JQEEAAGABSAAhSMrABjKGMo=","debug_symbols":"1ZvbbuIwEIbfJddceDwnu6+yWlW0pRUSohXQlVaId9+ki8MhIdZ6213PDSLwT/zFnviPD9k3T4uH95f75fr5ddvcfds3q9fH+W75um6P9odZ87BZrlbLl/vznxvXfYD70G/f5uvucLubb3bNHUh0s2axfmq/qnPtGZ6Xq0VzRz4cvs8agJIgXxKEJUFUEsQlQVISpCVBoSQoFgT5kozwJRnh/zgjZgN1ZD6Ko3KvhQAjWoySxBiVztQ8ohYKcFQLRb1Qd/D49/Dg0Ce1Y/9P8ekT6j5CTw+5ygfPManxQj1Gr4rhqFbtzndFz59Lz5f0XQny5SXol5cw2mf46FPV+kiSTdFAqQhw8VQEjjUyC6WEZhHMNDJj0KTGEAaNHE3jo7OND7bxvW18tI1PtvHZNr7Yxlfb+LZdF227Ltl2Xar91iVI526/8gC/9uQhdD0+yjU+/4fk8X06iIYMPqD2z/sYToMDBP+BD7bxvW38G49s7Ht8zY3nyPXDXnIkuSE+U1ILX+V+B0TZ+lS8AOqCuCRISoJG+wp0kO5QdD7mmttLKgLa7Mg0tziXmlvOz32jr9CYJiw4nI3Ej7UrWDl+oL6nDkwDfKod38cpfK4dn6XHl4FPitjGV9v4wTZ+7R3nNL462/hgG9/bxq/edafxq3fdaXzbrqu2XVdtu67adl2t3nWBT/i5oWMExKM6gg4er0P1Hn37Yjv86j16Gr96j57Gr96jp/FtT8GG2ldPSPo5N9LBvpRQ++oJ9fN5o/j1T4DHE35uxjM6n0ii48HFxtrXWqZn+2PtOxwy+LXvcMjg177DIYNPtvFr3+GQwa/eo6fxq/foafzqPXoa3/YiNTjbtgvOtu+Cs2284Gw7Lzjb1gvOsvce2sMf881y/rBaHF8uen5fP569a7T7+fb7n1b8Cw==","brillig_names":["set_admin"],"assert_messages":{"56":"caller is not an admin","83":"attempt to add with overflow","93":"Array index out of bounds","104":"attempt to add with overflow","111":"Stack too deep","75":"Array index out of bounds","27":"Not initialized"}},{"name":"get_private_nfts","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"page_index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"kind":"array","length":10,"type":{"kind":"field"}},{"kind":"boolean"}],"kind":"tuple"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_private_nfts"]},{"name":"mint","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["mint"],"assert_messages":{"32":"zero token ID not supported","221":"Stack too deep","122":"token already exists","535":"Array index out of bounds","404":"Storage slot 0 not allowed. Storage slots must start from 1.","567":"attempt to add with overflow","590":"Array index out of bounds","453":"Array index out of bounds","482":"Array index out of bounds","543":"Array index out of bounds","28":"Not initialized","342":"attempt to add with overflow","464":"attempt to add with overflow","77":"caller is not a minter","490":"attempt to add with overflow","551":"Array index out of bounds","324":"Array index out of bounds","609":"attempt to add with overflow","376":"Storage slot 0 not allowed. Storage slots must start from 1.","367":"Storage slot 0 not allowed. Storage slots must start from 1.","390":"Storage slot 0 not allowed. Storage slots must start from 1."}},{"name":"transfer_in_private","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"16137133351287663689":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["pack_arguments_array_oracle_wrapper","call_private_function_internal","unpack_returns","get_notes_internal","get_collapse_hints","lt_32_hint","decompose_hint","lte_16_hint","get_key_validation_request","notify_nullified_note_oracle_wrapper","get_public_keys_and_partial_address","random","notify_created_note_oracle_wrapper","build_msg_block","attach_len_to_msg_block","build_msg_block","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"transfer_to_public","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"16137133351287663689":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"token_id","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["pack_arguments_array_oracle_wrapper","call_private_function_internal","unpack_returns","get_notes_internal","get_collapse_hints","lt_32_hint","decompose_hint","lte_16_hint","get_key_validation_request","notify_nullified_note_oracle_wrapper","pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","directive_invert","directive_integer_quotient"]},{"name":"private_get_symbol","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"get_admin","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAEceAgAAAh4CAAADMDgAAgADAAQkAgEBAiECABAABDkBAAAeAgoAAiQCAAEDCjgCAwQhAgAVAAQ5AQAAKggBAiQCBAIDABABAwEkAwQBAgAoAgIDKgwDBCQCAAAFKg4FBCoNAgMAKAMCAyoOAwIqCAEDAAABAgEqDgIDJAIEAQIkAgQABCQCAAMFKgwEASAAKAo4AQQGIQIAMQAGIAArKg0DAQAoAQIDADgDBAUqDQUCKgwCASMqDQMGHAwAAQcAOAUHCCwMAAgAByQCBAEJDDgBCQohAgA5AAo5AQAAKwQABoADJQAEAAKABCIATCsIgAUACAAoCAIJADgJAQoqDgcKADgBAgYOOAEGByECAEQABzkBAAAqDggDKgwGASAAKCUABHgAgAQNAAAAgASAAyEAAEuAAzkBAAAjKwGAA4AGCwCABgACgAchAABQgAcgAFIrAIADgAUgAGArAAABgAUBAAABgAQAASUABAAAgAkNAIAJgASAChcAgAqACiEAAF6ACgEAgAOACYALKwGAC4AIAQCABYAJgAsrAoAIgAsBAIAJAAKACSAAVSUBBAABgAUgAGAjKwAYyhjK","debug_symbols":"1ZpbbsMgEEX3wnc+gHkA2UpVVU6bVJYsp0rSSlWUvddug/OwZdQ8WuYnMvEFjhngMpa36mU+e399KuvFcq2mD1tVLZ+LTbmsm9J2N1GzVVlV5evT8d9Ktz9Gf+vXb0XdFtebYrVRU8NBT9S8fmkundZNC4uymqspWr+b9NSBaC8Ojjqt8WZAC4GjGILDIzUNqBm92asZgztRP06UMdfDGw02qjXZP8W3Nxj7YDp6kxp8YylENZyoh+idA79XO9e2d0YPt6WnU/q2B7x7D3T3Hvj6HshiDBtZToYNdVQ7BNsLm/stUFvJX1IpXFDJ6ksqDe4DaDmu7EaX3gc8xi6MDodhg6GVRIyxbWKGREgIvItq8P48JNbKxgfZ+Cgbn2Tjs2x8Jxvfy8YPovFBy8aX7bog23VBtuuCbNfF3Jcumth2c0k9/NwnD4Lu8IF7+P8weWw3Hdj5BL4B1+WEcEQCxn7jk2x8lo2f+6FhfOlS9jsPd7FC13vnRbkfGpDsGH7uhwaEcMBPrZSgbSQJmvoPK9slKPcjRgI/98Q+gZ97Yp/Azz2xT+Dnntgn8LP36FF8zt6jx/Gz9+hx/Pw9ehRftuuybNdl2a7Lsl2XZbsuS3bdXVP8KFZlMavm+89GFu/189FXJJvPt587jfgL","brillig_names":["get_admin"],"assert_messages":{"56":"Array index out of bounds","74":"Stack too deep","15":"Not initialized","20":"Function get_admin can only be called statically","67":"attempt to add with overflow"}},{"name":"private_get_name","is_unconstrained":false,"custom_attributes":["private","view"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_data_witness","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_integer_quotient","directive_invert"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000d6523016"},{"kind":"string","value":"NFTNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"token_id","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"NFT"}},{"name":"fields","value":{"fields":[{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"private_nfts","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"nft_exists","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"public_owners","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}}],"kind":"struct","path":"NFT::NFTTransfer"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"approve","type":{"kind":"boolean"}}],"kind":"struct","path":"NFT::set_minter_parameters"}}],"kind":"struct","path":"NFT::set_minter_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"NFT::public_get_name_parameters"}},{"name":"return_type","type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString"}}],"kind":"struct","path":"NFT::public_get_name_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"NFT::transfer_in_private_parameters"}}],"kind":"struct","path":"NFT::transfer_in_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"slot","type":{"kind":"field"}},{"name":"point","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"NFT::_store_point_in_transient_storage_unsafe_parameters"}}],"kind":"struct","path":"NFT::_store_point_in_transient_storage_unsafe_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}}],"kind":"struct","path":"NFT::_finish_transfer_to_public_parameters"}}],"kind":"struct","path":"NFT::_finish_transfer_to_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"NFT::prepare_transfer_to_private_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"NFT::prepare_transfer_to_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"new_admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"NFT::set_admin_parameters"}}],"kind":"struct","path":"NFT::set_admin_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"name","type":{"kind":"string","length":31}},{"name":"symbol","type":{"kind":"string","length":31}}],"kind":"struct","path":"NFT::constructor_parameters"}}],"kind":"struct","path":"NFT::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"NFT::transfer_in_public_parameters"}}],"kind":"struct","path":"NFT::transfer_in_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"NFT::private_get_symbol_parameters"}},{"name":"return_type","type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString"}}],"kind":"struct","path":"NFT::private_get_symbol_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"minter","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"NFT::is_minter_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"NFT::is_minter_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}},{"name":"hiding_point_slot","type":{"kind":"field"}}],"kind":"struct","path":"NFT::_finalize_transfer_to_private_unsafe_parameters"}}],"kind":"struct","path":"NFT::_finalize_transfer_to_private_unsafe_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"token_id","type":{"kind":"field"}},{"name":"hiding_point_slot","type":{"kind":"field"}}],"kind":"struct","path":"NFT::finalize_transfer_to_private_parameters"}}],"kind":"struct","path":"NFT::finalize_transfer_to_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}}],"kind":"struct","path":"NFT::transfer_to_private_parameters"}}],"kind":"struct","path":"NFT::transfer_to_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"NFT::get_admin_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"NFT::get_admin_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"NFT::private_get_name_parameters"}},{"name":"return_type","type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString"}}],"kind":"struct","path":"NFT::private_get_name_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"NFT::public_get_symbol_parameters"}},{"name":"return_type","type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString"}}],"kind":"struct","path":"NFT::public_get_symbol_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"NFT::transfer_to_public_parameters"}}],"kind":"struct","path":"NFT::transfer_to_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"token_id","type":{"kind":"field"}}],"kind":"struct","path":"NFT::mint_parameters"}}],"kind":"struct","path":"NFT::mint_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"token_id","type":{"kind":"field"}}],"kind":"struct","path":"NFT::owner_of_parameters"}},{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"NFT::owner_of_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"inner_hash","type":{"kind":"field"}}],"kind":"struct","path":"NFT::cancel_authwit_parameters"}}],"kind":"struct","path":"NFT::cancel_authwit_abi"}]}},"file_map":{"101":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"103":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            serialized_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"105":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"106":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"107":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_returns_oracle_wrapper(returns) };\n}\n\npub unconstrained fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\npub unconstrained fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"108":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"109":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}},\n};\n\nuse dep::protocol_types::{\n    hash::{\n        compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n        compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    }, utils::arr_copy_slice,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash =\n                compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"114":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note = unsafe { get_note_internal(storage_slot) };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"},"116":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"120":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"129":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"131":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"141":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{\n    constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest,\n};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission,\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"142":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext}, state_vars::storage::Storage,\n};\nuse dep::protocol_types::{\n    constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize},\n};\n\n// Just like PublicImmutable but with the ability to read from private functions.\npub struct SharedImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // Intended to be only called once.\n    pub fn initialize(self, value: T) {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, UnconstrainedContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read_public(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> SharedImmutable<T, &mut PrivateContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    pub fn read_private(self) -> T {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] = header.public_storage_historical_read(\n                self.storage_slot + i as Field,\n                (*self.context).this_address(),\n            );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"144":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n"},"147":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"},"149":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"154":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::poseidon2_hash_with_separator,\n    address::AztecAddress, header::Header, utils::field::full_field_less_than,\n};\nuse dep::protocol_types::merkle_tree::root::root_from_sibling_path;\n\nuse crate::oracle::get_public_data_witness::get_public_data_witness;\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(\n        header: Header,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header {\n    fn public_storage_historical_read(\n        self,\n        storage_slot: Field,\n        contract_address: AztecAddress,\n    ) -> Field {\n        // 1) Compute the leaf index by siloing the storage slot with the contract address\n        let public_data_tree_index = poseidon2_hash_with_separator(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX,\n        );\n\n        // 2) Get the membership witness for the tree index.\n        let witness = unsafe {\n            get_public_data_witness(\n                self.global_variables.block_number as u32,\n                public_data_tree_index,\n            )\n        };\n\n        // 3) The witness is made up of two parts: the preimage of the leaf and the proof that it exists in the tree.\n        // We first prove that the witness is indeed valid for the public data tree, i.e. that the preimage is of a\n        // value present in the tree. Note that `hash` returns not just the hash of the value but also the metadata\n        // (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n                == root_from_sibling_path(witness.leaf_preimage.hash(), witness.index, witness.path)\n                ,\n                \"Proving public value inclusion failed\",\n            );\n\n            // 4) Now that we know the preimage is valid, we determine the value that's represented by this tree entry. Here\n            // we have two scenarios:\n            // 1. The tree entry is initialized, and the value is the same as the one in the witness\n            // 2. The entry was never initialized, and the value is default zero (the default)\n            // The code below is based on the same checks in `validate_public_data_reads` in `base_rollup_inputs`.\n            let preimage = witness.leaf_preimage;\n\n            let is_less_than_slot = full_field_less_than(preimage.slot, public_data_tree_index);\n            let is_next_greater_than =\n                full_field_less_than(public_data_tree_index, preimage.next_slot);\n            let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n            let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n            let value = if is_in_range {\n                0\n            } else {\n                assert_eq(\n                    preimage.slot,\n                    public_data_tree_index,\n                    \"Public data tree index doesn't match witness\",\n                );\n                preimage.value\n            };\n\n            value\n        }\n}\n"},"161":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n    }, point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice},\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER,\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"164":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, public_keys::{PublicKeys, IvpkM, ToPoint}, scalar::Scalar, point::Point,\n};\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48]\n    where\n        T: ToPoint,\n    {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false,\n        },\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131,\n        160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171,\n        176, 218, 48, 209, 73, 89, 200, 209,\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"165":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::getters::get_ovsk_app, encrypted_logs::payload::compute_encrypted_log,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, public_keys::{PublicKeys, OvpkM, IvpkM}, hash::sha256_to_field,\n    abis::note_hash::NoteHash,\n};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 416 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] =\n        compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 416 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let ovsk_app: Field = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) =\n            compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) =\n            unsafe { compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient) };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress,\n) {\n    let ovsk_app: Field = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext,\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"166":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, public_keys::{OvpkM, IvpkM},\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, hash::poseidon2_hash_with_separator,\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose,\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes,\n    encrypted_logs::header::EncryptedLogHeader,\n    keys::point_to_symmetric_key::point_to_symmetric_key,\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] =\n        compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(\n    plaintext: [u8; P],\n    eph_sk: Scalar,\n    ivpk: IvpkM,\n) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point,\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field,\n    )\n        .to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::encrypted_logs::payload::{\n        compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext,\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{\n        address::AztecAddress, public_keys::{OvpkM, IvpkM}, point::Point, scalar::Scalar,\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false,\n            },\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false,\n            },\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41,\n            2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239,\n            247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118,\n            183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183,\n            12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78,\n            101, 153, 0, 0, 16, 39,\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(\n            0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2,\n        );\n\n        let log: [u8; 448] = compute_encrypted_log(\n            contract_address,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            plaintext,\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235,\n            86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79,\n            51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171,\n            62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203,\n            98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211,\n            49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205,\n            104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248,\n            193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110,\n            249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173,\n            151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4,\n            235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194,\n            90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219,\n            22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18,\n            204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167,\n            110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239,\n            95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25,\n            244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91,\n            68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76,\n            26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178,\n            143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189,\n            117, 147, 101, 230, 132,\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false,\n            },\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160,\n            190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157,\n            131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93,\n            46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130,\n            37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95,\n            115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234,\n            245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162,\n            25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185,\n            212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236,\n            23, 206, 229, 108,\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb,\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31,\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b,\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(\n            recipient,\n            recipient_ivpk,\n            sender_ovsk_app,\n            eph_sk,\n            eph_pk,\n        );\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238,\n            50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248,\n            43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31,\n            211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151,\n            152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58,\n            120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25,\n            173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224,\n            30, 168, 177, 26, 144, 5, 124, 128, 6,\n        ];\n\n        assert_eq(outgoing_body_ciphertext_from_typescript, ciphertext);\n    }\n}\n"},"177":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice,\n};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator =\n        arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158,\n        236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159,\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"178":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\nuse crate::{\n    oracle::{\n        keys::get_public_keys_and_partial_address,\n        key_validation_request::get_key_validation_request,\n    }, keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) =\n        unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    hinted_canonical_public_keys\n}\n"},"181":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm,\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"},"184":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{\n    execution::{get_chain_id, get_version, get_contract_address, get_block_number},\n    storage::storage_read,\n};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"185":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Serialize<N>,\n    {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N],\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"186":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n        key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n        call_private_function::call_private_function_internal, header::get_header_at,\n        logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext, function_selector::FunctionSelector,\n        max_block_number::MaxBlockNumber,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n        nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash},\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL,\n        MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR,\n    }, header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests: BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator {\n                request,\n                sk_app_generator: sk_generators[key_index],\n            };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(\n        &mut self,\n        note_hash_counter: u32,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context,\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        let call_request = PublicCallRequest { call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.public_teardown_call_request = PublicCallRequest { call_context, args_hash, counter };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"},"190":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n    packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe { unpack_returns(self.packed_returns) };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"191":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs,\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {}\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n"},"204":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"209":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"},"224":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"234":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{\n        decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI,\n    };\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"274":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"284":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: u32,\n) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"286":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n"},"305":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"312":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, public_keys_hash::PublicKeysHash,\n        salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils,\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [pub_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        ))\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        functino_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys_hash: PublicKeysHash,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            functino_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys_hash, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"315":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"317":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"325":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash}, note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n        MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX,\n    }, merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), unique_note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256(\n            [log_hash.contract_address.to_field(), log_hash.log_hash.value],\n        )\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n            0,\n        ))\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk<let N: u32>(\n    _vk: VerificationKey<N>,\n) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"326":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n        aztec_address::AztecAddress, partial_address::PartialAddress,\n        public_keys_hash::PublicKeysHash,\n    }, public_keys::PublicKeys, contract_class_id::ContractClassId,\n    constants::CONTRACT_INSTANCE_LENGTH, traits::{Deserialize, Hash, Serialize},\n};\n\npub struct ContractInstance {\n    salt: Field,\n    deployer: AztecAddress,\n    contract_class_id: ContractClassId,\n    initialization_hash: Field,\n    public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys.hash(),\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n"},"327":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr","source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        GENERATOR_INDEX__PUBLIC_KEYS_HASH, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_IVPK_M_X,\n        DEFAULT_IVPK_M_Y, DEFAULT_OVPK_M_X, DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y,\n    }, hash::poseidon2_hash_with_separator, point::POINT_LENGTH,\n    traits::{Deserialize, Serialize, Hash},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse dep::std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"333":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/data/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\npub struct PublicDataTreeLeafPreimage {\n    slot: Field,\n    value: Field,\n    next_slot: Field,\n    next_index: u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self { slot: 0, value: 0, next_slot: 0, next_index: 0 }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            crate::hash::poseidon2_hash([\n                self.slot,\n                self.value,\n                (self.next_index as Field),\n                self.next_slot,\n            ])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE = 16;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeroes.\ntype MSG_BLOCK = [u8; BLOCK_SIZE];\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !crate::runtime::is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: MSG_BLOCK) -> INT_BLOCK {\n    let mut msg32: INT_BLOCK = [0; INT_BLOCK_SIZE];\n\n    for i in 0..INT_BLOCK_SIZE {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4 * (i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeroes.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeroes by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    for i in 0..BLOCK_SIZE {\n        if i >= msg_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n    for i in msg_byte_ptr..MSG_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[MSG_SIZE_PTR + i] = len_bytes[i];\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    for i in 0..MSG_SIZE_PTR {\n        let predicate = (i < msg_byte_ptr) as u8;\n        let expected_byte = predicate * last_block[i];\n        assert_eq(msg_block[i], expected_byte);\n    }\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let len = 8 * message_size;\n    let mut reconstructed_len: Field = 0;\n    for i in MSG_SIZE_PTR..BLOCK_SIZE {\n        reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n    }\n    assert_eq(reconstructed_len, len as Field);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4 * j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"360":{"path":"/usr/src/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr","source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\npub struct FieldCompressedString {\n    value: Field,\n}\n\nimpl Serialize<1> for FieldCompressedString {\n    fn serialize(self) -> [Field; 1] {\n        [self.value]\n    }\n}\n\nimpl Deserialize<1> for FieldCompressedString {\n    fn deserialize(input: [Field; 1]) -> Self {\n        Self { value: input[0] }\n    }\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        self.value.to_be_bytes()\n    }\n}\n"},"428":{"path":"/usr/src/noir-projects/noir-contracts/contracts/nft_contract/src/main.nr","source":"mod types;\nmod test;\n\nuse dep::aztec::macros::aztec;\n\n// Minimal NFT implementation with `AuthWit` support that allows minting in public-only and transfers in both public\n// and private.\n#[aztec]\ncontract NFT {\n    use dep::compressed_string::FieldCompressedString;\n    use dep::aztec::{\n        oracle::random::random,\n        prelude::{\n            NoteGetterOptions, NoteViewerOptions, Map, PublicMutable, SharedImmutable, PrivateSet,\n            AztecAddress, PrivateContext, PublicContext,\n        },\n        encrypted_logs::encrypted_note_emission::{\n            encode_and_encrypt_note, encrypt_and_emit_partial_log,\n        }, hash::pedersen_hash, keys::getters::get_public_keys, note::constants::MAX_NOTES_PER_PAGE,\n        protocol_types::traits::is_empty, utils::comparison::Comparator,\n        protocol_types::{point::Point, traits::Serialize},\n        macros::{\n            storage::storage, events::event,\n            functions::{private, public, view, internal, initializer},\n        },\n    };\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    use std::{embedded_curve_ops::EmbeddedCurvePoint, meta::derive};\n    use crate::types::nft_note::NFTNote;\n\n    // TODO(#8467): Rename this to Transfer - calling this NFTTransfer to avoid export conflict with the Transfer event\n    // in the Token contract.\n    #[event]\n    #[derive(Serialize)]\n    struct NFTTransfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        token_id: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        // The symbol of the NFT\n        symbol: SharedImmutable<FieldCompressedString, Context>,\n        // The name of the NFT\n        name: SharedImmutable<FieldCompressedString, Context>,\n        // The admin of the contract\n        admin: PublicMutable<AztecAddress, Context>,\n        // Addresses that can mint\n        minters: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        // Contains the NFTs owned by each address in private.\n        private_nfts: Map<AztecAddress, PrivateSet<NFTNote, Context>, Context>,\n        // A map from token ID to a boolean indicating if the NFT exists.\n        nft_exists: Map<Field, PublicMutable<bool, Context>, Context>,\n        // A map from token ID to the public owner of the NFT.\n        public_owners: Map<Field, PublicMutable<AztecAddress, Context>, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n    }\n\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.admin.write(new_admin);\n    }\n\n    #[public]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not an admin\");\n        storage.minters.at(minter).write(approve);\n    }\n\n    #[public]\n    fn mint(to: AztecAddress, token_id: Field) {\n        assert(token_id != 0, \"zero token ID not supported\");\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not a minter\");\n        assert(storage.nft_exists.at(token_id).read() == false, \"token already exists\");\n\n        storage.nft_exists.at(token_id).write(true);\n\n        storage.public_owners.at(token_id).write(to);\n    }\n\n    #[public]\n    #[view]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read_public()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read_private()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_public()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_private()\n    }\n\n    #[public]\n    #[view]\n    fn get_admin() -> Field {\n        storage.admin.read().to_field()\n    }\n\n    #[public]\n    #[view]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n\n    #[public]\n    fn transfer_in_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid owner\");\n\n        public_owners_storage.write(to);\n    }\n\n    // Transfers token with `token_id` from public balance of message sender to a private balance of `to`.\n    #[private]\n    fn transfer_to_private(to: AztecAddress, token_id: Field) {\n        let from = context.msg_sender();\n\n        let nft = NFT::at(context.this_address());\n\n        // We prepare the transfer.\n        let hiding_point_slot = _prepare_transfer_to_private(to, &mut context, storage);\n\n        // At last we finalize the transfer. Usafe of the `unsafe` method here is safe because we set the `from`\n        // function argument to a message sender, guaranteeing that he can transfer only his own NFTs.\n        nft._finalize_transfer_to_private_unsafe(from, token_id, hiding_point_slot).enqueue(\n            &mut context,\n        );\n    }\n\n    /// Prepares a transfer to a private balance of `to`. The transfer then needs to be\n    /// finalized by calling `finalize_transfer_to_private`. Returns a hiding point slot.\n    #[private]\n    fn prepare_transfer_to_private(to: AztecAddress) -> Field {\n        _prepare_transfer_to_private(to, &mut context, storage)\n    }\n\n    /// This function exists separately from `prepare_transfer_to_private` solely as an optimization as it allows\n    /// us to have it inlined in the `transfer_to_private` function which results in one less kernel iteration.\n    ///\n    /// TODO(#9180): Consider adding macro support for functions callable both as an entrypoint and as an internal\n    /// function.\n    #[contract_library_method]\n    fn _prepare_transfer_to_private(\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> Field {\n        let to_keys = get_public_keys(to);\n        let to_npk_m_hash = to_keys.npk_m.hash();\n        let to_note_slot = storage.private_nfts.at(to).storage_slot;\n\n        // We create a setup payload with unpopulated/zero token id for 'to'\n        // TODO(#7775): Manually fetching the randomness here is not great. If we decide to include randomness in all\n        // notes we could just inject it in macros.\n        let note_randomness = unsafe { random() };\n        let note_setup_payload =\n            NFTNote::setup_payload().new(to_npk_m_hash, note_randomness, to_note_slot);\n\n        // We encrypt and emit the partial note log\n        encrypt_and_emit_partial_log(context, note_setup_payload.log_plaintext, to_keys, to);\n\n        // Using the x-coordinate as a hiding point slot is safe against someone else interfering with it because\n        // we have a guarantee that the public functions of the transaction are executed right after the private ones\n        // and for this reason the protocol guarantees that nobody can front-run us in consuming the hiding point.\n        // This guarantee would break if `finalize_transfer_to_private` was not called in the same transaction. This\n        // however is not the flow we are currently concerned with. To support the multi-transaction flow we could\n        // introduce a `from` function argument, hash the x-coordinate with it and then repeat the hashing in\n        // `finalize_transfer_to_private`.\n        //\n        // We can also be sure that the `hiding_point_slot` will not overwrite any other value in the storage because\n        // in our state variables we derive slots using a different hash function from multi scalar multiplication\n        // (MSM).\n        let hiding_point_slot = note_setup_payload.hiding_point.x;\n\n        // We don't need to perform a check that the value overwritten by `_store_point_in_transient_storage_unsafe`\n        // is zero because the slot is the x-coordinate of the hiding point and hence we could only overwrite\n        // the value in the slot with the same value. This makes usage of the `unsafe` method safe.\n        NFT::at(context.this_address())\n            ._store_point_in_transient_storage_unsafe(\n                hiding_point_slot,\n                note_setup_payload.hiding_point,\n            )\n            .enqueue(context);\n\n        hiding_point_slot\n    }\n\n    #[public]\n    #[internal]\n    fn _store_point_in_transient_storage_unsafe(slot: Field, point: Point) {\n        context.storage_write(slot, point);\n    }\n\n    /// Finalizes a transfer of NFT with `token_id` from public balance of `from` to a private balance of `to`.\n    /// The transfer must be prepared by calling `prepare_transfer_to_private` first and the resulting\n    /// `hiding_point_slot` must be passed as an argument to this function.\n    #[public]\n    fn finalize_transfer_to_private(token_id: Field, hiding_point_slot: Field) {\n        let from = context.msg_sender();\n        _finalize_transfer_to_private(from, token_id, hiding_point_slot, &mut context, storage);\n    }\n\n    #[public]\n    #[internal]\n    fn _finalize_transfer_to_private_unsafe(\n        from: AztecAddress,\n        token_id: Field,\n        hiding_point_slot: Field,\n    ) {\n        _finalize_transfer_to_private(from, token_id, hiding_point_slot, &mut context, storage);\n    }\n\n    #[contract_library_method]\n    fn _finalize_transfer_to_private(\n        from: AztecAddress,\n        token_id: Field,\n        hiding_point_slot: Field,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let public_owners_storage = storage.public_owners.at(token_id);\n        assert(public_owners_storage.read().eq(from), \"invalid NFT owner\");\n\n        // Read the hiding point from \"transient\" storage and check it's not empty to ensure the transfer was prepared\n        let hiding_point: Point = context.storage_read(hiding_point_slot);\n        assert(!is_empty(hiding_point), \"transfer not prepared\");\n\n        // Set the public NFT owner to zero\n        public_owners_storage.write(AztecAddress::zero());\n\n        // Finalize the partial note with the `token_id`\n        let finalization_payload = NFTNote::finalization_payload().new(hiding_point, token_id);\n\n        // We insert the finalization note hash\n        context.push_note_hash(finalization_payload.note_hash);\n\n        // We emit the `token_id` as unencrypted event such that the `NoteProcessor` can use it to reconstruct the note\n        context.emit_unencrypted_log(finalization_payload.log);\n\n        // At last we reset public storage to zero to achieve the effect of transient storage - kernels will squash\n        // the writes\n        context.storage_write(hiding_point_slot, Point::empty());\n    }\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n\n    #[private]\n    fn transfer_in_private(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let nfts = storage.private_nfts;\n\n        let notes = nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring\");\n\n        let from_ovpk_m = get_public_keys(from).ovpk_m;\n        let to_keys = get_public_keys(to);\n\n        let mut new_note = NFTNote::new(token_id, to_keys.npk_m.hash());\n        nfts.at(to).insert(&mut new_note).emit(encode_and_encrypt_note(\n            &mut context,\n            from_ovpk_m,\n            to_keys.ivpk_m,\n            to,\n        ));\n    }\n\n    #[private]\n    fn transfer_to_public(from: AztecAddress, to: AztecAddress, token_id: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let notes = storage.private_nfts.at(from).pop_notes(NoteGetterOptions::new()\n            .select(NFTNote::properties().token_id, Comparator.EQ, token_id)\n            .set_limit(1));\n        assert(notes.len() == 1, \"NFT not found when transferring to public\");\n\n        NFT::at(context.this_address())._finish_transfer_to_public(to, token_id).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _finish_transfer_to_public(to: AztecAddress, token_id: Field) {\n        storage.public_owners.at(token_id).write(to);\n    }\n\n    // Returns zero address when the token does not have a public owner. Reverts if the token does not exist.\n    #[public]\n    #[view]\n    fn owner_of(token_id: Field) -> AztecAddress {\n        assert(storage.nft_exists.at(token_id).read(), \"token does not exist\");\n        storage.public_owners.at(token_id).read()\n    }\n\n    /// Returns an array of token IDs owned by `owner` in private and a flag indicating whether a page limit was\n    /// reached. Starts getting the notes from page with index `page_index`. Zero values in the array are placeholder\n    /// values for non-existing notes.\n    unconstrained fn get_private_nfts(\n        owner: AztecAddress,\n        page_index: u32,\n    ) -> pub ([Field; MAX_NOTES_PER_PAGE], bool) {\n        let offset = page_index * MAX_NOTES_PER_PAGE;\n        let mut options = NoteViewerOptions::new();\n        let notes = storage.private_nfts.at(owner).view_notes(options.set_offset(offset));\n\n        let mut owned_nft_ids = [0; MAX_NOTES_PER_PAGE];\n        for i in 0..options.limit {\n            if i < notes.len() {\n                owned_nft_ids[i] = notes.get_unchecked(i).token_id;\n            }\n        }\n\n        let page_limit_reached = notes.len() == options.limit;\n        (owned_nft_ids, page_limit_reached)\n    }\n}\n\n"},"430":{"path":"/usr/src/noir-projects/noir-contracts/contracts/nft_contract/src/types/nft_note.nr","source":"use dep::aztec::{\n    note::utils::compute_note_hash_for_nullify, keys::getters::get_nsk_app, oracle::random::random,\n    prelude::{NullifiableNote, NoteHeader, PrivateContext},\n    protocol_types::{\n        constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator,\n        traits::{Empty, Eq},\n    }, macros::notes::partial_note,\n};\n\n#[partial_note(quote { token_id})]\npub struct NFTNote {\n    // ID of the token\n    token_id: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n\nimpl NullifiableNote for NFTNote {\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl NFTNote {\n    pub fn new(token_id: Field, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        NFTNote { token_id, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for NFTNote {\n    fn eq(self, other: Self) -> bool {\n        (self.token_id == other.token_id)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"73":{"path":"/usr/src/noir-projects/aztec-nr/authwit/src/auth.nr","source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{\n        GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, CANONICAL_AUTH_REGISTRY_ADDRESS,\n    }, hash::poseidon2_hash_with_separator,\n};\nuse dep::aztec::{context::{PrivateContext, PublicContext, gas::GasOpts}, hash::hash_args_array};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\nglobal IS_VALID_SELECTOR = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n/**\n * Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([\n        context.msg_sender().to_field(),\n        context.selector().to_field(),\n        context.args_hash,\n    ]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that have authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .unpack_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allow same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` have authorized the current call in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` have authorized a speicifc `inner_hash` in the authentication registry\n *\n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n */\npub fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let result: Field = context\n        .call_public_function(\n            CANONICAL_AUTH_REGISTRY_ADDRESS,\n            comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n            [on_behalf_of.to_field(), inner_hash].as_slice(),\n            GasOpts::default(),\n        )\n        .deserialize_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computs the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that have authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub fn set_authorized(context: &mut PublicContext, message_hash: Field, authorize: bool) {\n    context\n        .call_public_function(\n            CANONICAL_AUTH_REGISTRY_ADDRESS,\n            comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n            [message_hash, authorize as Field].as_slice(),\n            GasOpts::default(),\n        )\n        .assert_empty();\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    context\n        .call_public_function(\n            CANONICAL_AUTH_REGISTRY_ADDRESS,\n            comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n            [context.this_address().to_field(), reject as Field].as_slice(),\n            GasOpts::default(),\n        )\n        .assert_empty();\n}\n"},"91":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_oracle_wrapper(args) };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_array_oracle_wrapper(args) };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"93":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{\n    KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"96":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress}, public_keys::{PublicKeys, NpkM, IvpkM, OvpkM, TpkM},\n    point::Point,\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"97":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, data::PublicDataTreeLeafPreimage, utils::arr_copy_slice,\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: u32 = 45;\n\npub struct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _public_data_tree_index: Field,\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\npub unconstrained fn get_public_data_witness(\n    block_number: u32,\n    public_data_tree_index: Field,\n) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, public_data_tree_index);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage {\n            slot: fields[1],\n            value: fields[2],\n            next_index: fields[3] as u32,\n            next_slot: fields[4],\n        },\n        path: arr_copy_slice(\n            fields,\n            [0; PUBLIC_DATA_TREE_HEIGHT],\n            1 + LEAF_PREIMAGE_LENGTH,\n        ),\n    }\n}\n"},"98":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(\n            contract_address,\n            randomness,\n            encrypted_event,\n            counter,\n        )\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32,\n) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\npub unconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {}\n"},"99":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader,\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\npub unconstrained fn get_contract_instance_internal_avm(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"}}}