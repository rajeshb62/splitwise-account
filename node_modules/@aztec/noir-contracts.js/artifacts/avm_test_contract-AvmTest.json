{"transpiled":true,"noir_version":"0.36.0+1094f036be7b102252a3a5c0d4b8c621779cf4bd-x8664","name":"AvmTest","functions":[{"name":"create_different_nullifier_in_nested_call","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"nestedAddress","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMrCIBDAAErCIBEAAIiAAo4AIBFAAAiAFYxAgACJAIAAQQAOAIEBSoIAQIAAAECASQCBAEEKg4EAioIAQYAAAECASQCBAEIJAIEAgoAOAgKCSoIAQcAEAEJASQDBAEHACgHAgkqDggJJAIEAgkAOAcJCCoMCAkmAgDZfQyKAAoqDgoJKg4HBiQCBAAHKgwHAyAAJQo4AwcIIQIAQwAIIAAoKg0CAyoNBgIqCAEEJAIEAwUAEAEFASQDBAEEACgEAgUqDAUGKQIAMGROcuExoCm4UEW2gYFYXSgz6Eh5uXCRQ+H1k/AAAAAAByoOBwYAKAYCBioOBwYmAgDVRBsNAAUAKAQCBgAoAgIKKg0KCQAoCgIIKggBCgAAAQIBJAMEAQoAKAoCDDY/lQAGAAEACAAJAAwAAAALAAUkAgIBAQo4CwECIQIAQgACOQEAACMKOAMHCCECAEYACDkBAAAqDQIIKg0GCQAoCAIKKwQACYADJQAEAAGABCIAWysIgAUACysIgAYADCoOBQwqDQsIACgIAggqDggLKg4KAioOCwYqDAQDIAAlJQAEeACABA0AAACABIADIQAAWoADOQEAACMBAIADAAKABysBgAeABwEAgAeABIAIJQAEAAKACgEAgAiACoAJKwAAAYAFAQAAAYAJAAElAQQAAYAFAQCABQACgAkrAoAIgAklAAQAAoAKAQCAA4AKgAklAAQAAoALAQCABYALgAolAAQAAIAMDQCADIAHgA0XAIANgA0hAABzgA0BAIAJgAyADisBgA6ACwEAgAqADIAOKwKAC4AOAQCADAACgAwgAGoBAIAKgAeABiMrABjKGMo=","debug_symbols":"1ZvtasIwFIbvJb/7I1/nJPFWxpCqVQqlitbBEO99bdd2Ol0D+2NeBDH6Rp4TjA+ctBexKVbn3bKst/uTWLxdRLVf5025r9vR5ZqJ1bGsqnK3vH1byO5JqT5/OuR1Nzw1+bERC0WSbCaKetO/dtx+x7asCrEw7K/ZQ954p4e48cFNaeXpSdp5K4e0ayfepd8zofRzJGX8hNQ+7pC6aeZ/0+wfCxDczTQXWQAmS0OcyZmfkoJ6ktZsxuXS7GR0ucIQ9tJPWa1tj0/Y+IyN77DxPTZ+gMbXEhtfYeNrbHyDjY9tXY1tXY1tXY1tXY1tXY1tXYNtXYNtXYNtXYNtXZP8H6diNfIrbqHHNPedAZv83lVseeJn+Zs/+c0b4X/F7nVybBZpb2KtJW+1Gn//1qm7dFeAQS/AohdA6AUwegEOvQCPXkAAL4AkegEKvQB0ExO6iQndxIRuYkI3MaGbmNBNTOgmZnQTM7qJ+RUmDjSmdWD3gGTSQ7LpIVF6SOD9OU7+ZCPCn/zRxjy/A+iPzvID9Edn+ZM/3Zjv77rkjzci/BacP/nLCiL8yV9XEOEH8O8sP4B/Z/kB/DvH78HPJz34+aQH96+H9u+1HX3kxzJfVcVw38H2XK9vbkNoPg/fn7ThLw==","brillig_names":["create_different_nullifier_in_nested_call"],"assert_messages":{"65":"Nested call failed!","69":"Index out of bounds","89":"Stack too deep"}},{"name":"elliptic_curve_add","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"lhs","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"},"visibility":"private"},{"name":"rhs","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"},"visibility":"public"}},"bytecode":"JAAEAQIlAASATAABJAAEAwAkAgQGByQCBAAIHxgACAAHgEMdAAGARYBFHQABgEiASCsIgEMAASsIgEQAAisIgEUAAysIgEYABCsIgEcABSsIgEgABiIAEysEAAGASSsEAAKASisEAAOASzgAgEkAAyIAZgo4AQQKCjgCBQsEOAoLDBYMCw0EOAoNCxwMAAoNADgBDQ4qCAENJAIEBA8AEAEPASQDBAENACgNAg8/P8AADgACAAoABAAFAAYADyQCBAAOACgNAhAAOBAOESoNEQ8kAgQBEAAoDQISADgSEBMqDRMRKggBDQAAAQIBKggBEgAAAQIBKggBEwAAAQIBKg4PDSoOERIqDgoTKggBFCQCBAQVABABFQEkAwQBFAAoFAIVPz/AAAEAAgADAAEAAgADABUAKBQCFgA4Fg4XKg0XFQAoFAIWADgWEBcqDRcOIQIARAAMIABAKgwPByoMEQgqDAoJIABJJAIBAAoqDBUHKgwOCCoMCgkgAEkqDgcNKg4IEioOCRMhAgBOAAMgAFIqDgQNKg4FEioOBhMgAFIhAgBUAAYgAFgqDgENKg4CEioOAxMgAFgWDAMBFgwGAgQ4AQIEBDgLBAEqDQ0CKg0SBAQ4AwYFEjgBBQMqDgINKg4EEioOAxMqDAIBKgwEAiMlAAR4AIAEDQAAAIAEgAMhAABqgAM5AQAAIysAGMoYyg==","debug_symbols":"1dpda8IwFAbg/5JrL/J5kvhXxpD6SaFU0ToY4n9fz2arS0dvBuHNjRg9yINNzpvS3MR2t74eVnW7P17E8u0mmuOm6upj249u94VYn+umqQ+r14+F5Bctv+svp6rl4aWrzp1YKopyIXbttn/rpex/YV83O7E0FO6LabW0Y7X0aqzW9o9ip6J9FDut7Gvx+0JolZujLY0copSjs3PiyDHGpxyDxbG5OcYPxc4qnXJcbo71YeA4OZk7lJ1D9ORMLpbPzSGvBo7/vdCnxZ7MYPcUTGoPBdtjuXYjC7argu26YLvBtkc/2L1Sqd0WbHcF26lgO3aueu1Gu4mpHTtX5+3YuTprt9i5Om8HylXmAEUlc4DSjzlAgcYcoIxiDlDsMAcoSZgDFA7MAer3Pcdlb+FBjZzg9H+26E4VbNcF203Bdluw3RVsJ2z73K2R8wXbQ8H2CG2fvb0g7Fydt2Pn6qzdA2UTc4DihjlACcIcoObEHKB+03MCUAthDtZUDlhTOQDtb5iDtbIC1sqKuVcWKT3sjUlR+kg7quwcaZ+ckHI0FsdgcXK3QdJq2COTdunpjOiy/zvRPTmTqUxYHI/FCUCcez/6qM51tW52j+N1+2u7eTlt132efr7pi78A","brillig_names":["elliptic_curve_add"],"assert_messages":{"105":"Stack too deep"}},{"name":"get_sender","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAweAgEAASMlAAR4AIAEDQAAAIAEgAMhAAAQgAM5AQAAIysAGMoYyg==","debug_symbols":"bc9LCsMgEAbgu8w6C4OPpLlKKUETDYJoUFMo4t2rbVpSmo34z3wMMwlmKbZl1Fa5AMM1gXETj9rZklJuQHhtjF7GYxlQfVr08mHltsYQuY8wXDqKG5B2rt+uLROUNhIGzPrc/GmCcL9rggj76ranJ5pR8tGMMvyjb7nEO/eaCyP33dVmp8Mp8bG+OwU/AQ==","brillig_names":["get_sender"],"assert_messages":{"15":"Stack too deep"}},{"name":"get_transaction_fee","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAweAgMAASMlAAR4AIAEDQAAAIAEgAMhAAAQgAM5AQAAIysAGMoYyg==","debug_symbols":"bc9RCsMgDAbgu+S5D8qctb3KGEVbLYJoUTsY4t2nm7CO9UX8k4+QJFik2NdJW+UCjLcExs08amdLSrkD4bUxep2OZUD1wejtw8ZtjSFyH2EcBkI6kHapX9qXCUobCeOFstz9aUIRappQ/NWYXU807VnfNGUY/+h7LvHBvebCyLa72u18OCU+t0+n4Bc=","brillig_names":["get_transaction_fee"],"assert_messages":{"15":"Stack too deep"}},{"name":"test_get_contract_instance_raw","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"JAAEAQIlAASAQwABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAg4AIBDAAAiAJYeAgAAASoIAQIkAgQSAwAQAQMBJAMEAQIAKAICAzMOAAAAAQAAAAMkAgQAAQAoAgIEADgEAQUqDQUDJAIAAQEKOAMBBCECABgABDkBAAAkAgQBAQAoAgIEADgEAQUqDQUDJQIAASMAAQo4AwEEIQIAIAAEOQEAACQCBAIBACgCAgQAOAQBBSoNBQMlAgAEVgABCjgDAQQhAgAoAAQ5AQAAJAIEAwEAKAICBAA4BAEFKg0FAyUCAAeJAAEKOAMBBCECADAABDkBAAAkAgQEAQAoAgIEADgEAQUqDQUDJgIAABAREgABCjgDAQQhAgA4AAQ5AQAAJAIEBQEAKAICBAA4BAEFKg0FAyYCAAATFBUAAQo4AwEEIQIAQAAEOQEAACQCBAYBACgCAgQAOAQBBSoNBQMmAgAAFhcYAAEKOAMBBCECAEgABDkBAAAkAgQHAQAoAgIEADgEAQUqDQUDJAIAAAEKOAMBBCECAFAABDkBAAAkAgQIAwAoAgIFADgFAwYqDQYEJgIAABkgIQADCjgEAwUhAgBYAAU5AQAAJAIECQMAKAICBQA4BQMGKg0GBCYCAAAiIyQAAwo4BAMFIQIAYAAFOQEAACQCBAoDACgCAgUAOAUDBioNBgQKOAQBAyECAGcAAzkBAAAkAgQLAwAoAgIFADgFAwYqDQYEJgIAACUmJwADCjgEAwUhAgBvAAU5AQAAJAIEDAMAKAICBQA4BQMGKg0GBCYCAAAoKTAAAwo4BAMFIQIAdwAFOQEAACQCBA0DACgCAgUAOAUDBioNBgQKOAQBAyECAH4AAzkBAAAkAgQOAwAoAgIFADgFAwYqDQYEJgIAADEyMwADCjgEAwUhAgCGAAU5AQAAJAIEDwMAKAICBQA4BQMGKg0GBCYCAAA0NTYAAwo4BAMFIQIAjgAFOQEAACQCBBADACgCAgUAOAUDBioNBgQKOAQBAiECAJUAAjkBAAAjJQAEeACABA0AAACABIADIQAAmoADOQEAACMrABjKGMo=","debug_symbols":"tdnbamJRDAbgd9nXXqxTTn2VYSi2tUUQW1o7MIjvPtrRZSWRRX/wpnRrvrCJce0Qt9PT4uHz5X65fn79mO5+bafV6+N8s3xd76+2u9n08L5crZYv999fntLhj32Ff7zN14erj838fTPdaWWbTYv10+FftX2C5+VqMd1V1t3MRVdjOkZXk9ajs1IQzU3zMZqbyUX079mUU3xDtfUbsjK4ISU5BZv2WLOv/PnG+cuN89cb5283zk83zs9hfjI+EU50kf+ABEGKIANQSUOUi0MZQQVBFUFxn3FNHVVziBDECBIE6RA1dcgAVBOCMoLijmA+f7jiGrZWBDUEEYJ4iLQ5JAhSBBmAWtwRksoJSc4OZQQVBFUEtSEqySFCECNIEBR3hFTtqIlDBiBKCMoIKkNE7rCkiqCGIELQlY6QPnqIskOCIEWQAYjTEJl7AHBGUEFQRVDcEZr7YanFPQCYEMQIEgTpEFX3JWQDkCQEZQTFHaFEHbF7qElFUEMQIYiHSNzgK4IgRZABSK90hPUhUc0dlpoRVBBUEdRGyPzwoYQgRpAgKO4IK31xY9UdlmoAsoSgjKAyROQGKqsIaggiBMUdYdyHDxNfCEGQIsgAlFMaKj995JQhVSAVdoWldFozWcrNqwYpghRDSoaqBNVQSBmi4gXuUOVYtbMiX4142TpUFVINUjRUHFSDISWQUkhd6Q09K/PVKAlSGVIFUnWk9geSVw1SBKm4N/a17aomrwRSCilDVLzSvFDNVyPeaQ5VgVSFVNwbmc9KgmoQpBhSAikdKg2qYYhqCVIZUnFvlNRVyb4a8X5zqBqkCFI8Vn7Si3ecQ6U/Vrv95Z/5+3L+sFocf7R+/lw/fvsNe/P37f87++B/","brillig_names":["test_get_contract_instance_raw"],"assert_messages":{"153":"Stack too deep"}},{"name":"get_chain_id","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAweAgQAASMlAAR4AIAEDQAAAIAEgAMhAAAQgAM5AQAAIysAGMoYyg==","debug_symbols":"bc/hCoMgEAfwd7nPfbBpJr7KGKGlIYiG2mBI7z5rMhrri9zf+3HcZZiUXOfBOO0j8HsG60eRjHcl5a0BGYy1Zh7O34D2p0WHj4twe4xJhAS8RQjfGlBuOmrCygxtrAKOaan/PKE9rpxQhr+6Zd2Fpqzrq6asJz/6sZX4FMEIaVXdXq9uPB2TXsunU/Ab","brillig_names":["get_chain_id"],"assert_messages":{"15":"Stack too deep"}},{"name":"get_version","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAweAgUAASMlAAR4AIAEDQAAAIAEgAMhAAAQgAM5AQAAIysAGMoYyg==","debug_symbols":"bc9LCsMgEAbgu8w6i5iHJl6llKCJBkE0qCkU8e41qZSUdiP+Mx/DTIRF8H2dlJHWA71F0HZmQVmTU0wVcKe0Vut0LUN9PKg+vd+YOaIPzAWgqEaoqUCY5fw3JM+QSgugLR5S9eM70pLCO9Lhj0ZD/0fjEY1F47Htv/Q95fhgTjGuRdle7ma+HBOe27uT8Qs=","brillig_names":["get_version"],"assert_messages":{"15":"Stack too deep"}},{"name":"get_fee_per_da_gas","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAweAgkAASMlAAR4AIAEDQAAAIAEgAMhAAAQgAM5AQAAIysAGMoYyg==","debug_symbols":"bc/RCoMgFAbgdznXXehaZr7KGKGlIYiG2mCI7z5rMhrbjfjrdw7nJJil2JZRW+UCsFsC4yYetbMlpdyA8NoYvYznZ0D7gdHhw8rtHkPkPgLD6EpwA9LOx522pYfSRgJrCc3Nj+9QiyrvSulHY9r90T0eSNX9BQ9f+p5LfHCvuTCyTq82O52Wic/1/VPwCw==","brillig_names":["get_fee_per_da_gas"],"assert_messages":{"15":"Stack too deep"}},{"name":"return_oracle","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"JAAEAQIlAASARgABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAA8AKAECAiUCBIBDAAMkAgQDBCsEAAKAAysEAAOABCsEAASABSIAMDgAgEMAAyIAOyoIAQEkAgQEAgAQAQIBJAMEAQEAKAECAioMAgMkAgABBCoOBAMAKAMCAyQCAAIFKg4FAwAoAwIDJAIAAwYqDgYDACgBAgI4AwACAAMkAgAGASoIAQIkAgQEAwAQAQMBJAMEAQIAKAICAyoMAwQkAgAEBSoOBQQAKAQCBCQCAAUGKg4GBAAoBAIEKg4BBCoMAgEjJQAEAACABw0AgAeABYAIFwCACIAIIQAAOoAIAQCAA4AHgAkrAYAJgAYBAIAEgAeACSsCgAaACQEAgAcAAoAHIAAxIyUABHgAgAQNAAAAgASAAyEAAD+AAzkBAAAjKwAYyhjK","debug_symbols":"tZXNCoQgFIXf5a5bpE6lvcowhJWFIBZlA0P47mPzRzDrsxGPHu63+rg79abdxsb6YVqpvu7kpk4HO/mU9phRu1jn7Nicnyk/Dla++uus/RHXoJdAdZULlZHx/XFVVZowWGeoFqWM2V9bKv5tS1Vcfm0mi3jLiFV4hMQjFBzBczyC4REcjxB4xAWPKPAIvN0cbzfH283xdgu83QJtd0zxrherW2c+q2XYfHfaNOExv39S+Qk=","brillig_names":["return_oracle"],"assert_messages":{"62":"Stack too deep"}},{"name":"get_args_hash","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"_a","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"_fields","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7Z3dbtpKFIXfhetczM+emT15laOjirRphYRIldAjHUV599oUMI093mIJyWa2b6rS+HNZix37y8SY99W356dfP75sdt9f3laP/7yvti9f1/vNy6559P7xsHp63Wy3mx9fLv95Zdo/fDhs//ZzvWsfvu3Xr/vVo7U2hIfV8+7b4e8pNvv4vtk+rx595I+H3vZEIR03J2J/3tpyGNjaxmxOO0/GCPtmtnTcmjmEv/b978PKx3sPkO49AN97gHznAcjcewB77wHcvQfwcw/gXXbHrb0Pudt3tEP7NpRPT8Wa4FO3dzf0XKKPx63j5bZ06IaWbordzN4fJuxm9moyYTezt54Ju5m9UE3Yzexdbbpuwuw1cMJuZm+YE3Yze3mdsJvFi8vd0NJNsZvFi8vdLF5c7mbx4nI32r04nZ5KTPZzN9q9eKSbqN2Lx7rR7sVj3Wj34rFutHvxWDekqZs2sCrZbQOrMtg2sCotbQOrcs02sCqBbAInVVbYBlalem1gVf7WBlYlZW1g0hZYm2klbaaVtJlW0mZaSZtpsTbTYm2mxdpMi7WZFpO2wNpMi7WZFmszLdZmWqzNtLI208raTCtrM62szbQyaQuszbSyNtPK2kwrV2dagXwXOMRe4OpMSwhsTXWqJSauzrXExNXJlpi4OtsSE5O6xNX5lpi4OuESE1dnXGJibcrVxKku8YVVR5P7ias7VsdwkfjyQuLBi47Htz80VN2x/cqGUjp/06T8+cJsa6s7Edy2nurOGretp7pTzJX1MJ/enGezCb16qlsDuGk9rroFg9vWU53N3Lae6pYibltPdesWt62HlnrG6tFuzUI92q1ZqEe7NQv1LNY8Ws9izWP1+MWaR+tZrHm0nsWaR+tZrHm0HlrqGatHuTU74057d8b361FuzVI9yq1Zqke5NUv1KLdmoZ75fyDEtPUot2apHuXWLNWj3JqleurzHk9dPeT/queQuD6VkRLXZydS4vqEQ0hc36cJiInr0wIpcX1neilxfSdvZ7rEfiAxqUtc38KUlLg+55IS1+dcUuL6nEtKXJ9zCYnru1O9mLg+55IS1+dcUmJ1zlXfHeDFxOqcq757wEuJCzefZeITxrFbPHTmz3pg4Q6urnt3m4u9t1oU7oIqQIxAGYAKd7QUoOFTnUvneXGZe5BDoOHKgz2/vsH2n15CIEagDECFW1sJ0HDlzXCfoBhND3II5BGIECggUESghECMQPl6yBXuwCFAFoEcAnkEIgQKCBQRKCEQIxAyEbYwEey6k6brQRaBHAJ5BCIECggUESgh0PCLS+ffK1qiz8dyV3j/nABZBHII5BGIECggUESghECMQMhEeGQiPDIRheuIO3dvfgfcOxoVrq4VIEKggEARgRICMQJlACpc9yRAFoGQiSBkIgiZCEImgpCJIODHBkeMQMCPDS4YBBr8n5jykeHgPyOFVT0TXPcjdehBHoEIgQICFVY4XD4vcCTuQQmBGIEyAJU+9WscsgjkEMgjECFQQCBkIhIyEQmZiIRMBCMTwchEDH9oxOhhpfCxC8Z2Vzn4PpQQiBEoA1BhJUeALAIhB+WMHJQzclDOyEG5sJIjQAmBGIHy9ZAvrOSYeP5uMux6kEUgh0AegQiBAgJFBJInYgBi5MVFJqKwkiNAFoEcAnkEIgQKCBQRKCEQMhEWmQiHTIRDJsIhE+GQF9chL65DXlx39Yv70Tz6b/26WT9tn98apv3ir93X/eZld3y4///nn680G/8G","brillig_names":["get_args_hash"],"assert_messages":{"295":"Array index out of bounds","311":"Array index out of bounds","327":"attempt to add with overflow","149":"Array index out of bounds","194":"Array index out of bounds","213":"attempt to add with overflow","172":"Stack too deep","303":"Array index out of bounds","166":"attempt to add with overflow"}},{"name":"emit_unencrypted_log","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"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","debug_symbols":"zZ3dTuNIEIXfJddcVFd1d1XzKqvVCGaYUSQURsCstEK8+4YfO5lpEi62fXxuECGdfF+Cz0nbju2nzbeb618/vmx33+8eNpd/PW1u775ePW7vdvtbT88Xm+v77e3t9seX4z9v5OVHex3+8PNq93Lr4fHq/nFzmZJmudjc7L69/l5j/xTft7c3m0t7+b0bHzKNDi3z2BTlg7Hmmt4Hm1ubR6u0578vNknYhBKbkLIJGZtQZhMqbEKVTcjZhIJNiK2pla2pla2pla2pla2pla2pla2pla2pdYWmDp2E9o/rhIJNqJEJmbAJJTYhZRMyNqHMJlTYhCqbEFtTG1tTG1tTF7xQ6EFI7U+hii/Gluok1KwXMjahzCZU2IRGF6Pl34ReEL48IpZHtMURLssj0vIIXR5hyyPy8oiyPGL5dPvy6fbl0+3LpzuWT3csn+4Ykm73NiP8kw8wb+bvg725dULGJpTZhAqb0IlWMqmzkB0tegMmQZbmzWaW9GgSlF+FnE0o2IQamVATNqHEJqRsQsYmlNmECpsQW1M3tqZubE3d2Jo6CVtVJ2Hr6iRsZZ2Era2TsNV1Era+TmWFrFnMRrn1RissRzXPRm690ejlqF9LTqUAGBXAcAAjAIy2PKMKgJEADAUwDMAA5LwCcl4BOa+AnFdAzisg5z4k5wO3pyVPdEZKZ2R0Rif6Kethu2xu/olR0cm/6NHY8v7N7QJgVADDAYwAMNryjFM7moYyEoChAIYBGICcByDnAch5AHIegJzHkJxXmVZk69G6/sRoAmCkxRmWhvw/qpWJYbVj6JDXEXX6QA//gHGir4r4zChW/s/c004dJDKUkQGMAmBUAMMBjAAw2vKMU0c6DGUkAAOQcwPk3AA5N0DODZBzA+TchuR84BqqWWMzykJnlOiMhqzT1HmuUz13c52cAYwCYFQAwwGMWJ5RhsyhXaZ5uov3jCHLVci0SzJUekYBMIYsVzG3QvvjverH7jdfTc/sR3tho775OJlPkPk0tI/KdGiXinU+Vch8EplPhvvMB96rau8Dz5fNY6194DMmX2e3d9S2PMMFwABsG3IFMAzAyABGATAqgOEABiDnDsh5AHIegJwHIOcByHnA56/a5sOUJXWfZ+FkPkHm07h8mqzpU3qfROajZD5G5pPJfAp8fn/4WnWR3qeS+TiZT5D5NCqfLELmk8h8dE2f1vsYmU/G+0zz1f2Gh94H389azvlUMh8n88H387ntZVkal08SMp9E5qNkPkbmM6R/zu6ry2lIp7hOr8Nztx8tqwAYCcAYsry628SI2jMMwMgARgEwKoDhAEYAGEM+G73ODO/zYQJgJABDAQwDMDKAUQCMCmA4gBEABiDnGZDzDMh5HjP/PPcdojzme3yfMDKAUQCMCmAEgNGWZxQBMBKAcWLZXe1cJ7mscD4Yn3dbWOTeqNIZOZ1R0Bk1NqMqdEaJzkhXNWrWG7GdeynXTGdU6IwqnZHTGQWdUWMzcqEzSnRGSmdE19lO19lO19lO19lO19lO19mBv9RdlPn8nVHiyOhtnTaUzsjojDKdUaEzqnRGTmcUqxrVD4wam1ETOqNEZ6R0RkZnlOmMCp1RpTNyOiO2zi6yQh8dDlWIo30osxE+a+evMVmE7aqXRSqdkbMZJWFbshM+a03t8B5pb6R0RkZnlOmMCp3RCn1kh/T/ti/73cjpjILOqLEZqdAZJTojpTNiu256Ubo5pNLNIZVuDql0c0gNOqPGZmRCZ5TojJTOiK6zja6zja6zja6zja6zjauzn/c3/7m6315d39487B/0cu+v3dfH7d3u/ebjvz/f7tkP/g8=","brillig_names":["emit_unencrypted_log"],"assert_messages":{"544":"Stack too deep","413":"attempt to add with overflow","445":"attempt to add with overflow","477":"attempt to add with overflow","538":"attempt to add with overflow","398":"Array index out of bounds","526":"Array index out of bounds","389":"attempt to subtract with overflow","514":"attempt to add with overflow","371":"Array index out of bounds","432":"Array index out of bounds","458":"Array index out of bounds","519":"Array index out of bounds","484":"Array index out of bounds","382":"attempt to add with overflow","507":"attempt to add with overflow","466":"Array index out of bounds","425":"Array index out of bounds","393":"attempt to subtract with overflow","451":"attempt to add with overflow"}},{"name":"get_block_number","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAweAgYAASMlAAR4AIAEDQAAAIAEgAMhAAAQgAM5AQAAIysAGMoYyg==","debug_symbols":"bc9RCsMgDAbgu+S5D7q1znqVMYq2WgTRonYwxLtPt250rC/in3yEJMEkxToP2ioXgF0TGDfyqJ0tKeUGhNfG6HnYlwHVB6OXDwu3NYbIfQSGEe5JA9JO9X/CpMxQ2khgZ0Jz8+dbirqNtxT3X41pd6BJTz/6ghD50bdc4p17zYWR2/ZqtePumPhY3p2Cnw==","brillig_names":["get_block_number"],"assert_messages":{"15":"Stack too deep"}},{"name":"read_storage_list","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAA8AKAECAiUCBIBDAAMkAgQCBCsEAAKAAysEAAOABCsEAASABSIAUDgAgEMAAiIAWyoIAQIkAgQDAwAQAQMBJAMEAQIAKAICAyoMAwQkAgAABSoOBQQAKAQCBCoOBQQqDQIDACgDAgMqDgMCKggBAwAAAQIBKg4CAyQCBAICJAIAAgQkAgQBBSQCBAAGKgwGASAAJgw4AQIHIQIAOgAHIAApKg0DAQAoAQIDADgDBgQqDQQCACgBAgQAOAQFBioNBgMqCAEBJAIEAwQAEAEEASQDBAEBACgBAgQqDAQFKg4CBQAoBQIFKg4DBSMqDQMHHAwAAQgAOAQICSwMAAkACCQCBAIKDDgBCgshAgBCAAs5AQAAKwQAB4ADJQAEAAOABCIAYCsIgAUACQAoCQIKADgKAQsqDggLADgBBQcOOAEHCCECAE0ACDkBAAAqDgkDKgwHASAAJiUABAAAgAcNAIAHgAWACBcAgAiACCEAAFqACAEAgAOAB4AJKwGACYAGAQCABIAHgAkrAoAGgAkBAIAHAAKAByAAUSMlAAR4AIAEDQAAAIAEgAMhAABfgAM5AQAAIysBgAOABgsAgAYAAoAHIQAAZIAHIABmKwCAA4AFIAB0KwAAAYAFAQAAAYAEAAElAAQAAIAJDQCACYAEgAoXAIAKgAohAABygAoBAIADgAmACysBgAuACAEAgAWACYALKwKACIALAQCACQACgAkgAGklAQQAAYAFIAB0IysAGMoYyg==","debug_symbols":"1drNjoIwFAXgd+naRdvb9hZfZTIxqGhICBrFSSbGd58yA/iDgeXcszGtnpBPRE9tuKptsb7sV2W9O5zV8uOqqsMmb8pDnWbX20KtT2VVlfvV49NKtw8m/ObPx7xup+cmPzVqaV1mFqqot2nodUxH2JVVoZYU0niUNjq6Lm2Mzoa0IfMm7YOzXdqHQPd09O/SFLlPU4xP6c+FMozNj9j8DJpvNTbfYPMtNp+w+Q6b77H52K1rsVvXYreuxW5dwm5dwm5dkn7tO9MfOw39K99JP/uO9MCnMOL/w5rHDpdD4DjDp+HkkzVPjhZPyHiHjPfC8Tb0eKIRPiDjGRjvsX/rvfR1jgvDJ+WYX/lB+jrHeTvFl9+02Z0/9z3JtO0lmfbjNyt9L2J6WRGk70XM8B02X/pexAxf+l7EDF/6XsQMX3xHT/PFd/Qkn8V39DQf+98wY7cuY7cuY7cuY7cuY7cuI7fuLU2/8lOZr6uiu0Fid6k3D/dLNN/Hv1dS+Ac=","brillig_names":["read_storage_list"],"assert_messages":{"76":"attempt to add with overflow","65":"Array index out of bounds","94":"Stack too deep"}},{"name":"set_opcode_u64","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAwnAgUQAAAAAAAAAAABIyUABHgAgAQNAAAAgASAAyEAABCAAzkBAAAjKwAYyhjK","debug_symbols":"XclRCoAgDIDhu+y5E3SVCFFTGYwtTIMYu3tBPYSP//8pbCn04pCzHDAvCiTRNxR+Sm2CUJEIixv26Sv6QOnL3Dn+tF37K7baDQ==","brillig_names":["set_opcode_u64"],"assert_messages":{"15":"Stack too deep"}},{"name":"nested_static_call_to_add","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"arg_a","type":{"kind":"field"},"visibility":"private"},{"name":"arg_b","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARgABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMrCIBDAAErCIBEAAIiAAsrBAABgEU4AIBFAAEiAHYeAgAABCoIAQUAAAECASQCBAEGKg4GBSoIAQcAAAECASYCAKpjSKEACCQCBAEKJAIEAgwAOAoMCyoIAQkAEAELASQDBAEJACgJAgsqDgoLJAIEAgsAOAkLCioMCgsqDggLKg4JByQCBAAIJAIBAQkkAgQCCioMCAMgACYMOAMKCyECAEgACyAAKSoNBQEqDQcCKggBAyQCBAMFABABBQEkAwQBAwAoAwIFKgwFBikCADBkTnLhMaApuFBFtoGBWF0oM+hIeblwkUPh9ZPwAAAAAAcqDgcGACgGAgYqDgcGJgIA1UQbDQAFACgDAgYAKAICCyoNCwoAKAsCCSoIAQskAgQCDAAQAQwBJAMEAQsAKAsCDTc/lQAGAAQACQAKAA0AAQAMAAUkAgIBAQo4DAECIQIARAACOQEAAAAoCwICADgCCAMqDQMBIww4AwoLIQIASwALOQEAACQCBAIMJAIEAg4AOAwODSoIAQsAEAENASQDBAELACgLAg0qDgwNJAIEAg0AOAsNDCoMDA0qDgENACgNAg0qDgINACgLAg0qDQ0NDDgDDQ4hAgBeAA45AQAAJAIEAg4AOAsODQA4DQMOKg0ODCoNBQsqDQcNACgLAg4rBAANgAMlAAQAAYAEIgB7KwiABQAPKwiABgAQKg4MECoNDwsAKAsCCyoOCw8qDg4FKg4PBwA4AwYLDjgDCwwhAgB0AAw5AQAAKgwLAyAAJiUABHgAgAQNAAAAgASAAyEAAHqAAzkBAAAjAQCAAwACgAcrAYAHgAcBAIAHgASACCUABAACgAoBAIAIgAqACSsAAAGABQEAAAGACQABJQEEAAGABQEAgAUAAoAJKwKACIAJJQAEAAKACgEAgAOACoAJJQAEAAKACwEAgAWAC4AKJQAEAACADA0AgAyAB4ANFwCADYANIQAAk4ANAQCACYAMgA4rAYAOgAsBAIAKgAyADisCgAuADgEAgAwAAoAMIACKAQCACoAHgAYjKwAYyhjK","debug_symbols":"1ZzRbuIwEEX/Jc88eMb2eIZfWa2q0EIVKQoV0JVWiH/fkE0C3bLOS6X6viASRuFc5OgQj+Vz9bLdvL8+Nd1uf6zWP85Vu3+uT82+64/Ol1W1OTRt27w+3Z+u3PWFeKg/vtXd9fB4qg+nak3Bi66qbfcyvFftr7Fr2m217s9fVp/qvUkcy72lMFeTxgfVEpTGagmWPlT/XFXk/4MUZUYKLAtIkXhKEEn87UuMHgXwc7X3IgsBktpYrO720zCHAT9g40dsfMHGT9j4io1v0PjssPEJG5+x8bGty9jWZWzrMrZ1Gdu6jG1dxraux7aux7aux7auL/7WJaGJn4Rvj/YyPKuH4kcPSZhRRNy//MUPnwX+7/jXFkKY+OPd1NBjfpU4TQ1pIv5QfQ0Q0ANE9ACCHiChB1D0AAYeIDr0AIQegNEDoJs4ops4ops4ops4ops4ops4optY0E0s6CYWdBMLuonlO0wsbrq4F9JPSLE8JCkPKZWH9DVGY5sGbPRkC0jESf10ddb7+oe3AwfisZwD01zNzoYIBh8hOfwIADOluZnqVHx/e4E/gPMX3+Fe4C++xb3AX3yPe4EfvFOWiu9y5/m1+Db3Aj9ApzLLD+5fBfevgvtXwf2r4P5VcP8quH8V3L8G7l8D96+B+9fA/Wvg/jVw/xq4fw3cvwbuXwP3LzkAAeeWipIDX6tLDnyxLjkAB+cDAEg4HwDAwvkAABrOBwDwcD4AgIjzAQBMnA1A6CYmdBMTuonL32NkKQC6icvfZyQX4NIf/aoPTb1pt+MeO7v37vluy53T77e/n/TFfwA=","brillig_names":["nested_static_call_to_add"],"assert_messages":{"67":"Nested static call failed!","93":"Array index out of bounds","74":"Index out of bounds","121":"Stack too deep","115":"attempt to add with overflow"}},{"name":"add_storage_map","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["add_storage_map"],"assert_messages":{"349":"Array index out of bounds","145":"Stack too deep","37":"Storage slot 0 not allowed. Storage slots must start from 1.","357":"Array index out of bounds","127":"Array index out of bounds","415":"attempt to add with overflow","275":"attempt to add with overflow","80":"Storage slot 0 not allowed. Storage slots must start from 1.","109":"Array index out of bounds","138":"attempt to add with overflow","68":"attempt to add with overflow","257":"Array index out of bounds","117":"attempt to add with overflow","341":"Array index out of bounds","373":"attempt to add with overflow","396":"Array index out of bounds"}},{"name":"assert_nullifier_exists","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAk4AIBEAAAiABAeAgAAAjA4AAEAAgADJAIBAQEhAgAPAAM5AQAAIyUABHgAgAQNAAAAgASAAyEAABSAAzkBAAAjKwAYyhjK","debug_symbols":"nZJbCoMwEEX3Mt9+OOapWymlxCeBEMVHoYh7b9KqKLYI/oSZ5NxwQmaEvEiH6qFtWXeQ3EYwdaZ6XVvXjVMAaauN0dVjuw2hXzD88F2jrG+7XrU9JBgRKQMobO5rGkp3R6lNAQnhrj7wJOZsxkks6EqjZD9oTiXONKex2NH3ABD/KLFoVSKCnyhhxOIFJ8hOlIQgy3uFkHhQis6VKOJOycfItRi9EJtc+1StVqkp5l8vB5tthqB/Nd8TB78B","brillig_names":["assert_nullifier_exists"],"assert_messages":{"14":"Nullifier doesn't exist!","19":"Stack too deep"}},{"name":"set_opcode_really_big_field","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAwpAgASNFZ4kKvN7xI0VniQq83vEjRWeJCrze8SNFZ4kKvN7wABIyUABHgAgAQNAAAAgASAAyEAABCAAzkBAAAjKwAYyhjK","debug_symbols":"XclRCoAgDIDhu+y5E3SVCFFTGYwtTIMYu3tBPYSP//8pbCn04pCzHDAvCiTRNxR+Sm2CUJEIixv26Sv6QOnL3Dn+tF37K7baDQ==","brillig_names":["set_opcode_really_big_field"],"assert_messages":{"15":"Stack too deep"}},{"name":"pedersen_hash","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"data","type":{"kind":"array","length":10,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7dzdTiJBEEDhd5lrL7qruqu6fJXNxqCiISFgBDfZGN99B9dB4hC4G0+CNwakJcdSvzQ/7Wt3P799ebxZrB7Wm+7612u3XN/Ntov1qr/2+nbV3T4vlsvF483hp7u0+6D6vn7zNFvtrm62s+dtd50t0lU3X933Fz2l/h4eFst5d63W3q7Gq0uLYXUV36+WOLbYpe3verfic/Hvq04LK6eycoyV46ycxsoJVE5JrJzMyhFWDkvlwlK5sFQuLJULS+XCUrmwVK4slStL5cpSubJUriyVK0vlylK5slSuk6vcUhkWt6JfcwKVY4mVk1k5wspRVk5h5VRWjrFynJXDUtlYKjtLZWep7CyVnaWys1R2lsrOUtlZKjtLZWep3FgqN5bKjaVyY6ncWCrnyX+XJaXhrvuLedSjk/eY7Hu8jnqm/nlJzvv5ZEmjngrrMViPw3oarCdYPZFgPRnWI7AehfXAfA6YzwHzOWA+B8znYPncb9FgPSyfJbF8lsTyWdLkPkvZ90jUUc/kPmvKQ4/mMuoxWI/DehqsJ1g9OcF6MqxHYD0K6ymwHpjPGeZzhvmcYT5nmM8C81lgPgvMZ4H5LDCfBeazwHwWmM8C81lgPivMZ4X5rDCfFeazwnzW6X0u+9dPNWTUY7Aeh/U0WE+wekqC9WRYj8B6FNZTYD3f6/Po+fBisB5n9VTW+6Nk8uOK/Ss4uu+p4x6B9Sisp8B6KqzHYD0O65l8f5ikfvbI6cXaPx77WKzidnpxuA0V6aBZ6pG1ZkOxuR8ufZ9J/Mzk60wsXeZMYjjx64ePhT9mki90Jj7MRNpoJnKRM/E6vAneTUYz0Z+ZjGZSLnMmMTy51tLY2HqhMxm+vyZ5NBO7yJk0HYxtR/52/NJncmR/wt7Hah0Wq8bXQ1Ji7A2nljgR7+ydoZZ8Kp69hTsTz95rnYmfflOUPw/iyeiJ08mPs5/rqbAeg/U4rKfBeoLV8w0HgU/3ZFiPwHpgPjeYzw3mc4P53GA+N5jPDeZzwHwOmM8B8zlgPgfM54D5HDCfA+ZzwHwOls+aWD5rYvmsieWzJpbPmlg+a2L5rNMflE7e9j3RRj0O62mwnmD1TH9Q+kxPhvUIrEdhPQXWU2E9MJ8zzOcM8znDfBaYzwLzWWA+C8xngfksMJ8F5rPAfBaYzwLzWWE+K8xnhfmsMJ8V5rPCfFaYzwrzWWE+K8znAvO5wHwuMJ8L6x/d6/QHpc/0VFiPwXoc1tNgPcHq+YaD5Kd7MqxHYD0wnyvM5wrzucJ8rjCfK8znCvPZYD4bzGeD+Wwwnw3ms8F8NpjPBvPZYD4bzGeH+ewwnx3ms8N8dpjPDvPZYT47zGcn+fzWX/sze17MbpfzTf81uxtfVnfbxXr1cXX79+n/Lf3ifw==","brillig_names":["pedersen_hash"],"assert_messages":{"384":"Stack too deep","189":"Array index out of bounds","317":"Array index out of bounds","346":"Array index out of bounds","378":"attempt to add with overflow","369":"Array index out of bounds","299":"Array index out of bounds","328":"Array index out of bounds","229":"Array index out of bounds","357":"Array index out of bounds","220":"Array index out of bounds","284":"Array index out of bounds","313":"attempt to multiply with overflow","339":"Array index out of bounds","365":"attempt to add with overflow","295":"attempt to add with overflow","324":"attempt to add with overflow","254":"Array index out of bounds","280":"attempt to multiply with overflow","210":"Array index out of bounds","335":"attempt to add with overflow","198":"Array index out of bounds"}},{"name":"inner_helper_with_failed_assertion","is_unconstrained":false,"custom_attributes":[],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"H4sIAAAAAAAA/33OQQrCMBAF0BS8hZt4g0xmppnZeQgvkNAJDRQLRu8vYtFV+zZ/8+H/wf0Nbt91SwwjkaVogJBD1CIciMsoIMDCUxREE5KkRVNQIDSorFjD12fj5I7t/ThveZtb97l3ezzbevd9Xl/L5Gtuy+XXfQP4jlSZ2AAAAA==","debug_symbols":"TYxLCoQwEAXv0msXMwyOmquISEcTaWg6kkRBgnc3fhbuXr2CSjAavUw9iXUBVJuA3YCRnGRK8LmuMKOcFCL6CKpsqrIAI+M5m+9egCU2oH7/eu8yaU/MNPXvUr5X9ISazYN2keFl4zbfJicO","brillig_names":[]},{"name":"u128_from_integer_overflow","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAorBAABgEMrBAACgEQ4AIBDAAIiAIgqCAECAAABAgEkAgABAyoOAwIkAgQhBCoIAQUkAgQhBgAQAQYBJAMEAQUAKAUCBioMBgckAgEACCoOCAcAKAcCByoOCAcAKAcCByoOCAcAKAcCByoOCAcAKAcCByoOCAcAKAcCByoOCAcAKAcCByoOCAcAKAcCByQCAQEJKg4JBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IBwAoBwIHKg4IByQCBCAGJAIEAQckAgACCioMBwEgAFwMOAEECyECAG0ACyAAXyoNAgEcDAABAigCAP////////////////////8AAw44AgMEIQIAZQAEOQEAABwMBQEDHAwAAwICOAECAygCAAAAAAAAAAABAAAAAAAAAAAAAQg4AwEEKgwCASoMBAIjKg0CCyoNAgwEOAsMDQI4BgELDjgBBgwhAgB0AAw5AQAAJAIEIA4MOAsODyECAHgADzkBAAAAKAUCDgA4DgsPKg0PDBwMAAwLBDgNCgwEOAsMDgI4AwsMBDgMDQsAOA4LDCoODAIAOAEHCw44AQsMIQIAhgAMOQEAACoMCwEgAFwlAAR4AIAEDQAAAIAEgAMhAACMgAM5AQAAIysAGMoYyg==","debug_symbols":"zdjbisIwEAbgd8m1F5nJcXyVZZGqVQqlitaFRXz3ja6NpXHZmxnojST2p9/QdtLDVW3r9WW/arrd4ayWH1fVHjZV3xy6NLveFmp9atq22a/Gfyt9/wF45M/HqrtPz3116tXSedALVXfbxzCmPeyatlZL49O4SHuN8EynIeY0+tvnQgGKC0ZcsNICsRwlslkgPxUcgwDGDQIQTQX/TgBPgwBB638Eax0+09YGk9Pvwz4MWTLTYsKciolzKoZmVAxoPatqgKEap4dGT0MaV/MgUJ4wHISJmbC2ICwLkU+Fc6YgnDxB0qsugJYnOO7haS95ZYdQEMhy84iZGF1RA2HkCStPOHnCsxD+RbiCCPJElCdInEAtT4A8gfKEYSZc0RfI0t2OMuGLZRC5n6F9LAiW7g74ekwvDxRLdwf4+00AMEq/bACSOGG0PAHyBMoTRpa4pdlXdWqqdVs/P2nsLt1m9IWj/z7+bknhHw==","brillig_names":["u128_from_integer_overflow"],"assert_messages":{"115":"attempt to subtract with overflow","133":"attempt to add with overflow","119":"Array index out of bounds","100":"call to assert_max_bit_size","139":"Stack too deep"}},{"name":"modulo2","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"a","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"}},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMdAAWAQ4BDKwiAQwABIgALKwQAAYBEOACARAABIgAQHAwBAQMcDAUDAioMAgEjJQAEeACABA0AAACABIADIQAAFIADOQEAACMrABjKGMo=","debug_symbols":"lY7BCsMgEET/Zc8etIG09VdKCZpoWJA1qCkU8d+7aXLINZdl3+7MMBUmZ9d5QPIxg35VCHE0BSMx1SbAJgwB5+F8BrkNdfvr82Jow1xMKqBV/5QCHE283qXkBI/Bge76R3sLUN1lU2P8mITGBneU8iuNp47lu+wfFv8A","brillig_names":["modulo2"],"assert_messages":{"19":"Stack too deep"}},{"name":"set_opcode_u8","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAwkAgIIASMlAAR4AIAEDQAAAIAEgAMhAAAQgAM5AQAAIysAGMoYyg==","debug_symbols":"XclRCoAgDIDhu+y5E3SVCFFTGYwtTIMYu3tBPYSP//8pbCn04pCzHDAvCiTRNxR+Sm2CUJEIixv26Sv6QOnL3Dn+tF37K7baDQ==","brillig_names":["set_opcode_u8"],"assert_messages":{"15":"Stack too deep"}},{"name":"emit_nullifier_and_check","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAk4AIBEAAAiABExAgABHgIAAAIwOAABAAIAAyQCAQEBIQIAEAADOQEAACMlAAR4AIAEDQAAAIAEgAMhAAAVgAM5AQAAIysAGMoYyg==","debug_symbols":"nZLdioMwEEbfZa69cDJJJvFVlqXEVksgxKJ2YRHffWNXW/uH0JuQSc6Ek48Z4FCV5+POx7rpoPgaIDR71/smpmoYMyhbH4I/7tbHkE8L5he+O7k4lV3v2h4KFBoxgyoeLnui9EbtQwUFaTNmTzwZFjNOxvKVRqNe0GxkPtOcGu/o7wwQXytxTlclFptKVqtFybLcUNLSLP/V8uEDk5J4k5LmW0oWN5RQKLvghGorJSazpMQGn5ToTUpylZK0d0pTm/ysTX3QNqbyx7XelaGaB7E+x/1qLvvf0/9Ngv8A","brillig_names":["emit_nullifier_and_check"],"assert_messages":{"20":"Stack too deep","15":"Nullifier was just created, but its existence wasn't detected!"}},{"name":"keccak_f1600","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"data","type":{"kind":"array","length":25,"type":{"kind":"integer","sign":"unsigned","width":64}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":25,"type":{"kind":"integer","sign":"unsigned","width":64}},"visibility":"public"}},"bytecode":"JAAEAQIlAASAdQABJAAEAwAkAgQZAiQCBAADHxgAAwACgEMdAAWAQ4BDHQAFgESARB0ABYBFgEUdAAWARoBGHQAFgEeARx0ABYBIgEgdAAWASYBJHQAFgEqASh0ABYBLgEsdAAWATIBMHQAFgE2ATR0ABYBOgE4dAAWAT4BPHQAFgFCAUB0ABYBRgFEdAAWAUoBSHQAFgFOAUx0ABYBUgFQdAAWAVYBVHQAFgFaAVh0ABYBXgFcdAAWAWIBYHQAFgFmAWR0ABYBagFodAAWAW4BbJQIEgEMAASQCBBkDKggBAiQCBBoEABABBAEkAwQBAgAoAgIEKwQAAYADKwQABIAEKwQAA4AFIgA0KgwCASIAPwAoAQICJQIEgFwAAyQCBBkEKwQAAoADKwQAA4AEKwQABIAFIgA0OACAXAAZJQAEAACABw0AgAeABYAIFwCACIAIIQAAPoAIAQCAA4AHgAkrAYAJgAYBAIAEgAeACSsCgAaACQEAgAcAAoAHIAA1IyIASSoIAQIkAgQaAwAQAQMBJAMEAQIAKAECAwAoAgIEPg8ABAADKgwCASMlAAR4AIAEDQAAAIAEgAMhAABNgAM5AQAAIysAGMoYyg==","debug_symbols":"nZHBCsMgEET/Zc8eLG018VdKCZpoWBANagpF/PeaJodc42XZ2Z03l8kwabXOAzrjI4hXButHmdC7qnIhoAJai/NwPgPdBnv8/XGRbpMxyZBA3FhPCWg31ZVTWhMMWg3izrryJsCeLRBrgXgL1LVAfQPE6WWoVPmRAaWy+mjHrG48lZW+y/6p5h8=","brillig_names":["keccak_f1600"],"assert_messages":{"76":"Stack too deep"}},{"name":"u128_addition_overflow","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAorBAABgEMrBAACgEQ4AIBDAAIiAMcqCAECAAABAgEkAgAAAyoOAwIqCAEEAAABAgEqDgMEKggBAwAAAQIBJAIAAQUqDgUDJAICMAYkAgQAByQCAngIJAIEIgkkAgQQCiQCAkYLJAIAEAwqCAENJAIEIw4AEAEOASQDBAENACgNAg4qDA4PKg4GDwAoDwIPKg4IDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDwAoDwIPKg4LDyQCBAEOKgwHASAAaQw4AQoHIQIAowAHIABsKg4FAyQCBBEHJAIEIQoqDAcBIABxDDgBCgchAgCDAAcgAHQqDQIBKg0EAgA4AQUDHAwFAwQcDAAEAQI4AwEEKAIAAAAAAAAAAAEAAAAAAAAAAAADCDgEAwUAOAIFAxwMBQMEHAwABAIKOAIDBCECAIIABDkBAAAjKg0EBwI4CQEPDjgBCRAhAgCIABA5AQAAJAIEIhEMOA8REiECAIwAEjkBAAAAKA0CEQA4EQ8SKg0SECQCBBIRKggAEioMEBMAEAARACIAzCoEAAAqDBMPKg0DEAQ4DxARADgHEQ8qDg8EKg0DBwQ4BwwPKg4PAwA4AQ4HDjgBBw8hAgChAA85AQAAKgwHASAAcSoNAgcCOAkBDw44AQkQIQIAqAAQOQEAAAI4Dw4QDjgODxEhAgCsABE5AQAAJAIEIhEMOBAREiECALAAEjkBAAAAKA0CEQA4ERASKg0SDyQCBBIRKggAEioMDxMAEAARACIAzCoEAAAqDBMQKg0DDwQ4EA8RADgHEQ8qDg8CKg0DBwQ4BwwPKg4PAwA4AQ4HDjgBBw8hAgDFAA85AQAAKgwHASAAaSUABHgAgAQNAAAAgASAAyEAAMuAAzkBAAAjIgDHJAICOgMMOAEDBCECAPEABCAA0SQCAkEDDDgBAwQWDAQDJAICWgQMOAQBBRYMBQQEOAMEBRwMAgUDJAICIAQEOAQDBQA4AQUDDjgBAwQhAgDfAAQ5AQAAJAICYQEMOAMBBCQCAQABCjgEAQUhAgDlAAU5AQAAJAICZgQMOAQDBQo4BQEEIQIA6gAEOQEAACQCAlcBAjgDAQQOOAEDBSECAO8ABTkBAAAqDAQCIAD4JAICMAMCOAEDBA44AwEFIQIA9gAFOQEAACoMBAIgAPgcDAACASMrABjKGMo=","debug_symbols":"tdrfTtswFAbwd8l1L2yfP7Z5lWmaChRUqSoIyqQJ8e4LG3G7Hq+VrPPdoIb660+pc5o4J+/T/eb27fHHdv/w9DrdfHufdk9368P2aT9vvX+sptuX7W63ffxx+u8pfP6J8c/41+f1/nPz9bB+OUw3QiWtps3+fn7JxPMnPGx3m+mGtHyszOgUo3yNnl9qGz0P/r6aYoILBBcYLoiHQLUJHM4FhQsZLhQPQY/zoGYeKlpIAS5E+LcUPA5XynkhKFdDeMy1RF0IifmccPnhEOZGsNkLl6pTKguhbPfCo+y0LqNTDmSI7lxEreErFHMIVwgJslS2hGyJ6kG0vZAYkjkRBTwRHYhI3Ai2RHIhqBESDUF4gj2IfJyLyoYQB2I+Hy1ESpZQPJE9CAmNUHNSTQVPVDhBEf5jTh6XslLbBY4GM91EeILxhOAJdSHoSIghMp4oeKLCCQ54IuKJhCdcqjvzkbArVcYTgicUT2Q8UfBEhRMS8ER0JqJZX4hLdWu5RBCeYDzhUd2XV6yCXxRLxhMFT1Q4oQFPeNTF5ZtF6lEXnNoF5+nohRA8oXgi44niTRRDVDiRA56IeCK5EHQkTOllwhOMJwRPKJ7IeKLgCZfqDu1qkDt9pIAnIp5IeILwBOMJwROKJ7I3YS7Vikd1Uy2XiAonasATLtXd+heJi2mR1IQnCE8wnhA8oWgi9VvqqUqr16psQjoS6lYghbL0ymnudJyGOvtSjo31ks6rI8UAFyJcSA4CtRkvTEYguMBwQTzmQY6COVr7T1D8KxQTyv1Qji3EpgL7TzlcC/2nmJQuhFIYCcWRUBoJ9Q/M+f5EC2VTL/2O/rWQjIR0JJRHQmUk1D8i5vlbQolMHVEYCcWRUBoJ0Uiof0SkHFqoBBOSkZCOhPJIqAyE+s3LVEtbBddqvr1+O/JaiEZCPBKSkVDph2i5t0t01pD4mLd+rl+269vd5uth5oe3/d3Js82HX89/35kH/wY=","brillig_names":["u128_addition_overflow"],"assert_messages":{"160":"attempt to add with overflow","202":"Stack too deep","135":"attempt to subtract with overflow","167":"attempt to subtract with overflow","129":"attempt to add with overflow","196":"attempt to add with overflow","171":"attempt to subtract with overflow","139":"Array index out of bounds","222":"attempt to add with overflow","238":"attempt to subtract with overflow","175":"Array index out of bounds","245":"attempt to subtract with overflow"}},{"name":"assertion_failure","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"JAAEAQIlAASAQwABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAg4AIBDAAAiAA8kAgQCASoIAAIAEAABACIAFCoEAAAjJQAEeACABA0AAACABIADIQAAE4ADOQEAACMiAA8kAgQCASoIAAIAEAABACIAGyoEAAAjIgAPJAIBAAEkAgEBAgo4AQIDIQIAIQADOQEAACMrABjKGMo=","debug_symbols":"ndPNCoMwDAfwd8nZQz/WuvgqY0jVKoVSRetgiO++unkQ9LJcSv9tfiGXLNDYau5KF9p+guKxgO9rE10fUlrWDKrRee+68vgMbDvwWz4NJmxpimaMUHCNLAMbmnTNGUsNWuctFFLf12cGnFEQpyBBQZKAxOV4muW4I825OiFBQZKCbhSkKOh+hRTmakcKkZ8QEpBkFMQpSPyN1hRfZnSm8nZfonYO9WGn4nv4/aTiDw==","brillig_names":["assertion_failure"],"assert_messages":{"32":"This assertion should fail!","18":"Stack too deep"}},{"name":"debug_logging","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"JAAEAQIlAASAQwABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAg4AIBDAAAiAP0kAgQAAiQCBAIEADgCBAMqCAEBABABAwEkAwQBAQAoAQIDKg4CAyQCBAIDADgBAwIkAgJ4AiQCAnQDJAICagQqCAEFJAIECgYAEAEGASQDBAEFACgFAgYqDAYHKg4EBwAoBwIHJAICdQgqDggHACgHAgckAgJzCSoOCQcAKAcCByoOAwcAKAcCByQCAiAKKg4KBwAoBwIHKg4DBwAoBwIHJAICZQsqDgsHACgHAgcqDgIHACgHAgcqDgMHJAIEAAYAKAUCBwAoAQIOKg0ODQAoDgIMOzsABwAJAAwADSQCAAQCJAIAAQQkAgJ9BSQCAjoHJAICbwgkAgQEDSQCBAIPADgNDw4qCAEMABABDgEkAwQBDAAoDAIOKg4NDiQCBAIOADgMDg0qDA0OKg4EDgAoDgIOJAIAAg8qDg8OACgOAg4kAgADECoOEA4AKA4CDioOAg4qCAENJAIEDA4AEAEOASQDBAENACgNAg4qDA4RKg4JEQAoEQIRKg4LEQAoEQIRJAICYxIqDhIRACgRAhEqDggRACgRAhEkAgJuEyoOExEAKBECESQCAmQUKg4UEQAoEQIRKg4HEQAoEQIRKg4KEQAoEQIRJAICexUqDhURACgRAhEkAgIxFioOFhEAKBECESoOBREkAgQEDgAoDQIRACgMAhkqDRkYACgZAhc7OwARAAsAFwAYKggBDSQCBBARABABEQEkAwQBDQAoDQIRKgwRFiQCAncXKg4XFgAoFgIWJAICaBgqDhgWACgWAhYqDggWACgWAhYkAgJsGSoOGRYAKBYCFioOCxYAKBYCFioOChYAKBYCFiQCAmEaKg4aFgAoFgIWJAICchsqDhsWACgWAhYqDhsWACgWAhYqDhoWACgWAhYkAgJ5HCoOHBYAKBYCFioOBxYAKBYCFioOChYAKBYCFioOFRYAKBYCFioOBRYAKA0CEQAoDAIeKg0eHQAoHgIWOzsAEQAPABYAHSQCAi0CJAICaQQkAgJmBSQCAgoHKggBDCQCBCUNABABDQEkAwQBDAAoDAINKgwNDioOAw4AKA4CDioOGg4AKA4CDiQCAmIPKg4PDgAoDgIOKg4JDgAoDgIOKg4KDgAoDgIOKg4aDgAoDgIOKg4TDgAoDgIOKg4UDgAoDgIOKg4KDgAoDgIOKg4TDgAoDgIOKg4LDgAoDgIOKg4XDgAoDgIOKg4ZDgAoDgIOKg4EDgAoDgIOKg4TDgAoDgIOKg4LDgAoDgIOKg4JDgAoDgIOKg4HDgAoDgIOJAICCRAqDhAOACgOAg4qDgIOACgOAg4qDgoOACgOAg4qDgUOACgOAg4qDgQOACgOAg4qDhsOACgOAg4qDgkOACgOAg4qDgMOACgOAg4qDgcOACgOAg4qDhAOACgOAg4qDgIOACgOAg4qDgoOACgOAg4qDgkOACgOAg4qDgsOACgOAg4qDhIOACgOAg4qDggOACgOAg4qDhMOACgOAg4qDhQOACgMAg0AKAECFSoNFREAKBUCDjs7AA0AJAAOABEjJQAEeACABA0AAACABIADIQABAYADOQEAACMrABjKGMo=","debug_symbols":"1dvLSltRGIbhe9ljB+s/rJO3UorEI4EQRWOhiPfepFWx2OCktN87EXeydvhG7zNaT8vl1fnjzdl6e337sJx+eVo2txer3fp2u396ej5Zzu/Xm8365uz9x0s5/Jk/jz/crbaHp4fd6n63nDZv5WS52l7u/w2L/Q9crzdXy2m08Xzy4bT18XLYy7uzh/c+nO1jvpwdnp+cnfl6do7+29mvJ4sV6nCjDnfq8KAOT+rwSh3eqMM7dfigDqfK6VQ5nSqnU+V0qpxOldOpcjpVTqfK6VQ5nSpnUOUMqpxBlTOocgZVzqDKGVQ5gypnUOUMqpxJlTOpciZVzqTKmVQ5kypnUuVMqpxJlTOpclaqnJUqZ6XKWalyVqqc9c9yhsfb8Dk/Gf73xjSlMV1pzFAaM4XGtKI0xpTGuNKYUBqTSmOUCtyUCtyUCtyUCtyUCtyVCtyVCtyVCtyVCtyVCtyVCtyVCtyVCtyVCtyVCjyUCjyUCjyUCjyUCjyUCjyUCjyUCjyUCjyUCjyUCjyVCjyVCjyVCjyVCjyVCjyVCjyVCjyVCjyVCjyVCmxFKcFWlBpsRSnCVpQqbEUpw1aUOmxFKcRWlEpsRSnFVqRabFItNqkWm1SLTarFJtVik2qxSbXYpFp85Ap2lteXWo5/uGYqrTlyWfp/rTGpNS61JqTWpNSaKrWmSa3pUmukWuxSLQ6pFodUi0OqxSHV4pBqcUi1OKRaHFItDqkWh1SLU6rFKdXilGpxSrU4pVqcUi1OqRanVItTqsUp1eIq1eIq1eIq1eIq1eIq1eIq1eIq1eIq1eIq1eIq1eIm1eIm1eIm1eIm1eIjl+pyvq2pQ/IKtB25gUdY3rDLO3b5wC6f1OVHrhgSlht2uWOXB3Y51tCONbRjDe1YQzvW0I41dGANHVhDB9bQgTV0YA0dWEMH1tCBNXRgDR1YQyfW0Ik1dGINnVhDJ9bQiTV0Yg2dWEMn1tBJNdQL1VAvVEO9UA31QjXUC9VQL1RDvVAN9UI11AvVUC9YQw1rqGENNayhhjXUsIYa1lDDGmpYQw1rqGENdayhjjXUsYY61lDHGupYQx1rqGMNdayhjjU0sIYG1tDAGhpYQwNraGANDayhgTU0sIYG1tDEGppYQxNraGINTayhiTU0sYYm1tDEGppYQyvW0Mo09Hn/+G11v16db64e9q8cvn3cXuzWt9uXx933u1/f7A//AA==","brillig_names":["debug_logging"],"assert_messages":{"256":"Stack too deep"}},{"name":"get_fee_per_l2_gas","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAweAggAASMlAAR4AIAEDQAAAIAEgAMhAAAQgAM5AQAAIysAGMoYyg==","debug_symbols":"bc9LCsMgEAbgu8w6C23NQ69SStBEgyAa1BSKePeaVEpKuxH/mY9hJsEsxbaM2ioXgN0SGDfxqJ0tKeUGhNfG6GU8lwHtD0aHDyu3ewyR+wgMo2s3NCDtfPwpKjOUNhJYqefmxxNKaOWEdu1H46H9o3t8wVX3mJAvfc8lPrjXXBhZt1ebnU7HxOf67hT8Ag==","brillig_names":["get_fee_per_l2_gas"],"assert_messages":{"15":"Stack too deep"}},{"name":"get_l2_gas_left","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAweAgsAASMlAAR4AIAEDQAAAIAEgAMhAAAQgAM5AQAAIysAGMoYyg==","debug_symbols":"bc9RCsMgDAbgu+S5D9phFa8yRtFWiyBa1A6GePfZTkbH+iL+yUdIMsxKbstonPYR+D2D9ZNIxruaculABmOtWcZzGdD+YHT4uAq3x5hESMAxIgR3oNx8/CmqM7SxCvhtYKX786SixgnG7KsxIxea9gNrmvbsVz9KjU8RjJBWte315qbTMem1fjoVvwE=","brillig_names":["get_l2_gas_left"],"assert_messages":{"15":"Stack too deep"}},{"name":"l1_to_l2_msg_exists","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"msg_hash","type":{"kind":"field"},"visibility":"private"},{"name":"msg_leaf_index","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARgABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMrCIBDAAErCIBEAAIiAAsrBAABgEU4AIBFAAEiAA8yOAABAAIAAyoMAwEjJQAEeACABA0AAACABIADIQAAE4ADOQEAACMrABjKGMo=","debug_symbols":"bc/hCoMgEAfwd7nPfehWmfUqY4SWhiAaaoMhvvustdHYvoj/ux/HXYRJ8HUelJHWQ3+NoO3IgrImp5gK4E5prebhXIZye/Cye78ws0UfmAvQY4WkLUCYaf93dZ4hlRbQV4Sm4teXHXlzrPGjkTZ/NC1Jc2iK2H7pW8rxzpxiXItje7ma8XRMeCyvTsZP","brillig_names":["l1_to_l2_msg_exists"],"assert_messages":{"18":"Stack too deep"}},{"name":"set_storage_map","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"5Z3dTuNIEIXfJddcdFV39c+8ymo1ghlmFAmFETArrRDvvnYWO4B/WpxNVlXuG0SgP/cpu1Kn3Hac593325vfP7/uDz/uH3df/nje3d1/u37a3x+6V88vV7ubh/3d3f7n17d/3rn+B/nj+Mdf14f+5ePT9cPT7gtHT1e728P3/tcg3RZ+7O9ud198zC9Xk9HFl9fBJZdxLHF5+fNqR+HSE8ilJ4iXniBdeoJ86QnKhSdgd+kJ6NIT8H+fgFwMr6OJmN5NMTNanB9GC7nKtmMahMScT1v2dBTvLYsPlsWLZfHRsvhkWXy94ktVPMc8yOES3k0xI8eFIdTo5E35yzK3bV/GbQc67Rh2x2Lp/f8v36VRPtfkSypDqZfs3LvRvfzZvKdY3CAoufeHt4cSAmUEKgAUHAIRAjECeQSKytMsj+8pyRI+pllI2uVzWZOftcuXOMqPMpFfTMsXZ1s+2ZbPtuVr9+eK/GBbvtiWr9511+Wrd911+bZdV2y7brTtutG260b1rktykh8rowv5YbmgUJq011G9Ry8H28tX79Hr8tV79Lp89R69Kj/N7n0aiwM7Pomn2QUq58IwQ/d78afxPDfel2HPBP9m22FmKHs3nNWz58rg6AfN0ae3Q/soYxNRpiaizE1EWVqIMrsmoqQmouQmovRNRBmaiLKJ3ic30fvkJnqf3ETvk5vofcp2ep80XDqOiT5GuZ3eZy3K7fQ+a1Fup/dZizI0EeV2ep+1KI32Pr10ow1NL91ol9JLN9p6dNK7yQxrN9omHLUbNf+jdqOWftRu1KiP2o3a71G7XVMlZ9dVydm1VXKGfZUM+yoZ9lUy7Ktk2FfJsK+SYV8lw75Khn2VDPsqGfZVNuyrbNhX2bCvsmFfZcO+yoZ9lQ37Khv2VTbsq2zYV73uOhNO2t/eGP2qXXW+nz6lyzl4ePAxUNVvjs8ESimNz2JIhSaBqn4nnTHQoLqdPWegqnvfTwWa8yCaipsUo6C6UT5noKq76nMGqtoazxmo6n79nIGqbu7PGehmOqNaoNvpjCqBbqczWg9UttMZVQJtpTOSVjojaaUzklY6I2mlM5JWOiNppTOSzXRGnVIeRftpoJvpjCqBxs10RrVAN9MZ1QLdTGdUC3QznVEt0NBKoJvpjGqBbqYzqgWq+yrmeJWBfZ5cIEuqC2mgUUfgMNGuujZWtKsudxXtqitYRbvqolTRrvoMrKJd9UlVRbvq+r6uXfejnyraVZ/NVLQb9lXdD1+qaDfsq7oflFTRbthXdT/UqKJdt6+68bwp0OS8SfcDiNa1636sUEW7bl9d167bV9e16/bVde26fXVdu25fXdeu21fXtev21XXtdr2JdT+hpqLdrjex7ifUrGuff4JBDsMieRY/QeYtwQmPEcTpPIJAEYESAs230zReLKBuJWsCFQBa+FhuBSIEYgTyCBQQSBAoIlBCICQjGMkIj2SERzLCIxnhkYzw8umysvBdpY7GL651fgoVAFr4KFEFIgRiBPIIhBTlgBTlgBTlgBTlhVvVK1ABoIVbqCsQIdBCRsTx3eQyTyCPQAGBBIEiAiUEyghUz4gpFJGMiEhGLNzSVIE8AiE1IiI1IiI1IiI1IiI1IiI1IiEZkZCMSEhGJCQjEpIRCTm4CTm4CTm4CTm4GWlyFq45dQY+QF1FmECCQBGBEgJlBJrf5ZzGc1ouk723sJJegRaWI2n8dnWhibyldcB1KCJQQqCMQPO7PI7fxEgxug+QX1ggqkCEQIxAHoECAgkCRQRKCJQRCMkIQjKCkIwgJCMIyQhCMoKQjCAkIwjJiIX1qZhHU0uOJ1ABoIX1qQpECMQI5BEoIJAg0PzBDeN9xBQCTaCMQAWAFpaaKhAhECOQR6CAQIJAEYGQjPBIRngkIxbWwoKkEUqTarSwFlaBGIE8AgUEEgSKCJQQKCNQASBBMkKQjBAkIwTJCEEyQoDTBi8RgRICffq04aV79df1w/765u72sWP6f/4+fHva3x9eXz79/evf/3SD/wE=","brillig_names":["set_storage_map"],"assert_messages":{"58":"Array index out of bounds","202":"attempt to add with overflow","247":"Array index out of bounds","263":"Array index out of bounds","279":"attempt to add with overflow","27":"Storage slot 0 not allowed. Storage slots must start from 1.","72":"Stack too deep","184":"Array index out of bounds","66":"attempt to add with overflow","255":"Array index out of bounds","302":"Array index out of bounds","321":"attempt to add with overflow"}},{"name":"send_l2_to_l1_msg","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"},{"name":"content","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMrCIBDAAErCIBEAAIiAAo4AIBFAAAiAA01DAABAAIjJQAEeACABA0AAACABIADIQAAEYADOQEAACMrABjKGMo=","debug_symbols":"bc9RCsMgDAbgu+S5D412RbzKGEVbLYJoUTsY0rvPdsI61hfJbz5CkmFScp0H47SPwO8ZrB9FMt6VlLcGZDDWmnk4f0O7P4iHj4twe4xJhAQcKcW+AeWmo6aszNDGKuC0L/WfJxSxckK7r0Z2u9CMtG3VjHTdj35sJT5FMEJaVbfXqxtPx6TX8ukU/AY=","brillig_names":["send_l2_to_l1_msg"],"assert_messages":{"16":"Stack too deep"}},{"name":"read_storage_single","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiADwqCAECJAIEAgMAEAEDASQDBAECACgCAgMqDAMEJAIAAAUqDgUEKg0CAwAoAwIDKg4DAioIAQMAAAECASoOAgMkAgQAAiQCAAEEJAIEAQUqDAIBIAAdCjgBAgYhAgAmAAYgACAqDQMBACgBAgQAOAQCBSoNBQMqDAMBIyoNAwYcDAABBwA4BAcILAwACAAHJAIEAQkMOAEJCiECAC4ACjkBAAArBAAGgAMlAAQAAoAEIgBBKwiABQAIACgIAgkAOAkBCioOBwoAOAEFBg44AQYHIQIAOQAHOQEAACoOCAMqDAYBIAAdJQAEeACABA0AAACABIADIQAAQIADOQEAACMrAYADgAYLAIAGAAKAByEAAEWAByAARysAgAOABSAAVSsAAAGABQEAAAGABAABJQAEAACACQ0AgAmABIAKFwCACoAKIQAAU4AKAQCAA4AJgAsrAYALgAgBAIAFgAmACysCgAiACwEAgAkAAoAJIABKJQEEAAGABSAAVSMrABjKGMo=","debug_symbols":"1ZnBioMwEIbfJWcPyWQmxr7KshTb2iKIFrULi/juq7tqu7WYY2cukuhP/IKJX0I6dcoOt8s+L89Vo3YfnSqqY9rmVTnUuj5Shzovivyyf7yt9Hgx+jffXNNyrDZtWrdqB9q6SGXlaSwSDS2c8yJTO+t8H63SRnuc0sboZEkba16kySFMaXLO3tOeXqWtj+e09f5f+jNSxsjGB9n4VjY+ysYn2fhONn4sG9/Lxk9E44Ns64Js64Js64Js6wL3qYtmbnso0jO+5T540OoF37oV/hsGDyzDwcU+gA9o5s4CglnSMLxnxEfZ+CQbn/uiITB12f953PKtMI6f8ZH7ogEJtvC5LxrQJnf80ExJNMwkiaZ1Z2VbArkvMQL4KBuf+8Y+gM99Yx/A576xD+Czd/Q2PntHb+ITe0dv4/N39Ca+bOuSbOuSbOuSbOuSbOuSZOv2Q/UrrfP0UGTTiev5Vh4fDmDb7+vfkyH8Aw==","brillig_names":["read_storage_single"],"assert_messages":{"56":"attempt to add with overflow","45":"Array index out of bounds","63":"Stack too deep"}},{"name":"set_opcode_small_field","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAwoAgASNFZ4kKvN7xI0VniQq83vAAEjJQAEeACABA0AAACABIADIQAAEIADOQEAACMrABjKGMo=","debug_symbols":"XclRCoAgDIDhu+y5E3SVCFFTGYwtTIMYu3tBPYSP//8pbCn04pCzHDAvCiTRNxR+Sm2CUJEIixv26Sv6QOnL3Dn+tF37K7baDQ==","brillig_names":["set_opcode_small_field"],"assert_messages":{"15":"Stack too deep"}},{"name":"test_get_contract_instance","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"JAAEAQIlAASAQwABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAg4AIBDAAAiAOQeAgAAEioIARMkAgQSFAAQARQBJAMEARMAKBMCFDMOAAAAEgAAABQqDRMSACgSAhIqDhITKggBEgAAAQIBKggBFAAAAQIBKg0TFQAoFQIVKg4VEyQCBAAVACgTAhcAOBcVGCoNGBYqDhMSJAIEARMqDhMUJAIAABcKOBYXGCQCAQEWIQIAzgAYIAAmKggBGQAAAQIBKggBGiQCBBEbABABGwEkAwQBGgAoGgIbJAIEEBwAOBwbHCoMGx0MOB0cHhYMHh4hAgA2AB4qDhcdACgdAh0gADAqDhoZKg0aGwAoGwIbKg4bGiQCBBAbKgwVGCAAPQw4GBscIQIArgAcIABAKg0SGCoNFBwAOBwbHQ44HB0eIQIARgAeOQEAACoOGBIqDh0UKg0ZEioNGBQCKBQCFCoOFBgqDRoUAigUAhQqDhQaACgSAhcAOBcVGSoNGRQAKBICFwA4FxMZKg0ZFSQCBAITACgSAhkAOBkTGioNGhckAgQDEwAoEgIaADgaExsqDRsZJAIEBBMAKBICGwA4GxMcKg0cGiQCBAUTACgSAhwAOBwTHSoNHRskAgQGEwAoEgIdADgdEx4qDR4cJAIEBxMAKBICHgA4HhMfKg0fHSQCBAgTACgSAh8AOB8TICoNIB4kAgQJEwAoEgIgADggEyEqDSEfJAIEChMAKBICIQA4IRMiKg0iICQCBAsTACgSAiIAOCITIyoNIyEkAgQMEwAoEgIjADgjEyQqDSQiJAIEDRMAKBICJAA4JBMlKg0lIyQCBA4TACgSAiUAOCUTJioNJiQkAgQPEwAoEgImADgmEycqDSclHAwBHBMcDAATEhwMARITHAwBHxwcDAAcEhwMARIcHAwBIh8cDAAfEhwMARIfHAwBJSIcDAAiEhwMARIiKg0YEgIoEgISKg4SGCoMFgEqDBQCKgwVAyoMFwQqDBkFKgwaBioMGwcqDBMIKgwdCSoMHgoqDBwLKgwgDCoMIQ0qDB8OKgwjDyoMJBAqDCIRIADhKg0ZHCoNEh0qDRQeADgeGB8OOB4fICECALUAIDkBAAAkAgQRIAw4HyAhIQIAuQAhOQEAAAAoHQIgADggHyEqDSEeJAIEEB8MOBgfICECAMAAIDkBAAArBAAcgAMlAAQAEYAEIgDpKwiABQAdACgdAh8AOB8YICoOHiAAOBgTHA44GBweIQIAywAeOQEAACoOHRkqDBwYIAA9JAIBABIqDBIBKgwXAioMFwMqDBcEKgwXBSoMFwYqDBcHKgwSCCoMFwkqDBcKKgwSCyoMFwwqDBcNKgwSDioMFw8qDBcQKgwSESAA4SECAOMAATkBAAAjJQAEeACABA0AAACABIADIQAA6IADOQEAACMrAYADgAYLAIAGAAKAByEAAO2AByAA7ysAgAOABSAA/SsAAAGABQEAAAGABAABJQAEAACACQ0AgAmABIAKFwCACoAKIQAA+4AKAQCAA4AJgAsrAYALgAgBAIAFgAmACysCgAiACwEAgAkAAoAJIADyJQEEAAGABSAA/SMrABjKGMo=","debug_symbols":"3Z3bTuMwEIbfJddc2OMZH3iV1QqVoypVBXFYaYV4921L47a4eISUsv9wg1qY2p8rnG+cTJzX4frm8uXuYr68vX8azn+9Dov7q9nz/H65evf6djZcPs4Xi/ndxf6vB7f+UTbhTw+z5frd0/Ps8Xk4L4HC2XCzvF6/5LBq4Ha+uBnOQ8xvZ010KFG20aEkrtE+y5HoyNlvoyOXdBD9+2zw7igQlbQDigqQZ6FttOciNbqUI8FZxpZzyfuhaxiPBENIMAEJhpFgBAkmTgHDbgcTP/aQTt5DPnkP5dQ9kDt5D/7kPdDJe5jioCKexx6ElKlDVUXB+RoqeQPDSDCCBBO/G4bH/ILiLmEIbpMwUIKiyVA0BYkmuO+mSWPLVEJD46FoCIpmkgNxiJWGPx7qA5+8hylmYnS1h0is5GFUxjyM+eAbPRLra84m7bdfrJKzM0vuzZKTWfJglpzNkotZ8miWPJklN+tQNutQMetQMetQMetQMetQMetQMetQMetQMevQiHxUlDRe55PEDTnyDJU8xsreVY+RHHmG9smRZ2jkkSLG9v8ceYb2yZGz3D45cpbbJU/IWW6fHPl43idHznL75MhZbp8c2aF9cmSH9snNOjSZdWgy69D07Q79dLVwpOGU6yW9tFcsFyiu2bMzzO4NsxMye+bacJbSsAfD7GyYXZDZC431Pn7F0bBHw+zJMHs2zA7t1ZJqHWLJ4SN7gfaqwg7tVYUd2qsKO7JXydWCcnJRGnZkr2rsyF7V2JG9qrEje5VcDpV9r858ZEf2qsaO7FWF3TtksarwyGYlX4t/yVNq4ZHVqsJDu1WDh5arBg9tV7+73cBLbuGh9arBQ/tVg4cWrAYPbVifYoXPzVkm76ENq8FjG1aBxzasAg9tWHJjMK1et/DQhtXgoQ2rwUMbVoOHNiyFXOGFWnhow2rw0IZV4AnasBo8tGGpnmElytzCQxtWg8c2rAKPbVgFHtqwwdWzrMG3J50I2rAaPLRhNXhow2rw0IYNoZ50CtwuwAO0YTV4aMNq8NCG1eChDRtiXYCH3C5GJtkQ47/BYxtWgcc2rAKPbdhSFyPs28VIwDasAo9t2D48YxtWgYc2rPN1McJ0KKk2mn0cm2af96PT+1ChfTztULHrpyYdKv+coYYyrkOYfWiHil2dNelQsYu5Jh0qdu3Xl4Yaa9Mcw5G5il0qNulQsSvLphyqYNehfWmomccyfM6xnavyg7Ilbag/KFvShoqTLW1wGAsHJ+tY40DfBN7dAsZD3wWuoCPfBq6gQ98H7uvzOyi26NA3gvfRoXdT6aJn6O1U+ujQ+6m4HXpq0aE3VOmjQ++o0kdHtqmCDr2nSh8delOVPjq0TfvoyDbtbmTnM7JN++gF2aYKOvRuk310ZJsq6Mg2VdCRbaqgm93l0xfotWkfHdmmCrpdmxazNiVn1qbkzNqUnFmbkjNrU/qk1DzE3eN0kxygbz4Vv/ypt9XbP7PH+exycbN9xu/ty/Jq75G/z38f3v+yCv4H","brillig_names":["test_get_contract_instance"],"assert_messages":{"184":"Array index out of bounds","69":"attempt to add with overflow","202":"attempt to add with overflow","191":"Array index out of bounds","180":"attempt to add with overflow","226":"Contract instance not found!","231":"Stack too deep"}},{"name":"pedersen_hash_with_index","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"data","type":{"kind":"array","length":10,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASATgABJAAEAwAkAgQKAiQCBAADHxgAAwACgEMlAgSAQwABJAIECgMqCAECJAIECwQAEAEEASQDBAECACgCAgQrBAABgAMrBAAEgAQrBAADgAUiABUqDAIBIgAgKwQAAYBNOACATQABJQAEAACABw0AgAeABYAIFwCACIAIIQAAH4AIAQCAA4AHgAkrAYAJgAYBAIAEgAeACSsCgAaACQEAgAcAAoAHIAAWIyIBfSQCAAADKggBBCQCBBcFABABBQEkAwQBBAAoBAIFJAIEFgYAOAYFBiQCBAIHKgwFCQw4CQYKFgwKCiECADQACioMCQgqDgMIACgIAggqDgMIADgJBwkgACsqDQQFACgFAgUqDgUEKggBBQAAAQIBKg4EBSQCAQEEKggBBiQCBCIHABABBwEkAwQBBgAoBgIHJAIEIQgAOAgHCCQCBAMJKgwHCww4CwgMFgwMDCECAE8ADCoMCwoqDgMKACgKAgoqDgMKACgKAgoqDgQKADgLCQsgAEQqDQYHACgHAgcqDgcGKggBBwAAAQIBKg4GByQCBAMEJAIEAQYkAgQCCCgCAAAAAAAAAAABAAAAAAAAAAAACSQCBAoKKggBCyQCBB8MABABDAEkAwQBCwAoCwIMKgwMDSkCAAVc2lPngfPu3XYLosSMbTbSoGFUTD0z52EAvUxl6JdIAA4qDg4NACgNAg0pAgAoOR6JnWQH5AKU+qXlVhq0cuQ+pdVMFTQ7mkfLeoDtCQAPKg4PDQAoDQINJAIBABAqDhANACgNAg0pAgAgPEAjaeiyvCw4J7yConjTLFHcmrleVc4VZui2Jbe85wARKg4RDQAoDQINKQIAK/JVJdSmLxJSNVVZ3UlraLpNbqZfS2abs9pzxCRV8KMAEioOEg0AKA0CDSoOEA0AKA0CDSkCACRoc5zt6r6knbxGwjVr1c80GqRXQnK6U6QNgEnl7pSfABMqDhMNACgNAg0pAgAOi3O8rGssz/qi5Q/OmS2xGgtG3NuK1LgyU5P5A6JUOgAUKg4UDQAoDQINKg4QDQAoDQINKQIAJC2K0F3G4qim/WNvSO7IgeBe6NKljiZTFz9JVOyGdlQAFSoOFQ0AKA0CDSkCAAr+DXqliKPc95HxH831TB0Hz8gFxa4LAhAfqvq5y1XwABYqDhYNACgNAg0qDhANACgNAg0pAgAFw3jQWWr5+aJHG+UretARLUjvNVw3IIjrDbhuQoh+FAAXKg4XDQAoDQINKQIAG6HxrbZuZ7yIwbPq/pWyAoEoA6i3HKYt6e0GyLnzz/MAGCoOGA0AKA0CDSoOEA0AKA0CDSkCAATlwhPuv//NtCtsNx5S8NWYZGzwyio1O0uZiJB0xaK8ABkqDhkNACgNAg0pAgAK5kQrxzsPKy1Fgp/Y+jIatrXuzdOYijnwxYUFRN5QggAaKg4aDQAoDQINKg4QDQAoDQINKQIALJZ2VlC9fDvuARFLkJewNuINXHdK/iun1dYJn0mPR/0AGyoOGw0AKA0CDSkCAAh5ycxefuqX8fkZPh/Qi40DkDIBl97ima8etn+SxQajABwqDhwNACgNAg0qDhANACgNAg0pAgAhE5gEBN+ICvfSWieuwW5hx3BhmRJDW2GJFNp/oaiDhQAdKg4dDQAoDQINKQIAEGgnGDmU2NoVA3hRdIsFOSYgUWJ3vwAA+LOOl/XbYCoAHioOHg0AKA0CDSoOEA0AKA0CDSkCABO0xfFcxpr4cbkehi24sARINMXo2loofQeUNCu5f/ymAB8qDh8NACgNAg0pAgAXlB8TNDg1tXLhjTerOJf4DgRh+bcqth2mGSf8mApr0gAgKg4gDQAoDQINKg4QDQAoDQINKQIACFwPabGeBZhog9zJ1TM0u2eZloaIk12TjOvUtEVfkYcAISoOIQ0AKA0CDSkCACQrilqwdNCeJkJ7G2Yzp5qCukHWTE1lgBfzGG1pJnIbACIqDiINACgNAg0qDhANKQIAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAADCQCBAANKgwNAiAAtAw4AgojIQIA+gAjIAC3Kg0FASQCBBQCJAIACgQkAgQWCAw4AggJIQIAvgAJOQEAAAAoAQIIADgIAgkqDgQJKgwBBiQCBBUBJAIEFgQMOAEECCECAMcACDkBAAAAKAYCBAA4BAEIKg4DCCoMBgIqDgIFKg0HASkCAC34uUDliQ5OE3fgU3P65poddU9pNeangLZmlHQx8s3NAAMkAgQeBCQCBCEGDDgEBgghAgDTAAg5AQAAACgBAgYAOAYECCoOAwgqDAEFJAIEHwEpAgAuzYjRWWe8U7iFkS4NFoZhVKy2qsLT+F4nyn7vssGQgwADJAIEIQYMOAEGCCECAN0ACDkBAAAAKAUCBgA4BgEIKg4DCCoMBQQkAgQgASQCBCEFDDgBBQYhAgDmAAY5AQAAACgEAgUAOAUBBioOEAYqDAQDKg4DByoIAQEkAgQEBAAQAQQBJAMEAQEAKAMCBCQCBCEFACgCAgYkAgQWBwAoAQIIQPcABAAGAAgABQAoAQIDADgDDQQqDQQCKgwCASMqDQUjJAIECiUMOAIlJiECAP8AJjkBAAAAKAECJQA4JQImKg0mJBwMBSQmHAwAJiUCOCQlJgg4JgknHAwFJygcDAAoJgI4JyYoCDgoCScEOCYJKAA4KCUmBDgMJyUAOCYlKAo4JCglIQIBEQAlOQEAAAQ4AggkJAIEACgKOCgIJSECARkAJQY4JAgqCjgqAikhAgEZACk5AQAAJAIEFigMOCQoKSECAR0AKTkBAAArBAAjgAMlAAQAF4AEIgGCKwiABQAlACglAigAOCgkKSoOJikAOCQGIw44JCMmIQIBKAAmOQEAACQCBBYmDDgjJighAgEsACg5AQAAACglAiYAOCYjKCoOJygqDCUkKg4kBSoNByMEOAIEJCQCBAAmCjgmBCUhAgE6ACUGOCQEKAo4KAInIQIBOgAnOQEAACQCBB4mDDgkJichAgE+ACc5AQAAACgLAiYAOCYkJyoNJyUAOCQGJg44JCYnIQIBRQAnOQEAACQCBB4oDDgmKCkhAgFJACk5AQAAACgLAigAOCgmKSoNKScAOCQIKA44JCgpIQIBUAApOQEAACQCBB4qDDgoKishAgFUACs5AQAAACgLAioAOCooKyoNKykkAgQhKgw4JCorIQIBWwArOQEAACsEACOAAyUABAAigAQiAYIrCIAFACgAKCgCKgA4KiQrKg4lKyQCBCEkDDgmJCUhAgFmACU5AQAAACgoAiQAOCQmJSoOJyUqDCgjADgmBiQOOCYkJSECAW4AJTkBAAAkAgQhJgw4JCYnIQIBcgAnOQEAAAAoIwImADgmJCcqDiknKgwjJSoOJQcAOAIGIw44AiMkIQIBewAkOQEAACoMIwIgALQlAAR4AIAEDQAAAIAEgAMhAAGBgAM5AQAAIysBgAOABgsAgAYAAoAHIQABhoAHIAGIKwCAA4AFIAGWKwAAAYAFAQAAAYAEAAElAAQAAIAJDQCACYAEgAoXAIAKgAohAAGUgAoBAIADgAmACysBgAuACAEAgAWACYALKwKACIALAQCACQACgAkgAYslAQQAAYAFIAGWIysAGMoYyg==","debug_symbols":"5d3dSiNBEEDhd5lrL7qruqu6fJVlWeIvgRBF48IivvuObiZmHYk3fUTijSTaeKbULzPGxjwOF5dnD9e/luurm/vh9MfjsLo5X2yWN+vx3uPTyXB2t1ytlte/9t89pOc3qi/r728X6+e795vF3WY4zRbpZLhcX4w3PaXxM1wtV5fDqVp7Opmvdmm71RK71ePNnyeDFrxQ8YLhBccLDS8EXSgJL2S8IHgBN11w0wU3XXDTBTddcNMFN11x0xU3XXHTFTddcdMVN11x0xU3XXuYbqlMq1vRt4WgC5bwQsYLghcULxS8UPGC4QXHC7hpw007btpx046bdty046YdN+24acdNO27acdMNN91w0w033XDTDTede3yrJaVp9XgzzxLaI2GyS3idJTp8oSTn3RRZ0ixR+YTxCecTjU8EnojEJzKfED6hfILXHbzu4HUHrzt43YHrHs9SfCLzCeETyid66JayS0jUWaKHbk15Smgus4TxCecTjU8EnsiJT2Q+IXxC+UThE7zuzOvOvO7M6868buF1C69beN3C6xZet/C6hdctvG7hdQuvW3ndyutWXrfyupXXrV10l91zgxoySxifcD7R+ETgiZL4ROYTwieUTxQ+0V337Ff7YnzC8UTF/wojPXa7jc/V6C5R5wnhE8onCp+ofML4hPOJHme9JPU18d9j1HyxjtdV28UqbocXh9t0GGnvMKS+s9YstmvNfX/py5jxLca0dDRjxrRT0/evabdj5uMZ06cxpc3GlGMZ0+u0Q8JNZmPq9xizHM2YMf3C2dL8Iagez5jTITfJszHtWMZsOj0EtXd+aP0Ix3znvPnpV0Fap8Wq8XbPmNinX65oiQPH4+nzjycfOp78xY5HvtjxdDml5tcNgTJ75qHHbuiPEpVPGJ9wPtH4ROCJPhtlDycynxA+wetuvO7G62687sbrbrzuxusOXnfwuoPXHbzu4HUHrzt43cHrDl534Lo1JT6R+YTwCeUThU9UPtFFt7ddItos4Xyi8YnAE122+36QyHxC+ITyicInKp/gdWded+Z1Z1638LqF1y28buF1C69beN3C6xZet/C6hdetvG7ldSuvW3ndyutWXrfyupXXrbxu5XUXXnfhdRded8H/RYZ22e77QaLyCeMTzicanwg80WfT8uFE5hPCJ3jdlddded2V11153ZXXXXndxus2Xrfxuo3Xbbxu43Ubr9t43cbrNl6387qd1+28bud1O6/bed3O63Zet8O6n8Z7vxd3y8XZ6nL7IixXD+vzvddk2fy5/feRcfFf","brillig_names":["pedersen_hash_with_index"],"assert_messages":{"384":"Stack too deep","189":"Array index out of bounds","317":"Array index out of bounds","346":"Array index out of bounds","378":"attempt to add with overflow","369":"Array index out of bounds","299":"Array index out of bounds","328":"Array index out of bounds","229":"Array index out of bounds","357":"Array index out of bounds","220":"Array index out of bounds","284":"Array index out of bounds","313":"attempt to multiply with overflow","339":"Array index out of bounds","365":"attempt to add with overflow","295":"attempt to add with overflow","324":"attempt to add with overflow","254":"Array index out of bounds","280":"attempt to multiply with overflow","210":"Array index out of bounds","335":"attempt to add with overflow","198":"Array index out of bounds"}},{"name":"get_timestamp","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAweAgcAASMlAAR4AIAEDQAAAIAEgAMhAAAQgAM5AQAAIysAGMoYyg==","debug_symbols":"bc9LCsMgEAbgu8w6C20emlyllKCJBkE0qCkU8e41qZSUZiP+Mx/DTIRZ8G0ZlZHWw3CPoO3EgrImp5gq4E5prZbxXAa0Pxgd3q/M7NEH5gIMGN0oqkCY+fj3JM+QSgsY6o6m6s83lNSFN5Q2X41pe6EJanHRBHX9j36kHJ/MKca1KNvLzUynY8Jr/XQyfgM=","brillig_names":["get_timestamp"],"assert_messages":{"15":"Stack too deep"}},{"name":"nested_call_to_add","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"arg_a","type":{"kind":"field"},"visibility":"private"},{"name":"arg_b","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARgABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMrCIBDAAErCIBEAAIiAAsrBAABgEU4AIBFAAEiAHYeAgAABCoIAQUAAAECASQCBAEGKg4GBSoIAQcAAAECASYCAKpjSKEACCQCBAEKJAIEAgwAOAoMCyoIAQkAEAELASQDBAEJACgJAgsqDgoLJAIEAgsAOAkLCioMCgsqDggLKg4JByQCBAAIJAIBAQkkAgQCCioMCAMgACYMOAMKCyECAEgACyAAKSoNBQEqDQcCKggBAyQCBAMFABABBQEkAwQBAwAoAwIFKgwFBikCADBkTnLhMaApuFBFtoGBWF0oM+hIeblwkUPh9ZPwAAAAAAcqDgcGACgGAgYqDgcGJgIA1UQbDQAFACgDAgYAKAICCyoNCwoAKAsCCSoIAQskAgQCDAAQAQwBJAMEAQsAKAsCDTY/lQAGAAQACQAKAA0AAQAMAAUkAgIBAQo4DAECIQIARAACOQEAAAAoCwICADgCCAMqDQMBIww4AwoLIQIASwALOQEAACQCBAIMJAIEAg4AOAwODSoIAQsAEAENASQDBAELACgLAg0qDgwNJAIEAg0AOAsNDCoMDA0qDgENACgNAg0qDgINACgLAg0qDQ0NDDgDDQ4hAgBeAA45AQAAJAIEAg4AOAsODQA4DQMOKg0ODCoNBQsqDQcNACgLAg4rBAANgAMlAAQAAYAEIgB7KwiABQAPKwiABgAQKg4MECoNDwsAKAsCCyoOCw8qDg4FKg4PBwA4AwYLDjgDCwwhAgB0AAw5AQAAKgwLAyAAJiUABHgAgAQNAAAAgASAAyEAAHqAAzkBAAAjAQCAAwACgAcrAYAHgAcBAIAHgASACCUABAACgAoBAIAIgAqACSsAAAGABQEAAAGACQABJQEEAAGABQEAgAUAAoAJKwKACIAJJQAEAAKACgEAgAOACoAJJQAEAAKACwEAgAWAC4AKJQAEAACADA0AgAyAB4ANFwCADYANIQAAk4ANAQCACYAMgA4rAYAOgAsBAIAKgAyADisCgAuADgEAgAwAAoAMIACKAQCACoAHgAYjKwAYyhjK","debug_symbols":"1ZzRauMwEEX/xc950Iyk0Ux+ZVlK0ibFYJySpAtLyL+v47Xd7LaVXgrVfQlxMsjngs2xNUKX5mm3fX1+aPv94dSsf1ya7vC4ObeHfji6XFfN9th2Xfv8cP9z424fxGP96WXT3w5P583x3KwpuJRWza5/Gr9bGsbYt92uWXvR6+pdvTeJU7m3FJZq0vhBtQSlqVrC3di36p+rhvwnSMs5KJCPBaSgbj5JULa3kxh9UM3ieapmSa4QIKlNxep0qWUOI37Axo/Y+IKNn7DxFRvfoPHZYeMTNj5j42Nbl7Gty9jWZWzrMrZ1Gdu6jG1dj21dj21dj21dX/2tS0IzPwm/vdrL+K4eqr96SIIs/OL+56/+8inwf8dTW3Ju5lefCvwaeB5bQ6J/qm8BAnqAiB5A0AMk9ACKHsDAA0SHHoDQAzB6AHQTR3QTR3QTR3QTR3QTR3QTR3QTC7qJBd3Egm5iQTexfIeJLc6Ds8m7NRkS60OS+pBSfUhfYzSTBck0FpCIk/p5dFaywu3AgZYJseHOWKrZ2RjB4CMkhx8BYKY0N1Odqu9vF/gDOH/1He4Cf/Ut7gJ/9T3uAj94pyxV3+XO82v1be4CP0CnMssP7l8F96+C+1fB/avg/lVw/yq4fxXcvwbuXwP3r4H718D9a+D+NXD/Grh/Ddy/Bu5fA/cvOQAB55aKkgNfq0sOfLEuOQAH5wMASDgfAMDC+QAAGs4HAPBwPgCAiPMBAEycDUDoJiZ0ExO6ievfY6QUAN3E9e8zkgtwHY5+bY7tZtvtpj129q/9492WO+ffL3//GYr/AA==","brillig_names":["nested_call_to_add"],"assert_messages":{"67":"Nested call failed!","93":"Array index out of bounds","74":"Index out of bounds","121":"Stack too deep","115":"attempt to add with overflow"}},{"name":"enqueue_public_from_private","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"3VXRboMwDPyXPPMQJ3Hi9FemqYKWVpEQVEAnTYh/X2BNtg401K1bJV6QTc747myUju3z7HzcuvJQNWzz1LGi2qWtq0qfdQzk+K45peWQNm1at2wD2vKE5eXeh4bzPmEHV+RsIzX1yQQtrYILWlpjIhpI988JA/X3LXC2BSoyoQciwkITNCQucCT+qYmFOTQF/howYj104KPvwofARD5aLPABQhk88rGiK5OmeOFBQa6PCSammjWIoAeIsKBU+LqVAiek7DwpNBhJaYVLpJQKG4hK4y/WVfD78IlwRMH/e9IC1iBCPEDE9+vqs6x2ReGO26ubgw8POf97AY+ugKAv2ybt7TWK/6AGbq3xCYyX4qwqtGF0Bu2HRxzHQrFCO3z2ktYuzYp8GPlweC53YQN82r6e3k88+A0=","brillig_names":["pack_arguments_oracle_wrapper","enqueue_public_function_call_internal","pack_arguments_oracle_wrapper"]},{"name":"read_storage_map","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"}},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAorBAABgEQ4AIBEAAEiAMEqCAEDJAIEBAQAEAEEASQDBAEDACgDAgQqDAQFJAIAAAYqDgYFACgFAgUqDgYFACgFAgUqDgYFKg0DBAAoBAIEKg4EAyoNAwQAKAQCBCoOBAMqDQMEACgEAgQqDgQDKg0DBAAoBAIEKg4EAyoIAQQAAAECASoOAwQqCAEDJAIEBQUAEAEFASQDBAEDACgDAgUqDAUHKg4GBwAoBwIHKg4GBwAoBwIHKg4GBwAoBwIHKAIAAAAAAAAAAAIAAAAAAAAAAAAIKg4IByoNAwUAKAUCBSoOBQMqCAEFAAABAgEqDgMFKggBAwAAAQIBJAIEAAcqDgcDKggBCAAAAQIBJAIBAAkqDgkIJAIEAgokAgAECyQCBAEMKgwHAiAARww4AgoNIQIAnQANIABKKg0IAgo4AgkKIQIATgAKOQEAACQCBA0CKggADSoMBA4qDAUPKgwDECoMCBEAEAACACIAxioEAAAqDQQCKg0FCioNAwsqDgIEKg4KBSoOCwMkAgEBAyoOAwgAKAoCBAA4BAcFKg0FAyoNAgQCKAQCBCoOBAIqDQoCAigCAgIqDgIKCjgDBgIKOAIJBCECAGwABDkBAAAqCAECJAIEAgQAEAEEASQDBAECACgCAgQqDAQFKg4GBSoNAgQAKAQCBCoOBAIqCAEEAAABAgEqDgIEKgwHASAAewo4AQcCIQIAhwACIAB+Kg0EAQAoAQIDADgDBwQqDQQCHAwEAgMcDAADARwMBAECKgwCASMqDQQCHAwAAQUAOAMFBiwMAAYABSQCBAEIDDgBCAkhAgCPAAk5AQAAKwQAAoADJQAEAAKABCIBEysIgAUABgAoBgIIADgIAQkqDgUJADgBDAIOOAECBSECAJoABTkBAAAqDgYEKgwCASAAeww4AgoNIQIAoAANIAC7KggBDSQCBAMOABABDgEkAwQBDQAoDQIOKgwODyoOCw8AKA8CDyoOAQ8kAgQCDww4Ag8QIQIArQAQOQEAAAAoDQIPADgPAhAqDRAOJAIEDw0qCAAPKgwEECoMBREqDAMSKgwIEyoMDhQAEAANACIBKCoEAAAgALsAOAIMDQ44Ag0OIQIAvwAOOQEAACoMDQIgAEclAAR4AIAEDQAAAIAEgAMhAADFgAM5AQAAIyIAwSQCBAMGJAIEAQckAgQACCoMCAUgAMwMOAUGCCECAOQACCAAzyoNAQUqDQMGKg0EByoNAggkAgQECSoIAQokAgQFCwAQAQsBJAMEAQoAKAgCCyQCBAQMACgKAg08DwALAA0qDQoIACgIAggqDggKKg4FASoOCgIqDgYDKg4HBCMqDQMIDDgFCAkhAgDoAAkgAQ0qDQEIKg0CCSoNAwoqDQQLKg0CDCQCBAQODDgFDg8hAgDxAA85AQAAACgMAg4AOA4FDyoNDw0qDQEMJAIEAw8MOAUPECECAPkAEDkBAAAAKAwCDwA4DwUQKg0QDgA4DQ4MJAIEBA4MOAUODyECAQEADzkBAAArBAAJgAMlAAQABYAEIgETKwiABQANACgNAg4AOA4FDyoODA8qDggBKg4NAioOCgMqDgsEIAENADgFBwgOOAUICSECAREACTkBAAAqDAgFIADMKwGAA4AGCwCABgACgAchAAEXgAcgARkrAIADgAUgAScrAAABgAUBAAABgAQAASUABAAAgAkNAIAJgASAChcAgAqACiEAASWACgEAgAOACYALKwGAC4AIAQCABYAJgAsrAoAIgAsBAIAJAAKACSABHCUBBAABgAUgAScjIgDBKg0EBiQCAQAHCjgGBwghAgEuAAg5AQAAKg0DBiQCBAMHCjgGBwgkAgQBBiECAVUACCABNCoNAQcqDQIIKg0DCSoNBAoqDQMLJAIEAw0MOAsNDiECAT0ADjkBAAArBAAHgAMlAAQABIAEIgETKwiABQAMACgMAg0AOA0LDioOBQ4qDgwBKg4IAioOCQMqDgoEKg0BBSoNAgcqDQQIKg0DCQA4CQYKDjgJCgshAgFQAAs5AQAAKg4FASoOBwIqDgoDKg4IBCABdiQCBAgHKggACCoMAQkqDAIKKgwDCyoMBAwAEAAHACIAxioEAAAqDQEHKg0CCCoNAwkqDQQKJAIEAAsrBAAHgAMlAAQABIAEIgETKwiABQAMACgMAg0AOA0LDioOBQ4qDgwBKg4IAioOCQMqDgoEKg0BBSoNAgcqDQQIKg4FASoOBwIqDgYDKg4IBCABdiMrABjKGMo=","debug_symbols":"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","brillig_names":["read_storage_map"],"assert_messages":{"240":"Array index out of bounds","256":"Array index out of bounds","272":"attempt to add with overflow","196":"Stack too deep","190":"attempt to add with overflow","142":"Array index out of bounds","107":"Storage slot 0 not allowed. Storage slots must start from 1.","248":"Array index out of bounds","335":"attempt to add with overflow","172":"Array index out of bounds","153":"attempt to add with overflow","316":"Array index out of bounds"}},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"14336010898202591232":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"8704":"attempt to multiply with overflow","10106":"attempt to add with overflow","8948":"Array index out of bounds","7601":"Array index out of bounds","5797":"attempt to subtract with overflow","11295":"attempt to add with overflow","10515":"Nested static call failed!","7821":"Array index out of bounds","11137":"attempt to add with overflow","5883":"attempt to add with overflow","7608":"Array index out of bounds","5670":"attempt to add with overflow","8608":"Array index out of bounds","6292":"Array index out of bounds","11412":"Array index out of bounds","9096":"attempt to add with overflow","7268":"attempt to add with overflow","7780":"attempt to add with overflow","6622":"attempt to add with overflow","6299":"Array index out of bounds","9048":"Array index out of bounds","11285":"Array index out of bounds","8402":"attempt to add with overflow","9426":"attempt to add with overflow","5708":"Array index out of bounds","10127":"Array index out of bounds","10962":"attempt to add with overflow","8323":"attempt to multiply with overflow","5952":"Array index out of bounds","10237":"attempt to add with overflow","11340":"Array index out of bounds","11419":"Array index out of bounds","8756":"attempt to add with overflow","11237":"attempt to subtract with overflow","8354":"attempt to add with overflow","9055":"attempt to add with overflow","5715":"Array index out of bounds","8708":"Array index out of bounds","10433":"Nested static call failed!","6526":"attempt to add with overflow","7739":"attempt to add with overflow","6636":"attempt to add with overflow","5801":"Array index out of bounds","8361":"attempt to add with overflow","7715":"Index out of bounds","10086":"Array index out of bounds","5533":"Array index out of bounds","1626":"attempt to add with overflow","6667":"call to assert_max_bit_size","8715":"attempt to add with overflow","11141":"Array index out of bounds","7344":"attempt to add with overflow","8045":"Array index out of bounds","10093":"Array index out of bounds","5540":"Array index out of bounds","8289":"attempt to subtract with overflow","5918":"attempt to multiply with overflow","5595":"Array index out of bounds","7832":"attempt to add with overflow","11093":"attempt to add with overflow","6162":"attempt to add with overflow","7375":"attempt to add with overflow","9100":"Array index out of bounds","6217":"Array index out of bounds","6406":"Storage slot 0 not allowed. Storage slots must start from 1.","9612":"Array index out of bounds","11148":"Array index out of bounds","5815":"attempt to add with overflow","7351":"attempt to add with overflow","10667":"Array index out of bounds","7650":"attempt to multiply with overflow","10210":"Index out of bounds","2908":"Nullifier was just created, but its existence wasn't detected!","5468":"attempt to add with overflow","9430":"Array index out of bounds","8327":"attempt to subtract with overflow","11265":"attempt to add with overflow","5822":"attempt to subtract with overflow","8760":"Array index out of bounds","6121":"Array index out of bounds","6310":"attempt to add with overflow","5987":"Array index out of bounds","7657":"Index out of bounds","9059":"Array index out of bounds","9437":"Array index out of bounds","10138":"attempt to add with overflow","11430":"attempt to add with overflow","10059":"Array index out of bounds","5695":"attempt to add with overflow","9011":"attempt to multiply with overflow","5616":"attempt to add with overflow","6640":"Array index out of bounds","9066":"attempt to add with overflow","5994":"Array index out of bounds","7908":"attempt to add with overflow","8365":"Array index out of bounds","5726":"attempt to add with overflow","6427":"attempt to add with overflow","8719":"Array index out of bounds","7884":"Array index out of bounds","7750":"attempt to multiply with overflow","7939":"attempt to add with overflow","5757":"attempt to add with overflow","5946":"attempt to add with overflow","6647":"Array index out of bounds","7671":"Array index out of bounds","8372":"Array index out of bounds","5678":"Array index out of bounds","7915":"attempt to add with overflow","5733":"Array index out of bounds","5922":"Array index out of bounds","8293":"Array index out of bounds","5788":"attempt to add with overflow","8671":"attempt to multiply with overflow","1558":"Values are not equal","8726":"attempt to add with overflow","5764":"attempt to add with overflow","5685":"Array index out of bounds","6764":"attempt to add with overflow","10348":"Nested call failed!","5606":"attempt to add with overflow","7654":"attempt to add with overflow","5472":"Array index out of bounds","10537":"attempt to add with overflow","8410":"Array index out of bounds","6551":"call to assert_max_bit_size","11159":"attempt to add with overflow","11348":"Array index out of bounds","11372":"attempt to add with overflow","8331":"attempt to subtract with overflow","5826":"Array index out of bounds","8063":"attempt to add with overflow","10678":"attempt to add with overflow","10032":"Array index out of bounds","2541":"attempt to add with overflow","11245":"Array index out of bounds","5479":"Array index out of bounds","8417":"Array index out of bounds","7582":"attempt to add with overflow","7637":"Array index out of bounds","8149":"Array index out of bounds","9472":"Contract instance not found!","3194":"Nested call failed!","9015":"Array index out of bounds","5620":"Array index out of bounds","6132":"attempt to add with overflow","9070":"Array index out of bounds","10551":"attempt to add with overflow","8936":"Array index out of bounds","9448":"attempt to add with overflow","7321":"Array index out of bounds","10771":"Array index out of bounds","8967":"Array index out of bounds","5572":"attempt to add with overflow","7620":"attempt to add with overflow","5627":"Array index out of bounds","9077":"Array index out of bounds","8675":"Array index out of bounds","8730":"Array index out of bounds","5847":"attempt to add with overflow","8596":"Array index out of bounds","6225":"attempt to add with overflow","6658":"attempt to add with overflow","7682":"attempt to add with overflow","3452":"Nested call failed!","7225":"Array index out of bounds","8627":"Array index out of bounds","6768":"Array index out of bounds","5933":"attempt to add with overflow","6689":"attempt to add with overflow","5854":"attempt to subtract with overflow","7201":"attempt to add with overflow","8737":"Array index out of bounds","8335":"Array index out of bounds","11273":"attempt to multiply with overflow","6775":"Array index out of bounds","2868":"Nullifier doesn't exist!","7720":"Array index out of bounds","1820":"attempt to add with overflow","8342":"Array index out of bounds","5459":"attempt to add with overflow","5648":"attempt to add with overflow","6349":"Storage slot 0 not allowed. Storage slots must start from 1.","1662":"Calldata copy failed","10043":"attempt to add with overflow","10555":"Array index out of bounds","5490":"attempt to add with overflow","8428":"attempt to add with overflow","7593":"attempt to multiply with overflow","6490":"attempt to add with overflow","10074":"attempt to add with overflow","5521":"attempt to add with overflow","6734":"attempt to add with overflow","5899":"Array index out of bounds","7246":"attempt to add with overflow","5442":"Array index out of bounds","9026":"attempt to add with overflow","7356":"Array index out of bounds","5497":"Array index out of bounds","10050":"attempt to subtract with overflow","10562":"Array index out of bounds","5552":"attempt to add with overflow","7789":"attempt to add with overflow","10215":"Array index out of bounds","10782":"attempt to add with overflow","5528":"attempt to add with overflow","5638":"attempt to add with overflow","7363":"Array index out of bounds","6016":"Array index out of bounds","9088":"Array index out of bounds","10112":"attempt to add with overflow","6583":"Storage slot 0 not allowed. Storage slots must start from 1.","5937":"Array index out of bounds","7662":"Array index out of bounds","8686":"attempt to add with overflow","6504":"attempt to add with overflow","5858":"attempt to subtract with overflow","2463":"timestamp does not match","3676":"Nested call failed!","9631":"attempt to add with overflow","10978":"attempt to subtract with overflow","11356":"Array index out of bounds","11277":"attempt to subtract with overflow","10119":"Array index out of bounds","7236":"attempt to add with overflow","8748":"Array index out of bounds","10985":"attempt to subtract with overflow","9315":"attempt to add with overflow","8992":"Array index out of bounds","5975":"attempt to add with overflow","5652":"Array index out of bounds","6274":"attempt to add with overflow","6786":"attempt to add with overflow","11394":"attempt to add with overflow","6006":"attempt to add with overflow","7920":"Array index out of bounds","7597":"attempt to add with overflow","6439":"Storage slot 0 not allowed. Storage slots must start from 1.","5982":"attempt to add with overflow","5659":"Array index out of bounds","7707":"attempt to add with overflow","9109":"attempt to add with overflow","7250":"Array index out of bounds","8652":"Array index out of bounds","5769":"Array index out of bounds","9030":"Array index out of bounds","10054":"attempt to subtract with overflow","8384":"attempt to add with overflow","7927":"Array index out of bounds","7793":"Array index out of bounds","3563":"Nested call failed!","8927":"Array index out of bounds","7257":"Array index out of bounds","5776":"Array index out of bounds","9549":"Unexpected selector!","6288":"attempt to add with overflow","6154":"Array index out of bounds","8391":"Array index out of bounds","8769":"attempt to add with overflow","8958":"Array index out of bounds","10573":"attempt to add with overflow","8312":"attempt to add with overflow","11408":"attempt to add with overflow","8690":"Array index out of bounds","11439":"This assertion should fail!","6508":"Array index out of bounds","5862":"Array index out of bounds","9044":"attempt to multiply with overflow","11281":"attempt to add with overflow","6027":"attempt to add with overflow","5704":"attempt to add with overflow","7563":"Array index out of bounds","8587":"Array index out of bounds","7807":"attempt to add with overflow","11257":"attempt to add with overflow","6515":"Array index out of bounds","7728":"Array index out of bounds","11123":"attempt to add with overflow","8618":"Array index out of bounds","8161":"attempt to add with overflow","6034":"Stack too deep","7814":"Array index out of bounds","11075":"Array index out of bounds"}},{"name":"set_opcode_u32","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAwmAgRAAAAAAAEjJQAEeACABA0AAACABIADIQAAEIADOQEAACMrABjKGMo=","debug_symbols":"XclRCoAgDIDhu+y5E3SVCFFTGYwtTIMYu3tBPYSP//8pbCn04pCzHDAvCiTRNxR+Sm2CUJEIixv26Sv6QOnL3Dn+tF37K7baDQ==","brillig_names":["set_opcode_u32"],"assert_messages":{"15":"Stack too deep"}},{"name":"assert_calldata_copy","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"args","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARgABJAAEAwAkAgQDAiQCBAADHxgAAwACgEMlAgSAQwABJAIEAwMqCAECJAIEBAQAEAEEASQDBAECACgCAgQrBAABgAMrBAAEgAQrBAADgAUiABQqDAIBIgAfOACARgAAJQAEAACABw0AgAeABYAIFwCACIAIIQAAHoAIAQCAA4AHgAkrAYAJgAYBAIAEgAeACSsCgAaACQEAgAcAAoAHIAAVIyIATiQCBAADJAIEAwQqCAEFJAIEBAYAEAEGASQDBAEFACgFAgYfPAADAAQABioIAQYAAAECASQCAQEHKg4HBiQCBAEIKgwDAiAALww4AgQDIQIANgADIAAyKg0GASECADUAATkBAAAjKg0GAyQCBAMKDDgCCgshAgA7AAs5AQAAACgFAgoAOAoCCyoNCwkkAgQDCww4AgsMIQIAQgAMOQEAAAAoAQILADgLAgwqDQwKCjgJCgsEOAMLCSoOCQYAOAIIAw44AgMJIQIATAAJOQEAACoMAwIgAC8lAAR4AIAEDQAAAIAEgAMhAABSgAM5AQAAIysAGMoYyg==","debug_symbols":"tdffaoMwFAbwd8m1F+bvOfFVxijaagmIFrWDIb77dKvV2bGxze9GPPolv5AQQnpxyrPr+RCqom5F8tSLsj6mXairseqHSGRNKMtwPqw/i3h6aPWeby9pNZVtlzadSBxbF4m8Oo2vXtLYQxHKXCTa8RA9pJmluaWZrb2nJdvhORJa4wmDJyyecHiC8ATjCQ8nTPwl4bW5E8b8QHyXngiJJxSe0HiC/k9IpjktmZe0mwAb7wF4PwNe+Q3w66WeGqm/NDLoubI7AD5e5kq6DeDQAKEBRgMeDLgYDUg0oPYAVLxsad4AGg0YNGDRgEMDhAYYDey+k9cnz2OW3NwxEX0eCqEPQZJoQKEBjQYMGrBQYBiLl7QJaVbmt6tnca2Oq5to93r5+DOG3wA=","brillig_names":["assert_calldata_copy"],"assert_messages":{"58":"Array index out of bounds","52":"Calldata copy failed","65":"Array index out of bounds","81":"Stack too deep","75":"attempt to add with overflow"}},{"name":"pedersen_commit","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"x","type":{"kind":"field"},"visibility":"private"},{"name":"y","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"},"visibility":"public"}},"bytecode":"JAAEAQIlAASASAABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMrCIBDAAErCIBEAAIiAA0rBAABgEUrBAACgEYrBAADgEc4AIBFAAMiAKAkAgAABCoIAQUkAgQFBgAQAQYBJAMEAQUAKAUCBioMBgcqDgQHACgHAgcqDgQHACgHAgcqDgQHACgHAgcqDgQHKg0FBgAoBgIGKg4GBSoIAQYAAAECASoOBQYkAgQCBCgCAAAAAAAAAAABAAAAAAAAAAAABSQCBAEHKQIAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACCQCBAAJKgwJAyAAKQw4AwQKIQIAWgAKIAAsKg0GASQCAQACKQIAIDxAI2nosrwsOCe8gqJ40yxR3Jq5XlXOFWbotiW3vOcAAykCAAVc2lPngfPu3XYLosSMbTbSoGFUTD0z52EAvUxl6JdIAAUpAgAr8lUl1KYvElI1VVndSWtouk1upl9LZpuz2nPEJFXwowAGKQIAKDkeiZ1kB+QClPql5VYatHLkPqXVTBU0O5pHy3qA7QkACCoIAQokAgQHCwAQAQsBJAMEAQoAKAoCCyoMCwwqDgUMACgMAgwqDggMACgMAgwqDgIMACgMAgwqDgMMACgMAgwqDgYMACgMAgwqDgIMKggBCyQCBAQMABABDAEkAwQBCwAoCgIMJAIEBg0AKAECDiQCBAQPACgLAhBA9wAMAA4AEAANACgLAgIAOAIJAyoNAwEAKAsCAwA4AwcFKg0FAgAoCwIFADgFBAYqDQYDHAwBAwUcDAAFBBwMAQQDIyoNBgoqCAELJAIEAwwAEAEMASQDBAELACgLAgwqDAwNKg4BDQAoDQINKg4CDSQCBAINDDgDDQ4hAgBoAA45AQAAACgLAg0AOA0DDioNDgwcDAUMDRwMAA0LAjgMCw0IOA0FDhwMBQ4PHAwADw0COA4NDwg4DwUOBDgNBQ8AOA8LDQQ4CA4LADgNCw8KOAwPCyECAHoACzkBAAAEOAMECyQCBAAPCjgPBAwhAgCCAAwGOAsEEQo4EQMQIQIAggAQOQEAACQCBAQPDDgLDxAhAgCGABA5AQAAKwQACoADJQAEAAWABCIApSsIgAUADAAoDAIPADgPCxAqDg0QADgLBwoOOAsKDSECAJEADTkBAAAkAgQEDQw4Cg0PIQIAlQAPOQEAAAAoDAINADgNCg8qDg4PKgwMCyoOCwYAOAMHCg44AwoLIQIAngALOQEAACoMCgMgACklAAR4AIAEDQAAAIAEgAMhAACkgAM5AQAAIysBgAOABgsAgAYAAoAHIQAAqYAHIACrKwCAA4AFIAC5KwAAAYAFAQAAAYAEAAElAAQAAIAJDQCACYAEgAoXAIAKgAohAAC3gAoBAIADgAmACysBgAuACAEAgAWACYALKwKACIALAQCACQACgAkgAK4lAQQAAYAFIAC5IysAGMoYyg==","debug_symbols":"5ZzRbuJADEX/Jc88zNhje6a/slpV0EKFhKACutIK8e8LtAkoqeAlN2ulLxW0Fue66rkkkHKoXuezj7fn5Xqx2VVPvw7VavMy3S8369O9w3FSzbbL1Wr59nz77Sqcv8R0md+9T9fnu7v9dLuvniSwTar5+vV8s5TTIyyWq3n1xJqPk850DKJf06eb1kxTOf6eVFHgBIUTDE7IcEJBEyjACRFOIDiB4QS40wR3muBOE9xpgjtNcKcZ7jTDnWa40wx3OvXyW8qxIWRqE/poDRKpCUwdQh+twZQbgqZbQneYTeuH5hz5OpwucdRXHPMVJ/uKU1zFkeArTvQVh3zFYV9xkq84vlpZfLWy+Gpl8dXK4quV1Vcrq69WVl+trL5aWX21svpqZfXVyuqrldVXK6uvVjZfrWy+Wtl8tbL5amXz1crmq5XNVyvb4K2cEzdxbl8y+4yTfcUpruLkwVs5KzVxTNtxoq845CvO4K2cS/1SMZcg7TjJVxzxFUf/Z5xOK2fzFSe7ilN6eX/r3vsqpY9mo1hPRyJpEwhOYDghwQkCJyicYHBChhMKmhBDwCMiHkF4BOMRCY8QPELxiD7cjqVcEfrgiZG4OT8gezBc7HpxQgjXWflmVrUOoWa3o5c1889Ys4xmzVIfa1lM7TVjGM+adWSj3FkzjmVNk1SvqdRZk37GmjyaNZtTmxw6FdTLpd1O1gz1mhQ7a8pY1sxN5PzNH62OcM3u82Yc/CiIm0sWmQu3j8ri4IcrnMq9PGX4PPFOHgrO8kRneXp5Ss3NiUMs2kEwHpHwCMEjFI8wPCLjEQWO6OX/Ch4gIh6Bt5vxdjPebsbbzXi7GW834+1mvN0Jb3fC253wdie83Qlvd8LbnfB2J7zdCW93wtsteLsFb7fg7Ra83YK3W/B2C95uAdt9PN37M90up7PV/OtTFxYf65ebD2HY/33//Mlp+B8=","brillig_names":["pedersen_commit"],"assert_messages":{"144":"attempt to add with overflow","133":"Array index out of bounds","157":"attempt to add with overflow","103":"Array index out of bounds","148":"Array index out of bounds","129":"attempt to multiply with overflow","163":"Stack too deep"}},{"name":"get_function_selector","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiABokAgQAASQCBAECKggBAyQCBAIEABABBAEkAwQBAwAoAwIEHzwAAQACAAQAKAMCBAA4BAEFKg0FAhwMBAIDHAwAAwEcDAQBAioMAgEjJQAEeACABA0AAACABIADIQAAHoADOQEAACMrABjKGMo=","debug_symbols":"zZVNCsIwEEbvMusukslPx15FRFJtJRBSaasgpXe31aoVBTcWZhMyySPfg8BMB/siPx22PpZVA9m6g1DtXOurOFRdn0Be+xD8YTs/BjEuUtz45ujiWDatq1vIVmRsAkXcj9sUhxdKHwrIlKU++aA1GjXRGme0JPOFJpJ6oomMeaM3CUjJTQi5CSluQpqbkOEmZLkJpdyE6A9CSsqHkEL7EbFaPALF8hF/6Y+Er4j0x89ZoglOhXiyiPqmg7x0FCOdfijPrvYuD8U0iMtT3M3mcns53m8G+Ao=","brillig_names":["get_function_selector"],"assert_messages":{"29":"Stack too deep"}},{"name":"check_selector","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"JAAEAQIlAASAQwABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAg4AIBDAAAiABwkAgQAASQCBAECKggBAyQCBAIEABABBAEkAwQBAwAoAwIEHzwAAQACAAQAKAMCBAA4BAEFKg0FAhwMBAIDHAwAAwEcDAQBAiYCBNq3lLEAAQo4AQIDIQIAGwADOQEAACMlAAR4AIAEDQAAAIAEgAMhAAAggAM5AQAAIysAGMoYyg==","debug_symbols":"zZbdqoMwDIDfpddeNOmP0Vc5HEbddBRKHeoOHMR3nzr3xwYDGSM3pWm/NB8UQnqxK4vjfuNjVbci/+lFqLeu83Uco35IRNH4EPx+c38s5LRkM94eXJyitnNNJ3KQGWaJKONu3mszPlH5UIpcWRqSJ16jUQuuMcUrDWRe0ESgF5rImAf6NxEg+SkBPyXkp6T4KWl+SoafkuWnlH5ESQFclBTapyL0jSLZF4rgh3om4a1I+uYHLdECp1JeWUQ9CwE3IeQm9L5bggT7IDSl6XVpZl2aXZE2jOGfa7wrQrnMH9Uxbu/Gke7/cL4Z4RM=","brillig_names":["check_selector"],"assert_messages":{"26":"Unexpected selector!","31":"Stack too deep"}},{"name":"nullifier_exists","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAorBAABgEQ4AIBEAAEiAA8eAgAAAjA4AAEAAgADKgwDASMlAAR4AIAEDQAAAIAEgAMhAAATgAM5AQAAIysAGMoYyg==","debug_symbols":"hZDdCoMwDEbfJddeLK32x1cZQ6pWKZQqWgdDfPdVp5sywZuSrzmEk4xQ6nyoM+Oqpof0PoJtCuVN40Iapwjyzlhr6mz/Dbf5QVz4vlVujr1XnYcUCSEiAu3KpY5FmFEZqyGlLNR/PJUsWXEqefylUSQnNIsFrjSLJT/QjwiQnCuhJD8lZBdKSBK54RSTCyXO6bYv5wKPSlOIT9UZlVu9HrQaXLG7r3+1n06A3w==","brillig_names":["nullifier_exists"],"assert_messages":{"18":"Stack too deep"}},{"name":"add_args_return","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"arg_a","type":{"kind":"field"},"visibility":"private"},{"name":"arg_b","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARgABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMrCIBDAAErCIBEAAIiAAsrBAABgEU4AIBFAAEiAA8AOAECAyoMAwEjJQAEeACABA0AAACABIADIQAAE4ADOQEAACMrABjKGMo=","debug_symbols":"TY3BCsMwDEP/xece0g26Lb8yRnHapBiMU5J0MEL+fe7WQy/GTxJShdm7bRlJQsxgnxU4TlgoilJtHbhEzLSMZxnMfvrLL59XlB1zwVTA9sPDdOBl1vdmjDYEYg/2Otzbqym+MRE69kd/2GQ6zZXP+nc0/AU=","brillig_names":["add_args_return"],"assert_messages":{"18":"Stack too deep"}},{"name":"note_hash_exists","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"note_hash","type":{"kind":"field"},"visibility":"private"},{"name":"leaf_index","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARgABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMrCIBDAAErCIBEAAIiAAsrBAABgEU4AIBFAAEiAA8uOAABAAIAAyoMAwEjJQAEeACABA0AAACABIADIQAAE4ADOQEAACMrABjKGMo=","debug_symbols":"bc9LCsMgEAbgu8w6i5rGR7xKKUETDYJoUFMokrvXpFJS2o3M73wMMxkmJdd5ME77CPyWwfpRJONdSXlrQAZjrZmH8zdc9ge1h4+LcHuMSYQEHCGCuwaUm46asjJDG6uAX0mpf3zftVX3DH0sYviPpRixiikm3Ze+byU+RDBCWlV316sbT6ek5/LuFPwC","brillig_names":["note_hash_exists"],"assert_messages":{"18":"Stack too deep"}},{"name":"create_same_nullifier_in_nested_call","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"nestedAddress","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMrCIBDAAErCIBEAAIiAAo4AIBFAAAiAFQxAgACKggBBAAAAQIBJAIEAQUqDgUEKggBBgAAAQIBJgIA2X0MigAHJAIEAQkkAgQCCwA4CQsKKggBCAAQAQoBJAMEAQgAKAgCCioOCQokAgQCCgA4CAoJKgwJCioOBwoqDggGJAIEAAcqDAcDIAAjCjgDBwghAgBBAAggACYqDQQCKg0GAykCADBkTnLhMaApuFBFtoGBWF0oM+hIeblwkUPh9ZPwAAAAAAQqCAEFJAIEAwYAEAEGASQDBAEFACgFAgYqDAYHKg4EBwAoBwIHKg4EByYCANVEGw0ABgAoBQIHACgDAgoqDQoJACgKAggqCAEKAAABAgEkAwQBCgAoCgIMNj+VAAcAAQAIAAkADAAAAAsABiQCAgEBCjgLAQIhAgBAAAI5AQAAIwo4AwcIIQIARAAIOQEAACoNBAgqDQYJACgIAgorBAAJgAMlAAQAAYAEIgBZKwiABQALKwiABgAMKg4CDCoNCwgAKAgCCCoOCAsqDgoEKg4LBioMBQMgACMlAAR4AIAEDQAAAIAEgAMhAABYgAM5AQAAIwEAgAMAAoAHKwGAB4AHAQCAB4AEgAglAAQAAoAKAQCACIAKgAkrAAABgAUBAAABgAkAASUBBAABgAUBAIAFAAKACSsCgAiACSUABAACgAoBAIADgAqACSUABAACgAsBAIAFgAuACiUABAAAgAwNAIAMgAeADRcAgA2ADSEAAHGADQEAgAmADIAOKwGADoALAQCACoAMgA4rAoALgA4BAIAMAAKADCAAaAEAgAqAB4AGIysAGMoYyg==","debug_symbols":"1ZvdboJAEIXfZa+5YGZ39sdXaRqDioaEoFFs0hjfvUgFtVr20j03xtUjfpO4fmEGTmpVLo6bedWstwc1+ziperss2mrbdKvTOVOLfVXX1WZ+/7LKLw9Eff6wK5rL8tAW+1bNyHjiTJXNqn+uTXeMdVWXaqatP2dPee3dENc+uDFNXl6knTf5Ne26Dz6kPzNF/A+SyIgUiCJIVswQt+L07UsCvUiz1UMBbF0eLSBcwz73Y5bZ9PgaG99g4ws2vsXGd9j4Hhs/QONzjo1P2PjY1mVs6zK2dRnbuoxtXca2LmNbl7Gtq7Gtq7Gtq5P/4yRLAz9ZvjUCbH+urpPfu2SNHflt/pc/+c07zW/esXtdPrRv2OtYs8cbpuH3bxw9pC8FEHoBjF6ARi/AoBcg6AVY9AIcegEevYAAXoCgm1jQTSzoJhZ0Ewu6iQXdxIJuYkE3saCbWNBNbN9h4jAenIN1T0iUHhKnh6TTQwLvz9nkJxsR/uRHGxF+gP7oJD9Af3SK3yU/3Zju77rkxxsR/uSvKojwJ39ZQYTfgPMD+HeSH8C/k/wA/p3kB59POvD5pAf3r4f277lbfRX7qljU5fVOgPWxWd7dGNB+737f6cI/","brillig_names":["create_same_nullifier_in_nested_call"],"assert_messages":{"87":"Stack too deep","63":"Nested call failed!","67":"Index out of bounds"}},{"name":"add_u128","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"a","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"},"visibility":"private"},{"name":"b","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"},"visibility":"public"}},"bytecode":"JAAEAQIlAASASQABJAAEAwAkAgQEBSQCBAAGHxgABgAFgEMrCIBDAAErCIBEAAIrCIBFAAMrCIBGAAQiAA4rBAABgEcrBAACgEg4AIBHAAIiAB4AOAEDBRwMBQUDHAwAAwECOAUBAygCAAAAAAAAAAABAAAAAAAAAAAABQg4AwUGADgCBAMAOAMGAhwMBQIEHAwABAMKOAMCBCECABwABDkBAAAqDAMCIyUABHgAgAQNAAAAgASAAyEAACKAAzkBAAAjKwAYyhjK","debug_symbols":"tdTRCsIgFAbgdznXuzjq1LlXiQhXWwjiYltBjL17VsuGu9Ub8eiPHyieGS5tc7+ejOv6EerDDLY/68n0zlfzUkAzGGvN9bRdBnwPhH/y4027dzlOepigJkJhAa27+KlE9Cd0xrZQM1EtxS7Nkas1zVGykPbhYwFEpBAU/QkEaSzI7EKVQCCsDEK5E1QSgQWBk0igmF0gKQT5f4dKxAJNLKgyFlgCgZJwS5TuhDK7kOJPU45BEBgLIrsg8wqLrx56MLqx7doku7s7b3rm9Lx9d3z4BQ==","brillig_names":["add_u128"],"assert_messages":{"33":"Stack too deep","27":"attempt to add with overflow"}},{"name":"keccak_hash","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"data","type":{"kind":"array","length":10,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["keccak_hash"],"assert_messages":{"288":"Array index out of bounds","189":"Array index out of bounds","346":"Array index out of bounds","227":"Array index out of bounds","276":"attempt to multiply with overflow","308":"attempt to add with overflow","433":"attempt to add with overflow","465":"Stack too deep","354":"Array index out of bounds","223":"attempt to add with overflow","415":"attempt to add with overflow","447":"Array index out of bounds","246":"attempt to add with overflow","406":"attempt to add with overflow","208":"attempt to add with overflow","333":"attempt to add with overflow","234":"Array index out of bounds","263":"Array index out of bounds","365":"attempt to add with overflow","458":"attempt to add with overflow","219":"attempt to multiply with overflow","280":"attempt to add with overflow","283":"Index out of bounds","341":"Index out of bounds","376":"attempt to multiply with overflow","440":"Array index out of bounds","297":"Array index out of bounds","419":"Array index out of bounds"}},{"name":"set_storage_list","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"a","type":{"kind":"field"},"visibility":"private"},{"name":"b","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMrCIBDAAErCIBEAAIiAAo4AIBFAAAiAC4kAgACBCQCBAIFJAIEAQYkAgQAByoMBwMgABEMOAMFByECABUAByAAFCMcDAADBwA4BAcIKggBByQCBAMJABABCQEkAwQBBwAoBwIJKgwJCioOAQoAKAoCCioOAgokAgQCCgw4AwoLIQIAJAALOQEAAAAoBwIKADgKAwsqDQsJLQwACQAIADgDBgcOOAMHCCECACwACDkBAAAqDAcDIAARJQAEeACABA0AAACABIADIQAAMoADOQEAACMrABjKGMo=","debug_symbols":"1ZjBioMwEED/JWcPSSaJib+yLEVbLQHRonZhEf99za5rW9Km15mLOPqIz4sPM7NTXV3PB981/ciKj5m1/bGcfN+t07xkrBp82/rz4f4y4+Eg8l9+vJRdGMepHCZWSDB5xuruFE6tXldofFuzAoxdsogW0tiNFtKpnRYgntCG8/+1DZfuRofnRLTOndtobTl/oD8zJgVyfavUrq9VpC+x60uX0gfs+trs+kZH+oq2vqatb2jrY/9wvtG3tPUdaX3gtPXRVzetj766aX3a1QXa1QXa1QXa1QXa1QXa1QX01RX6pm/e0E4AbLQTefRzo9A3+vXLBn30jU7ro290Wh99oxP6yzp+lYMvq7beNpCaa3e820+avi9/d1b4Bw==","brillig_names":["set_storage_list"],"assert_messages":{"35":"Array index out of bounds","49":"Stack too deep","43":"attempt to add with overflow"}},{"name":"set_storage_single","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"a","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAk4AIBEAAAiACokAgABAyQCBAAEJAIEAQUqDAQCIAAPCjgCBAYhAgATAAYgABIjHAwAAgYAOAMGByoIAQYkAgQCCAAQAQgBJAMEAQYAKAYCCCoMCAkqDgEJJAIEAQkMOAIJCiECACAACjkBAAAAKAYCCQA4CQIKKg0KCC0MAAgABwA4AgUGDjgCBgchAgAoAAc5AQAAKgwGAiAADyUABHgAgAQNAAAAgASAAyEAAC6AAzkBAAAjKwAYyhjK","debug_symbols":"1ZjRboMgFED/hWcfgAsI/sqyNNpqQ0KwUbtkMf77dHO2my19vffFePXEHF84hJGd6up6PvjYtD0r3kYW2mM5+DbO0zhlrOp8CP58uH/M+HIR+pvvL2Vcxn4ou4EVwimZsTqellsj5y80PtSsAGOnbE9LY39p6dRGCxAPaMN5vtKGS3ejrX5A69y5ldaW8z/0e8aEQ65vldr0tfqvLzl2felS+gK7vjabvtE7fUlbH2jrK9r62BfOF/qGtn5OW9/S1kdf3aQ+oK9uWp92dYF2dYF2dYF2dQF9dYW+6ZsXtBMAK+1EvtteA/pGP//ZRR99o9P66Bud1kff6IT+NI8fZefLKtTrEUZzjce7E43h8/LzZoa/AA==","brillig_names":["set_storage_single"],"assert_messages":{"31":"Array index out of bounds","45":"Stack too deep","39":"attempt to add with overflow"}},{"name":"assert_timestamp","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"expected_timestamp","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMdAAWAQ4BDKwiAQwABIgAKOACARAAAIgAQHgIHAAIKOAIBAyECAA8AAzkBAAAjJQAEeACABA0AAACABIADIQAAFIADOQEAACMrABjKGMo=","debug_symbols":"nZDRCoQgEEX/ZZ590LS0fmVZwspCEIuyhSX699VWotjtpZdh7sy5w2UWaFQ1d6W2bT9B8VjA9LV0urdeLSuCatTG6K48jgGHQsjGT4O0QU5Ojg4KgnmaIVC22XpO/Y1WGwUFzcSKfngmOI04E4LtNBHpH5rjlESa4yw/0U8EJLmIlCd7JJGcIwUbvWdjN2yrly85alkZFV/czrY+fNy9h+/Gwx8=","brillig_names":["assert_timestamp"],"assert_messages":{"14":"timestamp does not match","19":"Stack too deep"}},{"name":"bulk_testing","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"args_field","type":{"kind":"array","length":10,"type":{"kind":"field"}},"visibility":"private"},{"name":"args_u8","type":{"kind":"array","length":10,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["bulk_testing"],"assert_messages":{"2816":"Array index out of bounds","3328":"Stack too deep","4541":"Array index out of bounds","3127":"attempt to add with overflow","1457":"Array index out of bounds","2670":"attempt to add with overflow","4529":"attempt to add with overflow","3036":"Array index out of bounds","275":"Storage slot 0 not allowed. Storage slots must start from 1.","3280":"attempt to add with overflow","397":"Storage slot 0 not allowed. Storage slots must start from 1.","4560":"attempt to add with overflow","2823":"Array index out of bounds","4548":"Array index out of bounds","385":"attempt to add with overflow","3201":"Array index out of bounds","4536":"attempt to add with overflow","3055":"attempt to add with overflow","3110":"Array index out of bounds","2842":"attempt to add with overflow","3287":"Array index out of bounds","2641":"attempt to add with overflow","4488":"Array index out of bounds","3074":"Array index out of bounds","3964":"attempt to add with overflow","3696":"attempt to add with overflow","2794":"Array index out of bounds","3294":"Array index out of bounds","2715":"Array index out of bounds","3550":"Array index out of bounds","3093":"attempt to add with overflow","3672":"attempt to add with overflow","2703":"Array index out of bounds","3660":"Array index out of bounds","3081":"Array index out of bounds","3002":"attempt to add with overflow","2935":"Array index out of bounds","4404":"attempt to add with overflow","2801":"attempt to add with overflow","4794":"attempt to add with overflow","2923":"attempt to multiply with overflow","2600":"Array index out of bounds","4770":"Array index out of bounds","4447":"Array index out of bounds","3155":"attempt to add with overflow","4435":"attempt to add with overflow","2954":"attempt to add with overflow","4612":"attempt to add with overflow","2942":"Array index out of bounds","3710":"attempt to add with overflow","4411":"attempt to subtract with overflow","3253":"attempt to add with overflow","370":"Storage slot 0 not allowed. Storage slots must start from 1.","2674":"Array index out of bounds","492":"Storage slot 0 not allowed. Storage slots must start from 1.","1449":"Array index out of bounds","4454":"Array index out of bounds","2772":"attempt to add with overflow","3473":"Array index out of bounds","2961":"attempt to add with overflow","3028":"attempt to add with overflow","2882":"attempt to add with overflow","2626":"attempt to multiply with overflow","1212":"Array index out of bounds","2681":"attempt to add with overflow","3193":"Array index out of bounds","4473":"attempt to add with overflow","1200":"Array index out of bounds","3370":"attempt to add with overflow","1188":"Array index out of bounds","2724":"attempt to add with overflow","2846":"Array index out of bounds","1176":"Array index out of bounds","2645":"Array index out of bounds","2834":"Array index out of bounds","3212":"attempt to add with overflow","2889":"attempt to subtract with overflow","3968":"Array index out of bounds","4480":"Array index out of bounds","3066":"attempt to multiply with overflow","3322":"attempt to add with overflow","3188":"Index out of bounds","3700":"Array index out of bounds","4590":"Array index out of bounds","2731":"Array index out of bounds","3688":"attempt to multiply with overflow","1439":"Array index out of bounds","793":"attempt to add with overflow","4499":"attempt to add with overflow","781":"Array index out of bounds","3853":"attempt to add with overflow","3975":"Array index out of bounds","3652":"attempt to subtract with overflow","4420":"Array index out of bounds","3262":"attempt to add with overflow","2805":"Array index out of bounds","2927":"attempt to subtract with overflow","3305":"attempt to add with overflow","3561":"attempt to add with overflow","2659":"attempt to multiply with overflow","4585":"Index out of bounds","4506":"Array index out of bounds","4762":"Array index out of bounds","1221":"Array index out of bounds","2757":"attempt to multiply with overflow","3135":"Array index out of bounds","2812":"attempt to add with overflow","1465":"Array index out of bounds","4415":"attempt to subtract with overflow","3123":"attempt to multiply with overflow","2855":"attempt to add with overflow","4635":"Array index out of bounds","2776":"Array index out of bounds","2965":"Array index out of bounds","2630":"Array index out of bounds","2685":"Array index out of bounds","3130":"Index out of bounds","4654":"attempt to add with overflow","2984":"attempt to add with overflow","2594":"Nested static call failed!","3362":"Array index out of bounds","2972":"Array index out of bounds","2893":"Array index out of bounds","2692":"Array index out of bounds","3070":"attempt to add with overflow","3314":"Array index out of bounds","2991":"Array index out of bounds","3180":"attempt to add with overflow","3692":"attempt to subtract with overflow","2790":"attempt to multiply with overflow","3491":"attempt to add with overflow","3680":"attempt to add with overflow","2912":"attempt to add with overflow","4393":"Array index out of bounds","1431":"Array index out of bounds","2711":"attempt to add with overflow","3223":"attempt to multiply with overflow","3144":"Array index out of bounds","3010":"Array index out of bounds","3266":"Array index out of bounds","2931":"attempt to subtract with overflow","2864":"Array index out of bounds","4467":"attempt to add with overflow","2474":"Nested call failed!","2663":"Array index out of bounds","4010":"Contract instance not found!","4778":"Array index out of bounds","3986":"attempt to add with overflow","2761":"Array index out of bounds","3017":"Array index out of bounds"}},{"name":"assert_same","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"arg_a","type":{"kind":"field"},"visibility":"private"},{"name":"arg_b","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARgABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMrCIBDAAErCIBEAAIiAAsrBAABgEU4AIBFAAEiABEKOAECAyECAA8AAzkBAAAkAgABASMlAAR4AIAEDQAAAIAEgAMhAAAVgAM5AQAAIysAGMoYyg==","debug_symbols":"nY/BCsMgEET/Zc8emlps6q+UEjTRsCBrUFMo4r9X2xxyTS7Lvt2ZgckwGb3OA5L1EeQzg/OjSuipUi4MdEDncB72Z7i00V1/+rgoahiTCgmkED1nYGhq6+NeEyw6A5KLvrwYdPyM6XbYVCq+VUClndma2JXGXbH0Wf6fKv4C","brillig_names":["assert_same"],"assert_messages":{"20":"Stack too deep","14":"Values are not equal"}},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"14336010898202591232":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/9VYzXLaMBAWYDB2AiEmKemNXtuLnRCgN8/0J733CRp+Lj2knckDuDNtn7uoaO2PZctQWB3YGY9krfztt7uS11bNrKW9umqu33Rty2wLzcldmx4nmSJW6pNn7UR41k+EZ+NEeAaKPGsCT9sGrm/3nd1zoVnvxy0lPmwT3QC92QFUY0at/IR+17Wfn7/Mvg6fn56G88XiWzn9t2sj19YBTjGPWWS2Y6OFP01Hs8hsijL/u8hhhn7w7wm/7Qc/Jd7vigoffSG7Ddc+FFUsH+AZKx3XxyVHuKSrg+490zVA94HpcMl/ZDrcJsSJ4tYCXxTX1dR3Xsi3EHyr/aM1poodjlGsY+N1jWaU84jx4fyJT4fmFBWfFtMFoIuYrgk6ir9thzCP5z6EeW9gnK/Jhtlew6SnnGOsfaypwAP+SkZS3HlOgmLTNuow7gHEc+j6/dX1yc0JIGZWwsKLT2V9bTv8JvAmm8i9zubzfpONvTYV77/+wFyy04Axsnnh7lugo2d3YQUCVk+Y32JYoYCFY+S33ROvXP/MrPP3g/DN9ntC7xt4/FZ6Z+rhT8paHPnhvyD82Av+qMQ/A3zNvUL4537iMyb8jh/88luo6wX/tozPBeAbvfhnVJdoP6MNsn3pJfdZts83A9qPGVdf3wyXjA+PD9Ynq0sErj1Bx/doIthJBDuUhz57Plfxe7yUuPYP5CphdRWxIkWsQ32kfFyx53N3nx4lk5HE9UrR744iVlsR69B1Qvm4Zs/n7j49SsZiPq4V/dbMx7kiVqiIpblvNeNFeZRqnZXctemRwrni/xTapDrfZPO/u5ZqzgtTCa/XAxhXrNe3+9brAeOKfIh3LOiOOeOcjZd3j/PlaP44WUwh3gPGlY/hGaK9boT5Uu2nWL80XmKdSv/FNxBXKwHoBkzXBB1xxP/iiGFq898n/mi/J+jwn+N/cpmYzbWWMJ/x/CdX8bc6G2sDNt+XkZdYp/f77kuyHzOuynx2nr1hfPh3dCxw7Qk6XpdiwU4s2DlFLH5+jTG0+4PiFBSVXiuXk2l1lkXvITzLQglAj/N/ufvEyGJ9+ANQAijv/B0AAA==","debug_symbols":"tdnNaoNAFEDhd5m1C43O/cmrlBI00SCIBjWFIr57J20ogazPRubq9ey+1Wzh0jb366kfu2kJx48tDNO5XvtpTNO2Z6GZ+2Hor6fX1yF/PKrqd3+51eNjXNZ6XsOxVM9CO17Syar0f9cPbTqL7dnbrh6eq6r/m9H3zyxUEWwL2FawbWDbuXbMwXYBtg9guwTboMsIuoygywi6jKDLCLoU0KWALgV0KaBLAV0K6FJAlwK6FNClgC4VdKmgSwVdKuhSQZcKulTQpYIuFXSpoEsDXRro0kCXBro00KWBLg10aaBLA10a6NJBlw66dNClgy4ddOmgSwddOujSQZcOuizynIwXZPxAxksyXpHxSMaFjCsZNzJOCi1IoQUptMCE7mn6que+bob2eQfS3cfzy5XI+n37+5KWfwA=","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"variable_base_msm","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARgABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAsrBAABgEMrBAACgEQrBAADgEU4AIBDAAMiAE0kAgAUASoIAQIkAgQHAwAQAQMBJAMEAQIAKAICAyoMAwQkAgABBSoOBQQAKAQCBCkCAAAAAAAAAAACzxNedQakXWMtJw1F8RgSlIM/xI2CPycsAAYqDgYEACgEAgQkAgEAByoOBwQAKAQCBCoOBQQAKAQCBCoOBgQAKAQCBCoOBwQqCAEDJAIEBQQAEAEEASQDBAEDACgDAgQqDAQIJAIAAwkqDgkIACgIAggkAgAACioOCggAKAgCCCoOAQgAKAgCCCoOCggqCAEEJAIEBAgAEAEIASQDBAEEACgCAggkAgQGCwAoAwIMJAIEBA0AKAQCDkD3AAgADAAOAAskAgQAAQAoBAIDADgDAQUqDQUCJAIEAQEAKAQCBQA4BQEGKg0GAyQCBAIBACgEAgYAOAYBByoNBwUcDAEFBBwMAAQBHAwBAQQqDAIBKgwDAioMBAMjJQAEeACABA0AAACABIADIQAAUYADOQEAACMrABjKGMo=","debug_symbols":"tdjBboJAEIDhd9kzB3Znhl18laYxqGhICBrFJo3h3YstVaJX/gthYMJ/+jjsze3qzfWwbrr98eJWHzfXHrdV3xy7cboNmducm7ZtDuv5Y5ffLz787l9OVXcfL3117t1KUxEyV3e78bbMbfzCvmlrt5IiDdnbtsQiTtuSvDy2gw6fmfOCFxQvGF4o8ELECwkvlHQh5HjB4wXcdMBNB9x0wE0H3HTATQfcdMBNC25acNOCmxbctOCmBTctuGnBTQtuWnDTiptW3LTiphU3rbhpxU0rblpx04qbVty04aYNN224acNNG27acNOGmzbctC1hOqk8ChZfCyVdKHK84PHCEqaf25Ji8VoQvKB4wfDCEqZT6f8L8+2pEPFCwgslXYj5woW3P1/0eCGwhWGcvqpzU23aejqE31+77exMvv8+/b0Zl38A","brillig_names":["variable_base_msm"],"assert_messages":{"80":"Stack too deep"}},{"name":"nullifier_collision","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAk4AIBEAAAiAA0xAgABMQIAASMlAAR4AIAEDQAAAIAEgAMhAAARgAM5AQAAIysAGMoYyg==","debug_symbols":"vZBBDoMgEEXvMmsWICroVZrGoKIhIWgEmzSEuxctbWzq2s1k/sybyc/30Mt2HRtlhslCffOgp044NZmofEDQLkprNTbHMeCtELzzdhZmk9aJxUFNsqogCKTp957R+GNQWkJNSx7QH085yxJOecW+NOHFCc14jhPN4uEPfUdAyKklirPyY4ninF9nKUT5EIsSrZYp0GE13SFf95zfmwi/AA==","brillig_names":["nullifier_collision"],"assert_messages":{"16":"Stack too deep"}},{"name":"nested_call_to_add_with_gas","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"arg_a","type":{"kind":"field"},"visibility":"private"},{"name":"arg_b","type":{"kind":"field"},"visibility":"private"},{"name":"l2_gas","type":{"kind":"field"},"visibility":"private"},{"name":"da_gas","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASASAABJAAEAwAkAgQEBSQCBAAGHxgABgAFgEMrCIBDAAErCIBEAAIrCIBFAAMrCIBGAAQiAA0rBAABgEc4AIBHAAEiAHceAgAABioIAQcAAAECASQCBAEIKg4IByoIAQkAAAECASYCAKpjSKEACiQCBAEMJAIEAg4AOAwODSoIAQsAEAENASQDBAELACgLAg0qDgwNJAIEAg0AOAsNDCoMDA0qDgoNKg4LCSQCBAAKJAIBAQskAgQCDCoMCgUgACgMOAUMDSECAEkADSAAKyoNBwEqDQkCJgIA1UQbDQAFKggBByQCBAMIABABCAEkAwQBBwAoBwIIKgwICSoOAwkAKAkCCSoOBAkAKAcCCAAoAgIMKg0MCwAoDAIJKggBDCQCBAINABABDQEkAwQBDAAoDAIONj+VAAgABgAJAAsADgABAA0ABSQCAgEBCjgNAQIhAgBFAAI5AQAAACgMAgIAOAIKAyoNAwEjDDgFDA0hAgBMAA05AQAAJAIEAg4kAgQCEAA4DhAPKggBDQAQAQ8BJAMEAQ0AKA0CDyoODg8kAgQCDwA4DQ8OKgwODyoOAQ8AKA8CDyoOAg8AKA0CDyoNDw8MOAUPECECAF8AEDkBAAAkAgQCEAA4DRAPADgPBRAqDRAOKg0HDSoNCQ8AKA0CECsEAA+AAyUABAABgAQiAHwrCIAFABErCIAGABIqDg4SKg0RDQAoDQINKg4NESoOEAcqDhEJADgFCA0OOAUNDiECAHUADjkBAAAqDA0FIAAoJQAEeACABA0AAACABIADIQAAe4ADOQEAACMBAIADAAKABysBgAeABwEAgAeABIAIJQAEAAKACgEAgAiACoAJKwAAAYAFAQAAAYAJAAElAQQAAYAFAQCABQACgAkrAoAIgAklAAQAAoAKAQCAA4AKgAklAAQAAoALAQCABYALgAolAAQAAIAMDQCADIAHgA0XAIANgA0hAACUgA0BAIAJgAyADisBgA6ACwEAgAqADIAOKwKAC4AOAQCADAACgAwgAIsBAIAKgAeABiMrABjKGMo=","debug_symbols":"1ZzBauswEEX/xessNCN5NJNfeTyK0ybFYJySpA8eIf9eO7WdlLbSplDdTYiTQT4XLI7tETpXT9vN6/ND2+/2x2r951x1+8fm1O774eh8WVWbQ9t17fPD/c+VGz8oXOuPL00/Hh5PzeFUrclHDqtq2z9dv4cwjLFru2219qKX1ad6b1JP5d7irZq0/qJagtJULcHih+q/q4rqb5CIFyQVl0EK6uaTBGW7ncToi2oWPw/OEl0mQFSbitXpUsscrviCjR+x8RUb36Dx2WHjEzY+Y+N7bPyAjY9tXca2LmNbl7Gty9jW9djW9djW9djW9djW9djWDcVPXRKa+Un49mgv12f1UPzVQxJk4b8jmfiLv3wy/L9x1xadm/nVxwy/Bp7H1hDpQ/UYQNADRPQAih7AwAPUDj0AoQdg9AAePUBAD4Bu4hrdxDW6iWt0E9foJhZ0Ewu6iQXdxIJuYkE3sfyGia2eF0CwyaclDSLlIcXykLQ8pJ8xmsmCZOMlnUQijurn0VnJMtOBwwLDw8xYqtnZGCE6/AiEHwHgRWnqRW8M4PzFt7cz/MX3tzP8xTe4M/zFd7gz/MW3uNP8Ct4o0+Kb3Bn+4rvcGX5w/yq4fxXcvwruXwX3r4L7V8H9a+D+NXD/Grh/Ddy/Bu5fA/evgfvXwP1r4P41cP+SAxcwOQADp5ZakgNQcDoA+GJdcgASTgcAsHA6AICG0wEAPJwOACDidAAAEycDEICJ0wHQTUzoJiZ0ExO6icvfZCQXANrEl+HoX3Nom023nfao2b32j3db1pz+v7z/MxS/AQ==","brillig_names":["nested_call_to_add_with_gas"],"assert_messages":{"122":"Stack too deep","68":"Nested call failed!","116":"attempt to add with overflow","94":"Array index out of bounds","75":"Index out of bounds"}},{"name":"get_address","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAweAgAAASMlAAR4AIAEDQAAAIAEgAMhAAAQgAM5AQAAIysAGMoYyg==","debug_symbols":"bc/hCoMgEAfwd7nPfSgs015ljNDSEERDbTDEd59uMhrri/i/+3HcRVgFP7ZZGWk9TLcI2i4sKGtyiqkB7pTWapvPZWjL07Vv73dmSvSBuQATxRg1IMxavgTlCVJpARPCJDV/GlE8VI3o2H91R4YLjXvSVY17Ov7oe8rxwZxiXIu6uzzMcjolPPdPJ+MX","brillig_names":["get_address"],"assert_messages":{"15":"Stack too deep"}},{"name":"sha256_hash","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"data","type":{"kind":"array","length":10,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["sha256_hash"],"assert_messages":{"384":"attempt to add with overflow","317":"Array index out of bounds","305":"attempt to multiply with overflow","366":"attempt to add with overflow","488":"attempt to subtract with overflow","354":"Array index out of bounds","546":"attempt to add with overflow","275":"Array index out of bounds","336":"attempt to add with overflow","528":"attempt to subtract with overflow","324":"Array index out of bounds","516":"attempt to add with overflow","309":"attempt to subtract with overflow","373":"Array index out of bounds","294":"attempt to add with overflow","410":"attempt to add with overflow","343":"attempt to add with overflow","532":"attempt to add with overflow","392":"Array index out of bounds","508":"attempt to add with overflow","313":"attempt to subtract with overflow","496":"Array index out of bounds","417":"Stack too deep","347":"Array index out of bounds","536":"Array index out of bounds","143":"attempt to add with overflow","524":"attempt to multiply with overflow","271":"attempt to subtract with overflow","399":"Array index out of bounds","131":"Array index out of bounds"}},{"name":"poseidon2_hash","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"data","type":{"kind":"array","length":10,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"1Z3bTttAFEX/xc88zDlzO8OvVFUVrooUBQShUoX499ptYlCcyYj9EO15qZp2Fiwlx3vHYwfeh7v7m7fHX+vtw9PrcP3jfdg83a5266ft+Oj942q4eVlvNuvHX1//eXDTH97/W//6vNpOD193q5fdcC2puKvhfns3/jU7N36Fh/Xmfrj2yT6uFqt9kf3i4PVzbTixVL0L+7XqtbE4+bRfm3z+uvTn1eBDp96xU+/UqXfu1Ns69S59egfXqbd06q2denfal6HTvgyd9mXotC9Dp30ZmPsyHyRSlmNv5r484x2Z+/KcN3NfnvNm7stz3sx9ec6bpi8nGZoSnGRomm2SoamrSYamgyYZmmIZZRJNW0wyNBUwydDk+iRDE9aTDFMCJ6YETkwJnJgSODElcGJK4MyUwJkpgTNTAmemBM5MCZyZEjgzJXBmSuDMlMCZKYGNKYGNKYGNKYGNKYGNKYGNKYGNKYGNKYHLpY+m8CkT47HMhWfGtBxkLHh48WSeeM0lZz9blOOty5K7NbduzQuxudnhupkUd3yEinP9qku/6tqvuu9XPfSrTtykLXXmKm2oM3dpQ525TBvq/bap9Num0m+bSr9tKv22qfTbptJvmwpxm6pTPSx2fqlO3KYtdeI2bakTt2lDXYnbtKVO3KYtdeI2bakTt2lLnbhNW+qX3v+et+LU2/HGrfgLh0aQQ11r0LCwESobpbLxVDaByiZS2SQqmwvnTXBz+gVZpN+lP6rZsClMNpf+WGXDRqhslMrGU9kEKptIZZOobKjSL1ClX6RKv0iVfqfvqLdwOCmxuHhjX7m728XD9xmvNC2/TwGgyt3SDUgQ6HQJyHxyNm6a2QLyCBQQKCJQQqCMQIZABYAqd282IEEgZCIMmQhDJsKQiTBkIgyZCCvfjpVSOdglzMetX0IegQICRQRKCJQRCAnlAoSyOodAgkCKQB6BAgJFBKpMRJqPJme6gDICGQIVAKpcbG9AgkCKQO2JOAEhEyHIRFQuJDagjECGQEhGKJIRimSEIhmhSEYoMhGKTIQiE6HIRCgyER55cT3y4nrkxfXIi+uBNzla2XHUMN+hrEkWUAGgyv5dAxIEUgQ6/ZRrjjNUFs9eZW+pAZ1+yqPMJ89RlnoFgCqbBg1IEEgRqLJP6OfXKSW3gAICRQRKCJQRyBCoAFDtp2echwSBFIGQiUjIRCRkIhIyEQmZiIRMREImIiMTkZGJqH063vRz03DxHrb2KfbzUECgiEAJgTICGQIVAKpsNYX5vo3xksoiyytbTQ3II1BAoIhACYEyAhkCFQCq7FA1IGQiCjIRBZmIyl5YiHmG8iKNKnthDSghUEYgQ6DyfchX9sIakCCQIpBHoIBAEYESAmUEMgQCThu8OAQSBPr2acPH+Oj36mW9utnc738jwcPb9vbLLyjY/Xn+/z/j4r8=","brillig_names":["poseidon2_hash"],"assert_messages":{"256":"Array index out of bounds","157":"Stack too deep","217":"Array index out of bounds","151":"attempt to add with overflow","209":"Array index out of bounds","133":"Array index out of bounds","233":"attempt to add with overflow","201":"Array index out of bounds","275":"attempt to add with overflow"}},{"name":"new_nullifier","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAk4AIBEAAAiAAwxAgABIyUABHgAgAQNAAAAgASAAyEAABCAAzkBAAAjKwAYyhjK","debug_symbols":"bc/RCoMgFAbgdznXXWhu03qVMUJLQxANtcEQ333WZDTWjfjrdw7nJJikWOdBW+UC9PcExo08amdLSrkB4bUxeh6Oz4C2A6Pdh4XbLYbIfYQetwh1DUg77XeCSw+ljYSe3Fhu/jxhtK2csI5+NWbXE03ZBVVNS+GPfuQSn9xrLoys06vVjodl4mv5/BT8Bg==","brillig_names":["new_nullifier"],"assert_messages":{"15":"Stack too deep"}},{"name":"to_radix_le","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"input","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":10,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"public"}},"bytecode":"JAAEAQIlAASATgABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiABAAKAECAiUCBIBEAAMkAgQKBCsEAAKAAysEAAOABCsEAASABSIAGjgAgEQACiIAJSQCBAICKggBAyQCBAsEABABBAEkAwQBAwAoAwIEQToAAQAEAAIACgAqDAMBIyUABAAAgAcNAIAHgAWACBcAgAiACCEAACSACAEAgAOAB4AJKwGACYAGAQCABIAHgAkrAoAGgAkBAIAHAAKAByAAGyMlAAR4AIAEDQAAAIAEgAMhAAApgAM5AQAAIysAGMoYyg==","debug_symbols":"tZLPCoQgEIffZc4e1KisV1mWsNIQRENtYRHffXX/EXT2Msxv5mO+y0RYxXxskzLSehhvEbRdeFDW5BQTgtkprdU2nceASyH9m/c7NyX6wF2Ase27FoEwa2kZzRek0gLGpmMJXWnMyI/Gw/CnaZfuCAirbhhqGyiubiDVDbS6oalrSDk9uFN81uL72PIwy+nPw3P/bDL8Ag==","brillig_names":["to_radix_le"],"assert_messages":{"40":"Stack too deep"}},{"name":"elliptic_curve_add_and_double","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARgABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAsrBAABgEMrBAACgEQrBAADgEU4AIBDAAMiAC8kAgABASkCAAAAAAAAAAACzxNedQakXWMtJw1F8RgSlIM/xI2CPycsAAIkAgEAAyQCBAgHKggACCoMAQkqDAIKKgwDCyoMAQwqDAINKgwDDgAQAAcAIgA0KgQAACoMCQQqDAoFKgwLBiQCBAsKKggACyoMAQwqDAINKgwDDioMBA8qDAUQKgwGEQAQAAoAIgA0KgQAACoMDAcqDA0IKgwOCSoMBwEqDAgCKgwJAyMlAAR4AIAEDQAAAIAEgAMhAAAzgAM5AQAAIyIALwo4AQQKCjgCBQsEOAoLDBYMCw0EOAoNCxwMAAoNADgBDQ4qCAENJAIEBA8AEAEPASQDBAENACgNAg8/P8AADgACAAoABAAFAAYADyQCBAAOACgNAhAAOBAOESoNEQ8kAgQBEAAoDQISADgSEBMqDRMRKggBDQAAAQIBKggBEgAAAQIBKggBEwAAAQIBKg4PDSoOERIqDgoTKggBFCQCBAQVABABFQEkAwQBFAAoFAIVPz/AAAEAAgADAAEAAgADABUAKBQCFgA4Fg4XKg0XFQAoFAIWADgWEBcqDRcOIQIAZQAMIABhKgwPByoMEQgqDAoJIABqJAIBAAoqDBUHKgwOCCoMCgkgAGoqDgcNKg4IEioOCRMhAgBvAAMgAHMqDgQNKg4FEioOBhMgAHMhAgB1AAYgAHkqDgENKg4CEioOAxMgAHkWDAMBFgwGAgQ4AQIEBDgLBAEqDQ0CKg0SBAQ4AwYFEjgBBQMqDgINKg4EEioOAxMqDAIBKgwEAiMrABjKGMo=","debug_symbols":"zZrBjtpADIbfJWcOY4/HnuFVqmoFu7CKhMIK2EoV4t0LlASadPfgxMgXRMA/3wfzM8khx+pttfx8f6mb9XZfzX8cq832dXGot8356HiaVctdvdnU7y+PL1fh8gB4nd9/LJrL4f6w2B2qOZHArFo1b9enfP6Edb1ZVfPI+fRzVkHUhEgTSpoQa0KiCWVNqChCGDQh0IQ0jUBNI1DTCNQ0AjWNQE0jUNMI/KIRJbehFEo/FIMmBJoQakJREyJNKGlCrAmJJpQ1IU0jSNMI0jSCNI1I/20EBAq3EASBLoR0mg2GExS6DScEehy+AGg8AIk7AHMfkCYAlA4Qo/QBbA2Q8YAo7XAiwD4gjweQtDVKKQzWoEwAYL4D+j8Rh/EA7rb7JP/WdDgsHFsb4Rz7NuDKBl3ZRFc25MomubLhZ9sUaW0EoG8jrmyyK5viyUaevRcLps4mlr4NuLJBVzbRlY3pXnwBJGsAWwPEGpCtAcUYkIM1AKwBaA2Y4G+foQPkhGMuMzK5skmubNiVjbiyya5syrNtvrsEK8GVDbiywSfbfHvRU6IrG/JkA8F0+7sSxJyQrQkA5gQ0J0RzgvlKg/1KF2sCmncJzbuE47vEgO25noFlQKAJCIHuhDwgJHMCmxPG/+MYoT2TMyYeEPIE36GkO2G40sWaEIM5AUwJp/PRr8WuXiw3q9udK+vP5vXhRpbD74+/75yH/wA=","brillig_names":["elliptic_curve_add_and_double"],"assert_messages":{"50":"Stack too deep"}},{"name":"helper_with_failed_assertion","is_unconstrained":false,"custom_attributes":[],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"H4sIAAAAAAAA/33OQQrCMBAF0BS8hZt4g0xmppnZeQgvkNAJDRQLRu8vYtFV+zZ/8+H/wf0Nbt91SwwjkaVogJBD1CIciMsoIMDCUxREE5KkRVNQIDSorFjD12fj5I7t/ThveZtb97l3ezzbevd9Xl/L5Gtuy+XXfQP4jlSZ2AAAAA==","debug_symbols":"ZY1BCsMgEEXvMmsXkWJSvUopQRMNAzIGNYUiuXunbRYp3c37/zG/wezdtoxIIRUwtwYxTbZiIqYG3Scqq6U3lWpzBdN3gxbgaeZTSrULCBg9mEt/3cWfrfSgDltpLX/sO5PLGCMu43mX44fNaF30B4aNplNbn+u34Rcv","brillig_names":[]},{"name":"set_read_storage_single","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"a","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAorBAABgEQ4AIBEAAEiAGQqCAEDAAABAgEkAgEABCoOBAMqCAEDAAABAgEkAgAABCoOBAMqCAEDAAABAgEkAgACBSoOBQMkAgQBAyQCAAEFJAIEAAYqDAYCIAAcCjgCBgchAgBNAAcgAB8qCAECJAIEAgcAEAEHASQDBAECACgCAgcqDAcIKg4ECCoNAgcAKAcCByoOBwIqCAEHAAABAgEqDgIHKgwGASAALgo4AQYCIQIANwACIAAxKg0HAQAoAQIDADgDBgQqDQQCKgwCASMqDQcCHAwAAQQAOAUECCwMAAgABCQCBAEJDDgBCQohAgA/AAo5AQAAKwQAAoADJQAEAAKABCIAaSsIgAUACAAoCAIJADgJAQoqDgQKADgBAwIOOAECBCECAEoABDkBAAAqDggHKgwCASAALhwMAAIHADgFBwgqCAEHJAIEAgkAEAEJASQDBAEHACgHAgkqDAkKKg4BCiQCBAEKDDgCCgshAgBaAAs5AQAAACgHAgoAOAoCCyoNCwktDAAJAAgAOAIDBw44AgcIIQIAYgAIOQEAACoMBwIgABwlAAR4AIAEDQAAAIAEgAMhAABogAM5AQAAIysBgAOABgsAgAYAAoAHIQAAbYAHIABvKwCAA4AFIAB9KwAAAYAFAQAAAYAEAAElAAQAAIAJDQCACYAEgAoXAIAKgAohAAB7gAoBAIADgAmACysBgAuACAEAgAWACYALKwKACIALAQCACQACgAkgAHIlAQQAAYAFIAB9IysAGMoYyg==","debug_symbols":"1drBbuIwEAbgd8mZgz0eezy8ympVhRaqSFGogK60Qrz7OlsSaENtyZfOXFACM8kXCP4Nybl52W7eX5+6Ybc/Nutf56bfP7enbj+ktfNl1WwOXd93r0/3TzdmfLD2f/3xrR3G1eOpPZyatQ1sVs12eEmLZEzawq7rt83ahXj5vWos1DS5miasafI1TaGmiWqaYk0TVzSBqWmqOSOg5oyAh28EgKNrE4CnT02r5S4gxGkXwDhXW2cfVAdjpm0HA3yrjv5BtSfma7WPd/yxOvGdfcwnM/Mjl/gm4sS3hgt8HxAmUAiuxHdxOti0GBd80M13uvmom+9184NuPunmR918Vs1Ho5uvO3VRd+qi7tRF6eM+2mnbadEv+NJHHnRm5rvwle9/YOSB+XQIFAt8QDsdLCDYuRrSfka+1c0H3XzpM878V9eLH3nC/Fkh0YIvfcaJHnJ86TNOdHzjl74pbGCSsPHLg9WdEkH6/LTAlz4/LfClz08LfOnz0wIfdfPFZ3SeLz6j83zxGZ3ny8/oLF936pLu1CXdqUu6U5d0py7pTl0i4ZdRI86/jKPHBV/6VeAInOOzdL4PMz8s/peIRjff6uaDbr7TzUfdfK+bH3Tzxaduni8+dfN83anLulOXdacu605dFp+61t/4oVDN1rlrNVtaTK9ZfEZ/f7AjX3xG5/niMzrPF5/RGf4lrf5pD1276bfX2/h378Pz3V39p79vH6+k4n8=","brillig_names":["set_read_storage_single"],"assert_messages":{"89":"Array index out of bounds","103":"Stack too deep","97":"attempt to add with overflow","73":"attempt to add with overflow","62":"Array index out of bounds"}},{"name":"get_da_gas_left","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAweAgwAASMlAAR4AIAEDQAAAIAEgAMhAAAQgAM5AQAAIysAGMoYyg==","debug_symbols":"bc9RCsMgDAbgu+S5DxWxul5ljKKtFkG0qB0M8e7TToawvYh/8hGSBJsU575oq1yA+Z7AuJVH7WxJKQ8gvDZG70tfhrE+aLx8OLitMUTuI8xonDAbQNrt+hNaZihtJMx4Ynn48QTRqXGC2O2rESN/NMWYNk1xN7vqRy7xyb3mwsi2vTrt2h0TX8enU/Ab","brillig_names":["get_da_gas_left"],"assert_messages":{"15":"Stack too deep"}},{"name":"new_note_hash","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"note_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAk4AIBEAAAiAAwvAgABIyUABHgAgAQNAAAAgASAAyEAABCAAzkBAAAjKwAYyhjK","debug_symbols":"bc9RCsMgDAbgu+S5D3VSdV5ljKKtFkG0qB0M8e6znYyO7UX8k4+QZJiV3JbROO0j8FsG6yeRjHc15dKBDMZas4znMvT7g/rDx1W4PcYkQgKOEMOsA+Xm40/6OkMbq4Bjwkr34zGlqHFMr+SjERv+aEouuGlKhuFL30uNDxGMkFa17fXmptMx6bm+OxW/AA==","brillig_names":["new_note_hash"],"assert_messages":{"15":"Stack too deep"}},{"name":"set_opcode_big_field","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAkrBAABgEM4AIBDAAEiAAwpAgAAAAAAAAAAAAAAAAAAAACZEjRWeJCrze8SNFZ4kKvN7wABIyUABHgAgAQNAAAAgASAAyEAABCAAzkBAAAjKwAYyhjK","debug_symbols":"XclRCoAgDIDhu+y5E3SVCFFTGYwtTIMYu3tBPYSP//8pbCn04pCzHDAvCiTRNxR+Sm2CUJEIixv26Sv6QOnL3Dn+tF37K7baDQ==","brillig_names":["set_opcode_big_field"],"assert_messages":{"15":"Stack too deep"}},{"name":"nested_call_to_assert_same","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"arg_a","type":{"kind":"field"},"visibility":"private"},{"name":"arg_b","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARgABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMrCIBDAAErCIBEAAIiAAsrBAABgEU4AIBFAAEiAHYeAgAABCoIAQUAAAECASQCBAEGKg4GBSoIAQcAAAECASYCABFPzugACCQCBAEKJAIEAgwAOAoMCyoIAQkAEAELASQDBAEJACgJAgsqDgoLJAIEAgsAOAkLCioMCgsqDggLKg4JByQCBAAIJAIBAQkkAgQCCioMCAMgACYMOAMKCyECAEgACyAAKSoNBQEqDQcCKggBAyQCBAMFABABBQEkAwQBAwAoAwIFKgwFBikCADBkTnLhMaApuFBFtoGBWF0oM+hIeblwkUPh9ZPwAAAAAAcqDgcGACgGAgYqDgcGJgIA1UQbDQAFACgDAgYAKAICCyoNCwoAKAsCCSoIAQskAgQCDAAQAQwBJAMEAQsAKAsCDTY/lQAGAAQACQAKAA0AAQAMAAUkAgIBAQo4DAECIQIARAACOQEAAAAoCwICADgCCAMqDQMBIww4AwoLIQIASwALOQEAACQCBAIMJAIEAg4AOAwODSoIAQsAEAENASQDBAELACgLAg0qDgwNJAIEAg0AOAsNDCoMDA0qDgENACgNAg0qDgINACgLAg0qDQ0NDDgDDQ4hAgBeAA45AQAAJAIEAg4AOAsODQA4DQMOKg0ODCoNBQsqDQcNACgLAg4rBAANgAMlAAQAAYAEIgB7KwiABQAPKwiABgAQKg4MECoNDwsAKAsCCyoOCw8qDg4FKg4PBwA4AwYLDjgDCwwhAgB0AAw5AQAAKgwLAyAAJiUABHgAgAQNAAAAgASAAyEAAHqAAzkBAAAjAQCAAwACgAcrAYAHgAcBAIAHgASACCUABAACgAoBAIAIgAqACSsAAAGABQEAAAGACQABJQEEAAGABQEAgAUAAoAJKwKACIAJJQAEAAKACgEAgAOACoAJJQAEAAKACwEAgAWAC4AKJQAEAACADA0AgAyAB4ANFwCADYANIQAAk4ANAQCACYAMgA4rAYAOgAsBAIAKgAyADisCgAuADgEAgAwAAoAMIACKAQCACoAHgAYjKwAYyhjK","debug_symbols":"1ZzNauswEIXfxessNCNpNJNXuVyK0ybFYJySpBcuIe9eJ42d/kqbQnU2IU4G+Ttg89kaoWPzsF49P951w2a7b5Z/jk2/vW8P3XYYj46nRbPadX3fPd69/blx5w/iS/3+qR3Oh/tDuzs0S4pstGjWw8P5uycax9h0/bpZetHT4lO9N4nXcm8pzNWk8YtqCToNLsHSu+q/i4b8N0jJbkghFpCCuukkQdluJzH6oprF87WaJblCgKQTiTqda5nDBT9g40dsfMHGT9j4io1v0PjssPEJG5+x8bGty9jWZWzrMrZ1Gdu6jG1dxraux7aux7aux7aur/7WJaEZRfj2ai+Xd/VQ/dVDEmTmF/eRv/rLp8D/G09tybmJX30q8GvgaWwNid5VnwME9AARPYCgB0joARQ9gIEHiA49AKEHYPQA6CaO6CaO6CaO6CaO6CaO6CaO6CYWdBMLuokF3cSCbmL5DRNbnFZwsMmnNRkS60OS+pBSfUg/YzSTGck0FpCIk/ppdFaywu3AgeYJsfHOmKvZ2SWCwUdIDj8CwExpbqY6Vd/fLvAHcP7qO9wF/upb3AX+6nvcBX7wTlmqvsud59fq29wFfoBOZZYf3L8K7l8F96+C+1fB/avg/lVw/yq4fw3cvwbuXwP3r4H718D9a+D+NXD/Grh/Ddy/Bu5fcgACzi0VJQe+Vpcc+GJdcgAOzgcAkHA+AICF8wEANJwPAODhfAAAEecDAJg4G4DQTUzoJiZ0E9e/x0gpALqJ699nJBfgNB79a3ddu+rX1z12Ns/D/Zstdw7/n17/GYtfAA==","brillig_names":["nested_call_to_assert_same"],"assert_messages":{"67":"Nested call failed!","93":"Array index out of bounds","74":"Index out of bounds","121":"Stack too deep","115":"attempt to add with overflow"}},{"name":"nested_static_call_to_set_storage","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"JAAEAQIlAASAQwABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAg4AIBDAAAiAFMeAgAAAioIAQMAAAECASQCBAEEKg4EAyoIAQUAAAECASQCBAEHJAIEAgkAOAcJCCoIAQYAEAEIASQDBAEGACgGAggqDgcIJAIEAggAOAYIByoMBwgmAgCE8X5vAAkqDgkIKg4GBSQCABQGJAIEAAcqDAcBIAAiCjgBBwghAgBAAAggACUqDQMBKg0FAyoIAQQkAgQDBQAQAQUBJAMEAQQAKAQCBSoMBQYpAgAwZE5y4TGgKbhQRbaBgVhdKDPoSHm5cJFD4fWT8AAAAAAHKg4HBgAoBgIGKg4HBiYCANVEGw0ABQAoBAIGACgDAgoqDQoJACgKAggqCAEKAAABAgEkAwQBCgAoCgIMNz+VAAYAAgAIAAkADAAAAAsABSQCAgEBCjgLAQIhAgA/AAI5AQAAIwo4AQcIIQIAQwAIOQEAACoNAwgqDQUJACgIAgorBAAJgAMlAAQAAYAEIgBYKwiABQALKwiABgAMKg4GDCoNCwgAKAgCCCoOCAsqDgoDKg4LBSoMBAEgACIlAAR4AIAEDQAAAIAEgAMhAABXgAM5AQAAIwEAgAMAAoAHKwGAB4AHAQCAB4AEgAglAAQAAoAKAQCACIAKgAkrAAABgAUBAAABgAkAASUBBAABgAUBAIAFAAKACSsCgAiACSUABAACgAoBAIADgAqACSUABAACgAsBAIAFgAuACiUABAAAgAwNAIAMgAeADRcAgA2ADSEAAHCADQEAgAmADIAOKwGADoALAQCACoAMgA4rAoALgA4BAIAMAAKADCAAZwEAgAqAB4AGIysAGMoYyg==","debug_symbols":"1ZvbasJAEIbfZa+9yMzuzE58lVJKrAcCIYqHQhHfvdEaT7XZS/e/EaM/7vfD4kd2yN5NZ5Pd4qNu58uNG7/tXbP8rLb1su2u9oeRm6zrpqkXH7cfu+L4Up7im1XVHq8222q9dWMKyn7kZu309D747ifmdTNzY692GP3J+1LlHPdlDJc0mTxJazA6pzWU8S79PnJU/INEdEW6WeQ5khoV/SIW5LpISc8KeLa+gFdNFIhWnsNW2CXLHE74hI3P2PgeGz9g4ws2vmLjR2x8w8YvofEZ27qMbV3Gti5jW5exrcvY1mVs6zK2dRnbuoxtXZ/9Pw8p9fykfCXR0726z37zkwa98GvxyJ/97k/wv2L7hxB6fjFL8JtKfzRkkfgu3RUIBXoBQi/A6AU8eoGAXkDQCyh6gYhewNALoJtY0E0s6CYWdBMLuokF3cSCbmJBN7Ggm1jQTSyvMLEW/V26V7JHJC3yQ6L8kDg/pIB9PqfZjwYS/NnPBhL8AOejg/wA56OD/NmPB4bPd2P2U/kEf/Zj+QR/9nP5BH/2g/kEP4B/B/kB/DvID+DfQX7w+WQEn09GcP8atH8P3dVXta6rSTM7Pwgw37WfN88FbL9Xv9904R8=","brillig_names":["nested_static_call_to_set_storage"],"assert_messages":{"66":"Index out of bounds","86":"Stack too deep","62":"Nested static call failed!"}}],"outputs":{"globals":{"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"AvmTest"}},{"name":"fields","value":{"fields":[{"name":"single","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"list","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"map","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::variable_base_msm_parameters"}},{"name":"return_type","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"AvmTest::variable_base_msm_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::get_sender_parameters"}},{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"AvmTest::get_sender_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"lhs","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"rhs","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"AvmTest::elliptic_curve_add_parameters"}},{"name":"return_type","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"AvmTest::elliptic_curve_add_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::set_opcode_u32_parameters"}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"AvmTest::set_opcode_u32_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::assertion_failure_parameters"}}],"kind":"struct","path":"AvmTest::assertion_failure_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"nullifier","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::nullifier_exists_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"AvmTest::nullifier_exists_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"nullifier","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::nullifier_collision_parameters"}}],"kind":"struct","path":"AvmTest::nullifier_collision_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"data","type":{"kind":"array","length":10,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"AvmTest::sha256_hash_parameters"}},{"name":"return_type","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"AvmTest::sha256_hash_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"AvmTest::set_storage_map_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::set_storage_map_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::nested_static_call_to_set_storage_parameters"}}],"kind":"struct","path":"AvmTest::nested_static_call_to_set_storage_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"note_hash","type":{"kind":"field"}},{"name":"leaf_index","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::note_hash_exists_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"AvmTest::note_hash_exists_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::get_function_selector_parameters"}},{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}}],"kind":"struct","path":"AvmTest::get_function_selector_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::debug_logging_parameters"}}],"kind":"struct","path":"AvmTest::debug_logging_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::get_block_number_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::get_block_number_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"nestedAddress","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nullifier","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::create_same_nullifier_in_nested_call_parameters"}}],"kind":"struct","path":"AvmTest::create_same_nullifier_in_nested_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::test_get_contract_instance_parameters"}}],"kind":"struct","path":"AvmTest::test_get_contract_instance_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::emit_unencrypted_log_parameters"}}],"kind":"struct","path":"AvmTest::emit_unencrypted_log_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"_a","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"_fields","type":{"kind":"array","length":3,"type":{"kind":"field"}}}],"kind":"struct","path":"AvmTest::get_args_hash_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::get_args_hash_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::return_oracle_parameters"}},{"name":"return_type","type":{"kind":"array","length":3,"type":{"kind":"field"}}}],"kind":"struct","path":"AvmTest::return_oracle_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::get_fee_per_da_gas_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::get_fee_per_da_gas_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"a","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}},{"name":"b","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}}],"kind":"struct","path":"AvmTest::add_u128_parameters"}},{"name":"return_type","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}}],"kind":"struct","path":"AvmTest::add_u128_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::elliptic_curve_add_and_double_parameters"}},{"name":"return_type","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"AvmTest::elliptic_curve_add_and_double_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"a","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"AvmTest::modulo2_parameters"}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"AvmTest::modulo2_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"nullifier","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::emit_nullifier_and_check_parameters"}}],"kind":"struct","path":"AvmTest::emit_nullifier_and_check_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::get_fee_per_l2_gas_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::get_fee_per_l2_gas_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"nestedAddress","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nullifier","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::create_different_nullifier_in_nested_call_parameters"}}],"kind":"struct","path":"AvmTest::create_different_nullifier_in_nested_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"a","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::set_storage_single_parameters"}}],"kind":"struct","path":"AvmTest::set_storage_single_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::get_address_parameters"}},{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"AvmTest::get_address_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"data","type":{"kind":"array","length":10,"type":{"kind":"field"}}}],"kind":"struct","path":"AvmTest::pedersen_hash_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::pedersen_hash_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"data","type":{"kind":"array","length":10,"type":{"kind":"field"}}}],"kind":"struct","path":"AvmTest::poseidon2_hash_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::poseidon2_hash_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::read_storage_single_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::read_storage_single_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"data","type":{"kind":"array","length":10,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"AvmTest::keccak_hash_parameters"}},{"name":"return_type","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"AvmTest::keccak_hash_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::set_opcode_big_field_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::set_opcode_big_field_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::get_da_gas_left_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::get_da_gas_left_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::get_version_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::get_version_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::test_get_contract_instance_raw_parameters"}}],"kind":"struct","path":"AvmTest::test_get_contract_instance_raw_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::get_timestamp_parameters"}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"AvmTest::get_timestamp_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"args","type":{"kind":"array","length":3,"type":{"kind":"field"}}}],"kind":"struct","path":"AvmTest::assert_calldata_copy_parameters"}}],"kind":"struct","path":"AvmTest::assert_calldata_copy_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::set_opcode_really_big_field_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::set_opcode_really_big_field_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"nullifier","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::new_nullifier_parameters"}}],"kind":"struct","path":"AvmTest::new_nullifier_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"arg_a","type":{"kind":"field"}},{"name":"arg_b","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::assert_same_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::assert_same_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"a","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::set_read_storage_single_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::set_read_storage_single_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"arg_a","type":{"kind":"field"}},{"name":"arg_b","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::nested_call_to_assert_same_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::nested_call_to_assert_same_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"arg_a","type":{"kind":"field"}},{"name":"arg_b","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::add_args_return_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::add_args_return_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"args_field","type":{"kind":"array","length":10,"type":{"kind":"field"}}},{"name":"args_u8","type":{"kind":"array","length":10,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"AvmTest::bulk_testing_parameters"}}],"kind":"struct","path":"AvmTest::bulk_testing_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::u128_from_integer_overflow_parameters"}},{"name":"return_type","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}}],"kind":"struct","path":"AvmTest::u128_from_integer_overflow_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::get_l2_gas_left_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::get_l2_gas_left_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"expected_timestamp","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"AvmTest::assert_timestamp_parameters"}}],"kind":"struct","path":"AvmTest::assert_timestamp_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"arg_a","type":{"kind":"field"}},{"name":"arg_b","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::nested_call_to_add_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::nested_call_to_add_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::set_opcode_u8_parameters"}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"AvmTest::set_opcode_u8_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::set_opcode_u64_parameters"}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"AvmTest::set_opcode_u64_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"AvmTest::add_storage_map_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::add_storage_map_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"AvmTest::read_storage_map_parameters"}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"AvmTest::read_storage_map_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"arg_a","type":{"kind":"field"}},{"name":"arg_b","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::nested_static_call_to_add_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::nested_static_call_to_add_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"arg_a","type":{"kind":"field"}},{"name":"arg_b","type":{"kind":"field"}},{"name":"l2_gas","type":{"kind":"field"}},{"name":"da_gas","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::nested_call_to_add_with_gas_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::nested_call_to_add_with_gas_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::read_storage_list_parameters"}},{"name":"return_type","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"AvmTest::read_storage_list_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::set_opcode_small_field_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::set_opcode_small_field_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::get_chain_id_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::get_chain_id_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"data","type":{"kind":"array","length":25,"type":{"kind":"integer","sign":"unsigned","width":64}}}],"kind":"struct","path":"AvmTest::keccak_f1600_parameters"}},{"name":"return_type","type":{"kind":"array","length":25,"type":{"kind":"integer","sign":"unsigned","width":64}}}],"kind":"struct","path":"AvmTest::keccak_f1600_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"a","type":{"kind":"field"}},{"name":"b","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::set_storage_list_parameters"}}],"kind":"struct","path":"AvmTest::set_storage_list_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"msg_hash","type":{"kind":"field"}},{"name":"msg_leaf_index","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::l1_to_l2_msg_exists_parameters"}},{"name":"return_type","type":{"kind":"boolean"}}],"kind":"struct","path":"AvmTest::l1_to_l2_msg_exists_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"data","type":{"kind":"array","length":10,"type":{"kind":"field"}}}],"kind":"struct","path":"AvmTest::pedersen_hash_with_index_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::pedersen_hash_with_index_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::send_l2_to_l1_msg_parameters"}}],"kind":"struct","path":"AvmTest::send_l2_to_l1_msg_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"nullifier","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::assert_nullifier_exists_parameters"}}],"kind":"struct","path":"AvmTest::assert_nullifier_exists_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::get_transaction_fee_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::get_transaction_fee_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::new_note_hash_parameters"}}],"kind":"struct","path":"AvmTest::new_note_hash_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::enqueue_public_from_private_parameters"}}],"kind":"struct","path":"AvmTest::enqueue_public_from_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::check_selector_parameters"}}],"kind":"struct","path":"AvmTest::check_selector_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::pedersen_commit_parameters"}},{"name":"return_type","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"AvmTest::pedersen_commit_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"AvmTest::u128_addition_overflow_parameters"}},{"name":"return_type","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}}],"kind":"struct","path":"AvmTest::u128_addition_overflow_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"input","type":{"kind":"field"}}],"kind":"struct","path":"AvmTest::to_radix_le_parameters"}},{"name":"return_type","type":{"kind":"array","length":10,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"AvmTest::to_radix_le_abi"}]}},"file_map":{"105":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"11":{"path":"std/collections/vec.nr","source":"pub struct Vec<T> {\n    pub(crate) slice: [T],\n}\n// A mutable vector type implemented as a wrapper around immutable slices.\n// A separate type is technically not needed but helps differentiate which operations are mutable.\nimpl<T> Vec<T> {\n    pub fn new() -> Self {\n        Self { slice: &[] }\n    }\n\n    // Create a Vec containing each element from the given slice.\n    // Mutations to the resulting Vec will not affect the original slice.\n    pub fn from_slice(slice: [T]) -> Self {\n        Self { slice }\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Panics if the given index\n    /// points beyond the end of the vector.\n    pub fn get(self, index: u32) -> T {\n        self.slice[index]\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn set(&mut self, index: u32, value: T) {\n        self.slice[index] = value;\n    }\n\n    /// Push a new element to the end of the vector, returning a\n    /// new vector with a length one greater than the\n    /// original unmodified vector.\n    pub fn push(&mut self, elem: T) {\n        self.slice = self.slice.push_back(elem);\n    }\n\n    /// Pop an element from the end of the given vector, returning\n    /// a new vector with a length of one less than the given vector,\n    /// as well as the popped element.\n    /// Panics if the given vector's length is zero.\n    pub fn pop(&mut self) -> T {\n        let (popped_slice, last_elem) = self.slice.pop_back();\n        self.slice = popped_slice;\n        last_elem\n    }\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    pub fn insert(&mut self, index: u32, elem: T) {\n        self.slice = self.slice.insert(index, elem);\n    }\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the removed element\n    pub fn remove(&mut self, index: u32) -> T {\n        let (new_slice, elem) = self.slice.remove(index);\n        self.slice = new_slice;\n        elem\n    }\n\n    /// Returns the number of elements in the vector\n    pub fn len(self) -> u32 {\n        self.slice.len()\n    }\n}\n\nmod tests {\n    use crate::collections::vec::Vec;\n\n    #[test]\n    fn set_updates_values_properly() {\n        let mut vec = Vec { slice: &[0, 0, 0, 0, 0] };\n\n        vec.set(0, 42);\n        assert_eq(vec.slice, &[42, 0, 0, 0, 0]);\n\n        vec.set(1, 43);\n        assert_eq(vec.slice, &[42, 43, 0, 0, 0]);\n\n        vec.set(2, 44);\n        assert_eq(vec.slice, &[42, 43, 44, 0, 0]);\n\n        vec.set(1, 10);\n        assert_eq(vec.slice, &[42, 10, 44, 0, 0]);\n\n        vec.set(0, 0);\n        assert_eq(vec.slice, &[0, 10, 44, 0, 0]);\n    }\n\n    #[test(should_fail)]\n    fn panics_when_writing_elements_past_end_of_vec() {\n        let mut vec = Vec::new();\n        vec.set(0, 42);\n\n        // Need to use println to avoid DIE removing the write operation.\n        crate::println(vec.get(0));\n    }\n}\n"},"129":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"131":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"161":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n    }, point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice},\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER,\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"185":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Serialize<N>,\n    {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N],\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"186":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n        key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n        call_private_function::call_private_function_internal, header::get_header_at,\n        logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext, function_selector::FunctionSelector,\n        max_block_number::MaxBlockNumber,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n        nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash},\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL,\n        MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR,\n    }, header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests: BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator {\n                request,\n                sk_app_generator: sk_generators[key_index],\n            };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(\n        &mut self,\n        note_hash_counter: u32,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context,\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        let call_request = PublicCallRequest { call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.public_teardown_call_request = PublicCallRequest { call_context, args_hash, counter };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"},"191":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs,\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {}\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n"},"204":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"209":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"},"224":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{\n        decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI,\n    };\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"27":{"path":"std/hash/keccak.nr","source":"use crate::collections::vec::Vec;\nuse crate::runtime::is_unconstrained;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[foreign(keccakf1600)]\nfn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n\n#[no_predicates]\npub(crate) fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n    let mut block_bytes = [0; BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let max_blocks_length = (BLOCK_SIZE_IN_BYTES * max_blocks);\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let num_limbs = max_blocks_length / WORD_SIZE;\n    let mut sliced_buffer = Vec::new();\n    for i in 0..num_limbs {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer.push(sliced as u64);\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer.get(j);\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer.get(i * LIMBS_PER_BLOCK + j);\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer.get(j);\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer.get(i * LIMBS_PER_BLOCK + j);\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n\nmod tests {\n    use super::keccak256;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x5a, 0x50, 0x2f, 0x9f, 0xca, 0x46, 0x7b, 0x26, 0x6d, 0x5b, 0x78, 0x33, 0x65, 0x19,\n            0x37, 0xe8, 0x05, 0x27, 0x0c, 0xa3, 0xf3, 0xaf, 0x1c, 0x0d, 0xd2, 0x46, 0x2d, 0xca,\n            0x4b, 0x3b, 0x1a, 0xbf,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn hash_hello_world() {\n        // \"hello world\"\n        let input = [72, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100, 33];\n        let result = [\n            0xec, 0xd0, 0xe1, 0x8, 0xa9, 0x8e, 0x19, 0x2a, 0xf1, 0xd2, 0xc2, 0x50, 0x55, 0xf4, 0xe3,\n            0xbe, 0xd7, 0x84, 0xb5, 0xc8, 0x77, 0x20, 0x4e, 0x73, 0x21, 0x9a, 0x52, 0x3, 0x25, 0x1f,\n            0xea, 0xab,\n        ];\n        assert_eq(keccak256(input, input.len()), result);\n    }\n\n    #[test]\n    fn var_size_hash() {\n        let input = [\n            189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205,\n            206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222,\n            223,\n        ];\n        let result = [\n            226, 37, 115, 94, 94, 196, 72, 116, 194, 105, 79, 233, 65, 12, 30, 94, 181, 131, 170,\n            219, 171, 166, 236, 88, 143, 67, 255, 160, 248, 214, 39, 129,\n        ];\n        assert_eq(keccak256(input, 13), result);\n    }\n}\n"},"286":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"},"305":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"310":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{constants::ETH_ADDRESS_LENGTH, traits::{Empty, ToField, Serialize, Deserialize}, utils};\n\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n"},"312":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, public_keys_hash::PublicKeysHash,\n        salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils,\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [pub_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        ))\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        functino_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys_hash: PublicKeysHash,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            functino_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys_hash, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"313":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"},"315":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"317":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"325":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash}, note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n        MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX,\n    }, merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), unique_note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256(\n            [log_hash.contract_address.to_field(), log_hash.log_hash.value],\n        )\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n            0,\n        ))\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk<let N: u32>(\n    _vk: VerificationKey<N>,\n) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"326":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n        aztec_address::AztecAddress, partial_address::PartialAddress,\n        public_keys_hash::PublicKeysHash,\n    }, public_keys::PublicKeys, contract_class_id::ContractClassId,\n    constants::CONTRACT_INSTANCE_LENGTH, traits::{Deserialize, Hash, Serialize},\n};\n\npub struct ContractInstance {\n    salt: Field,\n    deployer: AztecAddress,\n    contract_class_id: ContractClassId,\n    initialization_hash: Field,\n    public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys.hash(),\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n"},"327":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr","source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        GENERATOR_INDEX__PUBLIC_KEYS_HASH, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_IVPK_M_X,\n        DEFAULT_IVPK_M_Y, DEFAULT_OVPK_M_X, DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y,\n    }, hash::poseidon2_hash_with_separator, point::POINT_LENGTH,\n    traits::{Deserialize, Serialize, Hash},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse dep::std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE = 16;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeroes.\ntype MSG_BLOCK = [u8; BLOCK_SIZE];\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !crate::runtime::is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: MSG_BLOCK) -> INT_BLOCK {\n    let mut msg32: INT_BLOCK = [0; INT_BLOCK_SIZE];\n\n    for i in 0..INT_BLOCK_SIZE {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4 * (i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeroes.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeroes by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    for i in 0..BLOCK_SIZE {\n        if i >= msg_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n    for i in msg_byte_ptr..MSG_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[MSG_SIZE_PTR + i] = len_bytes[i];\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    for i in 0..MSG_SIZE_PTR {\n        let predicate = (i < msg_byte_ptr) as u8;\n        let expected_byte = predicate * last_block[i];\n        assert_eq(msg_block[i], expected_byte);\n    }\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let len = 8 * message_size;\n    let mut reconstructed_len: Field = 0;\n    for i in MSG_SIZE_PTR..BLOCK_SIZE {\n        reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n    }\n    assert_eq(reconstructed_len, len as Field);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4 * j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"359":{"path":"/usr/src/noir-projects/aztec-nr/compressed-string/src/compressed_string.nr","source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// The general Compressed String.\n// Compresses M bytes into N fields.\n// Can be used for longer strings that don't fit in a single field.\n// Each field can store 31 characters, so N should be M/31 rounded up.\npub struct CompressedString<let N: u32, let M: u32> {\n    value: [Field; N],\n}\n\nimpl<let N: u32, let M: u32> CompressedString<N, M> {\n    pub fn from_string(input_string: str<M>) -> Self {\n        let mut fields = [0; N];\n        let byts = input_string.as_bytes();\n\n        let mut r_index = 0 as u32;\n\n        for i in 0..N {\n            let mut temp = [0 as u8; 31];\n            for j in 0..31 {\n                if r_index < M {\n                    temp[j] = byts[r_index];\n                    r_index += 1;\n                }\n            }\n\n            fields[i] = field_from_bytes(temp, true);\n        }\n\n        Self { value: fields }\n    }\n\n    pub fn to_bytes(self) -> [u8; M] {\n        let mut result = [0; M];\n        let mut w_index = 0 as u32;\n        for i in 0..N {\n            let bytes: [u8; 31] = self.value[i].to_be_bytes();\n            for j in 0..31 {\n                if w_index < M {\n                    result[w_index] = bytes[j];\n                    w_index += 1;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<let N: u32, let M: u32> Eq for CompressedString<N, M> {\n    fn eq(self, other: CompressedString<N, M>) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Serialize<N> for CompressedString<N, M> {\n    fn serialize(self) -> [Field; N] {\n        self.value\n    }\n}\n\nimpl<let N: u32, let M: u32> Deserialize<N> for CompressedString<N, M> {\n    fn deserialize(input: [Field; N]) -> Self {\n        Self { value: input }\n    }\n}\n\n#[test]\nunconstrained fn test_short_string() {\n    let i = \"Hello world\";\n    let b = i.as_bytes();\n    let name: CompressedString<1, 11> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<4, 118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_long_string_work_with_too_many_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<5, 118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n\n#[test]\nunconstrained fn test_serde() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let name: CompressedString<5, 118> = CompressedString::from_string(i);\n\n    assert_eq(name, CompressedString::deserialize(name.serialize()));\n}\n\n#[test(should_fail)]\nunconstrained fn test_long_string_fail_with_too_few_fields() {\n    let i = \"Hello world. I'm setting up a very long text of blibbablubb such that we can see if works as planned for longer names.\";\n    let b = i.as_bytes();\n    let name: CompressedString<3, 118> = CompressedString::from_string(i);\n    let p = b == name.to_bytes();\n    assert(p, \"invalid recover\");\n}\n"},"368":{"path":"/usr/src/noir-projects/noir-contracts/contracts/avm_test_contract/src/main.nr","source":"use dep::aztec::protocol_types::traits::{Serialize, Deserialize};\n\npub struct Note {\n    a: Field,\n    b: Field,\n}\n\nimpl Serialize<2> for Note {\n    fn serialize(self) -> [Field; 2] {\n        [self.a, self.b]\n    }\n}\n\nimpl Deserialize<2> for Note {\n    fn deserialize(wire: [Field; 2]) -> Note {\n        Note { a: wire[0], b: wire[1] }\n    }\n}\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract AvmTest {\n    use crate::Note;\n\n    global big_field_128_bits: Field = 0x001234567890abcdef1234567890abcdef;\n    global big_field_136_bits: Field = 0x991234567890abcdef1234567890abcdef;\n    global big_field_254_bits: Field =\n        0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef;\n\n    // Libs\n    use std::embedded_curve_ops::{multi_scalar_mul, EmbeddedCurvePoint};\n    use dep::aztec::protocol_types::constants::CONTRACT_INSTANCE_LENGTH;\n    use dep::aztec::prelude::Map;\n    use dep::aztec::state_vars::PublicMutable;\n    use dep::aztec::protocol_types::{\n        address::{AztecAddress, EthAddress}, point::Point, scalar::Scalar,\n    };\n    use dep::aztec::oracle::get_contract_instance::{\n        get_contract_instance_avm, get_contract_instance_internal_avm,\n    };\n    use dep::aztec::protocol_types::{\n        abis::function_selector::FunctionSelector, storage::map::derive_storage_slot_in_map,\n    };\n    use dep::compressed_string::CompressedString;\n    use dep::aztec::macros::{storage::storage, functions::{public, private}};\n    use dep::aztec::context::gas::GasOpts;\n\n    #[storage]\n    struct Storage<Context> {\n        single: PublicMutable<Field, Context>,\n        list: PublicMutable<Note, Context>,\n        map: Map<AztecAddress, PublicMutable<u32, Context>, Context>,\n    }\n\n    /************************************************************************\n     * Storage\n     ************************************************************************/\n    #[public]\n    fn set_storage_single(a: Field) {\n        storage.single.write(a);\n    }\n\n    #[public]\n    fn read_storage_single() -> Field {\n        storage.single.read()\n    }\n\n    // should still be able to use ` -> pub *` for return type even though macro forces `pub`\n    #[public]\n    fn set_read_storage_single(a: Field) -> pub Field {\n        storage.single.write(a);\n        storage.single.read()\n    }\n\n    #[public]\n    fn set_storage_list(a: Field, b: Field) {\n        storage.list.write(Note { a, b });\n    }\n\n    #[public]\n    fn read_storage_list() -> [Field; 2] {\n        let note: Note = storage.list.read();\n        note.serialize()\n    }\n\n    #[public]\n    fn set_storage_map(to: AztecAddress, amount: u32) -> Field {\n        storage.map.at(to).write(amount);\n        // returns storage slot for key\n        derive_storage_slot_in_map(storage.map.storage_slot, to)\n    }\n\n    #[public]\n    fn add_storage_map(to: AztecAddress, amount: u32) -> Field {\n        let new_balance = storage.map.at(to).read().add(amount);\n        storage.map.at(to).write(new_balance);\n        // returns storage slot for key\n        derive_storage_slot_in_map(storage.map.storage_slot, to)\n    }\n\n    #[public]\n    fn read_storage_map(address: AztecAddress) -> u32 {\n        storage.map.at(address).read()\n    }\n\n    #[public]\n    fn add_args_return(arg_a: Field, arg_b: Field) -> Field {\n        arg_a + arg_b\n    }\n\n    /************************************************************************\n     * General Opcodes\n     ************************************************************************/\n    #[public]\n    fn set_opcode_u8() -> u8 {\n        8 as u8\n    }\n\n    #[public]\n    fn set_opcode_u32() -> u32 {\n        1 << 30 as u8\n    }\n\n    #[public]\n    fn set_opcode_u64() -> u64 {\n        1 << 60 as u8\n    }\n\n    #[public]\n    fn set_opcode_small_field() -> Field {\n        big_field_128_bits\n    }\n\n    #[public]\n    fn set_opcode_big_field() -> Field {\n        big_field_136_bits\n    }\n\n    #[public]\n    fn set_opcode_really_big_field() -> Field {\n        big_field_254_bits\n    }\n\n    #[public]\n    fn add_u128(a: U128, b: U128) -> U128 {\n        a + b\n    }\n\n    #[public]\n    fn modulo2(a: u64) -> u64 {\n        a % 2\n    }\n\n    #[public]\n    fn elliptic_curve_add(lhs: Point, rhs: Point) -> Point {\n        lhs + rhs\n    }\n\n    #[public]\n    fn elliptic_curve_add_and_double() -> Point {\n        let g = Point {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860,\n            is_infinite: false,\n        };\n\n        let doubled = g + g;\n        let added = g + doubled;\n        added\n    }\n\n    #[public]\n    fn variable_base_msm() -> Point {\n        let g = Point {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860,\n            is_infinite: false,\n        };\n        let scalar = Scalar { lo: 3, hi: 0 };\n        let scalar2 = Scalar { lo: 20, hi: 0 };\n        let triple_g = multi_scalar_mul([g, g], [scalar, scalar2]);\n        triple_g\n    }\n\n    #[public]\n    fn pedersen_commit(x: Field, y: Field) -> EmbeddedCurvePoint {\n        let commitment = dep::std::hash::pedersen_commitment_with_separator([x, y], 20);\n        commitment\n    }\n\n    /************************************************************************\n     * Misc\n     ************************************************************************/\n\n    #[public]\n    fn u128_addition_overflow() -> U128 {\n        let max_u128: U128 = U128::from_hex(\"0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\");\n        let one: U128 = U128::from_integer(1);\n        max_u128 + one\n    }\n\n    #[public]\n    fn u128_from_integer_overflow() -> U128 {\n        let should_overflow: Field = 2.pow_32(128); // U128::max() + 1;\n        U128::from_integer(should_overflow)\n    }\n\n    #[public]\n    fn to_radix_le(input: Field) -> [u8; 10] {\n        input.to_le_radix( /*base=*/ 2)\n    }\n\n    // Helper functions to demonstrate an internal call stack in error messages\n    fn inner_helper_with_failed_assertion() {\n        let not_true = false;\n        assert(not_true == true, \"This assertion should fail!\");\n    }\n    fn helper_with_failed_assertion() {\n        inner_helper_with_failed_assertion();\n    }\n\n    #[public]\n    fn assertion_failure() {\n        helper_with_failed_assertion()\n    }\n\n    #[public]\n    fn debug_logging() {\n        dep::aztec::oracle::debug_log::debug_log(\"just text\");\n        dep::aztec::oracle::debug_log::debug_log_format(\"second: {1}\", [1, 2, 3, 4]);\n        dep::aztec::oracle::debug_log::debug_log_format(\"whole array: {}\", [1, 2, 3, 4]);\n        dep::aztec::oracle::debug_log::debug_log(\"tabs and newlines\\n\\t- first\\n\\t- second\");\n    }\n\n    #[public]\n    fn assert_same(arg_a: Field, arg_b: Field) -> pub Field {\n        assert(arg_a == arg_b, \"Values are not equal\");\n        1\n    }\n\n    #[public]\n    fn assert_calldata_copy(args: [Field; 3]) {\n        let offset = 0;\n        let cd: [Field; 3] = dep::aztec::context::public_context::calldata_copy(offset, 3);\n        assert(cd == args, \"Calldata copy failed\");\n    }\n\n    #[public]\n    fn return_oracle() -> [Field; 3] {\n        dep::aztec::context::public_context::avm_return([1, 2, 3]);\n        [4, 5, 6] // Should not get here.\n    }\n\n    /************************************************************************\n     * Hashing functions\n     ************************************************************************/\n    #[public]\n    fn keccak_hash(data: [u8; 10]) -> [u8; 32] {\n        std::hash::keccak256(data, data.len() as u32)\n    }\n\n    #[public]\n    fn keccak_f1600(data: [u64; 25]) -> [u64; 25] {\n        std::hash::keccak::keccakf1600(data)\n    }\n\n    #[public]\n    fn poseidon2_hash(data: [Field; 10]) -> Field {\n        std::hash::poseidon2::Poseidon2::hash(data, data.len())\n    }\n\n    #[public]\n    fn sha256_hash(data: [u8; 10]) -> [u8; 32] {\n        std::hash::sha256(data)\n    }\n\n    #[public]\n    fn pedersen_hash(data: [Field; 10]) -> Field {\n        std::hash::pedersen_hash(data)\n    }\n\n    #[public]\n    fn pedersen_hash_with_index(data: [Field; 10]) -> Field {\n        std::hash::pedersen_hash_with_separator(data, /*index=*/  20)\n    }\n\n    /************************************************************************\n     * Contract instance\n     ************************************************************************/\n    #[public]\n    fn test_get_contract_instance_raw() {\n        let fields = get_contract_instance_internal_avm(context.this_address());\n        // The values here should match those in `avm_simulator.test.ts>Contract>GETCONTRACTINSTANCE deserializes correctly`\n        assert(fields.len() == CONTRACT_INSTANCE_LENGTH + 1);\n        assert(fields[0] == 0x1);\n        assert(fields[1] == 0x123);\n        assert(fields[2] == 0x456);\n        assert(fields[3] == 0x789);\n        assert(fields[4] == 0x101112);\n        assert(fields[5] == 0x131415);\n        assert(fields[6] == 0x161718);\n        assert(fields[7] == 0x00);\n        assert(fields[8] == 0x192021);\n        assert(fields[9] == 0x222324);\n        assert(fields[10] == 0x00);\n        assert(fields[11] == 0x252627);\n        assert(fields[12] == 0x282930);\n        assert(fields[13] == 0x00);\n        assert(fields[14] == 0x313233);\n        assert(fields[15] == 0x343536);\n        assert(fields[16] == 0x00);\n    }\n\n    #[public]\n    fn test_get_contract_instance() {\n        let ci = get_contract_instance_avm(context.this_address());\n        assert(ci.is_some(), \"Contract instance not found!\");\n    }\n\n    /************************************************************************\n     * AvmContext functions\n     ************************************************************************/\n    #[public]\n    fn get_address() -> AztecAddress {\n        context.this_address()\n    }\n\n    #[public]\n    fn get_sender() -> AztecAddress {\n        context.msg_sender()\n    }\n\n    #[public]\n    fn get_function_selector() -> FunctionSelector {\n        context.selector()\n    }\n\n    #[public]\n    fn get_transaction_fee() -> Field {\n        context.transaction_fee()\n    }\n\n    #[public]\n    fn get_chain_id() -> Field {\n        context.chain_id()\n    }\n\n    #[public]\n    fn get_version() -> Field {\n        context.version()\n    }\n\n    #[public]\n    fn get_block_number() -> Field {\n        context.block_number()\n    }\n\n    #[public]\n    fn get_timestamp() -> u64 {\n        context.timestamp()\n    }\n\n    #[public]\n    fn get_fee_per_l2_gas() -> Field {\n        context.fee_per_l2_gas()\n    }\n\n    #[public]\n    fn get_fee_per_da_gas() -> Field {\n        context.fee_per_da_gas()\n    }\n\n    #[public]\n    fn get_l2_gas_left() -> Field {\n        context.l2_gas_left()\n    }\n\n    #[public]\n    fn get_da_gas_left() -> Field {\n        context.da_gas_left()\n    }\n\n    #[public]\n    fn assert_timestamp(expected_timestamp: u64) {\n        let timestamp = context.timestamp();\n        assert(timestamp == expected_timestamp, \"timestamp does not match\");\n    }\n\n    #[public]\n    fn check_selector() {\n        assert(\n            context.selector() == comptime { FunctionSelector::from_signature(\"check_selector()\") },\n            \"Unexpected selector!\",\n        );\n    }\n\n    #[public]\n    fn get_args_hash(_a: u8, _fields: [Field; 3]) -> Field {\n        context.get_args_hash()\n    }\n\n    #[public]\n    fn emit_unencrypted_log() {\n        context.emit_unencrypted_log( /*message=*/ [10, 20, 30]);\n        context.emit_unencrypted_log( /*message=*/ \"Hello, world!\");\n        let s: CompressedString<2, 44> =\n            CompressedString::from_string(\"A long time ago, in a galaxy far far away...\");\n        context.emit_unencrypted_log( /*message=*/ s);\n    }\n\n    #[public]\n    fn note_hash_exists(note_hash: Field, leaf_index: Field) -> bool {\n        context.note_hash_exists(note_hash, leaf_index)\n    }\n\n    // Use the standard context interface to emit a new note hash\n    #[public]\n    fn new_note_hash(note_hash: Field) {\n        context.push_note_hash(note_hash);\n    }\n\n    // Use the standard context interface to emit a new nullifier\n    #[public]\n    fn new_nullifier(nullifier: Field) {\n        context.push_nullifier(nullifier);\n    }\n\n    // Use the standard context interface to check for a nullifier\n    #[public]\n    fn nullifier_exists(nullifier: Field) -> bool {\n        context.nullifier_exists(nullifier, context.this_address())\n    }\n\n    #[public]\n    fn assert_nullifier_exists(nullifier: Field) {\n        assert(\n            context.nullifier_exists(nullifier, context.this_address()),\n            \"Nullifier doesn't exist!\",\n        );\n    }\n\n    // Use the standard context interface to emit a new nullifier\n    #[public]\n    fn emit_nullifier_and_check(nullifier: Field) {\n        context.push_nullifier(nullifier);\n        let exists = context.nullifier_exists(nullifier, context.this_address());\n        assert(exists, \"Nullifier was just created, but its existence wasn't detected!\");\n    }\n\n    // Create the same nullifier twice (shouldn't work!)\n    #[public]\n    fn nullifier_collision(nullifier: Field) {\n        context.push_nullifier(nullifier);\n        // Can't do this twice!\n        context.push_nullifier(nullifier);\n    }\n\n    #[public]\n    fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> bool {\n        context.l1_to_l2_msg_exists(msg_hash, msg_leaf_index)\n    }\n\n    #[public]\n    fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n        context.message_portal(recipient, content)\n    }\n\n    /************************************************************************\n     * Nested calls\n     ************************************************************************/\n    #[public]\n    fn nested_call_to_add_with_gas(\n        arg_a: Field,\n        arg_b: Field,\n        l2_gas: Field,\n        da_gas: Field,\n    ) -> pub Field {\n        AvmTest::at(context.this_address())\n            .add_args_return(arg_a, arg_b)\n            .with_gas(GasOpts::new(l2_gas, da_gas))\n            .call(&mut context)\n    }\n\n    // Use the `call_public_function` wrapper to initiate a nested call to the add function\n    #[public]\n    fn nested_call_to_add(arg_a: Field, arg_b: Field) -> pub Field {\n        AvmTest::at(context.this_address()).add_args_return(arg_a, arg_b).call(&mut context)\n    }\n\n    // Indirectly call_static the external call opcode to initiate a nested call to the add function\n    #[public]\n    fn nested_static_call_to_add(arg_a: Field, arg_b: Field) -> pub Field {\n        AvmTest::at(context.this_address()).add_args_return(arg_a, arg_b).view(&mut context)\n    }\n\n    // Indirectly call_static `set_storage_single`. Should revert since it's accessing storage.\n    #[public]\n    fn nested_static_call_to_set_storage() {\n        AvmTest::at(context.this_address()).set_storage_single(20).view(&mut context);\n    }\n\n    #[public]\n    fn create_same_nullifier_in_nested_call(nestedAddress: AztecAddress, nullifier: Field) {\n        context.push_nullifier(nullifier);\n        AvmTest::at(nestedAddress).new_nullifier(nullifier).call(&mut context);\n    }\n\n    #[public]\n    fn create_different_nullifier_in_nested_call(nestedAddress: AztecAddress, nullifier: Field) {\n        context.push_nullifier(nullifier);\n        AvmTest::at(nestedAddress).new_nullifier(nullifier + 1).call(&mut context);\n    }\n\n    #[public]\n    fn nested_call_to_assert_same(arg_a: Field, arg_b: Field) -> pub Field {\n        AvmTest::at(context.this_address()).assert_same(arg_a, arg_b).call(&mut context)\n    }\n\n    /**\n     * Enqueue a public call from private\n     */\n    #[private]\n    fn enqueue_public_from_private() {\n        AvmTest::at(context.this_address()).set_opcode_u8().enqueue_view(&mut context);\n        AvmTest::at(context.this_address()).set_read_storage_single(5).enqueue(&mut context);\n    }\n\n    /************************************************************************\n     * Bulk testing: exercise many functions in a single call.\n     * It only makes sense to call functions with side effects (or oracle\n     * calls - but not blackboxes!), since otherwise the whole call will\n     * be optimized away.\n     ************************************************************************/\n    #[public]\n    fn bulk_testing(args_field: [Field; 10], args_u8: [u8; 10]) {\n        dep::aztec::oracle::debug_log::debug_log(\"set_storage_single\");\n        set_storage_single(30);\n        dep::aztec::oracle::debug_log::debug_log(\"set_storage_list\");\n        set_storage_list(40, 50);\n        dep::aztec::oracle::debug_log::debug_log(\"read_storage_list\");\n        let _ = set_storage_map(context.this_address(), 60);\n        dep::aztec::oracle::debug_log::debug_log(\"add_storage_map\");\n        let _ = add_storage_map(context.this_address(), 10);\n        dep::aztec::oracle::debug_log::debug_log(\"read_storage_map\");\n        let _ = read_storage_map(context.this_address());\n        dep::aztec::oracle::debug_log::debug_log(\"keccak_hash\");\n        let _ = keccak_hash(args_u8);\n        dep::aztec::oracle::debug_log::debug_log(\"sha256_hash\");\n        let _ = sha256_hash(args_u8);\n        dep::aztec::oracle::debug_log::debug_log(\"poseidon2_hash\");\n        let _ = poseidon2_hash(args_field);\n        dep::aztec::oracle::debug_log::debug_log(\"pedersen_hash\");\n        let _ = pedersen_hash(args_field);\n        dep::aztec::oracle::debug_log::debug_log(\"pedersen_hash_with_index\");\n        let _ = pedersen_hash_with_index(args_field);\n        dep::aztec::oracle::debug_log::debug_log(\"test_get_contract_instance\");\n        test_get_contract_instance();\n        dep::aztec::oracle::debug_log::debug_log(\"get_address\");\n        let _ = get_address();\n        dep::aztec::oracle::debug_log::debug_log(\"get_sender\");\n        let _ = get_sender();\n        dep::aztec::oracle::debug_log::debug_log(\"get_function_selector\");\n        let _ = get_function_selector();\n        dep::aztec::oracle::debug_log::debug_log(\"get_transaction_fee\");\n        let _ = get_transaction_fee();\n        dep::aztec::oracle::debug_log::debug_log(\"get_chain_id\");\n        let _ = get_chain_id();\n        dep::aztec::oracle::debug_log::debug_log(\"get_version\");\n        let _ = get_version();\n        dep::aztec::oracle::debug_log::debug_log(\"get_block_number\");\n        let _ = get_block_number();\n        dep::aztec::oracle::debug_log::debug_log(\"get_timestamp\");\n        let _ = get_timestamp();\n        dep::aztec::oracle::debug_log::debug_log(\"get_fee_per_l2_gas\");\n        let _ = get_fee_per_l2_gas();\n        dep::aztec::oracle::debug_log::debug_log(\"get_fee_per_da_gas\");\n        let _ = get_fee_per_da_gas();\n        dep::aztec::oracle::debug_log::debug_log(\"get_l2_gas_left\");\n        let _ = get_l2_gas_left();\n        dep::aztec::oracle::debug_log::debug_log(\"get_da_gas_left\");\n        let _ = get_da_gas_left();\n        dep::aztec::oracle::debug_log::debug_log(\"emit_unencrypted_log\");\n        let _ = emit_unencrypted_log();\n        dep::aztec::oracle::debug_log::debug_log(\"note_hash_exists\");\n        let _ = note_hash_exists(1, 2);\n        dep::aztec::oracle::debug_log::debug_log(\"new_note_hash\");\n        let _ = new_note_hash(1);\n        dep::aztec::oracle::debug_log::debug_log(\"new_nullifier\");\n        let _ = new_nullifier(1);\n        dep::aztec::oracle::debug_log::debug_log(\"nullifier_exists\");\n        let _ = nullifier_exists(1);\n        dep::aztec::oracle::debug_log::debug_log(\"l1_to_l2_msg_exists\");\n        let _ = l1_to_l2_msg_exists(1, 2);\n        dep::aztec::oracle::debug_log::debug_log(\"send_l2_to_l1_msg\");\n        let _ = send_l2_to_l1_msg(EthAddress::from_field(0x2020), 1);\n        dep::aztec::oracle::debug_log::debug_log(\"nested_call_to_add\");\n        let _ = nested_call_to_add(1, 2);\n        dep::aztec::oracle::debug_log::debug_log(\"nested_static_call_to_add\");\n        let _ = nested_static_call_to_add(1, 2);\n    }\n}\n"},"55":{"path":"std/ops/arith.nr","source":"// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"6":{"path":"std/cmp.nr","source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: StructDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: StructDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"68":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\n\nglobal pow64: Field = 18446744073709551616; //2^64;\nglobal pow63: Field = 9223372036854775808; // 2^63;\npub struct U128 {\n    pub(crate) lo: Field,\n    pub(crate) hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field) * base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_be_bytes();\n        let hi: [u8; 8] = self.hi.to_be_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i + 8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo: [u8; 8] = self.lo.to_le_bytes();\n        let hi: [u8; 8] = self.hi.to_le_bytes();\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i + 8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N - i - 1]) * base;\n                base = base * 16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N - i]) * base;\n                base = base * 16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    pub(crate) fn decode_ascii(ascii: u8) -> Field {\n        (\n            if ascii < 58 {\n                ascii - 48\n            } else {\n                let ascii =\n                    ascii + 32 * (unsafe { U128::uconstrained_check_is_upper_ascii(ascii) as u8 });\n                assert(ascii >= 97); // enforce >= 'a'\n                assert(ascii <= 102); // enforce <= 'f'\n                ascii - 87\n            }\n        ) as Field\n    }\n\n    // TODO: Replace with a faster version.\n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q, r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size::<128>();\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi * b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo + self.hi) * (b.lo + b.hi) - low + carry\n        } else {\n            self.lo * b.hi + self.hi * b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 { lo, hi }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n            q\n        }\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        unsafe {\n            let (q, r) = self.unconstrained_div(b);\n            let a = b * q + r;\n            assert_eq(self, a);\n            assert(r < b);\n\n            r\n        }\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n\n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 {\n    fn not(self) -> U128 {\n        U128 { lo: (!(self.lo as u64)) as Field, hi: (!(self.hi as u64)) as Field }\n    }\n}\n\nimpl BitOr for U128 {\n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field,\n        }\n    }\n}\n\nimpl Shl for U128 {\n    fn shl(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    }\n}\n\nimpl Shr for U128 {\n    fn shr(self, other: u8) -> U128 {\n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits: [u1; 7] = (other as Field).to_be_bits();\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            let bit = exp_bits[7 - i] as Field;\n            y = bit * (r * y) + (1 - bit) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    }\n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a = a.to_le_bytes();\n        let be_bytes_a = a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b = U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c = U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d = U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e = U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f = U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded = U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b: Field = a.to_integer();\n        let c: [u8; 17] = b.to_le_bytes();\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a = U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b = U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c = U128::one();\n        let d = U128::from_u64s_le(0x0, 0x1);\n        unsafe {\n            let (q, r) = a.unconstrained_div(b);\n            assert_eq(q, c);\n            assert_eq(r, d);\n        }\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (a, U128::zero()));\n        }\n\n        // Check where b is a multiple of a\n        unsafe {\n            let (c, d) = b.unconstrained_div(a);\n            assert_eq((c, d), (U128::zero(), b));\n        }\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::zero(), U128::zero()));\n        }\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        unsafe {\n            let (c, d) = a.unconstrained_div(b);\n            assert_eq((c, d), (U128::one(), U128::zero()));\n        }\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start: Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start: Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start: Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start: Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(),\n            U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(\n                U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff),\n            ),\n        );\n    }\n}\n"},"91":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_oracle_wrapper(args) };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_array_oracle_wrapper(args) };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"99":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader,\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\npub unconstrained fn get_contract_instance_internal_avm(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"}}}