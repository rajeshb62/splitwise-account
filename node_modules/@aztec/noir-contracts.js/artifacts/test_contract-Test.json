{"transpiled":true,"noir_version":"0.36.0+1094f036be7b102252a3a5c0d4b8c621779cf4bd-x8664","name":"Test","functions":[{"name":"create_l2_to_l1_message_arbitrary_recipient_public","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"content","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQCAyQCBAAEHxgABAADgEMrCIBDAAErCIBEAAIiAAo4AIBFAAAiAA01DAACAAEjJQAEeACABA0AAACABIADIQAAEYADOQEAACMrABjKGMo=","debug_symbols":"bY/RCsMgDEX/Jc99UOuK+CtjFG21CKJF7WCI/z7dOtaxvoSc5HBJMsxKbstonPYR+DWD9ZNIxrtKuXQgg7HWLONxDKgVjF9+XIVrGJMICTgb0NCBcnNrCasJ2lgFnGJUuj+b9BjvNunp18bscmIzgtAnm1D6Y99KxbsIRkir9tv15qbDK+mxvjdVfgI=","brillig_names":["create_l2_to_l1_message_arbitrary_recipient_public"],"assert_messages":{"16":"Stack too deep"}},{"name":"call_view_notes_many","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"active_or_nullified","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["call_view_notes_many"]},{"name":"call_get_notes_many","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"16137133351287663689":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"active_or_nullified","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["get_notes_internal","get_collapse_hints","decompose_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"get_ovsk_app","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"ovpk_m_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZjbbqMwEIbfhetczMGnyausVlXSphVSRKokXWkV9d3XZMHQQoqiEDqqyBUOPzOff4vB41P2tFm/vTzkxfPukC1/nbLt7nF1zHdFHJ0y5PN/h9dVUQ4Px9X+mC3RCSyyTfEULz3A+yJ7zrebbGkwXnfU5IOv1BRAkhod9qjZuFCp2RocUCOC1HKMP0p6JtunD8HVcgHbqE1vcJIU24e2+PciQzNbc8kaO1tzyRo3W3PJGn+7NSwG68mK981kgzunCPdPIX0pCLGeOaHhgRQSAlVqEcAPKXpcBbRpyQClg0SgDwn1IZE+JJ4eyTpMSK5dXCokow/JTo8krSIZV3FAz0ltuCkvjL43NhibpgvCAwWYBVNs+rr8Ukjll0LLkv5aPV5hJzcvkO4F8t+8QC3T65c66EMSdUgMt+9nnAv1BJwnM4BkE5Djlhb8GQdHwPGWE46nAZwfuhVmmo0cwcg4WO/z7TZ/efhwqgHno43ebYOTOnW0LwUri3xHapyppJagLb3Y5o0V3N8zeLhncLlj8P42Z6zgeGNwS7XUOv+1VISa/UXzclH1sSY1JKyGxKghsdORxPyuaR9tB8XpQfF6UIIeFJkShdPeAVg+ozDoQUE9KKQHhb8JxfgOitGDYvWgTFptfXMiFqCD4vWgBD0oogQljrDU9nvjiRIQdBpsufoRA9c/glc+8h6Hf1b7fLXebsoGq7z7VjzW/VYcHv++/r8Txf8A","brillig_names":["get_key_validation_request","pack_returns_oracle_wrapper","directive_invert"]},{"name":"emit_nullifier","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZXPasMwDMbfxeccLMd/pLzKGMVpk2IwTknSwQh793mdk2abww5j0EN8kuyf9UkfBk/s1NTX88GFthtY9TQx3x3t6LoQs4lBedsbLjZ8pMNo+5FVoIkXrAmnGBrO3wrWOt+wSkKMf9DCoEm0QE4LDRoydCk1JrpUEn6hATjNOMQlFr4UKscj6hknru60zBYXtNQ2uIafCwZyt2bLGrVbs2WN3q3Zssb83ZqSJMzDkjH3YVHfJPD/JSgnQaBUukSwupSXUMhFohUCfZHIPAdANeMxRvjekuAP1lLM6t55786H9W8Tt19s72ztm5S213BcnY6vl8+TWOId","brillig_names":[]},{"name":"consume_mint_private_message","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"},"visibility":"private"},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["build_msg_block","attach_len_to_msg_block","build_msg_block","get_l1_to_l2_membership_witness","directive_invert","directive_integer_quotient"]},{"name":"get_this_address","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZXbioMwEIbfJddeZHKaxFdZlqKtLYEQi9qFRXz3TboeehCK1N7phWTMNzP//EjSkkORX047649lTdKvlrhynzW29CFqCfDrt/qc+RjWTVY1JAVlaEIKfwhLpLRLyNG6gqQCwvqJ5kZAT3ODONKgVfedEBCfbyHfb6GUNj2tkIm7Fs+0NHqA+Q1L8SpHrSAHJR/lIHshh6HGnmaamolWMOemUIN6LgW8oAHoOCyEZ9LCmZzjtVYDbqicaDFbnJmxNupbOBqJm5HrGKk3I9cx0mxGrmBkCPLKOmdPu7vriMYXn/1ZkbG+Gkr6eOJyszhF0OUpsDClC+FPVtksd0WcL+5e/H4YN4TN7/l/J8B/","brillig_names":["pack_returns_oracle_wrapper"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"3469988399892582431":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"assert_private_global_vars","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"chain_id","type":{"kind":"field"},"visibility":"private"},{"name":"version","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZTLroIwEIbfZdYsOr1OeZWTE1MUTJOmGMCTnBDf3aqAGCEujDu7mss382f+RXvYlcVxv/GxqlvIf3oI9dZ1vo4p6wHFtdYeXLykbeeaDnLUlmVQxl0KDWOnDCofSsglpviJ5obMQHNidqJR4wItpKaBFkriCxqR2RHH9PjEC66WeCI94papOy0Xl3M77TY0h38zQPm1Zs0a9bVmzRr9vjXCShyPtcbcjyV9lTCfl6BFCcn5OJVihQ8ilzG7MkaTY1KgeRxLWdH4EPx+M/+aUvnPNd4VoRzS6hi3s273f7h10ooz","brillig_names":[]},{"name":"is_time_equal","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"time","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"}},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMdAAWAQ4BDKwiAQwABIgALKwQAAYBEOACARAABIgARHgIHAAIKOAIBAyECABAAAzkBAAAjJQAEeACABA0AAACABIADIQAAFYADOQEAACMrABjKGMo=","debug_symbols":"nZDRCoMwDEX/Jc99aLRdq78yhlStUihVtA6G+O9rnYyO7WH4EnKTc0O4K7S6XvrKuG6YobyuYIdGeTO4oNaNQD0Za01fpWOgsWC28/OoXJSzV5OHErHgGQHt2r2/FOFGZ6yGkiHdyBfPpMgPnEnJ3jRK/oMWlONBC5rcjvSNAOZ/vCQ+X4o2ds7GT9i2IO9qMqq2+oi4W1yTJO4f42sT4Cc=","brillig_names":["is_time_equal"],"assert_messages":{"20":"Stack too deep"}},{"name":"emit_encrypted_logs_nested","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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NprlnGa5jWYFp1lho1nJaVbaaFZxmlU2mtWcZrWNZg2nWWOjWctp1tpo1nGadTaa9ZxmvY1mA6fZYKPZyGk22mg2cZpNNprNnGazjWYLp9lio/mQ03xoo/mI03xko/mY03xso/mE03xio/mU03xqo/mM03xmo/mc03xuo/mC03xho/mS03xpo/mK03xlo9nKabbaaL7mNF/baL7hNN/YaLZxmm02mm85zbc2mu84zXc2mu85zfc2mh84zQ82mh85zY82mp84zU82mp85zc82mu2cZruN5hdO84uN5ldO86uN5jdO85uNZgen2WGj2clpdtpodnGaXTaa3znN7zaaPzjNHzaaPznNnzaa3Zxmt41mD6fZY6PZy2n22mj2cZp9Npr9nGa/jeYvTvOXjeYApzlgo/mb0/xtoznIaQ7aaA5xmkM2msOc5rCN5ginOWKjOcppjtpojnGaYzaa45zmuI3mBKc5YaM5yWlO2mhOcZpTNprTnOa0jeYMpzljoznLac7aaM5xmnM2mvOc5ryN5gKnuWCjuchpLtpoLnGaSzaay5zmso3mCqe5YqO5ymmu2miucZprNprrnOa6jeYGp7lho7nJaW7aaG5xmls2mtuc5raNxtEjQ2MuWzUBnCbARhPIaQJtNEGcJshGk43TZLPRZOc02W00OThNDhtNMKcJttHk5DQ5bTS5OE0uG01uTpPbRpOH0+Sx0eTlNHltNPk4TT4bTX5Ok99GU4DTFLDRFOQ0BW00hThNIRvNPZzmHhtNYU5T2EZThNMUsdHcy2nutdHcx2nus9Hcz2nut9E8wGkesNE8yGketNE8xGkestE8zGkettE8wmkesdE8ymketdE8xmkes9EU5TRFbTROTuO00RTjNMVsNCGcJsRGE8ppQm00j3Oax200T3CaJ2w0T3KaJ200T3Gap2w0T3Oap200z3CaZ2w0z3KaZ200z3Ga52w0z3Oa5200L3CaF2w0xTlNcRvNi5zmRRtNGKcJs9FonEaz0YRzmnAbTQSnibDRRHKaSBtNFKeJstFEc5poG00Mp4mx0cRymlgbTRynibPRvMRpXrLRlOA0JWw0L3Oal200r3CaV2w0r3KaV200r3Ga12w0JTlNSRtNKU5TykbzOqd53UZTmtOUttGU4TRlbDRlOU1ZG005TlPORlOe05S30VTgNBVsNBU5TUUbzRuc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E2ivC85Ed6exVXzdVk10fwWe913L+uC3f9H6sN7zxtQncOu4vuWYJppL82XSN38vmmBBbmbzhmhbuNttJ6elNlPf4A7bjtL7T4SHZXr/CX7/sbv/RJO7PHaJ7u0QwLVZx/NO93Yw2cx1yc+ZZm5W3ruDr8du7FrfxXHjn/rTMvrij/H6I1uaktr+uXdHH8vxht8nsnPva7d+eb2769fqA/h7d+Sy9CWap/n3s87Ton1VdAyz7qtd77C+RJ7FHIO7PVb6+r07et9hDFTfp2AANxcMsvwNn13wfrpuQia6AJvnf/oQtGUzctHvUzDO8jnA/4f7FAw1/uGN+xRM4D5zeN6y71o9JtX7qr1PQfpnefyDmN9/nwKO6d/vKThNGU4TwGnKcpqyNppynKacjaY8pylvo/Hfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvHfp8B12arx36fAddmq8d+nwHXZqvGF+xTwmszuU2C9lvw//aSlP5vXOgp0uOaUNP4d5sEjNiwy0n8PA6x7GFhfy5b23zrudE38BwIzdNZty3oPg3//nnC43qcg1Ejir51vPtCvnR8SmMH9Tz2c9t+/ebg28z19+dr5Dxr/MK+d/xRXo3X7M7fJQMd/+8rLooixnNysUWrZ5omtO7ZMTU56s0VqcuUWDRyWB7/98Me4/7xvoKsuyCY/yPHfY+W//xb0odfr69faNO/5kdm1Nv+9DqXxXMRBX0sYd+3Be9X0HxYsqK8It3yvpU5+GyxJxGD29+/nDo7/PgItr/37uYGFL4CeT3NYHkGC9zIfhbnlf4+LFkY110VOvw6j/sijpn/htsJffziP5TVznWUT5AXY/DvQ8pyZNiCTfvMJXjP7LCxo+z8oJqUiBMM3AA==","debug_symbols":"","brillig_names":["pack_arguments_oracle_wrapper","call_private_function_internal","get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block","attach_len_to_msg_block","build_msg_block","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"get_random","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"kinda_seed","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/7WUTU/DMAyG060FOhiHTQKO+wlFgNgRGELiwgEk7qWJoNrWoDbc99MhwibGzaR9ZK+UOk3sR47lJBK/imBYJWSNC9duwGbb6TwgK4t4nvYTr3CYiM1RJ2R+DPbF5MV0ZLQeSaU+/9zPwKZgOwTXDViv1JN6KP44u7xKRbtEAfO/SIG5y/ogcwf8bB84k4Xj87NY9cX/tqIxBz+jR/ys7gkPY4ZsHWOHMD8Sri3flbmb6WL69DV/UzW/CTRD4cmWylIHjjrRlanzwtxKWaumWUbwXS9O7RHqR15Wj5LT4s1or6puSl1xWrIGjdTxOa+knj+UatbKb29FIvpgt3RE+5FBVt+zh3GHwr0o8cLth+ro67F7NbvAT4S/L2KyT/1P4X8g/LJn+Aac1G+iZgYAAA==","debug_symbols":"rZPhisMgDIDfxd/9kdhoY1/lGMNu7RDEjrY7OErf/dxO7wodlGP7I4l+JJ8YZ3Fum9vl6ELXj6L+mIXvT3ZyfYjZvBSiGZz37nJcbwu4L4gPfrzacE/HyQ6TqFEbKEQbzjGsAGKFzvlW1IQx3tAMlGCW8pdFpieskiqxSv3VReDlUAiUb5BRuQFX1Y4MlSaxpHkjU74uY0Am2KDekdGQxbXUGxl6gwxl2KhyT4Yzu66bZdRzGcWYbWJsdnSoylNDvHoowEcL/d/7HpaYftrB2ca3aey7WzitfsH0df05ifA3","brillig_names":["get_random"]},{"name":"set_constant","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7VfRTuswDP2XPO8htpPY2a9cXaEOBqpUdWgbSGji30nL3JYuU4XKkIDtKV5Pj32cxHYP5m69enq4Kev7zc4s/x1Mtbkt9uWmTtbBALX/7R6LujF3+2K7N0sI0S7Mur5LS7b2dWHuy2ptlg7S+gSNLHxEo9jYoSFABk0uyBFN3sEEGsBGhUP6YYcn9Dm8SFB4tL5Huyw5xo6bZQj+vzDgrqk5lxp/Tc251IRras6lhuenhqIDFRuZe7ESWhdyeRcx68JZr3uW1hGnttg7TSt6pt4JYQbtxeIR7QXih5Ay3CBe4WktMJaA9udLgK+REL16Cc5PSOCoh1twEBDkBHgkVYv9EXLNZT49cEgKJuTQoTG2SvEXKaX+alGksVL6RUo5aNAkMFDaVkJ0369UpCv71k1JDaIFU3xfL8FSG73//uhTzH34bKd2KvRbFZydXWzCnxKcrNW2rKry4ebDt4JtPxiy5ShyNyTYQYPNThQh6JULg+6aoE1zpYuyu9ns3ezE4Mbsfj67nidGGbOHi7LzXHb2TtkDjtnlouxxNnvUriR2fGbys9Ln2G2mxRzZYS67kO6qnGQG8QvZR7cpGdAA6cxQbzsn7Ny4g5B8+qXXZD4X27JYVeumGjVPn+pbLU7J3L88vj9J4Dc=","brillig_names":["decompose_hint","notify_created_note_oracle_wrapper"]},{"name":"consume_mint_public_message","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"message_leaf_index","type":{"kind":"field"},"visibility":"private"},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"","brillig_names":["consume_mint_public_message"],"assert_messages":{"1024":"Stack too deep","1018":"attempt to add with overflow","884":"Array index out of bounds","811":"attempt to add with overflow","616":"attempt to add with overflow","1451":"attempt to subtract with overflow","866":"Array index out of bounds","1311":"Array index out of bounds","1762":"Array index out of bounds","793":"Array index out of bounds","1238":"attempt to add with overflow","1543":"attempt to subtract with overflow","1348":"attempt to add with overflow","446":"Array index out of bounds","1214":"attempt to add with overflow","1202":"Array index out of bounds","1330":"attempt to add with overflow","1318":"Array index out of bounds","800":"Array index out of bounds","599":"Array index out of bounds","855":"attempt to add with overflow","977":"Array index out of bounds","648":"attempt to subtract with overflow","837":"Array index out of bounds","1794":"attempt to add with overflow","1087":"attempt to add with overflow","636":"attempt to add with overflow","1337":"Array index out of bounds","1142":"attempt to add with overflow","1459":"Array index out of bounds","1002":"Array index out of bounds","1447":"attempt to multiply with overflow","1124":"Array index out of bounds","1252":"attempt to add with overflow","734":"attempt to add with overflow","1307":"attempt to add with overflow","984":"Array index out of bounds","789":"attempt to add with overflow","1234":"attempt to subtract with overflow","911":"attempt to multiply with overflow","1100":"attempt to subtract with overflow","716":"Array index out of bounds","966":"attempt to add with overflow","1222":"attempt to add with overflow","844":"Array index out of bounds","582":"Tried to consume nonexistent L1-to-L2 message","771":"Array index out of bounds","1417":"Array index out of bounds","1466":"Array index out of bounds","1009":"Array index out of bounds","1478":"attempt to add with overflow","1131":"Array index out of bounds","1527":"Array index out of bounds","1612":"Array index out of bounds","1770":"Array index out of bounds","1631":"attempt to add with overflow","1436":"attempt to add with overflow","1558":"attempt to add with overflow","723":"Array index out of bounds","973":"attempt to add with overflow","778":"Array index out of bounds","705":"attempt to add with overflow","833":"attempt to add with overflow","1278":"attempt to multiply with overflow","760":"attempt to add with overflow","626":"attempt to multiply with overflow","815":"Array index out of bounds","1455":"attempt to subtract with overflow","1778":"Array index out of bounds","742":"Array index out of bounds","998":"attempt to add with overflow","1120":"attempt to add with overflow","1242":"Array index out of bounds","462":"attempt to add with overflow","1230":"attempt to multiply with overflow","712":"attempt to add with overflow","200":"Array index out of bounds","578":"L1-to-L2 message is already nullified","767":"attempt to add with overflow","901":"attempt to add with overflow","1413":"attempt to subtract with overflow","822":"Array index out of bounds","1523":"attempt to subtract with overflow","1547":"Array index out of bounds","749":"Array index out of bounds","1194":"attempt to subtract with overflow","859":"Array index out of bounds","213":"attempt to add with overflow"}},{"name":"call_view_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"active_or_nullified","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["call_view_notes"]},{"name":"get_master_incoming_viewing_public_key","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"H4sIAAAAAAAA/9WdBXQUVxuGZzcuSwK0tEWX4r6a7KLB3Z1qQjaQAgmFQL1N3d3d3d1b6u7u7i7US//3g5k/l+Ey/Ke5u/9555znjNy7M893Z/bu7Mi9PmvDsMBvWd38G6Z9IMsey6Kga5kzVqdzNPmKNMsCmmUlmmUtNcvagArXso6afJ00y4KaZZ01y7rZy9TBZ48r7HE0VBaLpcojqXA0XBmKJKsS8VAsXlWWCCfC8US8OpKIRlOJWKI8WZUsDyXDsWgqXBNPRmtCG4b2/qZ1hZo1RBam07ODMc9QKJ2eHf+9Z8S9QNxag2zFVfbXOnu6u9U03UFZ3tGedj7XCfNB0Bls729a7gx+VxmEmjeEuxkszy7m9ntY/W7JeoPWhrpCPQ68jo1Q84Zwd3PrCgUUz672DnTqzO72uIc97mmPe9nj3va4jz3ua4/72eP+9niAPQ75rY0rJtmAu9LtpVnWV7NsgH/Twjb9JQwbO2iisXR6Rv69Z7V7ga6yCCuVQldlupsyHXFVFlHMx0AclGkqiyxXGYSaN4S7G/yCR/3m9k15mn5wTJdfD4PlFzNYfgmS8utpsPziBssvabD8dHVDuVIHJJTppDJd5qobBmJ+EBgMhmSgbuhlcN8MNLhvhpIc270Nlt8gg+U3jKT8+hgsv8EGy68izXXDUKUOGKZMVyjTQ1x1w3DMjwAjwagM1A19De6b4Qb3zWiSY7ufwfIbYbD8xpCUX3+D5TfSYPmNTXPdMFqpA8Yo02OV6VGuumEc5seDCWBiBuqGAQb3zTiD+2ZSmvfNJGUfjFemJyjTE137ZjLmp4CpYJpm35j+zzvdXBnUpNNzxr/3jLoX6PbVdGWfTFamQ8r0DNe+mon5WWA2mONP/4W87gbLc6bBYz/HarohsLnB0LYiuu2YvjBo8D98KF2OPdPgaG3pCncPZbqnxxdjLubngfn+DXePtvTFaO7BbHTnW2ko2DTE7DN5MJHE7DcYcy+SmLMMxtw7QzGHmjeE+xgsv05+jpj7Gox5bppiNv0j1s/i8OxP4jmAxDNE4hkm8YyQeEZJPGMknnESzzISz3ISzwSJZ5LEcyCJ5yASz8EknkNIPIeSeA4j8awg8RxO4jmCxHMkiecoEs/RJJ5jSDzHkniOI/EcT+I5gcRzIonnJBLPySSeU0g8p5J4TiPxnE7iOYPEcyaJ5ywSz9kknnNIPOeSeM4j8ZxP4rmAxHMHEs8dSTx3IvHcmcRzFxLPXUk8K0k8q0g8F5J4VpN4pkg8a0g8F5F4LibxrCXx3I3EcwmJ51ISz2UknnUknvUknstJPHcn8VxB4rmSxLOBxHMViedqEs89SDz3JPHci8RzbxLPfUg89yXx3I/Ec38SzwNIPBtJPA8k8TyIxPNgEs9DSDwPJfE8jMTzcBLPI0g8jyTxPIrE82gSz2NIPI8l8TyOxPN4Es8TSDxPJPE8icTzZBLPU0g8TyXxPI3E83QSzzNIPM8k8TyLxPNsEs9zSDzPJfE8j8TzfBLPC0g8LyTxvIjE82ISz0tIPC8l8byMxPNyEs8rSDyvJPG8isTzahLPa0g8ryXxvI7E83oSzxtIPG8k8byJxPNmEs9bSDxvJfG8jcTzdhLPO0g87yTxvIvE824Sz3tIPO8l8byPxPN+Es81JJ4PkHg+SOL5EInnwySej5B4Pkri+RiJ5+Mknk+QeD5J4vkUiefTJJ7PkHg+S+L5HInn8ySeL5B4vkji+RKJ58sknq+QeL5K4vkaiefrJJ5vkHi+SeL5Fonn2ySe75B4vkvi+R6J5/sknh+QeH5I4vkRiefHJJ6fkHh+SuL5GYnn5ySeX5B4fkni+RWJ59cknt+QeH5L4vkdief3JJ4/kHj+SOL5E4nnzySea0k8fyHx/JXE8zcSz99JPP8g8fyTxPMvEs+/STzXkXj+Q+IpK2Tw9JF4+kk8s0g8s0k8c0g8c0k880g880k8C0g8C0k8i0g8i0k8AySeLUg8S0g8S0k8W5J4tiLxbE3iuRWJ59Yknm1IPLch8dyWxHM7Es+2JJ7tSDzbk3h2IPHsSOLZicQzSOLZmcRzexLPLiSeXUk8u5F4difx7EHi2ZPEsxeJZ28Szz4knn1JPPuRePYn8RxA4hki8QyTeEZIPKMknjESzziJZxmJZzmJZ4LEM0niOZDEcxCJ52ASzyEknkNJPIeReFaQeA4n8RxB4jmSxHMUiedoEs8xJJ5jSTzHkXiOJ/GcQOI5kcRzEonnZBLPKSSeU0k8p5F4TifxnEHiOZPEcxaJ52wSzzkknnNJPOeReM4n8VxA4rkDieeOJJ47kXjuTOK5C4nnriSelSSeVSSeC0k8q0k8UySeNSSei0g8F5N41pJ47kbiuYTEcymJ5zISzzoSz3oSz+UknruTeK4g8VxJ4tlA4rmKxHM1ieceJJ57knjuReK5N4nnPiSe+5J47kfiuT+J5wEkno0kngeSeB5E4nkwiechJJ6HkngeRuJ5OInnESSeR5J4HkXieTSJ5zEknseSeB5H4nk8iecJJJ4nknieROJ5MonnKSSep5J4nkbieTqJ5xkknmeSeJ5F4nk2iec5afL0uzyjobJYLFUeSYWj4cpQJFmViIdi8aqyRDgRjifi1ZFENJpKxBLlyapkeSgZjkVT4Zp4Mlpjr7ubwZjPzVDMoeYN4fN85sqvi5/jeDyf5HtzAYnnhSSeF5F4XkzieQmJ56UknpeReF5O4nkFieeVJJ5XkXheTeJ5DYnntSSe15F4Xk/ieQOJ540knjeReN5M4nkLieetJJ63kXjeTuJ5B4nnnSSed5F43k3ieQ+J570knveReN5P4rmGxPMBEs8HSTwfIvF8mMTzERLPR0k8HyPxfJzE8wkSzydJPJ8i8XyaxPMZEs9nSTyfI/F8nsTzBRLPF0k8XyLxfJnE8xUSz1dJPF8j8XydxPMNEs83STzfIvF8m8TzHRLPd0k83yPxfJ/E8wMSzw9JPD8i8fyYxPMTEs9PSTw/I/H8nMTzCxLPL0k8vyLx/JrE8xsSz29JPL8j8fyexPMHEs8fSTx/IvH8mcRzLYnnLySev5J4/kbi+TuJ5x9p8vS7PJv7HnS2wZj/JIk5x2DMf5HEnGsw5r9JYs4zGPM6kpjzDcb8D0nMBQZjFjmGmAsNxuwjibnIYMx+kpiLDcacRRJzwGDM2SQxtzAYcw5JzCUGY84libnUYMx5JDG3NBhzPknMrQzGXEASc2uDMReSxLyVwZiLSGLe2mDMxSQxtzEYc4Ak5m0MxtyCJOZtDcZcQhLzdgZjLiWJua3BmFuSxNzOYMytSGJubzDm1iQxdzAY81YkMXc0GPPWJDF3MhhzG5KYgwZj3oYk5s4GY96WJObtDca8HUnMXQzG3JYk5q4GY25nMGa5Ly7PBKy1HwzoAXqCXqA36AP6gn6gPxgg2wRhEJFyATEQB2WgHCRAEgwEg8BgMAQMBcPschgORoCRYBQYDcaAsWAcGA8mgIlgEpgMpoCpYBqYDmaAmWAWmA3mgLlgHpgPFoAdwI5gJ7Az2AXsCipBFVgIqkEK1IBFYDGoBbuBJWApWAbqQD1YDnYHK8BK0ABWgdVgD7An2AvsDfYB+4L9wP7gANAIDgQHgYPBIeBQcBg4HBwBjgRHgaPBMeBYcBw4HpwATgQngZPBKeBUcBo4HZwBzgRngbPBOeBccB44H1wALgQXgYvBJeBScBm4HFwBrgRXgavBNeBacB24HtwAbgQ3gZvBLeBWcBu4HdwB7gR3gbvBPeBecB+4H6wBD4AHwUPgYfAIeBQ8Bh4HT4AnwVPgafAMeBY8B54HL4AXwUvgZfAKeBW8Bl4Hb4A3wVvgbfAOeBe8B94HH4APwUfgY/AJ+BR8Bj4HX4AvwVfga/AN+BZ8B74HP4AfwU/gZ7AW/AJ+Bb+B38Ef4E/wF/gbrAP/APnC+YAfZIFskANyQR7IBwWgEBSBYhAALUAJKAUtQSvQGmwFtgZtwDZgW7AdaAvagfagA+gIOoEg6Ay2B11AV9ANdAc9QE/QC/QGfUBf0A/0BwNACIRBBERBDMRBGSgHCZAEA8EgMBgMAUPBMLnXDoaDEWAkGAVGgzFgLBgHxoMJYCKYBCaDKWAqmAamgxlgJpgFZoM5YC6YB+aDBWAHsCPYCewMdgG7gkpQBRaCapACNWARWAxqwW5gCVgKloE6UA+Wg92B9Gkv/cVLX+zSz7n0IS79c0vf19KvtPTZLP0hS1/D0o+v9JEr/c82Auk3Vfoklf4+pS9N6adS+oCU/hWl70LpF1D63JP+7KSvOOmHTfo4k/7DpG8u6fdK+pSS/pqkLyTpZ0j68JH+caTvGenXRfpMkf5IpK8P6ftC+pWQfhYuANI/gLS9L+3aS5vx0h67tHUu7YhLG93S/rW0LS3tNkubyNLesLTlK+3kShu00r6rtJ0q7ZJKm5/Snqa0VSntQEobi9J+obQNKO3uSZt20l6ctMUm7ZytAdI+l7R9Je1KSZtN0h6StDUk7fhIGznS/oy07SLtpkibJNLeh7SlIe1USBsQ0r6CtF0g7QLIO/fyPru8Ky7vYcs7zvL+sLybK++9yjul8r6mvAsp7xnKO3zyfpy8eybvdck7U/I+krzrI+/RyDsq8v6HvFsh7y3IOwHyvL08yy7Picsz2PJ8szw7LM/lyjOv8vspz2rKc5DyjKE8vyfPxsmzYvLslDxLJM/WyLMmcnIhzyLIvXm5Vy33buVeptzbk3tdcu9H7oXIvQG5Vi7XjuVaqlxblGttcu1JrsXItQn5ry7/XeW/nPy3kXN9OfeVc0E5N5JzBf+GKseS33oZelhNg61jZdnp8syYPEMlzxTJMzbyzIk8gyHPJMg9erlnLfdw5Z6m3OOTe15yD0juicg9ArlmLteQ5ZqqXGOUa25yDUquycg1CvnPLv9h5T9dEHQGcg4s54RyjiT9vXS3Nh2ylelWynR7e1zZ0JBatrwh2FAfrKyuDu5R27A4WL86taJmab38JK8/h3GGrvZ4fN3qyqW11cHlq6qW1i4MLknttTK4uLauIVhTv0LWsiK1Ur7e62OToU5ZRwt7PLOhcuESbLU+WJ1KScWw/kxJhv5bzP3fk8zl9rjAHjvLZXWyYyrs+VDzhnCBsl7T60+E4v9dv5Ue/2iB1XTApqt8nHWmYf3rH9STYWRj0/rdscgQsOd9Slk6n5EvZRslnwyjlPX5XGmjNdty0sY06rctw1glLduVNk5Jy3GljVfScl1pE5S0PFfaRCUt35U2SUkrcKVNVtIKXWlTlLQiV9pUJa3YlTZNSXOWSSUwqnHjfOK5RPmsWsbO5y3bOY3HVcrn2p7l2pbl2n6hld7vkc+1PcfHXT7OtJR/R3t6Uaph2vr6eCKq4+F11dMqVzTUVi4d3lQdO8a6o9adrg7uPO587vwFmnSTtYGz7uz/sZSc/Dma/NmuPDKUWJsedTmZiS3s5eoVW64mf45HbGrcuZmJLeLl6hVbniZ/rkdsatx5Hp9T86l5fJqyUdN15equsdJUhlGvMvEqw3xN/jxNHCWacsrPTGwxL1ev2Ao0+fM9YlPjLshMbHEvV6/YCjX5CzxiU+Mu9Picmk/N49OUjZquK9cMHftlXmXiVYZFmvyFmjhKNOVUlJnYyr1cvWIr1uQv8ohNjbs4M7ElvFy9Ygto8hd7xKbGHfD4nJpPzePTlI2arivXDB37Sa8y8SrDFpr8AU0cJZpyapGZ2Cq9XL1iK9Hkb+ERmxp3SWZiq/Jy9YqtVJO/xCM2Ne5Sj8+p+dQ8Pk3ZqOm6cs3Qsb/Qq0y8yrClJn+pJo4STTk5n3X/O5XpbFea7lw64JpXfzsDrnm1Xg645tXvZMDa/HfUfeXD2Qdqmu7/TMA1L9N5rjTd+VLANa/WjwHXvPrdC1ib/y4WKevLbtw4jgp7eagZQ3liw39HGbLs9edYG//btlzbz3Hlr7fnW1n6QWJw7odzX5WMlWXqqmRWmtefnZ71a69KqrE4281y5dN9xuvKZTqv3mI/x9JcThFn/blpWr9Tblu6vuOum9XvvW8zY8vaeJ9arm0VWmk9hj2vB6n+zrFRam1anztl8P/cD2r5uK9uO3Wreow7admNm5a5k5bTuGmM8pvaVsmn+944+brZ03KF2rmibyllJUNe48afrbCXh5o5OMdSvr1+9XcoT3FxYvS78runc1zLuioxr49HyetsJ0tZ5mzT+S3OVdKcz3qtK1uzrlJN/lzXuvI061KXOXHLMdPOnpbfWNl/faymdW3uuNOdH+qugbqv6emuwOdo1lVsNZ3nLMc9yhmphlUr6laq1Yd79ZZmNeqmneWb+zlxfyZLya8ODKdTA+x5r9Op/wBDNv+ZrJYBAA==","debug_symbols":"7ZltT9swEID/Sz7zwXf2vZi/Mk1TgYIqVQVBmTQh/vsSht3i2o2OtRqazAfUtPfk4ufi5BK/DDfLq+e7H6vN7f3TcPntZVjfXy+2q/vNuPUygH/77ulhsZk2n7aLx+1wCRzdxbDc3IwfxbnXi+F2tV4OlwHGzwfRKCrv0agu5mhgqET7wPoe7SnATDSAiykcxj/M8R6pFq/KKTw62kWH6s4x5n2L7gd/vxggdDUtNdTVtNRwV9NSI3+vxscAabBRZDdY5bcUev4UsZYCUSmVzO+VrJ4CkFMK8HtSJ2djCnTnTwHnT4HnT+HPnyKcIIWXnCK48CFF5fwbp2g6/9Dz3vyU2r4dYz65HXs/N58DYj6WvavFJ+YzUlfTUsNdTUuNdDUtNdrVtNTErqahxruupqUGupqWGuxqWmp8V9NSE7qalpreDTfV9G64qaZ3w001vRtuqvn63TDJTo3AnJrTvWQMX78b/mdqTtINh5wh4JwaYJcPXngX7afXzl9KDXY1LTW+q2mpCadQ47GlZkpxgpU2Zk2DYNlPMS5oHEZTXh5ivxfr5O1wTrC6xUI+H47gzOH8l2th48bV42q9Xt39+LAa76Z/9UWN4JPioLtxRW6vURwlyEywmRAzoWai2ggRpSlFXBL1t2VHCTATaCaqNSdOpxsJlUQwE2Qm2ExUa0758kAxloSaiWgl6j3hUQKOE+ykJNBMeDNRrTmz5MsplwSZCTYTYiaqNWdNTfd4OymJaCXImQkwE9Wai0u3f4FQEt5MBDNBZoJnCMSSEDOhZqJac4mpHurKerAzE2Am0ExUa6555HpQDw5mgswEm4lqzTV3Oeq1JNRMRCshzkzADBHK65WgmfBmolrzCKlVjgfzQ8hMsJkQM1GtecR0N4i+vKtJtBLqzASYiWrNY+7hIpcjV28mgpkgM8EzhJTXKxUzoWaiWnNwIT9fOSpnSHSfYOATDFqZcQOm0HovK/m1r9DOw/sDdb2ZPYrUu9njCBiR13Hz5+JxtbhaL6cn0+nX5811elAdN7e/Hv78Mgb/Bg==","brillig_names":["get_public_keys_and_partial_address","pack_returns_oracle_wrapper"]},{"name":"set_tx_max_block_number","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"max_block_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"enqueue_public_call","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7dzBbuIwEAbgd8mZg8f2eGZ4ldWqgpZWkaJQAV1phfru69AmoVuX7GqXKr/UHtq4TPDvCfCJg3Os7jbrp4ebur3f7qvlt2PVbG9Xh3rb5tGxIj79b/+4arvh/rDaHaolJXOLatPe5UNx7nlR3dfNplpGysfvqr2ovFZ7dTZUU6JCdYhJX6sDR5qoJnLWl1P+8UN98FyqV019uTkeq2Pxyb0Nzy16Xvx9UVH6as1HrZGv1nzUGv331gSL1C/WRMbFajpNYVefwrvSFF5C31UvphNTCFFfLRTDOIWVLhlrnz7ReAFyaZeG/kcaDkOas+pyGlIOfX/ycdQ3DSq8mHOR78PkVxO9a6jHX0L49CUYxTi8L09v3d8ixbl3la3vqfDZZ1z+jOniM3b8hB1fsOMrdnyDjh8cdvzZi3o5/uw1vRw/YMfHVjdgqxuw1Q3Y6gZsdQO2uhFb3YitbsRWN2KrG7HVjdjqRmx1I7a6EVvdiK0uY6vL2OoytrqMrS5jq8vY6jK2uoytLmOry9jqJmx1E7a6CVvdhK1uwlY3YaubsNVN2OombHUTtrqCra5gqyvY6gq2uoKtrmCrK9jqCra6gq2uYKur2OoqtrqKra5iq6vY6iq2uoqtrmKrq9jqKra6hq2uYatr2OoatrqGra5hq2uzV3dyN5zNXt7pJcxe3+klzF7gySWQmz3Df7AG/B265LBBJoctMjlskvMf8PzYX4XJYX8XJnLXv3ME0ZXnyKP1rm6a+uHmzX1mXPervHkqL3xoIvmxhy/3fijvWLp8Tnmb0MQ59Lfn5AF1peU7fly41s95+GO1q1frZtM1p3v0qb3te5WHh5+PL4/k4l8=","brillig_names":["pack_arguments_oracle_wrapper","enqueue_public_function_call_internal"]},{"name":"create_l2_to_l1_message_public","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"7ZzNThtZEEbfpdcs+tb951VGo8gkJLJkmQickUaId09D6DbhoqpFNnWsbJANl1adQnCqbep7nL7c3vz49ml//Hr3MF3/8zgd7j7vTvu74/Ls8elqurnfHw77b5/efnqanz8EeTn/8H13fH76cNrdn6brlub5aro9fnl+GPpyha/7w+10ncL8dDWcDqXV9Xgo3Tzfe4ivx3uvsp2Okj+6epW2XrzK+drLw3+vphDh9Sd4/Rlef4HXX+H1N3j9nV2/zPD6A7x+uH8F7l+B+1fg/hW4fwXuX4H7V+D+jXD/Rrh/I9y/Ee7fCPdvhPs3+vdvm9N68Zbi+/r9+1ev379/9fr9+1etP/n3r16/f//q9fv3r16/f//q9fv3r16/f//q9cP9m+D+TXD/Jrh/M9y/Ge7fDPdvhvs3w/2b4f7NcP9muH8z3L8Z7t8C92+B+7fA/Vvg/i1w/xa4f7t7/8q81bI8DO/rd//3X+YiW/01v6s/zO4FICFsP4Ag8wDg3gAWgHsFWADuHWABuJeABeDeAhaAfw0YAO7vwywA9zdiFoB/E+sAgW7iQDex/2UYC4BuYv/rMBYA3cT+F2IsALqJ/a/EWAB0E/tfihFJG4D04abe/1aMxDmsADGkAcC/iQ0A/yY2APyb2ADwb2IDwL+JDQD/JjYA/JvYAPBvYh3A/3qMBUA3sf8FGQuAbmL/KzIWAN3E/pdkLAC6if2vyVgAdBP7X5SxAOgm9r8qYwHQTex/WcYCoJvY/7qMBUA3sf+FGQuAbmL/KzMWAMDEafufudhlAACYWAcAmFgHAJhYBwCYWAcAmFgHAJhYBwCYWAcAmFgF8L88YwHATDy80e1/fcYCgJl4BPjYxLGsE2CLLRoFLUPieV5MbTsd2kcFNTk3R1L67fRLRfCVklD8m2lOcQPII4B/MxkAgK0eFaD6N5MB4N9MBoB/MxkA/s1kACQ6gP97RAMAYGIdgG7iSjdxpZu40U3c6CZudBM3gIklnwF+e5lhPBwlrpeOUot+uNeyVr3cNJ3PflRFKf31bKn17dGXJqa/TfzzJgImEhdN7Gvkcn379tdrEwFTkY8m1rWJ0oYmAiYzD02seQ1fqUWGJgKmQ/9NBEyoLprYt1eE50EsHTAl+2ji+aXvMDQRMKl7aGKLq1ja+OvcAXcLzpo4zon9wu5YYl4Px9jfR5iFni6MNnWN9sLuAWIKGu2FDesG7YVN1QYtYPwN5+w+Gf59gxA+qAEIIHzQAACMXDoAYNzRAQCjhg6Q6ACAgUAHADheBwBoWweAm1gA4YM6ACB80ACgmxgQPmgA0E0MCB80AOgmBoQPGgB0EwPCBw0AuokB4YMGAN3EgPBBA4BuYkD4oAFANzEgfNAAoJsYED5oANBNDAgfNAAAJq5tA+htAACYWAcAmFgHAJhYBwCYWAcAmFgHAJhYBwCYWAcAmFgFAIQPGgB0EwPCBw0AuokB4YMGAN3EgPBBA4BuYkD4oAFANzEgfNAAoJsYED5oANBNDAgfNADoJgaEDxoAdBMDwgcNALqJAeGDBgDdxIDwQQOAbuJCN3Ghm5gQtqgD0E1MCFss53cpax4AACZWAQhhizoAwMQ6AMDEOgDAxDoAwMQ6AMDEOgDAxDoAwMQ6AN3EhLBFFYAQtqgD0E1MCFvUAegmJgQd6gB0ExMC/nQAuokJwXY6AN3EhEA3HYBuYkKQmQ5ANzEhF0wHoJuYkN6lA9BNTMjY0gHgJo6EjC0dAG7iSMjY0gHQJn5anv23u9/vbg63D8v3PH/xx/HzaX93fH16+v/7r68sh38C","brillig_names":["create_l2_to_l1_message_public"],"assert_messages":{"224":"Array index out of bounds","253":"Array index out of bounds","282":"Array index out of bounds","145":"Array index out of bounds","209":"Array index out of bounds","238":"attempt to multiply with overflow","136":"Array index out of bounds","264":"Array index out of bounds","290":"attempt to add with overflow","220":"attempt to add with overflow","249":"attempt to add with overflow","179":"Array index out of bounds","205":"attempt to multiply with overflow","260":"attempt to add with overflow","126":"Array index out of bounds","309":"Stack too deep","114":"Array index out of bounds","242":"Array index out of bounds","271":"Array index out of bounds","105":"Array index out of bounds","294":"Array index out of bounds","303":"attempt to add with overflow"}},{"name":"create_l2_to_l1_message_arbitrary_recipient_private","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"content","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZTPisMgEMbfxXMOjn9n8irLUkybFEFMSdKFJey7r9tN0pRaeiiFHurJ0Z/zOZ+DI9vV1XG/8bFpe1Z+jCy0Wzf4NqZoZCBPa/3Bxb+wH1w3sBIM8YLVcZemlvOfgjU+1KxUkOZXtLBoJ1ogp4UGAxlaKoMTLbWCOzQApxmHNMTCS6FzPKKZceL6TKtsckFLbotr+LNgoN7W3LJGv625ZY153BpJCuZiydpzsWhOEvb5EpiTQJRqOoSozR0JAGXlYpQifiGSaQhALeaOSC8CV5eil7tUiqrOh+D3m/W3mpa/XOddFeopbI5xu9odvg//OynFLw==","brillig_names":[]},{"name":"emit_array_as_encrypted_log","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"fields","type":{"kind":"array","length":5,"type":{"kind":"field"}},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nest","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_public_keys_and_partial_address","compute_raw_event_log_unconstrained","emit_encrypted_event_log_oracle_wrapper","pack_arguments_oracle_wrapper","call_private_function_internal","directive_invert","directive_integer_quotient"]},{"name":"call_create_note","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"H4sIAAAAAAAA/+ydC7xU0//3j3OvTqcIuYtIrs2emTMzRy65FqWQS1RyzsyZEELuIUQh91sIIYQQortKpVJ0V6lUKooQQqnkWYu9fk3TSpf5fJa1nv/Zr9d6zrT+nv1b38/3uz77+569zz47Zf1zxA/NyhpR8s/nncTI8X9mi1EnbU79TP2cp/nvqmnmqmvmamjmdtbM7S5Go7S5/TT/3f6auTqauQM0cwf7c6nHTv7PRv7PUCASDldEgxVeyCsLBEvLYyWBcEl5JObFvJJYSSIYC4UqYuFYtLS8NBoo9cKhCi9ZUhpKBv459s/eeK5ARkcwzlxnnR1fZ0n6hFxbLTFyU9Yqddjgf66XtfHzISmf6/j/jfr/d4D494Fi1BXjoOyN8+rISdMgkNnh1Qee64BsXG4OhtVQIMDU71DguQ4E6lcPqJ+utg9Ore2Uz3VTPh+UVtuHiH/XF+NQMQ7T1HY2ODcHZ+H0PBynp5fqx/K8dbaiQ6ZrPxR4riOAOshrarWsjb6eeuwEroUjwPtBHUdmExcsT44+71FAk2HFfVT2RoFB5w0wi+soYHHlpa2RuW7gxT9QPWWdDfz8Bfyfnv8z6P8M+T/D/s8S/2fE/xn1f8b8n6X+z6P9nw2zszbtar3szTv2sGYuqpk7OntzsdGd5jGwAgmFmes8dsfXmUif0HUNx6R0Bw1SPgdSPh+b1jUcJ/59vFyXGCcY6Ig94BXuOKDZnuhIRxwE6nc8UL+THNEvBNSvEVC/k8lEcWKKB5yU8vnklM8npHnDKeLfp4rRWIwmBrwhDMzNKcDcnOZIbZcA9TsVqN/pjugXAerXGKhfU7I3nJbiAaenfG6a8rlJmjc0E/8+Q4zmYrQw4A1RYG6aAXNzpiO1HQPqdwZQv7Mc0a8UqF9zoH5nk73hzBQPOCvl89kpn1ukeUNL8e9zxDhXjPMMeMPRwNy0BObmfHJuzk/JwTkpn89N+XxeWm5aiX9fIMaFYrTW5AbNvG1wGiSZ62y74+sMpU/octUmJSetUj43TPncNi1XF4l/txPjYjHKsvnf6NcH6nkRsPZNfml3CO5cm3xpV+4nK+7/TPg/K/yfSf9ne//nJf7PS/2fl/k/O/g/L/d/XuH/vDI7a9Mv3uT/QPqXcZdp5q5Imfu3L5TKUz7Hs7f8hVJH8e+rxLhajGsMmH8CaP4dgebfyZHGpgKo31VA/a51RL8kUL+rgfpdR24+OqV4wLUpn69L+XxNmjdcL/59gxg3inGTAW9oD8zN9cDc3OxIbV8C1O8GoH6dHdHvUqB+NwL1u4XsDTeneEDnlM+3pHy+Kc0bbhX/vk2MLmLcbsAbLgPm5lZgbu5wpLY7APW7DajfnY7odzlQvy5A/bqSveGOFA+4M+Vz15TPt6d5w13i33eL0U2M7ga84Qpgbu4C5uYecm7uScnB3Smfu6V87p6Wm3vFv+8To4cY9/u52doXIPemfL4ye8tfgDwg/v2gGA+J8XA2/wuQVPjPNFcPkHO1JR5P/Iuej4h/PyrGY2I87uuZl7XpFyupn5/I9v+D7Cwz377Uw51LPR319/Gk/4+e2WkBoJ2jHrCCntx254hv5VxeT2A1miyIR7I5BfGU/4+n2QXxCND+nwIWxNOOFsQTpIJ4xv9HL3ZBPAEsiGeABdHL0YIA/orIJgXxrP+P59gFgfz9gWeBBfEcuIGpIkZRio4b1xkORioi4bKKilCgorQ0FvdC8Vi8oiKeKAuVRaOxQDRRXlGWKAmWx4PJUHkyUFFWESvxysPlUS8Q9zaknc8T8ZZEygKRWDIi7s0FQ8FwIF4aKQ8nykrC0XAkIk4XKo9FPS9eEvTi0XAs6AXLvJLyeCAUriiLbMDmN5Be8MFYsCQeLY3HI2Ul8fLyiopkNBEpiyW98kiZFywPicWUhUKxcDhQVpGsKA+HSiNeOBaPiQxF44Fw6WbxitQmE56MrjwaiAQTkfISmfiKUKS8NBANRUIlgWQkWV4W8ILBWDwsQg4GSktLAqXJkqj4/p8db6AiUe5VBEtD8VC8otQrT4ogKsTHsrKSQCIYLwl7ybLShChAsS4RbiBUkSz34smyYLw8FCqJJjeLNxT2EpFoSbJMZLciXhESCRfVEYqXhcJCh1C5V1oeqSiNRoKBcCQq5sJCvmA4HhYqJypCJfR4w0LnkEiW2GoBsecS8ViwIlZWUlJWWhJMhBPJYCBYEklWBMReS5SGS8W0yEmZuL8dKCtPepuvrywmlYkEEgHx/yRLEjGxjcOliXAsKbZOOBEQ5REoL41VJKJetKy0vCQULEtGQmJnlIQC0VKPEW+hfy75+ckU4OiZ8vmplM9Pp3x+JuVzr5TPz6Z8fs7//Lz42VuMF7L/4RDpvepucOph80VFs9yMzx1KVERjwUipupHL1ALJZKw1IjGBtcYnsjk1hV7n846s8/Bs7h6Ff7t0OLDzfxEX/Ca/MCvPWydL/w1eSYpBR1I+R//lG6eXxL/7iPGyGK9k87/Bewmo8aupGkcCkUhpMhwQPWrSCwQDXri0tFxcYcu8ipK4FymNJSIVcfG/Ew/FSkrLxEU6ITq4Mi9WHg+ViEu1yV/GfRXcuKujbzZxwfLk6PO+BiwGVtyvZW8UGHTev/FbbrR0cmXE8FK23Z2SfwRTjed1X5g3/J/9/J9vptQg/AHT10iO3S97y8/vvZ7izG+kfO73L479lvj322L0F+Od7E3Phy6c17LxOt98MLYgGXXwFiHuzgdzNmIueJ1Aw/DeAp4LWDceMhcmOwdkS5263neziQt+l9A5vGd55yDjfo/QOWSTCwz5vUod/zwDxKLfF+MDMQaKMUiMwWIMEWOoGMPEGC7Gh2KMEGOkGKPE+EiM0WKMEWOsGB+LMU6M8WJMEOMTMSaKMUmMT8X4TIzJYkwRY6oY08SYnv2PSKkXZLmewqxN597XzH2gmRuomRukmRusmRuimRuqmRummRuumftQMzdCMzdSMzdKM/eRZm60Zm6MZm6sZu5jzdw4zdx4zdwEzdwnmrmJmrlJmrlPNXOfaeYma+amaOamauamaeamZ2/8LlYd6RfsQGYH9P7UAICvViTlEfDeB3r0bZY3TzJmmYsPIPr9k9eBmZ8rqO4VDgLmoovNuQhvvD86OLOYA6n3Wodkcq7gpvdthwJzcbuduQik36setoMxR5Kb3/cevmPniunuoX8IzMUdtuUipn9uYMT2xxzd0jMII7f3XNEtP88wCpiLO+3JRfDfnuH4aHtijv778yCjt/1cW322ZAwwF11tyEV0q+v0xm5bzIFtiNn7eFvOFdgm/bxxwFzc9d/momQb1+mN31rM4W2O2Zvwr+cKJ7dDP+8TYC7u/q9yEd2udXoTtxxzbDtj9iZt4Vylye3Wz/sUmItu5nMR2IF1ep/pYg7sUMze5M3P5e2gft4UYC66m8xFYofX6U3dNOZQBjF701LOFUxmpJ83HZiLewzlIpDZ4QG/H/CAfOul8lmmubjXkVwAOcgD9vFeV2Au7nMkF8B+zwP2K143YC56OJIL4HXNA/qydy8wF/eTcoH+nQ7g/vWA9eex9MtO0y/TPCN7jBnZqJhDRm/G49a96c34mdnEBcuTo8/7ObAYWHF/nr1RYNB5/y42+QtTKaemFdt0WLEleI/xeZs+oDDL/8fs7KxN74rOyt74SJyak/9R+p1StOsjXEvd3ZwFLPrZ4OQyNvisbPwjcbOy3bjaTQPmeg4s5kjY5NVuTjbnavdFNnHBXxCudnMtv9rJuOc6frWbBiu20rhmuZSr3Tz/H/PTr3bzNFe7+QaudgjXUle7ecCin09KLtr1kTF/iXNPLysLfyX+3DeNbHANItFgAbhbQJuWzPECQpdke9yqdtBxL3SkO0TW+CKyTwQyOzyZk0UEn1gA1PArB/bLV4T9shjcoateZXHKWllaoOtpEbCelpB0XZK9ObmhvWkqUIelMB3CFSbJdSk4f+r4Opu44K8J5PqN5eQq4/4me6PAoPMaJdepsGIrD2qWSyHXZf4/lqeT6zINuS43QK5TgeS6DFj0y0nJRbs+MuZvLe9Il/imkQPWcAlQQ6Txfmd5PmS9fEfoboFxU14boOoQ3ckia2eF5WQkNVxB0PA7oIbfgzVUB/oagPSvHyz3HJmTHwie8yOJ/H4kErXSAr2HkPW0kqTrSgNEjXzS/SeYDtGgSaL+CZw/dfycTVzwzwSi/sVyopZx/5K9UWDQeY0S9RRYscUqNMulEPUq/x+/phP1Kg1R/2qAqBGupYh6FbDofyUlF+36yJh/s7ybWumbBpqoVwI1RBrv75bnQ9bL74TuFhg3hahVHaI7WWTtrLacqKWGqwka/g7UcA1YQ3WgrwFI//rDcs+ROfmD4DlrSeS3lkjUSgv0HkLW0zqSrusMEPVkoA7rYTpUeCaJej04f+r4M5u44D8JRL3BcqKWcW/I3igw6LxGiXoyrNi8pGa5FKL+S/1DOZP6+ZeGqOUHNlEjXEsR9V/Ios/hJBft+siYd8qxu5ta55sGmqjXATVEGm+25fmQ9SLXiO5ugXFTiFrVIbqTRdZODlnDQGbH33tZrhGtYWrtZKphLlhDdaCvAUj/yrPcc2RO8giekw/MdWoPlZ/DI2qlBXoPIeupgKRrQQ6fqD8D6lAI0yFklKgLwflTR5Uc4oKr5ODPWxV4YWHFXTXlb2SCzmuUqD+DEXXcGFFX8zUvSifqajmbE3WRAaJGuJYi6mrAoi/K4SQX7frImKtb3k0V+KaBJuoCoIZI4y22PB+yXooJ3S0wbgpRqzpEd7LI2qlhOVFLDWsQNCwGaljTEaJG+tfOlnuOzMnOBM/ZhUR+uxCJWmmB3kPIeqpF0rWWAaJGvmt+V5gOZUbfd7krOH/q2C2HuODdCES9u+VELePe3XGi/hRG1BFj77us7Wu+RzpR19YQ9R4GiBrhWoqoawOLfo8cTnLRro+MeU/Lu6lavmmgiboWUEOk8e5leT5kvexF6G6BcVOIWtUhupNF1s7elhO11HBvgoZ7ATXcxxGiRvrXvpZ7jszJvgTP2Y9EfvsRiVppgd5DyHran6Tr/gaIehKQqOvAdAiWmiTqOuD8qeOAHOKCDyAQ9YGWE7WM+0DHiXoSjKgTUc1yKURd19f8oHSirqsh6oMMEDXCtRRR1wUW/UE5nOSiXR8Z88GWd1P7+6aBJur9gRoijbee5fmQ9VKP0N0C46YQtapDdCeLrJ1DLCdqqeEhBA3rATWs7whRI/3rUMs9R+bkUILnHEYiv8OIRK20QO8hZD0dTtL1cANEPRFI1EfAdCiPmSTqI8D5U8eROcQFH0kg6qMsJ2oZ91GOE/VEGFGHY5rlUoi6ga95IJ2oG2iIOmCAqBGupYi6AbDoAzmc5KJdHxmzZ3k3dbhvGmiiPhyoIdJ4g5bnQ9ZLkNDdAuOmELWqQ3Qni6ydkOVELTUMETQMAjUMO0LUSP8qsdxzZE5KCJ4TIZFfhEjUSgv0HkLWU5Ska9QAUX8CJOoYTIcSo099x8D5U0dpDnHBpQSiPtpyopZxH+04UX8CI+pyY099N/Q1PyadqBtqiPoYA0SNcC1F1A2BRX9MDie5aNdHxnys5d1U1DcNNFFHgRoijfc4y/Mh6+U4QncLjJtC1KoO0Z0ssnaOt5yopYbHEzQ8DqhhI0eIGulfJ1juOTInJxA850QS+Z1IJGqlBXoPIevpJJKuJxkg6glAoj4Zd4emxCRRnwzOnzpOySEu+BQCUZ9qOVHLuE91nKgn4Ii6XLNcClE39jVvkk7UjTVE3cQAUSNcSxF1Y2DRN8nhJBft+siYT7O8mzrJNw00UZ8E1BBpvKdbng9ZL6cTultg3BSiVnWI7mSRtdPUcqKWGjYlaHg6UMNmjhA10r/OsNxzZE7OIHhOcxL5NScStdICvYeQ9dSCpGsLA0Q9HkjUZ+L6yYhJoj4TnD91nJVDXPBZBKI+23KilnGf7ThRj4cRdbhMs1wKUbf0NT8nnahbaoj6HANEjXAtRdQtgUV/Tg4nuWjXR8Z8ruXdVAvfNNBE3QKoIdJ4z7M8H7JeziN0t8C4KUSt6hDdySJr53zLiVpqeD5Bw/OAGrZyhKiR/nWB5Z4jc3IBwXMuJJHfhUSiVlqg9xCynlqTdG1tgKjHAYm6DUyHmNG/ntUGnD91tM0hLrgtgagvspyoZdwXOU7U42BEHTX217Pa+ZpfnE7U7TREfbEBoka4liLqdsCivziHk1y06yNjLrO8m2rtmwaaqFsDNUQab7nl+ZD1Uk7oboFxU4ha1SG6k0XWTtxyopYaxgkalgM1TDhC1Ej/qrDcc2ROKgiekySRX5JI1EoL9B5C1lN7kq7tDRD1x0CivsRRor4EnD91XJpDXPClBKK+zHKilnFf5jhRf+wgUXfwNb88nag7aIj6cgNEjXAtRdQdgEV/uSNEjYz5Csu7qfa+aaCJuj1QQ6TxXml5PmS9XEnoboFxU4ha1SG6k0XWTkfLiVpq2JGg4ZVADa9yhKiR/nW15Z4jc3I1wXOuIZHfNUSiVlqg9xCynjqRdO1kgKjHAon6WpgOJUbf9X0tOH/quC6HuODrCER9veVELeO+3nGiHgsj6jJj7/q+wdf8xnSivkFD1DcaIGqEaymivgFY9DfmcJKLdn1kzDdZ3k118k0DTdSdgBoijfdmy/Mh6+VmQncLjJtC1KoO0Z0ssnY6W07UUsPOBA1vBmp4iyNEjfSvWy33HJmTWwmecxuJ/G4jErXSAr2HkPXUhaRrFwNEPQZI1LfjiDphkqhvB+dPHXfkEBd8B4Go77ScqGXcdzpO1GNwRB3SLJdC1F19ze9KJ+quGqK+ywBRI1xLEXVXYNHflcNJLtr1kTHfbXk31cU3DTRRdwFqiDTebpbnQ9ZLN0J3C4ybQtSqDtGdLLJ2ultO1FLD7gQNuwE1vMcRokb6172We47Myb0Ez7mPRH73EYlaaYHeQ8h66kHStYcBoh4NJOr7YToEjd6jvh+cP3U8kENc8AMEon7QcqKWcT/oOFGPhhF1wtg96od8zR9OJ+qHNET9sAGiRriWIuqHgEX/cA4nuWjXR8b8iOXdVA/fNNBE3QOoIdJ4H7U8H7JeHiV0t8C4KUSt6hDdySJr5zHLiVpq+BhBw0eBGj7uCFEj/esJyz1H5uQJguc8SSK/J4lErbRA7yFkPfUk6drTAFF/BCTqp2A6hEImifopcP7U8XQOccFPE4j6GcuJWsb9jONE/RGMqOMJzXIpRN3L1/zZdKLupSHqZw0QNcK1FFH3Ahb9szmc5KJdHxnzc5Z3Uz1900ATdU+ghkjjfd7yfMh6eZ7Q3QLjphC1qkN0J4usnd6WE7XUsDdBw+eBGr7gCFEj/etFyz1H5uRFgue8RCK/l4hErbRA7yFkPfUh6drHAFGPAhL1yzAdKozeo34ZnD91vJJDXPArBKJ+1XKilnG/6jhRj4IRtWfsHnVfX/PX0om6r4aoXzNA1AjXUkTdF1j0r+Vwkot2fWTMr1veTfXxTQNN1H2AGiKN9w3L8yHr5Q1CdwuMm0LUqg7RnSyydvpZTtRSw34EDd8AavimI0SN9K+3LPccmZO3CJ7zNon83iYStdICvYeQ9dSfpGt/A0Q9EkjU78B0CBsl6nfA+VPHuznEBb9LIOr3LCdqGfd7jhP1SBhRlxsj6gG+5u+nE/UADVG/b4CoEa6liHoAsOjfz+EkF+36yJg/sLyb6u+bBpqo+wM1RBrvQMvzIetlIKG7BcZNIWpVh+hOFlk7gywnaqnhIIKGA4EaDnaEqJH+NcRyz5E5GULwnKEk8htKJGqlBXoPIetpGEnXYQaIegSQqIfDdIiWmiTq4eD8qePDHOKCPyQQ9QjLiVrGPcJxoh4BI+pYVLNcClGP9DUflU7UIzVEPcoAUSNcSxH1SGDRj8rhJBf+PSow5o8s76aG+aaBJuphQA2Rxjva8nzIehlN6G6BcVOIWtUhupNF1s4Yy4laajiGoOFooIZjHSFqpH99bLnnyJx8TPCccSTyG0ckaqUFeg8h62k8SdfxBoj6QyBRT8DdoTFK1BPA+VPHJznEBX9CIOqJlhO1jHui40T9IYyow8aIepKv+afpRD1JQ9SfGiBqhGspop4ELPpPczjJRbs+MubPLO+mxvumgSbq8UANkcY72fJ8yHqZTOhugXFTiFrVIbqTRdbOFMuJWmo4haDhZKCGUx0haqR/TbPcc2ROphE8ZzqJ/KYTiVppgd5DyHqaQdJ1hgGiHg4k6pm4e9QBk0Q9E5w/dXyeQ1zw5wSinmU5Ucu4ZzlO1MNhRF0a0CyXQtSzfc3npBP1bA1RzzFA1AjXUkQ9G1j0c3I4yUW7PjLmLyzvpmb4poEm6hlADZHGO9fyfMh6mUvoboFxU4ha1SG6k0XWzjzLiVpqOI+g4VyghvMdIWqkf31puefInHxJ8JwFJPJbQCRqpQV6DyHraSFJ14UGiHoYkKgX4fpJzyRRLwLnTx1f5RAX/BWBqBdbTtQy7sWOE/UwGFFHkprlUoh6ia/50nSiXqIh6qUGiBrhWoqolwCLfmkOJ7lo10fG/LXl3dRC3zTQRL0QqCHSeL+xPB+yXr4hdLfAuClEreoQ3ckia2eZ5UQtNVxG0PAboIbLHSFqpH99a7nnyJx8S/Cc70jk9x2RqJUW6D2ErKcVJF1XGCDqoUCi/h6mQ9joX8/6Hpw/dfyQQ1zwDwSi/tFyopZx/+g4UQ+FEXW5sb+etdLX/Kd0ol6pIeqfDBA1wrUUUa8EFv1POZzkol0fGfPPlndTK3zTQBP1CqCGSOP9xfJ8yHr5hdDdAuOmELWqQ3Qni6ydVZYTtdRwFUHDX4Aa/uoIUSP96zfLPUfm5DeC5/xOIr/fiUSttEDvIWQ9rSbputoAUQ8BEvUamA4VRu9RrwHnTx1/5BAX/AeBqNdaTtQy7rWOE/UQGFF7xu5Rr/M1X59O1Os0RL3eAFEjXEsR9Tpg0a/P4SQX7frImP+0vJta7ZsGmqhXAzVEGu8Gy/Mh62UDobsFxk0halWH6E4WWTt/WU7UUsO/CBpuQDY+uW4QNdK/dsq123NkTuQa0Xs6G5jr1B4qO5dH1EoL9B5C1lMOSdecXD5RDwYSdS5Mh2SJSaLOBedPHXm5xAXn5eLPm59rN1HLuPNzNwoMOq9Roh4MI+pAuWa5FKIu8DUvzM3alJ4LcjcnavkfsYka4VqKqAuARV+Yy0ku2vWRMVexvJvK8U0DTdQ5QA2RxlvV8nzIeqlK6G6rgkkGvT5Vh+hOFlk71cgaBjI7/t7L1QgaVgVqWOQIUSP9q7rlniNzUp3gOcUk8ismErXSAr2HkPVUg6RrDQNEPQhI1DVhOpQafeq7Jjh/6tg5l7jgnQlEvYvlRC3j3sVxoh4EI+pIQrNcClHX8jXfNZ2oa2mIelcDRI1wLUXUtYBFv2suJ7lo10fGvJvl3VQN3zTQRF0DqCHSeHe3PB+yXnYndLfAuClEreoQ3ckia6e25UQtNaxN0HB3oIZ7OELUSP/a03LPkTnZk+A5e5HIby8iUSst0HsIWU97k3Td2wBRDwQS9T64e9RG3/W9Dzh/6tg3l7jgfQlEvZ/lRC3j3s9xoh4II2rP2Lu+9/c1r5NO1PtriLqOAaJGuJYi6v2BRV8nl5NctOsjYz7A8m5qb9800ES9N1BDpPEeaHk+ZL0cSOhugXFTiFrVIbqTRdZOXcuJWmpYl6DhgUAND3KEqJH+dbDlniNzcjDBc+qRyK8ekaiVFug9hKynQ0i6HuLrapIuP8jGxqKO+rnEBdcn0OWhltOljPtQAl3q1orYIIcSNjFw49HzbauGyLgPc6SZOAQY8+GWNxMy1sMIzcQRljffMi9HkD0nUw2PJDUOR/4HjcP7pMbhqFzigo8iNA4NLG8cZNwNHGkcZCE3IGxi4Maj59tWDZFxBxxpHI4ExuxZ3jjIWAOExiFoeeMg8xIke06mGoZIjUPIwD38AcB7+GHgHjLZLIVzOc1SSS5xwSWEZiliebMk444YapYCmR1eyF8r+tZhCJgjZL6jll9ApdFFCRfQmOUXUBlzjBB3KemiV6p5BAStCTtniD0eITQ9yP1+tOV1LzU8mqBhFKhhQ0dAC3nNOcby64TMyTEEvzyW5JfHEm/3Ki3QewhZT8eR9hBay+OAMWdnbXqg11oPd65AHf88x8v4xThBjBPFOEmMk8U4RYxTxWgsRhMxThPjdDGaitFMjDPEaC5GCzHOFOMsMc4Wo6UY54hxrhjniXG+GK3EuECMC8VoLUYbMdqKcVHuPyKl7pvj/T4jda6RZu4EzdyJmrmTNHMna+ZO0cydqplrrJlropk7TTN3umauqWaumWbuDM1cc81cC83cmZq5szRzZ2vmWmrmztHMnauZO08zd75mrpVm7gLN3IWaudaauTaaubaauYs0Pa3C2Eb+z0BmxyZ7NlN/+XuvZngu9Yh0I6DvPXswx+vTc5FJzDIXJ0D0+yevJ2Z+rqCvn3cSMBfP2ZyL8P/W6Z2cWcyBlJi9UzI5V3AT/bxTgbl43s5cBNLW6TXewZgjyc1i9prs2LliGv2804C56G1bLmLadXqnb3/M0S3E7DXd3nNFt6if1wyYixfsyUXwX9bpnbE9MUf/NWav+bafK74V/bwWwFy8aEMuoltdp3fmtsUc2IaYvbO25VyBbdLPOxuYi5f+21yUbOM6vZZbizm8zTF75/zrucLJ7dDPOxeYiz7/VS6i27VO77wtxxzbzpi987dwrtLkduvntQLm4mXzuQjswDq9C3QxB3YoZu/Czc/l7aB+XmtgLl4xmYvEDq/Ta7NpzKEMYvbappwrmMxIP+8iYC5eNZSLQGaHB/x+wAPyrZfKZ5nmoq8juQBykAfs470Xgbl4zZFcAPs9D9iveC8Dc/G6I7kAXtc8oC97fYG5eIOUC/SrQID71wPWn8fSD/1cALLHaAe7jxsy+gIo3Lo3fXj04lzigi/OxZ+3DFgMrLjLcjcKDDqv0RdAXQQrtoSxF0CV+5rH/Zvw/7srWu4XYepcPJf/AiiEa6m7m+XAoo+Dk8vY4OW5+CejynPduNq1BeY6AYs5EjZ5tUuQrnYVucQFVxCudknLr3Yy7qTjV7u2sGIrjWuWS7natfc1vyT9atdec7W7xMDVri3watceWPSXkJKLdn1kzJfi3FP77HOm6yvzTSMbXININLgM3C2gTUvm+DJCl2R73Kp20HF3cKQ7RNb45WSfCGR2eDInlxN84jKghlc4sF+uIOyXK8EduupVrkxZK0sLdD1dDqynjiRdO+byf8m/DVCHq2A6hCtMkutV4Pyp4+pc4oKvJpDrNZaTq4z7GsfJtQ2s2MqDmuVSyLWTr/m16eTaSUOu1xogV4RrKXLtBCz6a0nJRbs+MubrLO9IO/qmgX7bRkeghkjjvd7yfMh6uZ7Q3QLjpry5QdUhupNF1s4NlpOR1PAGgobXAzW80ZFvJZD+dZPlniNzchPBc24mkd/NRKJWWqD3ELKeOpN07WyAqJFPut8C0yEaNEnUt4Dzp45bc4kLvpVA1LdZTtQy7tscJ+rWsGKLVWiWSyHqLr7mt6cTdRcNUd9ugKgRrqWIuguw6G8nJRft+siY77C8m+rsmwaaqDsDNUQa752W50PWy52E7hYYN4WoVR2iO1lk7XS1nKilhl0JGt4J1PAuR4ga6V93W+45Mid3EzynG4n8uhGJWmmB3kPIeupO0rW7AaK+EKjDPTAdKoy+iP4ecP7UcW8uccH3Eoj6PsuJWsZ9n+NEfSGs2LykZrkUou7ha35/OlH30BD1/QaIGuFaiqh7AIv+flJy0a6PjPkBy7up7r5poIm6O1BDpPE+aHk+ZL08SOhugXFTiFrVIbqTRdbOQ5YTtdTwIYKGDwI1fNgRokb61yOWe47MySMEz3mURH6PEolaaYHeQ8h6eoyk62MGiPoCoA6Pw3QIGSXqx8H5U8cTucQFP0Eg6ictJ2oZ95OOE/UFsGKLGyPqnr7mT6UTdU8NUT9lgKgRrqWIuiew6J8iJRft+siYn7a8m3rMNw00UT8G1BBpvM9Yng9ZL88Qultg3BSiVnWI7mSRtdPLcqKWGvYiaPgMUMNnHSFqpH89Z7nnyJw8R/Cc50nk9zyRqJUW6D2ErKfeJF17GyBq5LvmX4DpUGb0fZcvgPOnjhdziQt+kUDUL1lO1DLulxwn6lawYosYe99lH1/zl9OJuo+GqF82QNQI11JE3QdY9C+Tkot2fWTMr1jeTfX2TQNN1L2BGiKN91XL8yHr5VVCdwuMm0LUqg7RnSyydvpaTtRSw74EDV8FaviaI0SN9K/XLfccmZPXCZ7zBon83iAStdICvYeQ9dSPpGs/A0R9PlCHN2E6BEtNEvWb4Pyp461c4oLfIhD125YTtYz7bceJ+nxYsSWimuVSiLq/r/k76UTdX0PU7xggaoRrKaLuDyz6d0jJRbs+MuZ3Le+m+vmmgSbqfkANkcb7nuX5kPXyHqG7BcZNIWpVh+hOFlk7AywnaqnhAIKG7wE1fN8Rokb61weWe47MyQcEzxlIIr+BRKJWWqD3ELKeBpF0HWSAqM8D6jAYpkN5zCRRDwbnTx1DcokLHkIg6qGWE7WMe6jjRH0erNjCMc1yKUQ9zNd8eDpRD9MQ9XADRI1wLUXUw4BFP5yUXLTrI2P+0PJuapBvGmiiHgTUEGm8IyzPh6yXEYTuFhg3hahVHaI7WWTtjLScqKWGIwkajgBqOMoRokb610eWe47MyUcEzxlNIr/RRKJWWqD3ELKexpB0HWOAqM8F6jAWpkOJ0ae+x4Lzp46Pc4kL/phA1OMsJ2oZ9zjHifpc3NdOxp76Hu9rPiGdqMdriHqCAaJGuJYi6vHAop9ASi7a9ZExf2J5NzXGNw00UY8Baog03omW50PWy0RCdwuMm0LUqg7RnSyydiZZTtRSw0kEDScCNfzUEaJG+tdnlnuOzMlnBM+ZTCK/yUSiVlqg9xCynqaQdJ1igKjPAeowFXeHpsQkUU8F508d03KJC55GIOrplhO1jHu640R9Dg66yjXLpRD1DF/zmelEPUND1DMNEDXCtRRRzwAW/UxSctGuj4z5c8u7qSm+aaCJegpQQ6TxzrI8H7JeZhG6W2DcFKJWdYjuZJG1M9tyopYaziZoOAuo4RxHiBrpX19Y7jkyJ18QPGcuifzmEolaaYHeQ8h6mkfSdZ4Bom4J1GE+rp+MmCTq+eD8qePLXOKCvyQQ9QLLiVrGvcBxom6J+9qpTLNcClEv9DVflE7UCzVEvcgAUSNcSxH1QmDRLyIlF+36yJi/srybmuebBpqo5wE1RBrvYsvzIetlMaG7BcZNIWpVh+hOFlk7SywnaqnhEoKGi4EaLnWEqJH+9bXlniNz8jXBc74hkd83RKJWWqD3ELKelpF0XWaAqM8G6rAcpkPM6F/PWg7Onzq+zSUu+FsCUX9nOVHLuL9znKjPhhVb1Nhfz1rha/59OlGv0BD19waIGuFaiqhXAIv+e1Jy0a6PjPkHy7upZb5poIl6GVBDpPH+aHk+ZL38SOhugXFTiFrVIbqTRdbOSsuJWmq4kqDhj0ANf3KEqJH+9bPlniNz8jPBc34hkd8vRKJWWqD3ELKeVpF0XWWAqM8C6vCro0T9Kzh/6vgtl7jg3whE/bvlRC3j/t1xoj7LQaJe7Wu+Jp2oV2uIeo0Boka4liLq1cCiX+MIUSNj/sPybmqVbxpool4F1BBpvGstz4esl7WE7hYYN4WoVR2iO1lk7ayznKilhusIGq4FarjeEaJG+teflnuOzMmfBM/ZQCK/DUSiVlqg9xCynv4i6fqXAaI+EwlReSgdSoy+6xu37k2Jeqc84oLlydHnzc6zm6hl3Nl5GwUGndcoUZ8JM4syY+/6zvE1z83L2pSec/I2J2r5H7GJGuFaiqhzgEWfm8dJLtr1kTHn5QE3eBZ+w8mrqDQNNFH/BbxyIo033/J8yHrJz8N3t8C4KUSt6hDdySJrp4CsYSCz4++9XEDQMB+oYSFYQ3WgrwFI/6piuefInFQheE5VMDmoHqpqHo+olRboPYSsp2okXavl8Ym6BVCHIhxRJ0wSdRE4f+qonkdccHUCURdbTtQy7mLHiboFjqhDmuVSiLqGr3nNdKKuoSHqmgaIugWQqGsAi75mHie5aNdHxryz5d1UNd800ERdDagh0nh3sTwfsl52IXS3wLgpRK3qEN3JImunluVELTWsRdBwF6CGuzpC1Ej/2s1yz5E52Y3gObuTyG93IlErLdB7CFlPtUm61jZA1M2BRL0HTIeg0XvUe4Dzp44984gL3pNA1HtZTtQy7r0cJ+rmMKJOGLtHvbev+T7pRL23hqj3MUDUzYFEvTew6PfJ4yQX7frImPe1vJuq7ZsGmqhrAzVEGu9+ludD1st+hO4WGDeFqFUdojtZZO3sbzlRSw33J2i4H1DDOo4QNdK/DrDcc2RODiB4zoEk8juQSNRKC/QeQtZTXZKudQ0Q9RlAoj4IpkMoZJKoDwLnTx0H5xEXfDCBqOtZTtQy7nqOE/UZMKKOJzTLpRD1Ib7m9dOJ+hANUdc3QNRnAIn6EGDR18/jJBft+siYD7W8m6rrmwaaqOsCNUQa72GW50PWy2GE7hYYN4WoVR2iO1lk7RxuOVFLDQ8naHgYUMMjHCFqpH8dabnnyJwcSfCco0jkdxSRqJUW6D2ErKcGJF0bGCDqZkCiDsB0qDB6jzoAzp86vDzigj0CUQctJ2oZd9Bxom4GI2rP2D3qkK95OJ2oQxqiDhsg6mZAog4Biz6cx0ku2vWRMZdY3k018E0DTdQNgBoijTdieT5kvUQI3S0wbgpRqzpEd7LI2olaTtRSwyhBwwhQw5gjRI30r1LLPUfmpJTgOUeTyO9oIlErLdB7CFlPDUm6NjRA1E2BRH0MTIewUaI+Bpw/dRybR1zwsQSiPs5yopZxH+c4UTeFEXW5MaI+3te8UTpRH68h6kYGiLopkKiPBxZ9ozxOctGuj4z5BMu7qYa+aaCJuiFQQ6Txnmh5PmS9nEjoboFxU4ha1SG6k0XWzkmWE7XU8CSChicCNTzZEaJG+tcplnuOzMkpBM85lUR+pxKJWmmB3kPIempM0rWxAaI+HUjUTWA6REtNEnUTcP7UcVoeccGnEYj6dMuJWsZ9uuNEfTruT8xFNculEHVTX/Nm6UTdVEPUzQwQ9elAom4KLPpmeZzkwr9HBcZ8huXdVGPfNNBE3RioIdJ4m1ueD1kvzQndLTBuClGrOkR3ssjaaWE5UUsNWxA0bA7U8ExHiBrpX2dZ7jkyJ2cRPOdsEvmdTSRqpQV6DyHrqSVJ15YGiPo0IFGfg7tDY5SozwHnTx3n5hEXfC6BqM+znKhl3Oc5TtSnwYg6bIyoz/c1b5VO1OdriLqVAaI+DUjU5wOLvlUeJ7lo10fGfIHl3VRL3zTQRN0SqCHSeC+0PB+yXi4kdLfAuClEreoQ3ckia6e15UQtNWxN0PBCoIZtHCFqpH+1tdxzZE7aEjznIhL5XUQkaqUFeg8h66kdSdd2Boi6CZCoL8bdow6YJOqLwflTR1keccFlBKIut5yoZdzljhN1ExhRlwY0y6UQddzXPJFO1HENUScMEHUTIFHHgUWfyOMkF+36yJgrLO+m2vmmgSbqdkANkcabtDwfsl6ShO4WGDeFqFUdojtZZO20t5yopYbtCRomgRpe4ghRI/3rUss9R+bkUoLnXEYiv8uIRK20QO8hZD11IOnawQBRNwYS9eW4ftIzSdSXg/OnjivyiAu+gkDUV1pO1DLuKx0n6sYwoo4kNculEHVHX/Or0om6o4aorzJA1I2BRN0RWPRX5XGSi3Z9ZMxXW95NdfBNA03UHYAaIo33GsvzIevlGkJ3C4ybQtSqDtGdLLJ2OllO1FLDTgQNrwFqeK0jRI30r+ss9xyZk+sInnM9ifyuJxK10gK9h5D1dANJ1xsMEPWpQKK+EffMo9G/nnUjOH/quCmPuOCbCER9s+VELeO+2XGiPhX3ZjJjfz2rs6/5LelE3VlD1LcYIOpTgUTdGVj0t+Rxkot2fWTMt1reTd3gmwaaqG8Aaog03tssz4esl9sI3S0wbgpRqzpEd7LI2uliOVFLDbsQNLwNqOHtjhA10r/usNxzZE7uIHjOnSTyu5NI1EoL9B5C1lNXkq5dDRD1KUCivgumQ4XRe9R3gfOnjrvziAu+m0DU3Swnahl3N8eJ+hTcX88ydo+6u6/5PelE3V1D1PcYIOpTgETdHVj09+Rxkot2fWTM91reTXX1TQNN1F2BGiKN9z7L8yHr5T5CdwuMm0LUqg7RnSyydnpYTtRSwx4EDe8Dani/I0SN9K8HLPccmZMHCJ7zIIn8HiQStdICvYeQ9fQQSdeHDBD1yUCifhimQ7LEJFE/DM6fOh7JIy74EQJRP2o5Ucu4H3WcqE+GEXWgXLNcClE/5mv+eDpRP6Yh6scNEPXJQKJ+DFj0j+dxkot2fWTMT1jeTT3kmwaaqB8Caog03ictz4eslycJ3S0wbgpRqzpEd7LI2ulpOVFLDXsSNHwSqOFTjhA10r+ettxzZE6eJnjOMyTye4ZI1EoL9B5C1lMvkq69DBD1SUCifhamQ6nRp76fBedPHc/lERf8HIGon7ecqGXczztO1Cfhfo/a2FPfvX3NX0gn6t4aon7BAFGfBCTq3sCifyGPk1y06yNjftHybqqXbxpoou4F1BBpvC9Zng9ZLy8Rultg3BSiVnWI7mSRtdPHcqKWGvYhaPgSUMOXHSFqpH+9YrnnyJy8QvCcV0nk9yqRqJUW6D2ErKe+JF37GiDqE4FE/RruHrXRd32/Bs6fOl7PIy74dQJRv2E5Ucu433CcqE/EPfVt7F3f/XzN30wn6n4aon7TAFGfCCTqfsCifzOPk1y06yNjfsvybqqvbxpoou4L1BBpvG9bng9ZL28Tultg3BSiVnWI7mSRtdPfcqKWGvYnaPg2UMN3HCFqpH+9a7nnyJy8S/Cc90jk9x6RqJUW6D2ErKcBJF0H+LqapMsTcrGxqOP9POKC3yfQ5QeW06WM+wMCXerWitggHxA2MXDj0fNtq4bIuAc60kwMAMY8yPJmQsY6kNBMDLa8+ZZ5GUz2nEw1HEJqHIb8B41DI1LjMDSPuOChhMZhmOWNg4x7mCONgyzkYYRNDNx49HzbqiEy7uGONA5DgDF/aHnjIGMdTmgcRljeOMi8jCB7TqYajiQ1DiMN3MM/HngPfxRwD5lslkblcZqlj/KIC/6I0CyNtrxZknGPNtQsBTI7vJH+WtG3DkcCc4TM9xjLL6DS6MYQLqBjLb+AypjHEuL+mHTR+1jzCAhaE3bOEHt8NKHpQe73cZbXvdRwHEHDMUANxzsCWshrzgTLrxMyJxMIfvkJyS8/Id7uVVqg9xCyniaS9hBay4nAmLOzNj3Qa30kG6dpHf88k0T8n4rxmRiTxZgixlQxpokxXYwZYswU43MxZokxW4w5Ynwhxlwx5okxX4wvxVggxkIxFonxlRiLxVgixlIxvhbjGzGWibFcjG/F+C7vH5FS980kv89InftUM/eZZm6yZm6KZm6qZm6aZm66Zm6GZm6mZu5zzdwszdxszdwczdwXmrm5mrl5mrn5mrkvNXMLNHMLNXOLNHNfaeYWa+aWaOaWaua+1sx9o5lbpplbrpn7VjP3naanzfV/NvJ/BjI7NtmzmfrLJIBXqUekPwX63tCDOV6fnotMYpa5+Ayi3z95nZz5uYK+ft4UYC6G2ZyL8P/W6U3NLOZASszetEzOFdxEP286MBfD7cxFIG2d3owdjDmS3Cxmb+aOnSum0c/7HJiLD23LRUy7Tm/W9scc3ULM3uztPVd0i/p5c4C5GGFPLoL/sk7vi+2JOfqvMXtzt/1c8a3o580D5mKkDbmIbnWd3vxtizmwDTF7X27LuQLbpJ+3AJiLUf9tLkq2cZ3ewq3FHN7mmL1F/3qucHI79PO+Aubio/8qF9HtWqe3eMsxx7YzZm/JFs5Vmtxu/bylwFyMNp+LwA6s0/taF3Ngh2L2vtn8XN4O6uctA+ZijMlcJHZ4nd7yTWMOZRCz923KuYLJjPTzvgPmYqyhXAQyOzzg9wMekG+9VD7L+L6rI7kAcpAH7OO9kcBcjHMkF8B+zwP2K95oYC7GO5IL4HXNA/qy9zEwFxNIuUC/CgS4fz1g/Xks/dDPBSB7jBV5qJhDRl8AhVv3pg+Pfp9HXLA8Ofq8PwCLgRX3D3kbBQad1+gLoL6DFVvC2AugfvQ1X+nfhP/fXdEf/SJMnVuZx38BFMK11N3NH4FFvxKcXMYG/zEP/2TUj3luXO2+Beb6J1jMkbDJq91PpKvdz3nEBf9MuNr9YvnVTsb9i+NXu29hxVYa1yyXcrVb5Wv+a/rVbpXmavergavdt8Cr3Spg0f9KSi7a9ZEx/4ZzT+2zz5mu7wffNLLBNYhEg9/B3QLatGSOfyd0SbbHrWoHHfdqR7pDZI2vIftEILPDkzlZQ/CJ34Ea/uHAfvmDsF/Wgjt01ausTVkrSwt0Pa0B1tM6kq7r8vi/5L8cqMN6mA7hCpPkuh6cP3X8mUdc8J8Ect1gObnKuDc4Tq7LYcVWHtQsl0KufynN87M2pdS/NOQq/yM2uSJcS5HrX8iiz+ckF+36yJh3ysflNSsLv+HW+aaBftvGOqCGSOPNtjwfsl7kGtHdLTBuypsbVB2iO1lk7eSQNQxkdvy9l+Ua0Rqm1k6mGuaCNVQH+hqA9K88yz1H5iSP4Dn5wFyn9lD5+TyiVlqg9xCyngpIuhbk84ka+aR7IUyHaNAkUReC86eOKvnEBVfJx5+3KvDCwoq7av5GgUHnNUrUy2BEHavQLJdC1NV8zYvSibpa/uZEXWSAqJcBiboasOiL8jnJRbs+MubqlndTBb5poIm6AKgh0niLLc+HrJdiQndbDCYZ9PpUHaI7WWTt1LCcqKWGNQgaFgM1rOkIUSP9a2fLPUfmZGeC5+xCIr9diESttEDvIWQ91SLpWssAUX8DJOpdYTpUGH0R/a7g/Kljt3zigncjEPXulhO1jHt3x4n6GxhRe0nNcilEXdvXfI90oq6tIeo9DBD1N0Cirg0s+j3yOclFuz4y5j0t76Zq+aaBJupaQA2RxruX5fmQ9bIXobsFxk0halWH6E4WWTt7W07UUsO9CRruBdRwH0eIGulf+1ruOTIn+xI8Zz8S+e1HJGqlBXoPIetpf5Ku+xsg6q+BRF0HpkPIKFHXAedPHQfkExd8AIGoD7ScqGXcBzpO1F/DiDpujKjr+poflE7UdTVEfZABov4aSNR1gUV/UD4nuWjXR8Z8sOXd1P6+aaCJen+ghkjjrWd5PmS91CN0t8C4KUSt6hDdySJr5xDLiVpqeAhBw3pADes7QtRI/zrUcs+ROTmU4DmHkcjvMCJRKy3QewhZT4eTdD3cAFEj3zV/BEyHMqPvuzwCnD91HJlPXPCRBKI+ynKilnEf5ThRL8W9Js/Y+y4b+JoH0om6gYaoAwaIeimQqBsAiz6Qz0ku2vWRMXuWd1OH+6aBJurDgRoijTdoeT5kvQQJ3S0wbgpRqzpEd7LI2glZTtRSwxBBwyBQw7AjRI30rxLLPUfmpITgORES+UWIRK20QO8hZD1FSbpGDRD1EiBRx2A6BEtNEnUMnD91lOYTF1xKIOqjLSdqGffRjhP1EtwfGYhqlksh6oa+5sekE3VDDVEfY4ColwCJuiGw6I/J5yQX7frImI+1vJuK+qaBJuooUEOk8R5neT5kvRxH6G6BcVOIWtUhupNF1s7xlhO11PB4gobHATVs5AhRI/3rBMs9R+bkBILnnEgivxOJRK20QO8hZD2dRNL1JANEvRhI1CfDdCiPmSTqk8H5U8cp+cQFn0Ig6lMtJ2oZ96mOE/Vi3AvxY5rlUoi6sa95k3Sibqwh6iYGiHoxkKgbA4u+ST4nuWjXR8Z8muXd1Em+aaCJ+iSghkjjPd3yfMh6OZ3Q3QLjphC1qkN0J4usnaaWE7XUsClBw9OBGjZzhKiR/nWG5Z4jc3IGwXOak8ivOZGolRboPYSspxYkXVsYIOqvgER9JkyHEqNPfZ8Jzp86zsonLvgsAlGfbTlRy7jPdpyov8L99SxjT3239DU/J52oW2qI+hwDRP0VkKhbAov+nHxOctGuj4z5XMu7qRa+aaCJugVQQ6Txnmd5PmS9nEfoboFxU4ha1SG6k0XWzvmWE7XU8HyChucBNWzlCFEj/esCyz1H5uQCgudcSCK/C4lErbRA7yFkPbUm6draAFEvAhJ1G9wdmhKTRN0GnD91tM0nLrgtgagvspyoZdwXOU7Ui3BEXa5ZLoWo2/maX5xO1O00RH2xAaJeBCTqdsCivzifk1y06yNjLrO8m2rtmwaaqFsDNUQab7nl+ZD1Uk7oboFxU4ha1SG6k0XWTtxyopYaxgkalgM1TDhC1Ej/qrDcc2ROKgiekySRX5JI1EoL9B5C1lN7kq7tDRD1QiBRX4LrJyMmifoScP7UcWk+ccGXEoj6MsuJWsZ9meNEvRD31HeZZrkUou7ga355OlF30BD15QaIeiGQqDsAi/7yfE5y0a6PjPkKy7up9r5poIm6PVBDpPFeaXk+ZL1cSehugXFTiFrVIbqTRdZOR8uJWmrYkaDhlUANr3KEqJH+dbXlniNzcjXBc64hkd81RKJWWqD3ELKeOpF07WSAqBcAifpamA4xo38961pw/tRxXT5xwdcRiPp6y4laxn2940S9AEbU0aRmuRSivsHX/MZ0or5BQ9Q3GiDqBUCivgFY9Dfmc5KLdn1kzDdZ3k118k0DTdSdgBoijfdmy/Mh6+VmQncLjJtC1KoO0Z0ssnY6W07UUsPOBA1vBmp4iyNEjfSvWy33HJmTWwmecxuJ/G4jErXSAr2HkPXUhaRrFwNE/SWQqG93lKhvB+dPHXfkExd8B4Go77ScqGXcdzpO1F86SNRdfc3vSifqrhqivssAUX8JJOquwKK/yxGiRsZ8t+XdVBffNNBE3QWoIdJ4u1meD1kv3QjdLTBuClGrOkR3ssja6W45UUsNuxM07AbU8B5HiBrpX/da7jkyJ/cSPOc+EvndRyRqpQV6DyHrqQdJ1x4GiHo+kKjvh+lQYvRd3/eD86eOB/KJC36AQNQPWk7UMu4HHSfq+TCiLjP2ru+HfM0fTifqhzRE/bABop4PJOqHgEX/cD4nuWjXR8b8iOXdVA/fNNBE3QOoIdJ4H7U8H7JeHiV0t8C4KUSt6hDdySJr5zHLiVpq+BhBw0eBGj7uCFEj/esJyz1H5uQJguc8SSK/J4lErbRA7yFkPfUk6drTAFHPAxL1UziiTpgk6qfA+VPH0/nEBT9NIOpnLCdqGfczjhP1PBxRhzTLpRB1L1/zZ9OJupeGqJ81QNTzgETdC1j0z+Zzkot2fWTMz1neTfX0TQNN1D2BGiKN93nL8yHr5XlCdwuMm0LUqg7RnSyydnpbTtRSw94EDZ8HaviCI0SN9K8XLfccmZMXCZ7zEon8XiIStdICvYeQ9dSHpGsfA0Q9F0jUL8N0CBq9R/0yOH/qeCWfuOBXCET9quVELeN+1XGingsj6oSxe9R9fc1fSyfqvhqifs0AUc8FEnVfYNG/ls9JLtr1kTG/bnk31cc3DTRR9wFqiDTeNyzPh6yXNwjdLTBuClGrOkR3ssja6Wc5UUsN+xE0fAOo4ZuOEDXSv96y3HNkTt4ieM7bJPJ7m0jUSgv0HkLWU3+Srv0NEPUXQKJ+B6ZDKGSSqN8B508d7+YTF/wugajfs5yoZdzvOU7UX8CIOp7QLJdC1AN8zd9PJ+oBGqJ+3wBRfwEk6gHAon8/n5NctOsjY/7A8m6qv28aaKLuD9QQabwDLc+HrJeBhO4WGDeFqFUdojtZZO0MspyopYaDCBoOBGo42BGiRvrXEMs9R+ZkCMFzhpLIbyiRqJUW6D2ErKdhJF2HGSDqOUCiHg7TocLoPerh4Pyp48N84oI/JBD1CMuJWsY9wnGingMjas/YPeqRvuaj0ol6pIaoRxkg6jlAoh4JLPpR+Zzkol0fGfNHlndTw3zTQBP1MKCGSOMdbXk+ZL2MJnS3wLgpRK3qEN3JImtnjOVELTUcQ9BwNFDDsY4QNdK/Prbcc2ROPiZ4zjgS+Y0jErXSAr2HkPU0nqTreANEPRtI1BNgOoSNEvUEcP7U8Uk+ccGfEIh6ouVELeOe6DhRz4YRdbkxop7ka/5pOlFP0hD1pwaIejaQqCcBi/7TfE5y0a6PjPkzy7up8b5poIl6PFBDpPFOtjwfsl4mE7pbYNwUolZ1iO5kkbUzxXKilhpOIWg4GajhVEeIGulf0yz3HJmTaQTPmU4iv+lEolZaoPcQsp5mkHSdYYCoZwGJeiZMh2ipSaKeCc6fOj7PJy74cwJRz7KcqGXcsxwn6lkwoo5FNculEPVsX/M56UQ9W0PUcwwQ9SwgUc8GFv2cfE5y4d+jAmP+wvJuaoZvGmiingHUEGm8cy3Ph6yXuYTuFhg3hahVHaI7WWTtzLOcqKWG8wgazgVqON8Rokb615eWe47MyZcEz1lAIr8FRKJWWqD3ELKeFpJ0XWiAqD8HEvUi3B0ao0S9CJw/dXyVT1zwVwSiXmw5Ucu4FztO1J/DiDpsjKiX+JovTSfqJRqiXmqAqD8HEvUSYNEvzeckF+36yJi/trybWuibBpqoFwI1RBrvN5bnQ9bLN4TuFhg3hahVHaI7WWTtLLOcqKWGywgafgPUcLkjRI30r28t9xyZk28JnvMdify+IxK10gK9h5D1tIKk6woDRD0TSNTf4+5RB0wS9ffg/Knjh3zign8gEPWPlhO1jPtHx4l6JoyoSwOa5VKIeqWv+U/pRL1SQ9Q/GSDqmUCiXgks+p/yOclFuz4y5p8t76ZW+KaBJuoVQA2RxvuL5fmQ9fILobsFxk0halWH6E4WWTurLCdqqeEqgoa/ADX81RGiRvrXb5Z7jszJbwTP+Z1Efr8TiVppgd5DyHpaTdJ1tQGingEk6jW4ftIzSdRrwPlTxx/5xAX/QSDqtZYTtYx7reNEPQNG1JGkZrkUol7na74+najXaYh6vQGingEk6nXAol+fz0ku2vWRMf9peTe12jcNNFGvBmqINN4NludD1ssGQncLjJtC1KoO0Z0ssnb+spyopYZ/ETTcgGx8CtwgaqR/7VRgt+fInMg1ovd0NjDXqT1UdgGPqJUW6D2ErKcckq45BXying4k6lyYDmGjfz0rF5w/deQVEBecV4A/b36B3UQt484v2Cgw6LxGiXo67s1kxv56VoGveWFB1qb0XFCwOVHL/4hN1NOBRF0ALPrCAk5y0a6PjLmK5d1Ujm8aaKLOAWqINN6qludD1ktVQndbFUwy6PWpOkR3ssjaqUbWMJDZ8fderkbQsCpQwyJHiBrpX9Ut9xyZk+oEzykmkV8xkaiVFug9hKynGiRdaxgg6mlAoq4J06HC6D3qmuD8qWPnAuKCdyYQ9S6WE7WMexfHiXoa7q9nGbtHXcvXfNd0oq6lIepdDRD1NCBR1wIW/a4FnOSiXR8Z826Wd1M1fNNAE3UNoIZI493d8nzIetmd0N0C46YQtapDdCeLrJ3alhO11LA2QcPdgRru4QhRI/1rT8s9R+ZkT4Ln7EUiv72IRK20QO8hZD3tTdJ1bwNEPRVI1PvAdEiWmCTqfcD5U8e+BcQF70sg6v0sJ2oZ936OE/VUGFEHyjXLpRD1/r7mddKJen8NUdcxQNRTgUS9P7Do6xRwkot2fWTMB1jeTe3tmwaaqPcGaog03gMtz4eslwMJ3S0wbgpRqzpEd7LI2qlrOVFLDesSNDwQqOFBjhA10r8OttxzZE4OJnhOPRL51SMStdICvYeQ9XQISddDDBD1FCBR14fpUGr0qe/64Pyp49AC4oIPJRD1YZYTtYz7MMeJegru96iNPfV9uK/5EelEfbiGqI8wQNRTgER9OLDojyjgJBft+siYj7S8mzrENw00UR8C1BBpvEdZng9ZL0cRultg3BSiVnWI7mSRtdPAcqKWGjYgaHgUUMOAI0SN9C/Pcs+ROfEInhMkkV+QSNRKC/QeQtZTiKRryABRTwYSdRh3j9rou77D4Pypo6SAuOASAlFHLCdqGXfEcaKejHvq29i7vqO+5rF0oo5qiDpmgKgnA4k6Ciz6WAEnuWjXR8Zcank3FfJNA03UIaCGSOM92vJ8yHo5mtDdAuOmELWqQ3Qni6ydhpYTtdSwIUHDo4EaHuMIUSP961jLPUfm5FiC5xxHIr/jiESttEDvIWQ9HU/S9XhfV5N0+VkeNhZ1NCpgLphAlydYTpcy7hMIdKlbK2KDnEDYxMCNR8+3rRoi4z7RkWbieGDMJ1neTMhYTyQ0Eydb3nzLvJxM9pxMNTyF1Dic8h80Dp+SGodTC4gLPpXQODS2vHGQcTd2pHGQhdyYsImBG4+eb1s1RMbdxJHG4RRgzKdZ3jjIWJsQGofTLW8cZF5OJ3tOpho2JTUOTQ3cw58EvIffDLiHTDZLzQo4zdIZBcQFn0Folppb3izJuJsbapYCmR1eU3+t6FuHTYE5Qua7heUXUGl0LQgX0DMtv4DKmM8kxH0W6aJ3luYRELQm7Jwh9nhzQtOD3O9nW173UsOzCRq2AGrY0hHQQl5zzrH8OiFzcg7BL88l+eW5xNu9Sgv0HkLW03mkPYTW8jxgzNlZmx7otT6RjdO0jn+e80X8rcS4QIwLxWgtRhsx2opxkRjtxLhYjDIxysWIi5EQo0KMpBjtxbhEjEvFuEyMDmJcLsYVYlwpRkcxrhLjajGuEaOTGNeKcZ0Y1xf8I1Lqvjnf7zNS51pp5i7QzF2omWutmWujmWurmbtIM9dOM3exZq5MM1eumYtr5hKauQrNXFIz114zd4lm7lLN3GWauQ6aucs1c1do5q7UzHXUzF2lmbtaM3eNZq6TZu5azdx1mrnrNT1trv+zkf8zkNmxyZ7N1F/OB3iVekS6FdD35hzM8fr0XGQSs8zFBRD9/snrhZmfK+jr57UG5uILm3MR/t86vTaZxRxIidlrm8m5gpvo510EzMVcO3MRSFun124HY44kN4vZu3jHzhXT6OeVAXMxz7ZcxLTr9Mq3P+boFmL24tt7rugW9fMSwFzMtycXwX9Zp1exPTFH/zVmL7nt54pvRT+vPTAXX9qQi+hW1+ldsm0xB7YhZu/SbTlXYJv08y4D5mLBf5uLkm1cp9dhazGHtzlm7/J/PVc4uR36eVcAc7Hwv8pFdLvW6V255Zhj2xmz13EL5ypNbrd+3lXAXCwyn4vADqzTu1oXc2CHYvau2fxc3g7q53UC5uIrk7lI7PA6vWs3jTmUQczedSnnCiYz0s+7HpiLxYZyEcjs8IDfD3hAvvVS+SzTXCxxJBdADvKAfbz3JTAXSx3JBbDf84D9ircImIuvHckF8LrmAX3ZWwLMxTekXKBfBQLcvx6w/jyWfujnApA9xg2w+7ghoy+Awq1704dHbywgLvjGAvx5bwIWAyvumwo2Cgw6r9EXQF0PK7aEsRdA3exr3tm/Cf+/u6I3+0WYOte5gP8CKIRrqbubNwOLvjM4uYwNfnMB/smomwvcuNpdB8z1LbCYI2GTV7tbSFe7WwuIC76VcLW7zfKrnYz7NsevdtfBiq00rlku5WrXxdf89vSrXRfN1e52A1e764BXuy7Aor+dlFy06yNjvgPnntpnnzNd302+aWSDaxCJBneCuwW0ackc30nokmyPW9UOOu6ujnSHyBq/i+wTgcwOT+bkLoJP3AnU8G4H9svdhP3SDdyhq16lW8paWVqg6+kuYD11J+navYD/S/7XAnW4B6ZDuMIkud4Dzp867i0gLvheArneZzm5yrjvc5xcr4UVW3lQs1wKufbwNb8/nVx7aMj1fgPkinAtRa49gEV/Pym5aNdHxvyA5R1pd9800G/b6A7UEGm8D1qeD1kvDxK6W2DclDc3qDpEd7LI2nnIcjKSGj5E0PBBoIYPO/KtBNK/HrHcc2ROHiF4zqMk8nuUSNRKC/QeQtbTYyRdHzNA1Mgn3R+H6RANmiTqx8H5U8cTBcQFP0Eg6ictJ2oZ95OOE3UnWLHFKjTLpRB1T1/zp9KJuqeGqJ8yQNQI11JE3RNY9E+Rkot2fWTMT1veTT3mmwaaqB8Daog03mcsz4esl2cI3S0wbgpRqzpEd7LI2ullOVFLDXsRNHwGqOGzjhA10r+es9xzZE6eI3jO8yTye55I1EoL9B5C1lNvkq69DRD1NUAdXoDpUGH0RfQvgPOnjhcLiAt+kUDUL1lO1DLulxwn6mtgxeYlNculEHUfX/OX04m6j4aoXzZA1AjXUkTdB1j0L5OSi3Z9ZMyvWN5N9fZNA03UvYEaIo33VcvzIevlVUJ3C4ybQtSqDtGdLLJ2+lpO1FLDvgQNXwVq+JojRI30r9ct9xyZk9cJnvMGifzeIBK10gK9h5D11I+kaz8DRH01UIc3YTqEjBL1m+D8qeOtAuKC3yIQ9duWE7WM+23HifpqWLHFjRF1f1/zd9KJur+GqN8xQNQI11JE3R9Y9O+Qkot2fWTM71reTfXzTQNN1P2AGiKN9z3L8yHr5T1CdwuMm0LUqg7RnSyydgZYTtRSwwEEDd8Davi+I0SN9K8PLPccmZMPCJ4zkER+A4lErbRA7yFkPQ0i6TrIAFEj3zU/GKZDmdH3XQ4G508dQwqICx5CIOqhlhO1jHuo40R9FazYIsbedznM13x4OlEP0xD1cANEjXAtRdTDgEU/nJRctOsjY/7Q8m5qkG8aaKIeBNQQabwjLM+HrJcRhO4WGDeFqFUdojtZZO2MtJyopYYjCRqOAGo4yhGiRvrXR5Z7jszJRwTPGU0iv9FEolZaoPcQsp7GkHQdY4CoOwJ1GAvTIVhqkqjHgvOnjo8LiAv+mEDU4ywnahn3OMeJuiOs2BJRzXIpRD3e13xCOlGP1xD1BANEjXAtRdTjgUU/gZRctOsjY/7E8m5qjG8aaKIeA9QQabwTLc+HrJeJhO4WGDeFqFUdojtZZO1MspyopYaTCBpOBGr4qSNEjfSvzyz3HJmTzwieM5lEfpOJRK20QO8hZD1NIek6xQBRXwnUYSpMh/KYSaKeCs6fOqYVEBc8jUDU0y0nahn3dMeJ+kpYsYVjmuVSiHqGr/nMdKKeoSHqmQaIGuFaiqhnAIt+Jim5aNdHxvy55d3UFN800EQ9Bagh0nhnWZ4PWS+zCN0tMG4KUas6RHeyyNqZbTlRSw1nEzScBdRwjiNEjfSvLyz3HJmTLwieM5dEfnOJRK20QO8hZD3NI+k6zwBRXwHUYT5MhxKjT33PB+dPHV8WEBf8JYGoF1hO1DLuBY4T9RW4r52MPfW90Nd8UTpRL9QQ9SIDRI1wLUXUC4FFv4iUXLTrI2P+yvJuap5vGmiingfUEGm8iy3Ph6yXxYTuFhg3hahVHaI7WWTtLLGcqKWGSwgaLgZquNQRokb619eWe47MydcEz/mGRH7fEIlaaYHeQ8h6WkbSdZkBor4cqMNy3B2aEpNEvRycP3V8W0Bc8LcEov7OcqKWcX/nOFFfjoOucs1yKUS9wtf8+3SiXqEh6u8NEDXCtRRRrwAW/fek5KJdHxnzD5Z3U8t800AT9TKghkjj/dHyfMh6+ZHQ3QLjphC1qkN0J4usnZWWE7XUcCVBwx+BGv7kCFEj/etnyz1H5uRnguf8QiK/X4hErbRA7yFkPa0i6brKAFF3AOrwK66fjJgk6l/B+VPHbwXEBf9GIOrfLSdqGffvjhN1B9zXTmWa5VKIerWv+Zp0ol6tIeo1Boga4VqKqFcDi34NKblo10fG/Ifl3dQq3zTQRL0KqCHSeNdang9ZL2sJ3S0wbgpRqzpEd7LI2llnOVFLDdcRNFwL1HC9I0SN9K8/LfccmZM/CZ6zgUR+G4hErbRA7yFkPf1F0vUvA0R9GRKiClE6xIz+9Szcujcl6p0KiQuWJ0efN7vQbqKWcWen0BrovEaJ+jKYWUSN/fWsHF/z3MKsTek5p3Bzopb/EZuoEa6liDoHWPS5hZzkol0fGXNeIXCDZ+E3nLyKStNAE/VfwCsn0njzLc+HrJf8Qnx3C4ybQtSqDtGdLLJ2CsgaBjI7/t7LBQQN84EaFoI1VAf6GoD0ryqWe47MSRWC51QFk4PqoaoW8ohaaYHeQ8h6qkbStVohn6gvBepQ5ChRF4Hzp47qhcQFVycQdbHlRC3jLnacqC91kKhr+JrXTCfqGhqirmmAqC8FEnUNYNHXdISokTHvbHk3Vc03DTRRVwNqiDTeXSzPh6yXXQjdLTBuClGrOkR3ssjaqWU5UUsNaxE03AWo4a6OEDXSv3az3HNkTnYjeM7uJPLbnUjUSgv0HkLWU22SrrUNEPUlQKLeA6ZDidF3fe8Bzp869iwkLnhPAlHvZTlRy7j3cpyoL4ERdZmxd33v7Wu+TzpR760h6n0MEPUlQKLeG1j0+xRykot2fWTM+1reTdX2TQNN1LWBGiKNdz/L8yHrZT9CdwuMm0LUqg7RnSyydva3nKilhvsTNNwPqGEdR4ga6V8HWO45MicHEDznQBL5HUgkaqUFeg8h66kuSde6Boi6PZCoD8IRdcIkUR8Ezp86Di4kLvhgAlHXs5yoZdz1HCfq9jiiDmmWSyHqQ3zN66cT9SEaoq5vgKjbA4n6EGDR1y/kJBft+siYD7W8m6rrmwaaqOsCNUQa72GW50PWy2GE7hYYN4WoVR2iO1lk7RxuOVFLDQ8naHgYUMMjHCFqpH8dabnnyJwcSfCco0jkdxSRqJUW6D2ErKcGJF0bGCDqJJCoAzAdgkbvUQfA+VOHV0hcsEcg6qDlRC3jDjpO1EkYUSeM3aMO+ZqH04k6pCHqsAGiTgKJOgQs+nAhJ7lo10fGXGJ5N9XANw00UTcAaog03ojl+ZD1EiF0t8C4KUSt6hDdySJrJ2o5UUsNowQNI0ANY44QNdK/Si33HJmTUoLnHE0iv6OJRK20QO8hZD01JOna0ABRVwCJ+hiYDqGQSaI+Bpw/dRxbSFzwsQSiPs5yopZxH+c4UVfAiDqe0CyXQtTH+5o3Sifq4zVE3cgAUVcAifp4YNE3KuQkF+36yJhPsLybauibBpqoGwI1RBrviZbnQ9bLiYTuFhg3hahVHaI7WWTtnGQ5UUsNTyJoeCJQw5MdIWqkf51iuefInJxC8JxTSeR3KpGolRboPYSsp8YkXRsbIOoEkKibwHSoMHqPugk4f+o4rZC44NMIRH265UQt4z7dcaJOwIjaM3aPuqmvebN0om6qIepmBog6ASTqpsCib1bISS7a9ZExn2F5N9XYNw00UTcGaog03uaW50PWS3NCdwuMm0LUqg7RnSyydlpYTtRSwxYEDZsDNTzTEaJG+tdZlnuOzMlZBM85m0R+ZxOJWmmB3kPIempJ0rWlAaKOA4n6HJgOYaNEfQ44f+o4t5C44HMJRH2e5UQt4z7PcaKO4/5ouzGiPt/XvFU6UZ+vIepWBog6DiTq84FF36qQk1y06yNjvsDybqqlbxpoom4J1BBpvBdang9ZLxcSultg3BSiVnWI7mSRtdPacqKWGrYmaHghUMM2jhA10r/aWu45MidtCZ5zEYn8LiIStdICvYeQ9dSOpGs7A0RdDiTqi2E6REtNEvXF4Pypo6yQuOAyAlGXW07UMu5yx4m6HEbUsahmuRSijvuaJ9KJOq4h6oQBoi4HEnUcWPSJQk5y4d+jAmOusLybauebBpqo2wE1RBpv0vJ8yHpJErpbYNwUolZ1iO5kkbXT3nKilhq2J2iYBGp4iSNEjfSvSy33HJmTSwmecxmJ/C4jErXSAr2HkPXUgaRrBwNEXQYk6stxd2iMEvXl4Pyp44pC4oKvIBD1lZYTtYz7SseJugxG1GFjRN3R1/yqdKLuqCHqqwwQdRmQqDsCi/6qQk5y0a6PjPlqy7upDr5poIm6A1BDpPFeY3k+ZL1cQ+hugXFTiFrVIbqTRdZOJ8uJWmrYiaDhNUANr3WEqJH+dZ3lniNzch3Bc64nkd/1RKJWWqD3ELKebiDpeoMBor4YSNQ34u5RB0wS9Y3g/KnjpkLigm8iEPXNlhO1jPtmx4n6YhhRlwY0y6UQdWdf81vSibqzhqhvMUDUFwOJujOw6G8p5CQX7frImG+1vJu6wTcNNFHfANQQaby3WZ4PWS+3EbpbYNwUolZ1iO5kkbXTxXKilhp2IWh4G1DD2x0haqR/3WG558ic3EHwnDtJ5HcnkaiVFug9hKynriRduxog6nZAor4L1096Jon6LnD+1HF3IXHBdxOIupvlRC3j7uY4UbeDEXUkqVkuhai7+5rfk07U3TVEfY8Bom4HJOruwKK/p5CTXLTrI2O+1/JuqqtvGmii7grUEGm891meD1kv9xG6W2DcFKJWdYjuZJG108NyopYa9iBoeB9Qw/sdIWqkfz1guefInDxA8JwHSeT3IJGolRboPYSsp4dIuj5kgKgvAhL1w7hnHo3+9ayHwflTxyOFxAU/QiDqRy0nahn3o44T9UW4N5MZ++tZj/maP55O1I9piPpxA0R9EZCoHwMW/eOFnOSiXR8Z8xOWd1MP+aaBJuqHgBoijfdJy/Mh6+VJQncLjJtC1KoO0Z0ssnZ6Wk7UUsOeBA2fBGr4lCNEjfSvpy33HJmTpwme8wyJ/J4hErXSAr2HkPXUi6RrLwNE3RZI1M/CdKgweo/6WXD+1PFcIXHBzxGI+nnLiVrG/bzjRN0W99ezjN2j7u1r/kI6UffWEPULBoi6LZCoewOL/oVCTnLRro+M+UXLu6levmmgiboXUEOk8b5keT5kvbxE6G6BcVOIWtUhupNF1k4fy4laatiHoOFLQA1fdoSokf71iuWeI3PyCsFzXiWR36tEolZaoPcQsp76knTta4Co2wCJ+jWYDskSk0T9Gjh/6ni9kLjg1wlE/YblRC3jfsNxom4DI+pAuWa5FKLu52v+ZjpR99MQ9ZsGiLoNkKj7AYv+zUJOctGuj4z5Lcu7qb6+aaCJui9QQ6Txvm15PmS9vE3oboFxU4ha1SG6k0XWTn/LiVpq2J+g4dtADd9xhKiR/vWu5Z4jc/IuwXPeI5Hfe0SiVlqg9xCyngaQdB1ggKhbA4n6fZgOpUaf+n4fnD91fFBIXPAHBKIeaDlRy7gHOk7UrXG/R23sqe9BvuaD04l6kIaoBxsg6tZAoh4ELPrBhZzkol0fGfMQy7upAb5poIl6AFBDpPEOtTwfsl6GErpbYNwUolZ1iO5kkbUzzHKilhoOI2g4FKjhcEeIGulfH1ruOTInHxI8ZwSJ/EYQiVppgd5DyHoaSdJ1pAGivhBI1KNw96iNvut7FDh/6viokLjgjwhEPdpyopZxj3acqC/EPfVt7F3fY3zNx6YT9RgNUY81QNQXAol6DLDoxxZykot2fWTMH1veTY30TQNN1COBGiKNd5zl+ZD1Mo7Q3QLjphC1qkN0J4usnfGWE7XUcDxBw3FADSc4QtRI//rEcs+ROfmE4DkTSeQ3kUjUSgv0HkLW0ySSrpN8XU3S5QUF2FjU8WkhccGfEujyM8vpUsb9GYEudWtFbJDPCJsYuPHo+bZVQ2Tckx1pJiYBY55ieTMhY51MaCamWt58y7xMJXtOphpOIzUO0/6DxqEVqXGYXkhc8HRC4zDD8sZBxj3DkcZBFvIMwiYGbjx6vm3VEBn3TEcah2nAmD+3vHGQsc4kNA6zLG8cZF5mkT0nUw1nkxqH2Qbu4Z8PvIc/B7iHTDZLcwo5zdIXhcQFf0FoluZa3izJuOcaapYCmR3ebH+t6FuHs4E5QuZ7nuUXUGl08wgX0PmWX0BlzPMJcX9Juuh9qXkEBK0JO2eIPT6X0PQg9/sCy+teariAoOE8oIYLHQEt5DVnkeXXCZmTRQS//Irkl18Rb/cqLdB7CFlPi0l7CK3lYmDMeVmbglHq5yXy4in/g+wsM/S0BJiA7JR1LvW7gK/TuwH0A6FLgJlZuu3nim/lXN7XYMeokqIdUr8N/36+YDzphUoqoiWBSFm4JBEJBRPBaCARLkl6QohgaVjIkIyHY4lYMJQMRoPxDdj1/R17dkrxyxxt8D9/7X/+RvxcJsbywn82j6knupeT3Auc42CqFt/6G/K7wqxNn96W/4c/0xaA3qzLAZv1n6e3k8lvgRv/O0OtXCCzw0PGvCLlXF4sFAxGQ/K/iyUCXjgh7C0YTJSHA/FAWTxYURr2SpPhYDgUT8TLxTnLvGQgWRYvTcb+WZfJ7/tWkL7v+76QuODvCd/3/WD5930y7h8cuTn6nb9W9Hl/JHHDj4UbW8TUzkD+uyJ74xUymfK5ffY/P7d2NV0pfv4kxs+Gr6Y/O3g1/cWv71XpV9NfDFxNfwZeTX8BmskqR66myJh/dfRq+ivpavpbIXHBvxGupr9bfjWVcf/uyNV0lb9W9HlXk66mqws3v8Kh84c0RfZaVwLXWsc/zxpxzj/EWCvGOjHWywuk7DjE+EvWtWhjdhIjW4wcMXLFyBMjX4wCMQrFqCJGVTGqiVEkRnUxisWoIUZNMXYWYxcxaomxqxi7ibG7GLWr/CNSas7X+HeqUuf+0Myt1cyt08yt18z9qZnboJn7SzMn9Uif20kzl62Zy9HM5Wrm8jRz+Zq5As1coWauimauqmaummauSDNXXTNXrJmroZmrqZnbWTO3i2aulmZuV83cbpq53TVztatsflc01//ZyP8ZyOzYZM9m6rNrYI1lwPsDuK7fD+Y0lum5yCRmmYu1EP3+yeu6zM8VVN9JrwfmYrXNuQhv/B7+z8xiDqR+p78hk3MFN70/8Bdyv9qZi0D6PRF5TduRc0WSm99f2WnHzhXT3avJroLLxR+25SKmvz+Vs/0xR7d0ryt3e88V3fJ9szxgLtbak4vgv90rzN+emKP/ft+xYNvPtdV7mIXAXKyzIRfRra7Tq7JtMQe2IWav6racK7BN+nnVgLlY/9/momQb1+kVbS3m8DbH7FX/13OFk9uhn1cMzMWf/1Uuotu1Tq/GlmOObWfMXs0tnKs0ud36eTsDc7HBfC4CO7BObxddzIEditmrtfm5vB3Uz9sVmIu/TOYiscPr9HbbNOZQBjF7u6ecK5jMSD+vNjAXWfXM5CKQ2eEBvx/wgHzrpfJZprnYyZFcADnIA/bx3jpgLrIdyQWw3/OA/Yq3AZiLHEdyAbyueUBf9lJ9JdNc5JJygX6AArh/PWD9eUj9ZP3uKUYd/3y1/Xtiu/n3yGr598x29u+h1fDvqVX377FV8++5/X1vx78Xl+/fm8v179Vl+/fu5Pd7f/n39P707/Gt8+/5yfsAa9JvgmThf9sF2ffsUQWVh5DR15rj1r3pQx17ViEuWJ4cfd69kE0wKe69qmwUGHReo681rw0rtoSx15rv7Wu+j/9gwP/u1O7tF2Hq3D5V+K81R7iWuuO6N7Do9wEnl7HB966Cf9Jo7yqcDgZ9tdsdmOt9YTFHwiavdvuSrnb7VSEueD/C1W5/y692Mu79Hb/a7Q4rttK4ZrmUq10dX/MD0q92dTRXuwMMXO12B17t6gCL/gBSctGuj4z5QJx7an+jP9P17eWbRja4BpFoUBfcLaBNS+a4LqFLsj1uVTvouA9ypDtE1vjBZJ8IZHZ4MicHE3yiLlDDeg7sl3qE/XIIuENXvcohKWtlaYGup4OB9VSfpGv9KpuTG9qbdgPqcChMh3CFSXI9FJw/dRxWhbjgwwjkerjl5CrjPtxxct0NVmzlQc1yKeR6hK/5kenkeoSGXI80QK4I11LkegSw6I8kJRft+siYj7K8I63vmwb6HbL1gRoijbeB5fmQ9dKA0N0C46b8NraqQ3Qni6ydgOVkJDUMEDRsANTQc+RbCaR/BS33HJmTIMFzQiTyCxGJWmmB3kPIegqTdA0bIGrk0/clMB2iQZNEXQLOnzoiVYgLjhCIOmo5Ucu4o44T9a6wYotVaJZLIeqYr3lpOlHHNERdaoCoEa6liDoGLPpSUnLRro+M+WjLu6mwbxpoog4DNUQab0PL8yHrpSGhuwXGTSFqVYfoThZZO8dYTtRSw2MIGjYEanisI0SN9K/jLPccmZPjCJ5zPIn8jicStdICvYeQ9dSIpGsjA0RdC6jDCTAdKoy+IPYEcP7UcWIV4oJPJBD1SZYTtYz7JMeJuhas2LykZrkUoj7Z1/yUdKI+WUPUpxggaoRrKaI+GVj0p5CSi3Z9ZMynWt5NNfJNA03UjYAaIo23seX5kPXSmNDdAuOmELWqQ3Qni6ydJpYTtdSwCUHDxkANT3OEqJH+dbrlniNzcjrBc5qSyK8pkaiVFug9hKynZiRdmxkg6l2AOpwB0yFklKjPAOdPHc2rEBfcnEDULSwnahl3C8eJehdYscWNEfWZvuZnpRP1mRqiPssAUSNcSxH1mcCiP4uUXLTrI2M+2/JuqplvGmiibgbUEGm8LS3Ph6yXloTuFhg3hahVHaI7WWTtnGM5UUsNzyFo2BKo4bmOEDXSv86z3HNkTs4jeM75JPI7n0jUSgv0HkLWUyuSrq0MEDXy/fcXwHQoM/q+ywvA+VPHhVWIC76QQNStLSdqGXdrx4l6Z1ixRYy977KNr3nbdKJuoyHqtgaIGuFaiqjbAIu+LSm5aNdHxnyR5d1UK9800ETdCqgh0njbWZ4PWS/tCN0tMG4KUas6RHeyyNq52HKilhpeTNCwHVDDMkeIGulf5ZZ7jsxJOcFz4iTyixOJWmmB3kPIekqQdE0YIOqaQB0qYDoES00SdQU4f+pIViEuOEkg6vaWE7WMu73jRF0TVmyJqGa5FKK+xNf80nSivkRD1JcaIGqEaymivgRY9JeSkot2fWTMl1neTSV800ATdQKoIdJ4O1ieD1kvHQjdLTBuClGrOkR3ssjaudxyopYaXk7QsANQwyscIWqkf11puefInFxJ8JyOJPLrSCRqpQV6DyHr6SqSrlcZIOoaQB2uhulQHjNJ1FeD86eOa6oQF3wNgag7WU7UMu5OjhN1DVixhWOa5VKI+lpf8+vSifpaDVFfZ4CoEa6liPpaYNFfR0ou2vWRMV9veTd1lW8aaKK+Cqgh0nhvsDwfsl5uIHS3wLgpRK3qEN3JImvnRsuJWmp4I0HDG4Aa3uQIUSP962bLPUfm5GaC53QmkV9nIlErLdB7CFlPt5B0vcUAURcDdbgVpkOJ0ae+bwXnTx23VSEu+DYCUXexnKhl3F0cJ+pi3NdOxp76vt3X/I50or5dQ9R3GCBqhGspor4dWPR3kJKLdn1kzHda3k3d4psGmqhvAWqINN6uludD1ktXQncLjJtC1KoO0Z0ssnbuspyopYZ3ETTsCtTwbkeIGulf3Sz3HJmTbgTP6U4iv+5EolZaoPcQsp7uIel6jwGirg7U4V7cHZoSk0R9Lzh/6rivCnHB9xGIuoflRC3j7uE4UVfHQVe5ZrkUor7f1/yBdKK+X0PUDxggaoRrKaK+H1j0D5CSi3Z9ZMwPWt5N3eObBpqo7wFqiDTehyzPh6yXhwjdLTBuClGrOkR3ssjaedhyopYaPkzQ8CGgho84QtRI/3rUcs+ROXmU4DmPkcjvMSJRKy3QewhZT4+TdH3cAFEXAXV4AtdPRkwS9RPg/KnjySrEBT9JIOqelhO1jLun40RdhPvaqUyzXApRP+Vr/nQ6UT+lIeqnDRA1wrUUUT8FLPqnSclFuz4y5mcs76Ye900DTdSPAzVEGm8vy/Mh66UXobsFxk0halWH6E4WWTvPWk7UUsNnCRr2Amr4nCNEjfSv5y33HJmT5wme05tEfr2JRK20QO8hZD29QNL1BQNEXQ2ow4swHWJG/3rWi+D8qeOlKsQFv0Qg6j6WE7WMu4/jRF0NVmxRY38962Vf81fSifplDVG/YoCoEa6liPplYNG/Qkou2vWRMb9qeTf1gm8aaKJ+Aagh0nj7Wp4PWS99Cd0tMG4KUas6RHeyyNp5zXKilhq+RtCwL1DD1x0haqR/vWG558icvEHwnH4k8utHJGqlBXoPIevpTZKubxog6qpAHd5ylKjfAudPHW9XIS74bQJR97ecqGXc/R0n6qoOEvU7vubvphP1OxqiftcAUSNcSxH1O8Cif9cRokbG/J7l3dSbvmmgifpNoIZI4x1geT5kvQwgdLfAuClEreoQ3ckia+d9y4laavg+QcMBQA0/cISokf410HLPkTkZSPCcQSTyG0QkaqUFeg8h62kwSdfBBoi6ClCHITAdSoy+63sIOH/qGFqFuOChBKIeZjlRy7iHOU7UVWDFVmbsXd/Dfc0/TCfq4Rqi/tAAUSNcSxH1cGDRf0hKLtr1kTGPsLybGuybBpqoBwM1RBrvSMvzIetlJKG7BcZNIWpVh+hOFlk7oywnaqnhKIKGI4EafuQIUSP9a7TlniNzMprgOWNI5DeGSNRKC/QeQtbTWJKuYw0QdSFQh49xRJ0wSdQfg/OnjnFViAseRyDq8ZYTtYx7vONEXYiDrpBmuRSinuBr/kk6UU/QEPUnBoga4VqKqCcAi/4TUnLRro+MeaLl3dRY3zTQRD0WqCHSeCdZng9ZL5MI3S0wbgpRqzpEd7LI2vnUcqKWGn5K0HASUMPPHCFqpH9NttxzZE4mEzxnCon8phCJWmmB3kPIeppK0nWqAaIuAOowDaZD0Og96mng/KljehXigqcTiHqG5UQt457hOFEXwIotYewe9Uxf88/TiXqmhqg/N0DUCNdSRD0TWPSfk5KLdn1kzLMs76am+qaBJuqpQA2Rxjvb8nzIeplN6G6BcVOIWtUhupNF1s4cy4laajiHoOFsoIZfOELUSP+aa7nnyJzMJXjOPBL5zSMStdICvYeQ9TSfpOt8A0SdD9ThS5gOoZBJov4SnD91LKhCXPACAlEvtJyoZdwLHSfqfFixxROa5VKIepGv+VfpRL1IQ9RfGSBqhGspol4ELPqvSMlFuz4y5sWWd1PzfdNAE/V8oIZI411ieT5kvSwhdLfAuClEreoQ3ckia2ep5UQtNVxK0HAJUMOvHSFqpH99Y7nnyJx8Q/CcZSTyW0YkaqUFeg8h62k5SdflBog6D6jDtzAdKozeo/4WnD91fFeFuODvCES9wnKilnGvcJyo82DF5hm7R/29r/kP6UT9vYaofzBA1AjXUkT9PbDofyAlF+36yJh/tLybWu6bBpqolwM1RBrvSsvzIetlJaG7BcZNIWpVh+hOFlk7P1lO1FLDnwgargRq+LMjRI30r18s9xyZk18InrOKRH6riESttEDvIWQ9/UrS9VcDRJ0L1OE3mA5ho0T9Gzh/6vi9CnHBvxOIerXlRC3jXu04UefCiq3cGFGv8TX/I52o12iI+g8DRI1wLUXUa4BF/wcpuWjXR8a81vJu6lffNNBE/StQQ6TxrrM8H7Je1hG6W2DcFKJWdYjuZJG1s95yopYaridouA6o4Z+OEDXSvzZY7jkyJxsInvMXifz+IhK10gK9h5D1lFWVo6s8L5uoc4A67ATTIVpqkqh3Aufvf7mqSlxwdlX8eXOq2k3UMu6cqhsFBp3XKFHnwEw4FtUsl0LUub7meVWzNqXn3KqbE7X8j9hEnQMk6lxg0edV5SQX/j0qMOb8qnZ3U1m+aaCJOguoIdJ4CyzPh6yXgqr47hYYN4WoVR2iO1lk7RSSNQxkdvy9lwsJGhYANawC1lAd6GsA0r+qWu45MidVCZ5TjUR+1aryiFppgd5DyHoqIulaZICos4FEXR2mQ7lRoq4Ozp86iqsSF1xMIOoalhO1jLuG40SdjXuQwxhR1/Q13zmdqGtqiHpnA0SdDSTqmsCi37kqJ7lo10fGvIvl3VSRbxpooi4Caog03lqW50PWSy1CdwuMm0LUqg7RnSyydna1nKilhrsSNKwF1HA3R4ga6V+7W+45Mie7EzynNon8ahOJWmmB3kPIetqDpOseBoh6JyBR74m7Rx0wSdR7gvOnjr2qEhe8F4Go97acqGXceztO1DvBiLo0oFkuhaj38TXfN52o99EQ9b4GiHonIFHvAyz6fatykot2fWTM+1neTe3hmwaaqPcAaog03v0tz4esl/0J3S0wbgpRqzpEd7LI2qljOVFLDesQNNwfqOEBjhA10r8OtNxzZE4OJHhOXRL51SUStdICvYeQ9XQQSdeDDBB1FpCoD8b1k55Joj4YnD911KtKXHA9AlEfYjlRy7gPcZyos2BEHUlqlksh6vq+5oemE3V9DVEfaoCos4BEXR9Y9IdW5SQX7frImA+zvJs6yDcNNFEfBNQQabyHW54PWS+HE7pbYNwUolZ1iO5kkbVzhOVELTU8gqDh4UANj3SEqJH+dZTlniNzchTBcxqQyK8BkaiVFug9hKynAEnXgAGi/qsQdy4P98yj0b+e5YHzp45gVeKCgwSiDllO1DLukONEnbrhAhkd5cb+elbY17wknajDGqIuMUDUCNdSRB0GFn1JVU5y0a6PjDlieTcV8E0DTdQBoIZI441ang9ZL1FCdwuMm0LUqg7RnSyydmKWE7XUMEbQMArUsNQRokb619GWe47MydEEz2lIIr+GRKJWWqD3ELKejiHpeowBot4AJOpjYTpUGL1HfSw4f+o4ripxwccRiPp4y4laxn2840S9AUbUnrF71I18zU9IJ+pGGqI+wQBRbwASdSNg0Z9QlZNctOsjYz7R8m7qGN800ER9DFBDpPGeZHk+ZL2cROhugXFTiFrVIbqTRdbOyZYTtdTwZIKGJwE1PMURokb616mWe47MyakEz2lMIr/GRKJWWqD3ELKempB0bWKAqP8EEvVpMB2SJSaJ+jRw/tRxelXigk8nEHVTy4laxt3UcaL+E0bUgXLNcilE3czX/Ix0om6mIeozDBD1n0CibgYs+jOqcpKLdn1kzM0t76aa+KaBJuomQA2RxtvC8nzIemlB6G6BcVOIWtUhupNF1s6ZlhO11PBMgoYtgBqe5QhRI/3rbMs9R+bkbILntCSRX0siUSst0HsIWU/nkHQ9xwBRrwcS9bkwHUqNPvV9Ljh/6jivKnHB5xGI+nzLiVrGfb7jRL0eRtQRY099t/I1vyCdqFtpiPoCA0S9HkjUrYBFf0FVTnLRro+M+ULLu6lzfNNAE/U5QA2Rxtva8nzIemlN6G6BcVOIWtUhupNF1k4by4laatiGoGFroIZtHSFqpH9dZLnnyJxcRPCcdiTya0ckaqUFeg8h6+likq4XGyDqdUCiLsPdozb6ru8ycP7UUV6VuOByAlHHLSdqGXfccaJeh3vq29i7vhO+5hXpRJ3QEHWFAaJeByTqBLDoK6pykot2fWTMScu7qYt900AT9cVADZHG297yfMh6aU/oboFxU4ha1SG6k0XWziWWE7XU8BKChu2BGl7qCFEj/esyyz1H5uQygud0IJFfByJRKy3QewhZT5eTdL3c19UkXa4txMaijiuqEhd8BYEur7ScLmXcVxLoUrdWxAa5krCJgRuPnm9bNUTG3dGRZuJyYMxXWd5MyFg7EpqJqy1vvmVeriZ7TqYaXkNqHK75DxqHP0iNQ6eqxAV3IjQO11reOMi4r3WkcZCFfC1hEwM3Hj3ftmqIjPs6RxqHa4AxX2954yBjvY7QONxgeeMg83ID2XMy1fBGUuNwo4F7+GuA9/BvAu4hk83STVU5zdLNVYkLvpnQLHW2vFmScXc21CwFMju8G/21om8d3gjMETLft1h+AZVGdwvhAnqr5RdQGfOthLhvI130btM8AoLWhJ0zxB7vTGh6kPu9i+V1LzXsQtDwFqCGtzsCWshrzh2WXydkTu4g+OWdJL+8k3i7V2mB3kPIeupK2kNoLbuCe2t1oPf6T0AgvCslZi8WCgajIfnfxRIBL5yIB2PBYKI8HIgHyuLBitKwV5oMB8OheCJeLs5Z5iUDybJ4aTL2z7lMAuFdJCC8uypxwXcTgLCb5UAo4+5GAEJZbHJkZ/GL7adCjoGla5LpBkwt5O6p30yhr5TdgB1C6pWy+79cKbey5vhWxPl7o3TfgSvl1kTvDtyA95A6EHne23ewFjz5EKoXSAZKg4GyQDQeiZaXJoLlsbJkKFkSSoR2VNetFTtS13tJut6747r+f1Gv95F0ve//eL32IOnaw9dVXThNdGrIi2fqxf5+v6l4QF4zGBe47oRurbvlX2vt6OYIbEfcma7xQcu/1pKF+SDh64mHSKbw0L+YbSCzw3uApMXDJC0eJmohjZChxa717PYU1n7Y7b+NO76V9dFqf3dw3OpA/xYvsC49YK49pH6ykcrP0n8LkbWdem6tnlLPybhmoTRJbSof+bdvIQKZHd6DpIvAIzv+fb23tf8dueZHCKawF8kUcrczZ9vTvGUa86NV7TQYZC5S6/LRlOZkR/OzNc2R+Xks9d5CKCT2RiLqJRPJUEm0NFjuRUKRSDKcjEZi4USyJFyWiFZ44bJQsLQiGkh6sYqKaEkoHo0kSxPxSDLVtL1EKBROlJbHvZJgpKw8EEuEygLJcDQkgD8RiiYSoVgkUhYKJSKxZKxUQLpA/1igJBotDUSCodIgKz+PpdA16qKwtW9zUs/pykXhcRcvCo+TLwqPEy4K+1hyUdhiEUf/fklLEmk6T1h6UdiHZDpPAC4KW/tqE5mfJy29KLDy8+T/R1+59vS/cn1K95VrILNji/c7kPcqMz0X8OtbypNRSkP0E80sDTM919OW50NumKcJF/ZnSE3OM8SvP58iadGLpEUv8lfBDC32s/yrYNZ+2N/yr4JZtV/Hka+CgXXpAXPt1an8Kjj9+PuahdIktdl9lkn9T5MuAs8SqV+u+VmCKRzkyFfBTwMbweeq2mkwB5Go8jkDXwUj8/M8kPrrAKmflZ/nNfnZ3mdqtvbVLzI/vUn+2Rugw9a+nULq8AJJhxccq4cXSTq86Fg9vETS4aVtuFVkc2OnWS6sjlObxj4uNo19yE1jH0LTWM9Q05jhU/FQk3sZeC5k01iP1JS8vA1NY6ZP1yPz80pVXKOHbBpZ+XkFcHHcyuHVroLLz6sw/4xRHsTu5n/rhr6jhKzxvpbfwZA57ku43rxGuvbK827t3SSZrv114NrluvfM2vxAnX9LGgQyO7zXq9q/xjfQa3Rlc9W3/DaQjPkNQtyHWvLN51aOTQoz05j7AS8gwLrxkLkgm+T/bqf8XzTJfv9XTfJNy3+NUMb8JiHut0id11spnRfj11J1nXwgs8NDdvJvW15PkvzeJtRTfwf2UX9C3O+Q9tE7/7KPApkdNE85ot7/zRo40tDzN5mu811gkwjMtXck6Zu0d/09VEnXvDW+x24cEZT5HmHTBxyhzPcc2PSZ5sJzxIAHAHMBrD/Pq6R0J8x2QFVOncPN8X1gobt69X7fgYL6wJWCGohbaNDVghroQEENcqWgBuMWGnK1oAY7UFBDXCmoobiFhl0tqKEOFNQwVwpqOG6hJa4W1HAHCupDVwpqBG6hEVcLaoQDBTXSlYIahVto1NWCGuVAQX3kSkGNxi005mpBjXagoMa4UlBjcQstdbWgxjpQUB+7UlDjcAstc7WgxjlQUONdKagJuIWWu1pQExwoqE9cKaiJuIXGXS2oiQ4U1CRXCupT3EITrhbUpw4U1GeuFNRk3EIrXC2oyQ4U1BTkGl1NVJts+9c41ZWdPw22UM/ZX5mc5sDOn+5KQc3AFZSzzxnNcKCgZrpSUJ/jCsrZ54w+d6CgZrlSULNxBeXsc0azHSioOa4U1Be4gnL2OaMvHCioua4U1DxcQTn7nNE8BwpqvisF9SWuoJx9zuhLBwpqgSsFtRBXUM4+Z7TQgYJa5EpBfYUrKGefM/rKgYJa7EpBLcEVlLPPGS1xoKCWulJQX+MKytnnjL52oKC+caWgluEKytnnjJY5UFDLXSmob3EF5exzRt86UFDfuVJQK3AF5exzRiscKKjvXSmoH3AF5exzRj84UFA/ulJQK3EFlXS1oFY6UFA/Idco/zZPQdbGd0HJxR6QlrRscADAl9J6/R1I2AcOrHGQA2sc4sAahzmwxg8dWONIB9b4kQNrHOPAGj92YI3jHVjjJw6scZIDa/zMgTVOcWCNUx1Y43QH1jjTgTXOcmCNcxxY41wH1jjfgTUucGCNixxY42IH1rjUgTV+48Aalzuwxu8cWOP3DqzxRwfW+BNhjVnQNYaiWZoDc+6gxzt3IJCdkjN1zp+F3r+IsUqMX8X4TYzfxVgtxhox/hBjrRjrxFgvxp9ibBDjLzGyqolziZEtRo4YuWLkiZEvRoEYhWJUEaOqGNXEKBKjuhjFYtQQo6YYO4uxixi1xNhVjN3E2F2M2mLsIcaeYuwlxt5i7CPGvmLsJ8b+YtQR4wAxDhSjrhgHiXGwGPXEOESM+mIcKsZhYhwuxhFiHCnGUWI0ECNQ7R8NvGq+KOqvrEhRCtPmftHMrdLM/aqZ+00z97tmbrVmbo1m7g/N3FrN3DrN3HrN3J+auQ2aub80c7II0ud20sxla+ZyNHO5mrk8zVy+Zq5AM1eomauimauqmaummSvSzFXXzBVr5mpo5mpq5mRB1sna9ED/4Y7UGzIW/aU072fSBSAbrB/wBo/3iyMxA28YeasciRl4A8r71ZGYgTe0vN8ciRl4g8z73ZGYgTfcvNWOxAy8geetcSRm4A1B7w9HYgbeYPTWOhIz8Ialt86RmIE3QL31jsQMvKHq/elIzMAbtN4GR2IG3vD1/nIkZuANZE9+N+FCzMAb0t5OjsQMvMHtZTsSM/CGuZfjSMzAG/BeriMxA2/oe3mOxAx8QMDLdyRm4AMHXoEjMQMfYPAKHYkZ+ECEV8WRmIEPWHhVHYkZ+MCGV82RmIEPgHhFjsQMfKDEq+5IzMAHVLxiR2IGPvDi1XAkZuADNF5NUszoh4Z2rpa5fhVJecTLmOvcxRE9azmyzl0dWedujqxzd0fWWduRde7hyDr3dGSdezmyzr0dWec+jqxzX0fWuZ8j69zfkXXWcWSdBziyzgMdWWddR9Z5kCPrPNiRddZzZJ2HOLLO+o6s81BH1nmYI+s83JF1HuHIOo90ZJ1HObLOBo6sMwBcp3zpmvw9n9SXrjXK2vRAr5/xuzToNVa+KA2zxsoXpWHWWPmiNMwaK1+Uhllj5YvSMGusfFEaZo2VL0rDrLHyRWmYNVa+KA2zxsoXpWHWWPmiNMwaK1+UlvX3EcjsqHxRGmiNlS9Kw6yx8kVpmDW6+KI0zHljpPUGKs9bed7K81aet/K8leetPG/leSvP+3/0vLhzB4PEc3uKKVKfJQhWy8oKiREWo0SMiBhRMWJilIpxtBgNxThGjGPFOE6M4+VzDmKcIMaJYpwkxslinCLGqWI0FqOJGKeJcboYTcVoJsYZYjQXo4UYZ4pxlhhni9FSjHPEOFeM88Q4X4xWYlwgxoVitBajjRhtxbhIjHZiXCxGmRjlYsTFSIhRIUZSjPZiXCLGpWJcJkYHMS4X4woxrhSjoxhXiXF1taxNX6Qa1LxcNaSZC2vmSjRzEc1cVDMX08yVauaO1sw11Mwdo5k7VjN3nGbueM1cI83cCZq5EzVzJ2nmTtbMnaKZO1Uz11gz10Qzd5pm7nTNXFPNXDPN3BmaueaauRaauTM1c2dp5i7TzHXQzF2umbtCM3elZq6jZu4qzdzV/lzqke3/bOT/zPSXT4EPHHlB0kNi6JiRLwIOORIz8kXAYUdiRr4IuMSRmJEvAo44EjPyRcBRR2JGvgg45kjMyBcBlzoSM/JFwEc7EjPyRcANHYkZ+SLgYxyJGfki4GMdiRn5IuDjHIkZ+SLg4x2JGfki4EaOxIx8EfAJjsSMfBHwiY7EjHwR8EmOxIx8EfDJjsSMfBHwKY7EjHwR8KmOxIx8EXBjR2JGvgi4iSMxI18EfJojMSNfBHy6IzEjXwTc1JGYkS8CbuZIzMgXAZ/hSMzIFwE3dyRm5IuAWzgSM/JFwGc6EjPyRcBnkWJGPxR/drXM9TPxIuCWsHXGPOY6z3Ek7+c6ss7zHFnn+Y6ss5Uj67zAkXVe6Mg6WzuyzjaOrLOtI+u8yJF1tnNknRc7ss4yR9ZZ7sg6446sM+HIOiscWWfSkXW2d2SdlziyzktJ68zNdJ3epv+8LLN1bnK2DpnGnHK2ywG8rr6XCdezNBeBTaO+AlEz/tmuxNTf32frCMxFid25CKior8LtX+9q4LmAteyl5iKj78QqkqXyZbtFWRu/U6XkhlzbgUwOe2uG8cuW//Os1HxfU+2fn53SfylQ/h8WpM3J/6hOVmWhZGqoMRcMNa2gdzDmoB+zdw1Qv07ATcvKRTY4F0j9rtWcqzwQT5R45ZFE1KsoK4nF46UhzwuWRcoi5cFYsqK8xIuVxMQ542XBmPifC5bFvYpAWaRCXkSUd6Qf6Ab9WqDBpq73umrEBcuTo897PbAYWHFfX22jwKDzateKMBO5VtSGVedF5ugGcOGrC7o87wHip8lO8DLgBb4D8AJ/OfCickU1zkUFtJ+0neCN/n69Kb0TvFHTCd7E7AT9RV4B7D5uBG7Gm1LOFUyUVARKY+WxYHlZKFoeDpWXlpaJ80Y8L5ZMBAOJcDBZ4kUi8dKK0qQXSpaXVJRFSspKI4m/r56JsCPdB1K/mx3tPm4mdR+dqxEX3JnQfdxiefch477Fke7jJn+t6O4DmaNbSd3Hrf9B9wF6lvXvs8GeEfWwz14yX3oLyIW2+7jN369d0ruP2zTdRxcD30O5UCiZbuyjHfke6qequE7wNqAxdgEiw9GOdIJI/W53tBO8ndQJ3lGNuOA7CJ3gnZZ3gjLuOx3pBLv4a0V3gsgcdSV1gl3/g05wMfACvxR4gUf+Vt1yBzvBu/z9end6J3iXphO820An6EKhZLqxj3GkE1wO7ATvAhrj3cBO8BhHOkGkft0c7QS7kTrB7tWIC+5O6ATvsbwTlHHf40gneLe/VnQniMzRvaRO8N7/oBOcC7zAzwde4JHvS1nkYCd4n79fe6R3gvdpOsEeBjpBFwol0419nCOd4CJgJ3gf0Bh7ADvB4xzpBJH63e9oJ3g/qRN8oBpxwQ8QOsEHLe8EZdwPOtIJ9vDXiu4EkTl6iNQJPvQfdILTgRf4mcALPPJNmHMc7AQf9vfrI+md4MOaTvARA52gC4WS6cZu5EgnOAfYCT4MNMZHgJ1gI0c6QaR+jzraCT5K6gQfq0Zc8GOETvBxyztBGffjjnSCj/hrRXeCyBw9QeoEn/gPOsFJwAv8Z8ALPPJvHEx1sBN80t+vPdM7wSc1nWBPA52gC4WS6cY+0ZFOcCqwE3wSaIw9gZ3giY50gkj9nnK0E3yK1Ak+XY244KcJneAzlneCMu5nHOkEe/prRXeCyBz1InWCvf6DTnAM8AL/MfACj/zrdZ842Ak+6+/X59I7wWc1neBzBjpBFwol0419siOd4CfATvBZoDE+B+wET3akE0Tq97yjneDzpE6wdzXignsTOsEXLO8EZdwvONIJPuevFd0JInP0IqkTfPE/6ASHAS/wHwIv8Mi/S/6Rg53gS/5+7ZPeCb6k6QT7GOgEXSiUTDf2qY50gh8BO8GXgMbYB9gJnupIJ4jU72VHO8GXSZ3gK9WIC36F0Am+anknKON+1ZFOsI+/VnQniMxRX1In2NdkJ+hflD8AXpQHAbu3IVVxTczPDnaCr/n79fX0TvA1TSf4OrMTdKhQMt3YTWzvBDUFnWkn+BrQGF8HdoJNHOkEkfq94Wgn+AapE+xXjbjgfoRO8E3LO0EZ95uOdIKv+2tFd4LIHL1F6gTf8jvB1AOt79uAtYeisb9/MtfZH7DOSFmgtCISiTLX+Q5gneXlkWhZRayEuc53EXmPRyqSoWiQuc73AOssKwknkyWhMuY6BwDWWeIFKkqC0SRzne8D1llaHiiJxGJx5jo/AKzTS8ZCidKycuY6ByLyXl4h2juvVK5t16xNYS71K/7UBz9SHwdO/SWx1FcHpL5QSn7ukvL57ZTPr1fd8c83pZynU8rn/imf30n5/G7K5/dSPg9I+fx+yucPUj4P9D8PEj8HizFEjKFiDBNjuBgfijGi2ubfmKD7pxHA672CwpHinKPE+EiM0X7HntoLyP97Ydamc6M0cx9p5kb7c6kH+rbECGA/NRJwrr//Jlgy4I0Crut0EozmpOUik5hlLj6C6PdPXkcDYR6pH3uPf0jY42PEOceK8bEY4zR7fIxm747VzH2smRtnYI9/CNxLY4B7fCxwXc0c2eMfA/f4OOAeb+bQHh9O2OPjxTkniPGJGBM1e3y8Zu9O0Mx9opmbaGCPDwfupfHAPT4BuK7mjuzxT4B7fCJwjzd3aI8PI+zxSeKcn4rxmRiTNXt8kmbvfqqZ+0wzN9nAHh8G3EuTgHv8U+C6znRkj38G3OOTgXv8TIf2+FDCHp8izjlVjGliTNfs8SmavTtVMzdNMzfdwB4fCtxLU4B7fCpwXWc7ssenAff4dOAeP9uhPT6EsMdniHPOFONzMWZp9vgMzd6dqZn7XDM3y8AeHwLcSzOAe3wmcF3nOLLHPwfu8VnAPX6OQ3t8MGGPzxbnnCPGF2LM1ezx2Zq9O0cz94Vmbq6BPT4YuJdmA/f4HOC6znNkj38B3ONzgXv8PIf2+CDCHp8nzjlfjC/FWKDZ4/M0e3e+Zu5LzdwCA3t8EHAvzQPu8fnAdbVyZI9/CdzjC4B7vJVDe3wn3LkCdfzzLBRaLhLjKzEWi7FEjKVifC3GN2IsE2O5GN+K8Z0YK8T4XowfxPhRjJVi/CTGz2L8IsYqMX4V4zcxfhdjtRhrxPhDjLVirBNjvRh/irFB4ykLNV6xSDP3lWZusWZuiWZuqWbua83cN5q5ZZq55Zq5bzVz32nmVmjmvtfM/aCZ+1Ezt1Iz95Nm7mfN3C+auVWauV81c79p5n7XzK3WzK3RzP2hmVurmVunmVuvmftTM7fBwDUodc9m6vULgdegRcBr0IWGfrEj02vQV8Br0OLMz/W/XxJZAsxFa5tzEf7fOr2lmcUcSInZ+zqTcwU30c/7BpiLNnbmIpC2Tm/ZDsYcSW4Ws7d8x84V0+jnfQvMRVvbchHTrtP7bvtjjm4hZm/F9p4rukX9vO+BubjInlwE/2Wd3g/bE3P0X2P2ftz2c8W3op+3EpiLdjbkIrrVdXo/bVvMgW2I2ft5W84V2Cb9vF+Aubj4v81FyTau01u1tZjD2xyz9+u/niuc3A79vN+AuSj7r3IR3a51er9vOebYdsbsrd7CuUqT262ftwaYi3LzuQjswDq9P3QxB3YoZm/t5ufydlA/bx0wF3GTuUjs8Dq99ZvGHMogZu/PlHMFkxnp520A5iLhyKu1gN8PeEC+9VL5LNNcVDiSCyAHecA+3msHzEXSkVwA+z0P2K945cBctHckF8Drmgf0Za8CmItLDN0rDGR2eMD96wHrz2Ppl52mX6Z5RvYYf8HutYYCJl+ag1v3pi/N+fvVcawFy5PDbxoX4YqBFfdORRv1BZ038G+v+UPHsAFWbAnGK/D8VW76gEK2r3lOUdamd0Wz/SJMnZP/UfqdUrTrI1xL3d3MBhZ9ThE2uYwNnq0xjkzjzi5y42r3J/BqlwuLORI2ebXLLeJc7fKKiAvOI1zt8i2/2sm48x2/2v0Ju9qVxjXLpVztCnzNC9OvdgWaq12hgavdn8CrXQGw6AuLOMlFuz4y5io49/SysvBX4p1808gG1yASDaqCuwW0ackcVyV0SbbHrWoHHXc1R7pDZI0XkX0ikNnhyZwUEXyiKlDD6g7sl+qE/VIM7tBVr1KcslaWFuh6KgLWUw2SrjWKNic3tDetB5JrTZgOYaMvN68Jzp86di4iLnhnArnuYjm5yrh3cZxc18PItTyoWS6FXGv5mu+aTq61NOS6qwFyXQ8k11rAot+1iJNctOsjY97N8o60hm8aqN8m1V31Mz0X0nh3tzwfsl52J3S3wLgpf+1C1SG6k0XWTm3LyUhqWJug4e5ADfdw5FsJpH/tabnnyJzsSfCcvUjktxeRqJUW6D2ErKe9SbrubYCokU+67wPTIRo0SdT7gPOnjn2LiAvel0DU+1lO1DLu/Rwn6nUwoo5VaJZLIer9fc3rpBP1/hqirmOAqNcBiXp/YNHXKeIkF+36yJgPsLyb2ts3DTRR7w3UEGm8B1qeD1kvBxK6W2DcFKJWdYjuZJG1U9dyopYa1iVoeCBQw4McIWqkfx1suefInBxM8Jx6JPKrRyRqpQV6DyHr6RCSrocYIOq1QKKuD9OhwjNJ1PXB+VPHoUXEBR9KIOrDLCdqGfdhjhP1WhhRe0nNcilEfbiv+RHpRH24hqiPMEDUa4FEfTiw6I8o4iQX7frImI+0vJs6xDcNNFEfAtQQabxHWZ4PWS9HEbpbYNwUolZ1iO5kkbXTwHKilho2IGh4FFDDgCNEjfQvz3LPkTnxCJ4TJJFfkEjUSgv0HkLWU4ika8gAUf8BJOowTIeQUaIOg/OnjpIi4oJLCEQdsZyoZdwRx4n6DxhRx40RddTXPJZO1FENUccMEPUfQKKOAos+VsRJLtr1kTGXWt5NhXzTQBN1CKgh0niPtjwfsl6OJnS3wLgpRK3qEN3JImunoeVELTVsSNDwaKCGxzhC1Ej/OtZyz5E5OZbgOceRyO84IlErLdB7CFlPx5N0Pd4AUSPfNd8IpkOZ0fddNgLnTx0nFBEXfAKBqE+0nKhl3Cc6TtRrYEQdMfa+y5N8zU9OJ+qTNER9sgGiXgMk6pOARX9yESe5aNdHxnyK5d3U8b5poIn6eKCGSOM91fJ8yHo5ldDdAuOmELWqQ3Qni6ydxpYTtdSwMUHDU4EaNnGEqJH+dZrlniNzchrBc04nkd/pRKJWWqD3ELKempJ0bWqAqFcDiboZTIdgqUmibgbOnzrOKCIu+AwCUTe3nKhl3M0dJ+rVuL8gEdUsl0LULXzNz0wn6hYaoj7TAFGvBhJ1C2DRn1nESS7a9ZExn2V5N9XUNw00UTcFaog03rMtz4esl7MJ3S0wbgpRqzpEd7LI2mlpOVFLDVsSNDwbqOE5jhA10r/OtdxzZE7OJXjOeSTyO49I1EoL9B5C1tP5JF3PN0DUvwOJuhVMh/KYSaJuBc6fOi4oIi74AgJRX2g5Ucu4L3ScqH+HEXU4plkuhahb+5q3SSfq1hqibmOAqH8HEnVrYNG3KeIkF+36yJjbWt5Nne+bBpqozwdqiDTeiyzPh6yXiwjdLTBuClGrOkR3ssjaaWc5UUsN2xE0vAio4cWOEDXSv8os9xyZkzKC55STyK+cSNRKC/QeQtZTnKRr3ABR/wYk6gRMhxKjT30nwPlTR0URccEVBKJOWk7UMu6k40T9G+6vZxl76ru9r/kl6UTdXkPUlxgg6t+ARN0eWPSXFHGSi3Z9ZMyXWt5NxX3TQBN1HKgh0ngvszwfsl4uI3S3wLgpRK3qEN3JImung+VELTXsQNDwMqCGlztC1Ej/usJyz5E5uYLgOVeSyO9KIlErLdB7CFlPHUm6djRA1L8Cifoq3B2aEpNEfRU4f+q4uoi44KsJRH2N5UQt477GcaL+FUfU5ZrlUoi6k6/5telE3UlD1NcaIOpfgUTdCVj01xZxkot2fWTM11neTXX0TQNN1B2BGiKN93rL8yHr5XpCdwuMm0LUqg7RnSyydm6wnKilhjcQNLweqOGNjhA10r9ustxzZE5uInjOzSTyu5lI1EoL9B5C1lNnkq6dDRD1KiBR34LrJyMmifoWcP7UcWsRccG3Eoj6NsuJWsZ9m+NEvQr31HeZZrkUou7ia357OlF30RD17QaIehWQqLsAi/72Ik5y0a6PjPkOy7upzr5poIm6M1BDpPHeaXk+ZL3cSehugXFTiFrVIbqTRdZOV8uJWmrYlaDhnUAN73KEqJH+dbflniNzcjfBc7qRyK8bkaiVFug9hKyn7iRduxsg6l+ARH0PTIeY0b+edQ84f+q4t4i44HsJRH2f5UQt477PcaL+BUbUUWN/PauHr/n96UTdQ0PU9xsg6l+ARN0DWPT3F3GSi3Z9ZMwPWN5NdfdNA03U3YEaIo33QcvzIevlQUJ3C4ybQtSqDtGdLLJ2HrKcqKWGDxE0fBCo4cOOEDXSvx6x3HNkTh4heM6jJPJ7lEjUSgv0HkLW02MkXR8zQNQ/A4n6cUeJ+nFw/tTxRBFxwU8QiPpJy4laxv2k40T9s4NE3dPX/Kl0ou6pIeqnDBD1z0Ci7gks+qccIWpkzE9b3k095psGmqgfA2qINN5nLM+HrJdnCN0tMG4KUas6RHeyyNrpZTlRSw17ETR8Bqjhs44QNdK/nrPcc2ROniN4zvMk8nueSNRKC/QeQtZTb5KuvQ0Q9U9Aon4BpkOJ0Xd9vwDOnzpeLCIu+EUCUb9kOVHLuF9ynKh/ghF1mbF3fffxNX85naj7aIj6ZQNE/ROQqPsAi/7lIk5y0a6PjPkVy7up3r5poIm6N1BDpPG+ank+ZL28SuhugXFTiFrVIbqTRdZOX8uJWmrYl6Dhq0ANX3OEqJH+9brlniNz8jrBc94gkd8bRKJWWqD3ELKe+pF07WeAqFcCifpNHFEnTBL1m+D8qeOtIuKC3yIQ9duWE7WM+23HiXoljqhDmuVSiLq/r/k76UTdX0PU7xgg6pVAou4PLPp3ijjJRbs+MuZ3Le+m+vmmgSbqfkANkcb7nuX5kPXyHqG7BcZNIWpVh+hOFlk7AywnaqnhAIKG7wE1fN8Rokb61weWe47MyQcEzxlIIr+BRKJWWqD3ELKeBpF0HWSAqH8EEvVgmA5Bo/eoB4Pzp44hRcQFDyEQ9VDLiVrGPdRxov4RRtQJY/eoh/maD08n6mEaoh5ugKh/BBL1MGDRDy/iJBft+siYP7S8mxrkmwaaqAcBNUQa7wjL8yHrZQShuwXGTSFqVYfoThZZOyMtJ2qp4UiChiOAGo5yhKiR/vWR5Z4jc/IRwXNGk8hvNJGolRboPYSspzEkXccYIOofgEQ9FqZDKGSSqMeC86eOj4uIC/6YQNTjLCdqGfc4x4n6BxhRxxOa5VKIeryv+YR0oh6vIeoJBoj6ByBRjwcW/YQiTnLRro+M+RPLu6kxvmmgiXoMUEOk8U60PB+yXiYSultg3BSiVnWI7mSRtTPJcqKWGk4iaDgRqOGnjhA10r8+s9xzZE4+I3jOZBL5TSYStdICvYeQ9TSFpOsUA0T9PZCop8J0qDB6j3oqOH/qmFZEXPA0AlFPt5yoZdzTHSfq72FE7Rm7Rz3D13xmOlHP0BD1TANE/T2QqGcAi35mESe5aNdHxvy55d3UFN800EQ9Bagh0nhnWZ4PWS+zCN0tMG4KUas6RHeyyNqZbTlRSw1nEzScBdRwjiNEjfSvLyz3HJmTLwieM5dEfnOJRK20QO8hZD3NI+k6zwBRrwAS9XyYDmGjRD0fnD91fFlEXPCXBKJeYDlRy7gXOE7UK2BEXW6MqBf6mi9KJ+qFGqJeZICoVwCJeiGw6BcVcZKLdn1kzF9Z3k3N800DTdTzgBoijXex5fmQ9bKY0N0C46YQtapDdCeLrJ0llhO11HAJQcPFQA2XOkLUSP/62nLPkTn5muA535DI7xsiUSst0HsIWU/LSLouM0DU3wGJejlMh2ipSaJeDs6fOr4tIi74WwJRf2c5Ucu4v3OcqL+DEXUsqlkuhahX+Jp/n07UKzRE/b0Bov4OSNQrgEX/fREnufDvUYEx/2B5N7XMNw00US8Daog03h8tz4eslx8J3S0wbgpRqzpEd7LI2llpOVFLDVcSNPwRqOFPjhA10r9+ttxzZE5+JnjOLyTy+4VI1EoL9B5C1tMqkq6rDBD1t0Ci/hV3h8YoUf8Kzp86fisiLvg3AlH/bjlRy7h/d5yov4URddgYUa/2NV+TTtSrNUS9xgBRfwsk6tXAol9TxEku2vWRMf9heTe1yjcNNFGvAmqINN61ludD1staQncLjJtC1KoO0Z0ssnbWWU7UUsN1BA3XAjVc7whRI/3rT8s9R+bkT4LnbCCR3wYiUSst0HsIWU9/kXT9ywBRLwcSdVZ12D3qgEmixq17U6LeqTpxwfLk6PNmV7ebqGXc2dU3Cgw6r1GiXg4j6tKAZrkUos7xNc+tnrUpPedU35yo5X/EJurlQKLOARZ9bnVOctGuj4w5rzpwg2fhN5y8ikrTQBP1X8AOAmm8+ZbnQ9ZLfnV8dwuMm0LUqg7RnSyydgrIGgYyO/7eywUEDfOBGhaCNVQH+hqA9K8qlnuOzEkVgudUBZOD6qGqVucRtdICvYeQ9VSNpGu16nyiXgYk6iJcP+mZJOoicP7UUb06ccHVCURdbDlRy7iLHSfqZTCijiQ1y6UQdQ1f85rpRF1DQ9Q1DRD1MiBR1wAWfc3qnOSiXR8Z886Wd1PVfNNAE3U1oIZI493F8nzIetmF0N3uAiYZ9PpUHaI7WWTt1LKcqKWGtQga7gLUcFdHiBrpX7tZ7jkyJ7sRPGd3EvntTiRqpQV6DyHrqTZJ19oGiPobIFHvAdMhbPSvZ+0Bzp869qxOXPCeBKLey3KilnHv5ThRf4N7M5mxv561t6/5PulEvbeGqPcxQNTfAIl6b2DR71Odk1y06yNj3tfybqq2bxpooq4N1BBpvPtZng9ZL/sRultg3BSiVnWI7mSRtbO/5UQtNdyfoOF+QA3rOELUSP86wHLPkTk5gOA5B5LI70AiUSst0HsIWU91SbrWNUDUXwOJ+iCYDhVG71EfBM6fOg6uTlzwwQSirmc5Ucu46zlO1F/j/nqWsXvUh/ia108n6kM0RF3fAFF/DSTqQ4BFX786J7lo10fGfKjl3VRd3zTQRF0XqCHSeA+zPB+yXg4jdLfAuClEreoQ3ckia+dwy4laang4QcPDgBoe4QhRI/3rSMs9R+bkSILnHEUiv6OIRK20QO8hZD01IOnawABRLwUSdQCmQ7LEJFEHwPlTh1eduGCPQNRBy4laxh10nKiXwog6UK5ZLoWoQ77m4XSiDmmIOmyAqJcCiToELPpwdU5y0a6PjLnE8m6qgW8aaKJuANQQabwRy/Mh6yVC6G6BcVOIWtUhupNF1k7UcqKWGkYJGkaAGsYcIWqkf5Va7jkyJ6UEzzmaRH5HE4laaYHeQ8h6akjStaEBol4CJOpjYDqUGn3q+xhw/tRxbHXigo8lEPVxlhO1jPs4x4l6Ce73qI099X28r3mjdKI+XkPUjQwQ9RIgUR8PLPpG1TnJRbs+MuYTLO+mGvqmgSbqhkANkcZ7ouX5kPVyIqG7BcZNIWpVh+hOFlk7J1lO1FLDkwgangjU8GRHiBrpX6dY7jkyJ6cQPOdUEvmdSiRqpQV6DyHrqTFJ18YGiHoxkKib4O5RG33XdxNw/tRxWnXigk8jEPXplhO1jPt0x4l6Me6pb2Pv+m7qa94snaibaoi6mQGiXgwk6qbAom9WnZNctOsjYz7D8m6qsW8aaKJuDNQQabzNLc+HrJfmhO4WGDeFqFUdojtZZO20sJyopYYtCBo2B2p4piNEjfSvsyz3HJmTswieczaJ/M4mErXSAr2HkPXUkqRrS19Xk3T5VTVsLOo4pzpxwecQ6PJcy+lSxn0ugS51a0VskHMJmxi48ej5tlVDZNznOdJMtATGfL7lzYSM9TxCM9HK8uZb5qUV2XMy1fACUuNwwX/QOCwiNQ4XVicu+EJC49Da8sZBxt3akcZBFnJrwiYGbjx6vm3VEBl3G0cahwuAMbe1vHGQsbYhNA4XWd44yLxcRPacTDVsR2oc2hm4h78QeA//YuAeMtksXVyd0yyVVScuuIzQLJVb3izJuMsNNUuBzA6vnb9W9K3DdsAcIfMdt/wCKo0uTriAJiy/gMqYE4S4K0gXvQrNIyBoTdg5Q+zxckLTg9zvScvrXmqYJGgYB2rY3hHQQl5zLrH8OiFzcgnBLy8l+eWlxNu9Sgv0HkLW02WkPYTW8jJgzGptdVLWuqHaP9dN+fnPlM/rUz6vS/m8NuXzHymf16R8Xp3y+feUz7+lfP415fOqlM+/pHz+OeXzTymfV6Z8/jHl8w8pn79P+bwi5fN3KZ+/Tfm8POXzspTP36R8/jrl89KUz0tSPi9O+fxVyudFKZ8XpnyenPL5s5TPn6Z8npTyeWLK509SPk9I+Tw+5fO4lM8fp3wem/J5TMrn0SmfP0r5PCrl88iUzwtSPn+Z8nl+yud5KZ/npnz+IuXznJTPs1M+z0r5/HnK55kpn2ekfJ6e8nlayuepKZ+n+J/Vxu0g9tjlYlwhxpVidBTjKjGuFuMaMTqJca0Y14lxvRg3iHGjGDeJcbMYncW4RYxbxbhNjC5i3C7GHWLcKUZXMe4S424xuonRXYx7xLhXjPvE6CHG/WI8IMaDYjwkxsNiPCLGo2I8JsbjYjwhxpNi9BTjKTGeFuMZ38erZG1kRvnvEmG+G/zPkZTP0ex/fman/LdLCzf+37/2P/cS531WjOeq/3MHytSz6s+RfDkLu85gqhbP+98t9K7uC6IusvL/8GfaAtDPpT8HuED881x6Mvk88GLT21CTGsjs8JAxv5ByLi8WCgajIfnfxRIBL5yIB2PBYKI8HIgHyuLBitKwV5oMB8OheCJeLs5Z5iUDybJ4aTL2z7pMfpP5AumbzBerExf8IuGbzJcs/yZTxv1S9Y0Cg85L+Tait79W9Hn7kIioT/XNr3Do/CFNkb3WXsC11vHP87I45ytivCpGXzFeE+N1Md4Qo58Yb4rxlhhvi9FfjHfEeFeM98QYIMb7YnwgxkAxBokxWIwhYgwVY5gYw8X4UIwRYowUY5QYH4kxWowx/tU5NecvV9/YFaq5VzRzr2rm+mrmXtPMva6Ze0Mz108z96Zm7i3N3Nuauf6auXc0c+9q5t7TzA3QzL2vmftAMzdQMzdIMzdYMzdEMzdUMzdMMzdcM/ehZm6EZm6kZm6UZu4jzdxozdyY6pt/Q53r/2zk/wxkdmyyZzP12ZdhjWXAewW4rhvrcRrL9FxkErPMxasQ/f7Ja9/MzxX09fNeA+biJptzEf7fOr3XM4s5kBKz90Ym5wpuop/XD5iLm+3MRSBtnd6bOxhzJLlZzN5bO3aumEY/721gLjrblouYdp1e/+2PObqFmL13tvdc0S3q570LzMUt9uQi+C/r9N7bnpij/xqzN2DbzxXfin7e+8Bc3GpDLqJbXaf3wbbFHNiGmL2B23KuwDbp5w0C5uK2/zYXJdu4Tm/w1mIOb3PM3pB/PVc4uR36eUOBuejyX+Uiul3r9IZtOebYdsbsDd/CuUqT262f9yEwF7ebz0VgB9bpjdDFHNihmL2Rm5/L20H9vFHAXNxhMheJHV6n99GmMYcyiNkbnXKuYDIj/bwxwFzcaSgXgcwOD/j9gAfkWy+VzzLNRVdHcgHkIA/Yx3u3AnNxlyO5APZ7HrBf8W4H5uJuR3IBvK55QF/2ugJz0Y2UC/QDFMD96wHrz0PqJ+u3vhh1/PON8e+JfeTfIxvp3zP70L+HNsy/pzbEv8c2yL/n9oF/D26Af0/uXf8eXX//nt1b/j28fv49vdf9e3x9/Xt+8j6AvK+QfqCfPEb2PWOro/IQMvqKWdy6N32o4+PqxAXLk6PPOw5YDKy4x6VsCtB5jb5idgys2BLGXjE73td8gv9gwP/u1I73izB1bkJ1/itmEa6l7riOBxb9BHByGRt8fHX8k0bjq3M6GPTVbjQw15/AYo6ETV7tPiFd7SZWJy54IuFqN8nyq52Me5LjV7vRsGIrjWuWS7nafepr/ln61e5TzdXuMwNXu9HAq92nwKL/jJRctOsjY56Mc0/tb1dmur5xvmlkg2sQiQZTwN0C2rRkjqcQuiTb41a1g457qiPdIbLGp5F9IpDZ4cmcTCP4xBSghtMd2C/TCftlBrhDV73KjJS1srRA19M0YD3NJOk6s/rm5Ib2po+AOnwO0yFcYZJcPwfnTx2zqhMXPItArrMtJ1cZ92zHyfUjWLGVBzXLxZw7jVzn+Jp/kU6uczTk+oUBckW4liLXOcCi/4KU3Ow0/TJdJzLmuZZ3pDN900C/z28mUEOk8c6zPB+yXuYRultg3JTfxlZ1mA3WE1k78y0nI6nhfIKG84AafunItxJI/1pguefInCwgeM5CEvktJBK10gK9h5D1tIik6yIDRI18+v4rmA7RoNE/f0Yi6sXViQteTCDqJZYTtYx7ieNEPQpWbLEKzXIpRL3U1/zrdKJeqiHqrw0QNcK1FFEvBRb916Tkol0fGfM3lndTi3zTQBP1IqCGSONdZnk+ZL0sI3S3wLgpRK3qEN3JImtnueVELTVcTtBwGVDDbx0haqR/fWe558icfEfwnBUk8ltBJGqlBXoPIevpe5Ku3xsg6pFAHX6A6VBh9AWxP4Dzp44fqxMX/COBqFdaTtQy7pWOE/VIWLF5Sc1yKUT9k6/5z+lE/ZOGqH82QNQI11JE/ROw6H8mJRft+siYf7G8m/reNw00UX8P1BBpvKssz4esl1WE7hYYN4WoVR2iO1lk7fxqOVFLDX8laLgKqOFvjhA10r9+t9xzZE5+J3jOahL5rSYStdICvYeQ9bSGpOsaA0Q9AqjDHzAdQkaJ+g9w/tSxtjpxwWsJRL3OcqKWca9znKhHwIotboyo1/ua/5lO1Os1RP2nAaJGuJYi6vXAov+TlFy06yNj3mB5N7XGNw00Ua8Baog03r8sz4esl78I3S0wbgpRqzpEd7LQi3ax3UQtNZRrRGv4F1DDncAaqgN9DUD6V3ax3Z4jcyLXiN7TOcBcp/ZQOcU8olZaoPcQsp5ySbrmFvOJGvn++zyYDmVG33eZB86fOvKLiQvOL8aft6DYbqKWcRcUbxQYdF6jRP0hrPGLGHvfZaGveZXirE3pubB4c6KW/xGbqD8EEnUhsOirFHOSi3Z9ZMxVLe+mcn3TQBN1LlBDpPFWszwfsl6qEbpbYNwUolZ1iO5kkbVTZDlRSw2LCBpWA2pY3RGiRvpXseWeI3NSTPCcGiTyq0EkaqUFeg8h66kmSdeaBoh6OJCod4bpECw1SdQ7g/Onjl2KiQvehUDUtSwnahl3LceJejiMqBNRzXIpRL2rr/lu6US9q4aodzNA1MOBRL0rsOh3K+YkF+36yJh3t7ybqumbBpqoawI1RBpvbcvzIeulNqG7BcZNIWpVh+hOFlk7e1hO1FLDPQga1gZquKcjRI30r70s9xyZk70InrM3ifz2JhK10gK9h5D1tA9J130MEPUwIFHvC9OhPGaSqPcF508d+xUTF7wfgaj3t5yoZdz7O07Uw2BEHY5plksh6jq+5gekE3UdDVEfYICohwGJug6w6A8o5iQX7frImA+0vJvaxzcNNFHvA9QQabx1Lc+HrJe6hO4WGDeFqFUdojtZZO0cZDlRSw0PImhYF6jhwY4QNdK/6lnuOTIn9QiecwiJ/A4hErXSAr2HkPVUn6RrfQNEPRRI1IfCdCgx+tT3oeD8qeOwYuKCDyMQ9eGWE7WM+3DHiXoojKjLjT31fYSv+ZHpRH2EhqiPNEDUQ4FEfQSw6I8s5iQX7frImI+yvJuq75sGmqjrAzVEGm8Dy/Mh66UBobsFxk0halWH6E4WWTsBy4laahggaNgAqKHnCFEj/StouefInAQJnhMikV+ISNRKC/QeQtZTmKRr2ABRDwESdQnuDk2JSaIuAedPHZFi4oIjBKKOWk7UMu6o40Q9BEfU5ZrlUog65mtemk7UMQ1Rlxog6iFAoo4Bi760mJNctOsjYz7a8m4q7JsGmqjDQA2RxtvQ8nzIemlI6G6BcVOIWtUhupNF1s4xlhO11PAYgoYNgRoe6whRI/3rOMs9R+bkOILnHE8iv+OJRK20QO8hZD01IunayABRDwYS9Qm4fjJikqhPAOdPHScWExd8IoGoT7KcqGXcJzlO1INxT32XaZZLIeqTfc1PSSfqkzVEfYoBoh4MJOqTgUV/SjEnuWjXR8Z8quXdVCPfNNBE3QioIdJ4G1ueD1kvjQndLTBuClGrOkR3ssjaaWI5UUsNmxA0bAzU8DRHiBrpX6db7jkyJ6cTPKcpifyaEolaaYHeQ8h6akbStZkBoh4EJOozYDrEjP71rDPA+VNH82LigpsTiLqF5UQt427hOFEPghF11NhfzzrT1/ysdKI+U0PUZxkg6kFAoj4TWPRnFXOSi3Z9ZMxnW95NNfNNA03UzYAaIo23peX5kPXSktDdAuOmELWqQ3Qni6ydcywnaqnhOQQNWwI1PNcRokb613mWe47MyXkEzzmfRH7nE4laaYHeQ8h6akXStZUBoh4IJOoLHCXqC8D5U8eFxcQFX0gg6taWE7WMu7XjRD3QQaJu42veNp2o22iIuq0Boh4IJOo2wKJv6whRI2O+yPJuqpVvGmiibgXUEGm87SzPh6yXdoTuFhg3hahVHaI7WWTtXGw5UUsNLyZo2A6oYZkjRI30r3LLPUfmpJzgOXES+cWJRK20QO8hZD0lSLomDBD1B0CiroDpUGL0Xd8V4PypI1lMXHCSQNTtLSdqGXd7x4n6AxhRlxl71/clvuaXphP1JRqivtQAUX8AJOpLgEV/aTEnuWjXR8Z8meXdVMI3DTRRJ4AaIo23g+X5kPXSgdDdAuOmELWqQ3Qni6ydyy0naqnh5QQNOwA1vMIRokb615WWe47MyZUEz+lIIr+ORKJWWqD3ELKeriLpepUBon4fSNRX44g6YZKorwbnTx3XFBMXfA2BqDtZTtQy7k6OE/X7OKIOaZZLIeprfc2vSyfqazVEfZ0Bon4fSNTXAov+umJOctGuj4z5esu7qat800AT9VVADZHGe4Pl+ZD1cgOhuwXGTSFqVYfoThZZOzdaTtRSwxsJGt4A1PAmR4ga6V83W+45Mic3EzynM4n8OhOJWmmB3kPIerqFpOstBoh6AJCob4XpEDR6j/pWcP7UcVsxccG3EYi6i+VELePu4jhRD4ARdcLYPerbfc3vSCfq2zVEfYcBoh4AJOrbgUV/RzEnuWjXR8Z8p+Xd1C2+aaCJ+haghkjj7Wp5PmS9dCV0t8C4KUSt6hDdySJr5y7LiVpqeBdBw65ADe92hKiR/tXNcs+ROelG8JzuJPLrTiRqpQV6DyHr6R6SrvcYIOr3gER9L0yHUMgkUd8Lzp867ismLvg+AlH3sJyoZdw9HCfq92BEHU9olksh6vt9zR9IJ+r7NUT9gAGifg9I1PcDi/6BYk5y0a6PjPlBy7upe3zTQBP1PUANkcb7kOX5kPXyEKG7BcZNIWpVh+hOFlk7D1tO1FLDhwkaPgTU8BFHiBrpX49a7jkyJ48SPOcxEvk9RiRqpQV6DyHr6XGSro8bIOp3gUT9BEyHCqP3qJ8A508dTxYTF/wkgah7Wk7UMu6ejhP1uzCi9ozdo37K1/zpdKJ+SkPUTxsg6neBRP0UsOifLuYkF+36yJifsbybetw3DTRRPw7UEGm8vSzPh6yXXoTuFhg3hahVHaI7WWTtPGs5UUsNnyVo2Auo4XOOEDXSv5633HNkTp4neE5vEvn1JhK10gK9h5D19AJJ1xcMEPU7QKJ+EaZD2ChRvwjOnzpeKiYu+CUCUfexnKhl3H0cJ+p3YERdboyoX/Y1fyWdqF/WEPUrBoj6HSBRvwws+leKOclFuz4y5lct76Ze8E0DTdQvADVEGm9fy/Mh66UvobsFxk0halWH6E4WWTuvWU7UUsPXCBr2BWr4uiNEjfSvNyz3HJmTNwie049Efv2IRK20QO8hZD29SdL1TQNE3R9I1G/BdIiWmiTqt8D5U8fbxcQFv00g6v6WE7WMu7/jRN0fRtSxqGa5FKJ+x9f83XSifkdD1O8aIOr+QKJ+B1j07xZzkgv/HhUY83uWd1Nv+qaBJuo3gRoijXeA5fmQ9TKA0N0C46YQtapDdCeLrJ33LSdqqeH7BA0HADX8wBGiRvrXQMs9R+ZkIMFzBpHIbxCRqJUW6D2ErKfBJF0HGyDqt4FEPQR3h8YoUQ8B508dQ4uJCx5KIOphlhO1jHuY40T9Noyow8aIeriv+YfpRD1cQ9QfGiDqt4FEPRxY9B8Wc5KLdn1kzCMs76YG+6aBJurBQA2RxjvS8nzIehlJ6G6BcVOIWtUhupNF1s4oy4laajiKoOFIoIYfOULUSP8abbnnyJyMJnjOGBL5jSEStdICvYeQ9TSWpOtYA0T9FpCoP8bdow6YJOqPwflTx7hi4oLHEYh6vOVELeMe7zhRvwUj6tKAZrkUop7ga/5JOlFP0BD1JwaI+i0gUU8AFv0nxZzkol0fGfNEy7upsb5poIl6LFBDpPFOsjwfsl4mEbpbYNwUolZ1iO5kkbXzqeVELTX8lKDhJKCGnzlC1Ej/mmy558icTCZ4zhQS+U0hErXSAr2HkPU0laTrVANE/SaQqKfh+knPJFFPA+dPHdOLiQueTiDqGZYTtYx7huNE/SaMqCNJzXIpRD3T1/zzdKKeqSHqzw0Q9ZtAop4JLPrPiznJRbs+MuZZlndTU33TQBP1VKCGSOOdbXk+ZL3MJnS3wLgpRK3qEN3JImtnjuVELTWcQ9BwNlDDLxwhaqR/zbXcc2RO5hI8Zx6J/OYRiVppgd5DyHqaT9J1vgGi7gck6i9xzzwa/etZX4Lzp44FxcQFLyAQ9ULLiVrGvdBxou6HezOZsb+etcjX/Kt0ol6kIeqvDBB1PyBRLwIW/VfFnOSiXR8Z82LLu6n5vmmgiXo+UEOk8S6xPB+yXpYQultg3BSiVnWI7mSRtbPUcqKWGi4laLgEqOHXjhA10r++sdxzZE6+IXjOMhL5LSMStdICvYeQ9bScpOtyA0T9BpCov4XpUGH0HvW34Pyp47ti4oK/IxD1CsuJWsa9wnGifgP317OM3aP+3tf8h3Si/l5D1D8YIOo3gET9PbDofyjmJBft+siYf7S8m1rumwaaqJcDNUQa70rL8yHrZSWhuwXGTSFqVYfoThZZOz9ZTtRSw58IGq4EavizI0SN9K9fLPccmZNfCJ6zikR+q4hErbRA7yFkPf1K0vVXA0T9OpCof4PpkCwxSdS/gfOnjt+LiQv+nUDUqy0nahn3aseJ+nUYUQfKNculEPUaX/M/0ol6jYao/zBA1K8DiXoNsOj/KOYkF+36yJjXWt5N/eqbBpqofwVqiDTedZbnQ9bLOkJ3C4ybQtSqDtGdLLJ21ltO1FLD9QQN1wE1/NMRokb61wbLPUfmZAPBc/4ikd9fRKJWWqD3ELKesmpwdJXnZRP1a0Ci3gmmQ6nRp753Aufvf7mqQVxwdg38eXNq2E3UMu6cGhsFBp3XKFG/hvs9amNPfef6mufVyNqUnnNrbE7U8j9iE/VrQKLOBRZ9Xg1OctGuj4w5v4bd3VSWbxpoos4Caog03gLL8yHrpaAGvrsFxk0halWH6E4WWTuFZA0DmR1/7+VCgoYFQA2rgDVUB/oagPSvqpZ7jsxJVYLnVCORX7UaPKJWWqD3ELKeiki6Fhkg6r5Aoq4O0yFp9F3f1cH5U0dxDeKCiwlEXcNyopZx13CcqPvinvo29q7vmr7mO6cTdU0NUe9sgKj7Aom6JrDod67BSS7a9ZEx72J5N1XkmwaaqIuAGiKNt5bl+ZD1UovQ3QLjphC1qkN0J4usnV0tJ2qp4a4EDWsBNdzNEaJG+tfulnuOzMnuBM+pTSK/2kSiVlqg9xCynvYg6bqHr6tJuny1OjYWdexZg7jgPQl0uZfldCnj3otAl7q1IjbIXoRNDNx49HzbqiEy7r0daSb2AMa8j+XNhIx1b0Izsa/lzbfMy75kz8lUw/1IjcN+/0Hj8Aqpcdi/BnHB+xMahzqWNw4y7jqONA6ykOsQNjFw49HzbauGyLgPcKRx2A8Y84GWNw4y1gMIjUNdyxsHmZe6ZM/JVMODSI3DQQbu4b8MvId/MHAPmWyWDq7BaZbq1SAuuB6hWTrE8mZJxn2IoWYpkNnhHeSvFX3r8CBgjpD5rm/5BVQaXX3CBfRQyy+gMuZDCXEfRrroHaZ5BAStCTtniD1+CKHpQe73wy2ve6nh4QQN6wM1PMIR0EJec460/Dohc3IkwS+PIvnlUcTbvUoL9B5C1lMD0h5Ca9kA3FurA73XnwUCYSAlZi8WCgajIfnfxRIBL5yIB2PBYKI8HIgHyuLBitKwV5oMB8OheCJeLs5Z5iUDybJ4aTL2z6lMAmGABIReDeKCPQIQBi0HQhl3kACEstjkyM7iF9uz1TkGlq5JphswtZBDqd9Moa+UQWCHkHqlDP3LlXIra45vRZy/N0poB66UWxM9BNyAYVIHIs97+w7Wgie0i3uBZKA0GCgLROORaHlpIlgeK0uGkiWhRGhHdd1asSN1LSHpWrLjuv5/Ua8Rkq6R/+P1GiXpGvV1VRdOE50a8uKZerGP+U1FqbxmMC5wIUK3FrL8a60d3RyB7Yg70zUebfnXWrIwjyZ8PdGQZAoN/8VsA5kdXilJi2NIWhxD1EIaIUOLJ+vZ7Sms/dDzv407vpX10Wr/KXDc6kD/Fi+wLj1grj2kfrKRys/SfwuRtZ16bq2eUs/JuGahNEltKo/9t28hApkd3tGki8CxO/59vbe1/x255mMJpvAsyRRytzNn29O8ZRrzcTXsNBhkLlLr8riU5mRH87M1zZH5OT713kIoJPZGIuolE8lQSbQ0WO5FQpFIMpyMRmLhRLIkXJaIVnjhslCwtCIaSHqxiopoSSgejSRLE/FIMtW0vUQoFE6Ulse9kmCkrDwQS4TKAslwNCSAPxGKJhKhWCRSFgolIrFkrFRAukD/WKAkGi0NRIKh0iArP8en0DXqorC1b3NSz+nKRaGRixeFRuSLQiPCReF5Sy4KWyzi6N8vaUkiTecESy8Kz5NM5wTARWFrX20i83OipRcFVn5O/P/oK9eT/K9cT9Z95RrI7Nji/Q7kvcpMzwX8+pbyZJTSEP1EM0vDTM91iuX5kBvmFMKF/VRSk3Mq8evPk0laNCZp0Zj8VTBDixcs/yqYtR9etPyrYFbtv+TIV8HAuvSAufZeqvwqOP34+5qF0iS12W3CpP5TSBeBJkTql2tuQjCFVx35KvgUYCN4Wg07DeZVElWeZuCrYGR+TgdS/0tA6mfl53RNfrb3mZqtffWLzE9Tkn82BeiwtW+nkDo0I+nQzLF6OIOkwxmO1UNzkg7Nt+FWkc2NnWa5sDpObRpbuNg0tiA3jS0ITeNrhprGDJ+Kh5rcmcBzIZvG10hNyZnb0DRm+nQ9Mj9n1cA1esimkZWfswAXx60c3hjg746eDfPPGOVB7KD/rRv6jhKyxltafgdD5rgl4XpzDunaK89b6P+7ftbmB+p/U50PrffrVe1f47noRtKVon3D8tsrMuZzCXH3s+Qbxa0cmxRmpjGfBzRmYN14yFyQTfJ/tyn+L5rkef9XTfJ8y389T8Z8PiHuVqSOplWNjW9bY/y6p65DDmR2eMgO+QLL60kS1QWEerrQgX10ISHu1qR91Ppf9lEgs4PmKW/X+79ZA/0NPdeS6TrbAJtEYK69/qRvqNpU0jV9jW3ZjSOCMtsSNv17jlBmWwc2faa5GOCIAV8EzAWw/rwBlZTuhNlehDRbV6+K7zuQqHaViQp4Ax1I1MWViQp4gx1IVFllogLeUAcSVV6ZqIA33IFExSsTFfBGOJCoRGWiAt4oBxJVUZmogDfagUQlKxMV8MY6kKj2lYkKeOMcSNQllYkKeBMcSNSllYkKeBMdSNRllYkKeJ86kKgOlYkKeJMdSNTllYkKeG2y7V/jFZWJCnjTHNhRV1YmKuDNcCBRHSsTFfA+dyBRV1UmKuDNdiBRV1cmKuB94UCirqlMVMCb50CiOlUmKuB96UCirq1MVMBb6ECirqtMVMD7yoFEXV+ZqIC3xIFE3VCZqID3tQOJurEyUQFvmQOJuqkyUQHvWwcSdXNlogLeCgcS1bkyUQHvBwcSdUtlogLeSgcSdSsyUfIdmgVZG3+3TC72gLSkZYMDAL7kwkP/oj8jYe0cWOPFDqyxzIE1ljuwxrgDa0w4sMYKB9aYdGCN7R1Y4yUOrPFSB9Z4mQNr7ODAGi93YI1XOLDGKx1YY0cH1niVA2u82oE1XuPAGjs5sMZrHVjjdQ6s8XoH1niDA2u80YE13uTAGm92YI2dHVjjLQ6s8VbCGrOgawxFszQH5txBj3fujX+ZfKeUc94m9O4i/4yGGHeIcacYXcW4S4y7xegmRncx7hHjXjHuE6OHGPeL8YAYD4rxkBgPi/GIGI+K8ZgYj4vxhBhPitFTjKfEeFqMZ8ToJcazYjwnxvNi9BbjBTFeFOMlMfqI8bIYr4jxqhh9xXhNjNfFeEOMfmK8KcZbYrwtRn8x3hHjXTHeE2OAGO+L8YEYA8UYJMZgMYaIMVSMYWIMF+PDGv9oMKKGL4p6a6MUpTBtrotm7nbN3B2auTs1c101c3dp5u7WzHXTzHXXzN2jmbtXM3efZq6HZu5+zdwDmrkHNXMPaeYe1sw9opl7VDP3mGbucc3cE5q5JzVzPTVzT2nmntbMPaOZ66WZe1Yz95xmThZknaxND/SLAFNvyFj05mXvNtIFIBusH/AGj9fFkZiBN4y82x2JGXgDyrvDkZiBN7S8Ox2JGXiDzOvqSMzAG27eXY7EDLyB593tSMzAG4JeN0diBt5g9Lo7EjPwhqV3jyMxA2+Aevc6EjPwhqp3nyMxA2/Qej0ciRl4w9e735GYgTeQvQcciRl4Q9p70JGYgTe4vYcciRl4w9x72JGYgTfgvUcciRl4Q9971JGYgQ8IeI85EjPwgQPvcUdiBj7A4D3hSMzAByK8Jx2JGfiAhdfTkZiBD2x4TzkSM/ABEO9pR2IGPlDiPeNIzMAHVLxejsQMfODFe9aRmIEP0HjPkWJGPzT0POBedkVSHvEy5jp7O6LnC46s80VH1vmSI+vs48g6X3Zkna84ss5XHVlnX0fW+Zoj63zdkXW+4cg6+zmyzjcdWedbjqzzbUfW2d+Rdb7jyDrfdWSd7zmyzgGOrPN9R9b5gSPrHOjIOgc5ss7BjqxziCPrHOrIOoc5ss7hjqzzQ+A65UvX5O/5pL50rVHWpgd6/YzfpUGvsfJFaZg1Vr4oDbPGyhelYdZY+aI0zBorX5SGWWPli9Iwa6x8URpmjZUvSsOssfJFaZg1Vr4oDbPGyhelYdZY+aI0zBorX5SGWWPli9Iwa6x8URpmjS6+KA1z3hhpvYHK81aet/K8leetPG/leSvPW3neyvP+Hz0v7tzBIPHcnmKK1GcJRgouGCXGR2KMFmOMGGPF+FiMcWKMF2OCGJ+IMVGMSWJ8KsZnYkwWY4oYU8WYJsZ0MWaIMVOMz8WYJcZsMeaI8YUYc8WYJ8Z8Mb4UY4EYC8VYJMZXYiwWY4kYS8X4WoxvxFgmxnIxvhXjOzFWiPG9GD+I8aMYK8X4SYyfxfhFjFVi/CrGb2L8LsZqMdaI8YcYa8VYJ8Z6Mf4UY0ONrE1fpCrFSH+56ijN3EeaudGauTGaubGauY81c+M0c+M1cxM0c59o5iZq5iZp5j7VzH2mmZusmZuimZuqmZummZuumZuhmZupmftcMzdLMzdbMzdHM/eFZm6uZm6eZm6+Zu5LzdwCzdxqzdwazdwfmrm1mrl1mrn1mrk/NXMb/LnUI9v/2cj/mekvnwIfOPJGkr7gQMeMfBHwKEdiRr4I+CNHYka+CHi0IzEjXwQ8xpGYkS8CHutIzMgXAX/sSMzIFwGPcyRm5IuAxzsSM/JFwBMciRn5IuBPHIkZ+SLgiY7EjHwR8CRHYka+CPhTR2JGvgj4M0diRr4IeLIjMSNfBDzFkZiRLwKe6kjMyBcBT3MkZuSLgKc7EjPyRcAzHIkZ+SLgmY7EjHwR8OeOxIx8EfAsR2JGvgh4tiMxI18EPMeRmJEvAv7CkZiRLwKe60jMyBcBz3MkZuSLgOc7EjPyRcBfOhIz8kXAC0gxox+KX1gjc/1MvAh4EWydMY+5zq8cyftiR9a5xJF1LnVknV87ss5vHFnnMkfWudyRdX7ryDq/c2SdKxxZ5/eOrPMHR9b5oyPrXOnIOn9yZJ0/O7LOXxxZ5ypH1vmrI+v8zZF1/k5aZ26m6/Q2/efqzNa5ydnWZBpzytn+APC6+l5mYD1LcxHYNOq1iJrxz7YOU39/n209MBeD7M5FQEX9J/C7vA3AcwFr2UvNRUbfiVUkS+XLdouyNn6nSskNubYDmRz21gzjly3/51mp+f6rhv+hZtamvwgl/w8L0ubkf1Qnq7JQMjXUoS4YalpB72DMQT9m7y+gfrIOUTGycpENzgVSv51qbn6u8kA8UeKVRxJRr6KsJBaPl4Y8L1gWKYuUB2PJivISL1YSE+eMlwVj4n8uWBb3KgJlkQp5EamWtbEZTz3QDfpOuLwHUtebXZO4YHly9HlzagI3EynunJobBQadV7tWhJnItaI2rDovMke54MJXF3R53gPET5Od4GrgBX4N8AL/B7ATXOtgJ5jn79f89E5Q/h/SO8F8ZifoL3ItsPvIA27G/JRzBRMlFYHSWHksWF4WipaHQ+WlpWXivBHPiyUTwUAiHEyWeJFIvLSiNOmFkuUlFWWRkrLSSOLvq2dioCPdB1K/Ake7jwJS91FYk7jgQkL3UcXy7kPGXcWR7iPfXyu6+0DmqCqp+6j6H3QfNwO7j87A7gP57OWtDnYf1fz9WpTefVTTdB9FBr6HcqFQMt3Ywx35HupWYCdYDWiMRcDvoYY70gki9avuaCdYndQJFtckLriY0AnWsLwTlHHXcKQTLPLXiu4EkTmqSeoEa/4HneD1wAv8DcALPPK36m5ysBPc2d+vu6R3gjtrOsFdDHSCLhRKpht7hCOd4E3ATnBnoDHuAuwERzjSCSL1q+VoJ1iL1AnuWpO44F0JneBulneCMu7dHOkEd/HXiu4EkTnandQJ7v4fdILXAC/wnYAXeOT7Uq5zsBOs7e/XPdI7wdqaTnAPA52gC4WS6cYe5UgneB2wE6wNNMY9gJ3gKEc6QaR+ezraCe5J6gT3qklc8F6ETnBvyztBGffejnSCe/hrRXeCyBztQ+oE9/kPOsErgRf4jsALPPJNmFc72Anu6+/X/dI7wX01neB+BjpBFwol04092pFO8GpgJ7gv0Bj3A3aCox3pBJH67e9oJ7g/qROsU5O44DqETvAAyztBGfcBjnSC+/lrRXeCyBwdSOoED/wPOsHLgBf4DsALPPJvHFzhYCdY19+vB6V3gnU1neBBBjpBFwol04091pFO8ApgJ1gXaIwHATvBsY50gkj9Dna0EzyY1AnWq0lccD1CJ3iI5Z2gjPsQRzrBg/y1ojtBZI7qkzrB+v9BJ5gEXuDbAy/wyL9ed6mDneCh/n49LL0TPFTTCR5moBN0oVAy3djjHOkELwV2gocCjfEwYCc4zpFOEKnf4Y52goeTOsEjahIXfAShEzzS8k5Qxn2kI53gYf5a0Z0gMkdHkTrBo/6DTrAceIGPAy/wyL9LXuFgJ9jA36+B9E6wgaYTDBjoBF0olEw39gRHOsEKYCfYAGiMAWAnOMGRThCpn+doJ+iROsFgTeKCg4ROMGR5JyjjDjnSCQb8taI7QWSOwqROMGyyE/Qvyu2AF+WLgd1bGfBt5Lc52AmW+Ps1kt4Jlmg6wQizE3SoUDLd2BNt7wQ1BZ1pJ1gCNMYIsBOc6EgniNQv6mgnGCV1grGaxAXHCJ1gqeWdoIy71JFOMOKvFd0JInN0NKkTPNrvBOXnXbM2vcinfvWTekMw9TGx1F8eSP2V0tQXjcjPRSmf36628fPrVXf8c37KObNSPvdPOf87KZ/fTfn8XsrnASmf30/5/EHK54H+54bif+cYMY4V4zgxjpd5EeMEMU6suXknjd5XJwLrQDULJ4lznizGKWKc6neBqTUi/++FWZvOnayZO0Uzd6o/l3qgv646EbjPTgKc65+/nxzwTgau61NSk5KTlotMYpa5OAWi3z95PRXY5CH1Y+/xEwh7vLE4ZxMxThPjdM0eb6zZu000c6dp5k43sMdPAO6lxsA93gS4rsmO7PHTgHv8dOAen+zQHm9E2ONNxTmbiXGGGM01e7ypZu8208ydoZlrbmCPNwLupabAPd4MuK6pjuzxM4B7vDlwj091aI8fT9jjLcQ5zxTjLDHO1uzxFpq9e6Zm7izN3NkG9vjxwL3UArjHzwSua7oje/ws4B4/G7jHpzu0x48j7PGW4pzniHGuGOdp9nhLzd49RzN3rmbuPAN7/DjgXmoJ3OPnANc105E9fi5wj58H3OMzHdrjxxL2+PninK3EuECMCzV7/HzN3m2lmbtAM3ehgT1+LHAvnQ/c462A65rlyB6/ALjHLwTu8VkO7fFjCHu8tThnGzHainGRZo+31uzdNpq5tpq5iwzs8WOAe6k1cI+3Aa5rjiN7vC1wj18E3ONzHNrjDQl7vJ0458VilIlRrtnj7TR792LNXJlmrtzAHm8I3EvtgHv8YuC65jqyx8uAe7wcuMfnOrTHd8KdK1DHP09caJkQo0KMpBjtxbhEjEvFuEyMDmJcLsYVYlwpRkcxrhLjajGuEaOTGNeKcZ0Y14txgxg3inGTGDeL0VmMW8S4VYzbxOgixu1i3CHGnRpPiWu8IqGZq9DMJTVz7TVzl2jmLtXMXaaZ66CZu1wzd4Vm7krNXEfN3FWauas1c9do5jpp5q7VzF2nmbteM3eDZu5GzdxNmrmbNXOdNXO3aOZu1czdppnropm7XTN3h2buTgPXoNQ9m6nXx4HXoATwGjTf0AO/mV6DKoDXoGTm5/rfw8Ptgbn40uZchP+3Tu+SzGIOpMTsXZrJuYKb6OddBszFAjtzEUhbp9dhB2OOJDeL2bt8x84V0+jnXQHMxULbchHTrtO7cvtjjm4hZq/j9p4rukX9vKuAuVhkTy6C/7JO7+rtiTn6rzF712z7ueJb0c/rBMzFVzbkIrrVdXrXblvMgW2I2btuW84V2Cb9vOuBuVj83+aiZBvX6d2wtZjD2xyzd+O/niuc3A79vJuAuVjyX+Uiul3r9G7ecsyx7YzZ67yFc5Umt1s/7xZgLpaaz0VgB9bp3aqLObBDMXu3bX4ubwf187oAc/G1yVwkdnid3u2bxhzKIGbvjpRzBZMZ6efdCczFN468cgX4/YAH5Fsvlc8yzcUyR3IB5CAP2Md7XwFzsdyRXAD7PQ/Yr3hLgbn41pFcAK9rHtCXvWXAXHxn6F5hILPDA+5fD1h/Hku/7DT9Ms0zssfoCrvXGgqYfJkCbt2bvkzhrprEBcuTo897N7AYWHHfXXOjwKDzBv7t9U/oGO6EFVsioFku5tzepg8odPM17+7fhP/fXdFufhGmznXX3ClFuz7CtdTdzW7Aou8OTi5jg3fTGEemcXer6cbV7g5gru+BxRwJm7za3UO62t1bk7jgewlXu/ssv9rJuO9z/Gp3B6zYSuOa5VKudj18ze9Pv9r10Fzt7jdwtbsDeLXrASz6+0nJRbs+MuYHcO7pZWXhr8R3+6aRDa5BJBo8CO4W0KYlc/wgoUuyPW5VO+i4H3KkO0TW+MNknwhkdngyJw8TfOJBoIaPOLBfHiHsl0fBHbrqVR5NWStLC3Q9PQysp8dIuj5Wc3NyQ3vT7UAdHofpEDb60tvHwflTxxM1iQt+gkCuT1pOrjLuJx0n19thxVYe1CyXQq49fc2fSifXnhpyfcoAuSJcS5FrT2DRP0VKLtr1kTE/bXlH+phvGqjfJtVd9TM9F9J4n7E8H7JeniF0t8C4tRcvRL08SehkkbXTy3Iykhr2Imj4DFDDZx35VgLpX89Z7jkyJ88RPOd5Evk9TyRqpQV6DyHrqTdJ194GiBr5pPsLMB2iQZNE/QI4f+p4sSZxwS8SiPoly4laxv2S40TdBVZssQrNcilE3cfX/OV0ou6jIeqXDRA1wrUUUfcBFv3LpOSiXR8Z8yuWd1O9fdNAE3VvoIZI433V8nzIenmV0N0C46YQtapDdCeLrJ2+lhO11LAvQcNXgRq+5ghRI/3rdcs9R+bkdYLnvEEivzeIRK20QO8hZD31I+nazwBR3wbU4U2YDhWeSaJ+E5w/dbxVk7jgtwhE/bblRC3jfttxor4NVmxeUrNcClH39zV/J52o+2uI+h0DRI1wLUXU/YFF/w4puWjXR8b8ruXdVD/fNNBE3Q+oIdJ437M8H7Je3iN0t8C4KUSt6hDdySJrZ4DlRC01HEDQ8D2ghu87QtRI//rAcs+ROfmA4DkDSeQ3kEjUSgv0HkLW0yCSroMMEPWtQB0Gw3QIGSXqweD8qWNITeKChxCIeqjlRC3jHuo4Ud8KK7a4MaIe5ms+PJ2oh2mIergBoka4liLqYcCiH05KLtr1kTF/aHk3Ncg3DTRRDwJqiDTeEZbnQ9bLCEJ3C4ybQtSqDtGdLLJ2RlpO1FLDkQQNRwA1HOUIUSP96yPLPUfm5COC54wmkd9oIlErLdB7CFlPY0i6jjFA1Mh3zY+F6VBm9H2XY8H5U8fHNYkL/phA1OMsJ2oZ9zjHifoWWLFFAprlUoh6vK/5hHSiHq8h6gkGiBrhWoqoxwOLfgIpuWjXR8b8ieXd1BjfNNBEPQaoIdJ4J1qeD1kvEwndLTBuClGrOkR3ssjamWQ5UUsNJxE0nAjU8FNHiBrpX59Z7jkyJ58RPGcyifwmE4laaYHeQ8h6mkLSdYoBou4M1GEqTIdgqUmingrOnzqm1SQu+P+xdx5gUhTfFkdExQwsLLsssGsEJU3P7O7sknPOOQobQUFFxYyKGTMq5gAiCCgiCgIiSBRBkKgiggoCghGzmF+VdkkzlhLmnLLq/be/rz7r9d/X1j331un7m57tWUsg6nWWE7WMe53jRH0lrNjyo5rlUoh6va/5m7FEvV5D1G8aIGqEaymiXg8s+jdJyUW7PjLmtyzvplb7poEm6tVADZHG+7bl+ZD18jahuwXGTSFqVYfoThZZOxssJ2qp4QaChm8DNXzHEaJG+tdGyz1H5mQjwXPeJZHfu0SiVlqg9xCynjaRdN1kgKivAOqwGaZDbpZJot4Mzp863itFXPB7BKJ+33KilnG/7zhRXwErtvQszXIpRP2Br/mWWKL+QEPUWwwQNcK1FFF/ACz6LaTkol0fGfNWy7upTb5poIl6E1BDpPF+aHk+ZL18SOhugXFTiFrVIbqTRdbONsuJWmq4jaDhh0ANtztC1Ej/2mG558ic7CB4zkck8vuISNRKC/QeQtbTTpKuOw0Q9eVAHXbBdMgw+q3vXeD8qePjUsQFf0wg6k8sJ2oZ9yeOE/XluI+dQprlUoj6U1/zz2KJ+lMNUX9mgKgRrqWI+lNg0X9GSi7a9ZExf255N7XTNw00Ue8Eaog03i8sz4esly8I3S0wbgpRqzpEd7LI2tltOVFLDXcTNPwCqOGXjhA10r++stxzZE6+InjO1yTy+5pI1EoL9B5C1tM3JF2/MUDUlwF1+Bb3hCbDJFF/C86fOr4rRVzwdwSi/t5yopZxf+84UV+Gg65czXIpRP2Dr/meWKL+QUPUewwQNcK1FFH/ACz6PaTkol0fGfOPlndT3/imgSbqb4AaIo33J8vzIevlJ0J3C4ybQtSqDtGdLLJ2fracqKWGPxM0/Amo4S+OEDXSv3613HNkTn4leM5vJPL7jUjUSgv0HkLW0+8kXX83QNSXIiGqNKyfzDRJ1Lh170vUh5UmLlheHH3d4qXtJmoZd/HSewUGXdcoUV+K+9gpR7NcClEf7mteonSxfen58NJ/J2r5L7GJGuFaiqgPBxZ9idKc5KJdHxnzEaWBG7wYfsPJu6g0DTRR/w68cyKN90jL8yHr5cjS+O4WGDeFqFUdojtZZO0cRdYwFN/xx14+iqDhkUANS4I1VAf6HoD0r6Mt9xyZk6MJnnMMmBxUD3VMaR5RKy3QewhZT8eSdD22NJ+oLwHqcBxMhyyjv551HDh/6ji+NHHBxxOI+gTLiVrGfYLjRH0JjKijxn4960Rf81KxRH2ihqhLGSDqS4BEfSKw6EuV5iQX7frImEtb3k0d65sGmqiPBWqINN4yludD1ksZQncLjJtC1KoO0Z0ssnYSLCdqqWECQcMyQA3LOkLUSP8qZ7nnyJyUI3hOIon8EolErbRA7yFkPZUn6VreAFFfDCTqJEeJOgmcP3UklyYuOJlA1BUsJ2oZdwXHifpiB4k6xde8YixRp2iIuqIBor4YSNQpwKKv6AhRI2OuZHk3Vd43DTRRlwdqiDTeypbnQ9ZLZUJ3C4ybQtSqDtGdLLJ2Ui0naqlhKkHDykAN0xwhaqR/nWS558icnETwnJNJ5HcykaiVFug9hKynU0i6nmKAqIcBifpUmA4ZRt/1fSo4f+o4rTRxwacRiPp0y4laxn2640Q9DEbUOcbe9V3F17xqLFFX0RB1VQNEPQxI1FWARV+1NCe5aNdHxnyG5d3UKb5poIn6FKCGSOM90/J8yHo5k9DdAuOmELWqQ3Qni6ydapYTtdSwGkHDM4EaVneEqJH+VcNyz5E5qUHwnJok8qtJJGqlBXoPIeupFknXWgaI+iIgUYdwRJ1vkqhD4PypwytNXLBHIOqw5UQt4w47TtQX4Yg6olkuhagjvubpsUQd0RB1ugGivghI1BFg0aeX5iQX7frImDMs76Zq+aaBJupaQA2RxptpeT5kvWQSultg3BSiVnWI7mSRtRO1nKilhlGChplADbMcIWqkf2Vb7jkyJ9kEz6lNIr/aRKJWWqD3ELKe6pB0rWOAqC8EEnVdmA5ho8+o64Lzp456pYkLrkcg6vqWE7WMu77jRH0hjKjzjT2jbuBr3jCWqBtoiLqhAaK+EEjUDYBF37A0J7lo10fG3MjybqqObxpooq4D1BBpvI0tz4esl8aE7hYYN4WoVR2iO1lk7TSxnKilhk0IGjYGatjUEaJG+lczyz1H5qQZwXOak8ivOZGolRboPYSspxYkXVsYIOoLgETdEqZDJGKSqFuC86eOVqWJC25FIOrWlhO1jLu140R9AYyo8/I1y6UQdRtf87axRN1GQ9RtDRD1BUCibgMs+ralOclFuz4y5naWd1MtfNNAE3ULoIZI421veT5kvbQndLfAuClEreoQ3ckia6eD5UQtNexA0LA9UMOOjhA10r86We45MiedCJ7TmUR+nYlErbRA7yFkPXUh6drFAFEPBRJ1V5gOBUafUXcF508d3UoTF9yNQNTdLSdqGXd3x4l6KIyoPWPPqHv4mveMJeoeGqLuaYCohwKJugew6HuW5iQX7frImHtZ3k118U0DTdRdgBoijbe35fmQ9dKb0N0C46YQtapDdCeLrJ0+lhO11LAPQcPeQA37OkLUSP/qZ7nnyJz0I3jOWSTyO4tI1EoL9B5C1lN/kq79DRD1+UCiHgDTId0oUQ8A508dOaWJC84hEHWu5UQt4851nKjPhxF1rjGizvM1z48l6jwNUecbIOrzgUSdByz6/NKc5KJdHxlzgeXdVH/fNNBE3R+oIdJ4Cy3Ph6yXQkJ3C4ybQtSqDtGdLLJ2BlpO1FLDgQQNC4EaDnKEqJH+dbblniNzcjbBc84hkd85RKJWWqD3ELKeBpN0HWyAqM8DEvUQmA7RbJNEPQScP3WcW5q44HMJRH2e5UQt4z7PcaI+D0bUWVHNcilEfb6v+dBYoj5fQ9RDDRD1eUCiPh9Y9ENLc5IL/xwVGPMFlndTg33TQBP1YKCGSOO90PJ8yHq5kNDdAuOmELWqQ3Qni6ydiywnaqnhRQQNLwRqOMwRokb618WWe47MycUEz7mERH6XEIlaaYHeQ8h6upSk66UGiPpcIFFfhntCY5SoLwPnTx2XlyYu+HICUV9hOVHLuK9wnKjPhRF1ujGivtLXfHgsUV+pIerhBoj6XCBRXwks+uGlOclFuz4y5qss76Yu9U0DTdSXAjVEGu/VludD1svVhO4WGDeFqFUdojtZZO1cYzlRSw2vIWh4NVDDEY4QNdK/rrXcc2ROriV4znUk8ruOSNRKC/QeQtbT9SRdrzdA1EOARH0D7hl1yCRR3wDOnzpuLE1c8I0Eor7JcqKWcd/kOFEPgRF1dkizXApR3+xrPjKWqG/WEPVIA0Q9BEjUNwOLfmRpTnLRro+M+RbLu6nrfdNAE/X1QA2Rxnur5fmQ9XIrobsFxk0halWH6E4WWTu3WU7UUsPbCBreCtTwdkeIGulfd1juOTIndxA8504S+d1JJGqlBXoPIevpLpKudxkg6sFAoh6F6yc9k0Q9Cpw/ddxdmrjguwlEfY/lRC3jvsdxoh4MI+rMQs1yKUR9r6/56FiivldD1KMNEPVgIFHfCyz60aU5yUW7PjLm+yzvpu7yTQNN1HcBNUQa7/2W50PWy/2E7hYYN4WoVR2iO1lk7TxgOVFLDR8gaHg/UMMHHSFqpH89ZLnnyJw8RPCch0nk9zCRqJUW6D2ErKdHSLo+YoCozwES9aO47zwa/fWsR8H5U8djpYkLfoxA1I9bTtQy7scdJ+pzcG8mM/brWWN8zcfGEvUYDVGPNUDU5wCJegyw6MeW5iQX7frImJ+wvJt6xDcNNFE/AtQQabzjLM+HrJdxhO4WGDeFqFUdojtZZO08aTlRSw2fJGg4DqjheEeIGulfEyz3HJmTCQTPeYpEfk8RiVppgd5DyHqaSNJ1ogGiPhtI1JNgOhQYfUY9CZw/dUwuTVzwZAJRP205Ucu4n3acqM/G/XqWsWfUz/iaT4kl6mc0RD3FAFGfDSTqZ4BFP6U0J7lo10fG/Kzl3dRE3zTQRD0RqCHSeKdang9ZL1MJ3S0wbgpRqzpEd7LI2nnOcqKWGj5H0HAqUMNpjhA10r+et9xzZE6eJ3jOCyTye4FI1EoL9B5C1tN0kq7TDRD1ICBRz4DpUJhhkqhngPOnjhdLExf8IoGoZ1pO1DLumY4T9SAYUYdyNculEPUsX/PZsUQ9S0PUsw0Q9SAgUc8CFv3s0pzkol0fGfNLlndT033TQBP1dKCGSOOdY3k+ZL3MIXS3wLgpRK3qEN3JImvnZcuJWmr4MkHDOUAN5zpC1Ej/mme558iczCN4zisk8nuFSNRKC/QeQtbTfJKu8w0Q9UAgUS+A6ZBt9FvfC8D5U8fC0sQFLyQQ9SLLiVrGvchxoh6I+ztqY9/6XuxrviSWqBdriHqJAaIeCCTqxcCiX1Kak1y06yNjftXybmq+bxpoop4P1BBpvEstz4esl6WE7hYYN4WoVR2iO1lk7bxmOVFLDV8jaLgUqOEyR4ga6V/LLfccmZPlBM95nUR+rxOJWmmB3kPIelpB0nWFAaIuBBL1StwzaqPv+l4Jzp863ihNXPAbBKJeZTlRy7hXOU7UhbhvfRt71/dqX/M1sUS9WkPUawwQdSGQqFcDi35NaU5y0a6PjHmt5d3UCt800ES9Aqgh0njXWZ4PWS/rCN0tMG4KUas6RHeyyNpZbzlRSw3XEzRcB9TwTUeIGulfb1nuOTInbxE8520S+b1NJGqlBXoPIetpA0nXDb6uJumyoBQ2FnW8U5q44HcIdLnRcrqUcW8k0KVurYgNspGwiYEbj55vWzVExv2uI83EBmDMmyxvJmSs7xKaic2WN98yL5vJnhOvhu+RGof3/oPGIZ/UOLxfmrjg9wmNwweWNw4y7g8caRxkIX9A2MTAjUfPt60aIuPe4kjj8B4w5q2WNw4y1i2ExuFDyxsHmZcPyZ4Tr4bbSI3DNgPP8POAz/C3A/eQyWZpe2lOs7SjNHHBOwjN0keWN0sy7o8MNUuh+A5vm79W9KPDbcAcIfO90/IbqDS6nYQb6C7Lb6Ay5l2EuD8m3fQ+1nwFBK0JO2eIPf4RoelB7vdPLK97qeEnBA13AjX81BHQQt5zPrP8PiFz8hnBLz8n+eXnxMe9Sgv0HkLW0xekPYTW8gtgzGptaYG1Xlfqz/umnF8bmI8IzK8JzK8OzK8KzIcH5lcG5lcE5pcH5pcF5pcG5pcE5hcH5sMC84sC8wsD8wsC86GB+fmB+XmB+bmB+ZDAfHBgfk5gfnZgPigwHxiYFwbmBYF5fmCeF5h3Dsw7BeYdA/MOgXn7wLxdYN42MG8TmLcOzFsF5i0D8xaBefPAvFlg3jQwbxKY5wbmOYH5gMC8f2B+VmDeLzDvG5j3Ccx7B+a9AvOegXmPwLx7YN4tMO8amHfx56Fifx67xR77UoyvxPhajG/E+FaM78T4XowfxNgjxo9i/CTGz2L8IsavYvwmxu+SLcuIa4tRXIzDxSghxhFiHCnGUWKUFONoMY4R41gxjhPjeDFOEONEMUqJUVqMMmIkiFFWjHJiJIpRXowkMZLFqCBGihgVxagkRuUyf8Z0dLG9zPhH7Qnz/U3VZGA+sPif/ywe+He3l9z7v+/w56niumlinFTmzydQpr6rLv97oGvxvqseCoWDWpxc5s9/nlLGF0TdZOX/8GvMAtDfSw8KFt/30gsLTy6Du9mcUsZMkxqK7/CQMZ8auJaXFQmHoxH572Xlh7z0/LxwVjicn5seygvl5IULstO97ML0cHokLz8vV1wzxysMFebkZRdm/bkuk59knloG22Sq47QyxAWfVgZ/3dOBxcCK+/QyewUGXZfyacQp/lrR161ShkNE8rqxdzh0/pCmyF5rKnCtaf51qoprniHGmWJUE6O6GDXEqClGLTFCYnhihMWIiJEuRoYYmWJExcgSI1uM2mLUEaOuGPXEqC9GA7leMRqJ0ViMJmI0FaOZGM3FaOHfnYM5l+tRXaE6d4bm3Jmac9U056prztXQnKupOVdLcy6kOedpzoU15yKac+macxmac5mac1HNuSzNuWzNudqac3U05+pqztXTnKuvOddAc66h5lwjzbnGmnNNNOeaas4105xrrjnXoszfP6Eu4f+zof/PUHzHPns2Xp+tCmssQ94ZwHX9dDqnsYzNRTwxy1ycCdHvz7xWi/9aYV8/rzowFz/bnIv0v9bp1Ygv5lAgZq9mPNcK76OfVwuYi1/szEUoZp1e6BBjziz8W8yed2jXytLo54WBufjVtlxkadfpRQ4+5ug/xOylH+y1ov+on5cBzMVv9uQi/C/r9DIPJubov8bsRQ/8Wnn70c/LAubidxtyEd3vOr3sA4s5dAAxe7UP5FqhA9LPq4P8fKLKf5qLjANcp1d3fzGnH3DMXr1/vVZ64UHo59UH5uKw/yoX0YNap9fgn2POOsiYvYb/cK3swoPWz2sEzEVx87kIHcI6vca6mEOHFLPX5O/X8g5RP68pMBeHm8xF/iGv02u2b8yROGL2mgeuFS6MSz+vBTAXJQzlIhTf4QE/H/CAfOsF+SzeXBzhSC6AHOQB+3jvd2AujnQkF8B+zwP2K17wfhtvLo5yJBfA+5oH9GXvCGAuSpJygf4CBXD/esD685D6yfqNipHmX6+F/0ysmf+MrIn/zKyR/wytgf9MrZ7/jK2O/8wt238GF/WfyWX4z+gi/jM7z3+GV8t/plfDf8ZXzX/mJ58DyOcKsQf6m8fIvqdlGVQeIkZfMYtb975f6mhVhrhgeXH0dVsjPzQhxd06sClA1zX6itkWsGLLN/aK2Ta+5m39Lwb89aS2jV+EwXNty/BfMYtwLfXEtQ2w6NuCk8vY4G3K4L9p1KYMp4NB3+2aA3PdDhZzZrrJu1070t2ufRnigtsT7nYdLL/bybg7OH63aw4rtuw8zXIpd7uOvuadYu92HTV3u04G7nbNgXe7jsCi70RKLtr1kTF3xrmn9q8r411fa980ioNrEIkGXcDdAtq0ZI67ELok2+NWtYOOu6sj3SGyxruRfSIU3+HJnHQj+EQXoIbdHdgv3Qn7pQe4Q1e9So/AWllaoOupG7CeepJ07Vnm7+SG9qZmQB16wXRILzBJrr3A+VNH7zLEBfcmkGsfy8lVxt3HcXJtBiu23LBmuRRy7etr3i+WXPtqyLWfAXJFuJYi177Aou9HSi7a9ZExn2V5R9rTNw30+/x6AjVEGm9/y/Mh66U/obsFxk35a2xVh+hOFlk7AywnI6nhAIKG/YEa5jjyqQTSv3It9xyZk1yC5+SRyC+PSNRKC/QeQtZTPknXfANEjfz2fQFMh2jY6M+fkYi6sAxxwYUEoh5oOVHLuAc6TtRNYcWWVaBZLoWoB/manx1L1IM0RH22AaJGuJYi6kHAoj+blFy06yNjPsfybirfNw00UecDNUQa72DL8yHrZTChuwXGTSFqVYfoThZZO0MsJ2qp4RCChoOBGp7rCFEj/es8yz1H5uQ8guecTyK/84lErbRA7yFkPQ0l6TrUAFE3AepwAUyHAqMviL0AnD91XFiGuOALCUR9keVELeO+yHGibgIrNq9Qs1wKUQ/zNb84lqiHaYj6YgNEjXAtRdTDgEV/MSm5aNdHxnyJ5d3UUN800EQ9FKgh0ngvtTwfsl4uJXS3wLgpRK3qEN3JImvnMsuJWmp4GUHDS4EaXu4IUSP96wrLPUfm5AqC51xJIr8riUSttEDvIWQ9DSfpOtwAUTcG6nAVTIeIUaK+Cpw/dVxdhrjgqwlEfY3lRC3jvsZxom4MK7Y8Y0Q9wtf82liiHqEh6msNEDXCtRRRjwAW/bWk5KJdHxnzdZZ3U8N900AT9XCghkjjvd7yfMh6uZ7Q3QLjphC1qkN0J4usnRssJ2qp4Q0EDa8HanijI0SN9K+bLPccmZObCJ5zM4n8biYStdICvYeQ9TSSpOtIA0SNfP/9LTAdcoy+7/IWcP7UcWsZ4oJvJRD1bZYTtYz7NseJuhGs2DKNve/ydl/zO2KJ+nYNUd9hgKgRrqWI+nZg0d9BSi7a9ZEx32l5NzXSNw00UY8Eaog03rssz4esl7sI3S0wbgpRqzpEd7LI2hllOVFLDUcRNLwLqOHdjhA10r/usdxzZE7uIXjOvSTyu5dI1EoL9B5C1tNokq6jDRB1Q6AO98F0CGebJOr7wPlTx/1liAu+n0DUD1hO1DLuBxwn6oawYsuPapZLIeoHfc0fiiXqBzVE/ZABoka4liLqB4FF/xApuWjXR8b8sOXd1GjfNNBEPRqoIdJ4H7E8H7JeHiF0t8C4KUSt6hDdySJr51HLiVpq+ChBw0eAGj7mCFEj/etxyz1H5uRxgueMIZHfGCJRKy3QewhZT2NJuo41QNQNgDo8AdMhN8skUT8Bzp86xpUhLngcgaiftJyoZdxPOk7UDWDFlp6lWS6FqMf7mk+IJerxGqKeYICoEa6liHo8sOgnkJKLdn1kzE9Z3k2N9U0DTdRjgRoijXei5fmQ9TKR0N0C46YQtapDdCeLrJ1JlhO11HASQcOJQA0nO0LUSP962nLPkTl5muA5z5DI7xkiUSst0HsIWU9TSLpOMUDU9YE6PAvTIcPot76fBedPHVPLEBc8lUDUz1lO1DLu5xwn6vq4j52Mfet7mq/587FEPU1D1M8bIGqEaymingYs+udJyUW7PjLmFyzvpqb4poEm6ilADZHGO93yfMh6mU7oboFxU4ha1SG6k0XWzgzLiVpqOIOg4XSghi86QtRI/5ppuefInMwkeM4sEvnNIhK10gK9h5D1NJuk62wDRF0PqMNLuCc0GSaJ+iVw/tQxpwxxwXMIRP2y5UQt437ZcaKuh4OuXM1yKUQ919d8XixRz9UQ9TwDRI1wLUXUc4FFP4+UXLTrI2N+xfJuarZvGmiing3UEGm88y3Ph6yX+YTuFhg3hahVHaI7WWTtLLCcqKWGCwgazgdquNARokb61yLLPUfmZBHBcxaTyG8xkaiVFug9hKynJSRdlxgg6rpAHV7F9ZOZJon6VXD+1LG0DHHBSwlE/ZrlRC3jfs1xoq6L+9gpR7NcClEv8zVfHkvUyzREvdwAUSNcSxH1MmDRLyclF+36yJhft7ybWuKbBpqolwA1RBrvCsvzIetlBaG7BcZNIWpVh+hOFlk7Ky0naqnhSoKGK4AavuEIUSP9a5XlniNzsorgOatJ5LeaSNRKC/QeQtbTGpKuawwQdR2gDmthOmQZ/fWsteD8qWNdGeKC1xGIer3lRC3jXu84UdeBFVvU2K9nvelr/lYsUb+pIeq3DBA1wrUUUb8JLPq3SMlFuz4y5rct76bW+KaBJuo1QA2RxrvB8nzIetlA6G6BcVOIWtUhupNF1s47lhO11PAdgoYbgBpudISokf71ruWeI3PyLsFzNpHIbxORqJUW6D2ErKfNJF03GyDq2kAd3nOUqN8D508d75chLvh9AlF/YDlRy7g/cJyoaztI1Ft8zbfGEvUWDVFvNUDUCNdSRL0FWPRbHSFqZMwfWt5NbfZNA03Um4EaIo13m+X5kPWyjdDdAuOmELWqQ3Qni6yd7ZYTtdRwO0HDbUANdzhC1Ej/+shyz5E5+YjgOTtJ5LeTSNRKC/QeQtbTLpKuuwwQdTZQh49hOmQYfdf3x+D8qeOTMsQFf0Ig6k8tJ2oZ96eOE3U2rNhyjL3r+zNf889jifozDVF/boCoEa6liPozYNF/Tkou2vWRMX9heTe1yzcNNFHvAmqINN7dludD1stuQncLjJtC1KoO0Z0ssna+tJyopYZfEjTcDdTwK0eIGulfX1vuOTInXxM85xsS+X1DJGqlBXoPIevpW5Ku3xog6iygDt/hiDrfJFF/B86fOr4vQ1zw9wSi/sFyopZx/+A4UWfhoCuiWS6FqPf4mv8YS9R7NET9owGiRriWIuo9wKL/kZRctOsjY/7J8m7qW9800ET9LVBDpPH+bHk+ZL38TOhugXFTiFrVIbqTRdbOL5YTtdTwF4KGPwM1/NURokb612+We47MyW8Ez/mdRH6/E4laaYHeQ8h6KpbA0VVel03UUaAOh8F0CBt9Rn0YOH9/5SqBuODiCfjrHp5gN1HLuA9P2Csw6LpGiToKM+F8Y8+oS/iaH5FQbF96LpHwd6KW/xKbqKNAoi4BLPojEjjJRbs+MuYjE+zupor5poEm6mJADZHGe5Tl+ZD1clQCvrsFxk0halWH6E4WWTslyRqG4jv+2MslCRoeBdTwaLCG6kDfA5D+dYzlniNzcgzBc44lkd+xCTyiVlqg9xCyno4j6XqcAaLOBBL18TAdIhGTRH08OH/qOCGBuOATCER9ouVELeM+0XGizoQRdV6+ZrkUoi7la146lqhLaYi6tAGizgQSdSlg0ZdO4CQX7frImMtY3k0d55sGmqiPA2qINN4Ey/Mh6yWB0N0C46YQtapDdCeLrJ2ylhO11LAsQcMEoIblHCFqpH8lWu45MieJBM8pTyK/8kSiVlqg9xCynpJIuiYZIOoMIFEnw3QoMPqMOhmcP3VUSCAuuAKBqFMsJ2oZd4rjRJ0BI2rP2DPqir7mlWKJuqKGqCsZIOoMIFFXBBZ9pQROctGuj4y5suXdVJJvGmiiTgJqiDTeVMvzIeslldDdAuOmELWqQ3Qni6ydNMuJWmqYRtAwFajhSY4QNdK/Trbcc2ROTiZ4zikk8juFSNRKC/QeQtbTqSRdTzVA1OlAoj4NpkO6UaI+DZw/dZyeQFzw6QSirmI5Ucu4qzhO1Okwos41RtRVfc3PiCXqqhqiPsMAUacDiboqsOjPSOAkF+36yJjPtLybOtU3DTRRnwrUEGm81SzPh6yXaoTuFhg3hahVHaI7WWTtVLecqKWG1QkaVgNqWMMRokb6V03LPUfmpCbBc2qRyK8WkaiVFug9hKynEEnXkAGijgCJ2oPpEM02SdQeOH/qCCcQFxwmEHXEcqKWcUccJ+oIjKizoprlUog63dc8I5ao0zVEnWGAqCNAok4HFn1GAie58M9RgTFnWt5NhXzTQBN1CKgh0nijludD1kuU0N0C46YQtapDdCeLrJ0sy4laaphF0DAK1DDbEaJG+ldtyz1H5qQ2wXPqkMivDpGolRboPYSsp7okXesaIOowkKjr4Z7QGCXqeuD8qaN+AnHB9QlE3cByopZxN3CcqMMwok43RtQNfc0bxRJ1Qw1RNzJA1GEgUTcEFn2jBE5y0a6PjLmx5d1UXd800ERdF6gh0nibWJ4PWS9NCN0tMG4KUas6RHeyyNppajlRSw2bEjRsAtSwmSNEjfSv5pZ7jsxJc4LntCCRXwsiUSst0HsIWU8tSbq2NEDUHpCoW+GeUYdMEnUrcP7U0TqBuODWBKJuYzlRy7jbOE7UHoyos0Oa5VKIuq2vebtYom6rIep2BojaAxJ1W2DRt0vgJBft+siY21veTbX0TQNN1C2BGiKNt4Pl+ZD10oHQ3QLjphC1qkN0J4usnY6WE7XUsCNBww5ADTs5QtRI/+psuefInHQmeE4XEvl1IRK10gK9h5D11JWka1cDRB0CEnU3XD/pmSTqbuD8qaN7AnHB3QlE3cNyopZx93CcqEMwos4s1CyXQtQ9fc17xRJ1Tw1R9zJA1CEgUfcEFn2vBE5y0a6PjLm35d1UV9800ETdFagh0nj7WJ4PWS99CN0tMG4KUas6RHeyyNrpazlRSw37EjTsA9SwnyNEjfSvsyz3HJmTswie059Efv2JRK20QO8hZD0NIOk6wABR1wISdQ7uO49Gfz0rB5w/deQmEBecSyDqPMuJWsad5zhR18K9mczYr2fl+5oXxBJ1voaoCwwQdS0gUecDi74ggZNctOsjYy60vJsa4JsGmqgHADVEGu9Ay/Mh62UgobsFxk0halWH6E4WWTuDLCdqqeEggoYDgRqe7QhRI/3rHMs9R+bkHILnDCaR32AiUSst0HsIWU9DSLoOMUDUNYFEfS5MhwKjz6jPBedPHeclEBd8HoGoz7ecqGXc5ztO1DVxv55l7Bn1UF/zC2KJeqiGqC8wQNQ1gUQ9FFj0FyRwkot2fWTMF1reTQ3xTQNN1EOAGiKN9yLL8yHr5SJCdwuMm0LUqg7RnSyydoZZTtRSw2EEDS8CanixI0SN9K9LLPccmZNLCJ5zKYn8LiUStdICvYeQ9XQZSdfLDBB1DSBRXw7ToTDDJFFfDs6fOq5IIC74CgJRX2k5Ucu4r3ScqGvAiDqUq1kuhaiH+5pfFUvUwzVEfZUBoq4BJOrhwKK/KoGTXLTrI2O+2vJu6jLfNNBEfRlQQ6TxXmN5PmS9XEPoboFxU4ha1SG6k0XWzgjLiVpqOIKg4TVADa91hKiR/nWd5Z4jc3IdwXOuJ5Hf9USiVlqg9xCynm4g6XqDAaKuDiTqG2E6ZBv91veN4Pyp46YE4oJvIhD1zZYTtYz7ZseJujru76iNfet7pK/5LbFEPVJD1LcYIOrqQKIeCSz6WxI4yUW7PjLmWy3vpm7wTQNN1DcANUQa722W50PWy22E7hYYN4WoVR2iO1lk7dxuOVFLDW8naHgbUMM7HCFqpH/dabnnyJzcSfCcu0jkdxeRqJUW6D2ErKdRJF1HGSDqakCivhv3jNrou77vBudPHfckEBd8D4Go77WcqGXc9zpO1NVw3/o29q7v0b7m98US9WgNUd9ngKirAYl6NLDo70vgJBft+siY77e8mxrlmwaaqEcBNUQa7wOW50PWywOE7hYYN4WoVR2iO1lk7TxoOVFLDR8kaPgAUMOHHCFqpH89bLnnyJw8TPCcR0jk9wiRqJUW6D2ErKdHSbo+6utqki7PLIONRR2PJRAX/BiBLh+3nC5l3I8T6FK3VsQGeZywiYEbj55vWzVExj3GkWbiUWDMYy1vJmSsYwjNxBOWN98yL0+QPSdeDceRGodx/0HjcAapcXgygbjgJwmNw3jLGwcZ93hHGgdZyOMJmxi48ej5tlVDZNwTHGkcxgFjfsryxkHGOoHQOEy0vHGQeZlI9px4NZxEahwmGXiGXxX4DH8ycA+ZbJYmJ3CapacTiAt+mtAsPWN5syTjfsZQsxSK7/Am+WtFPzqcBMwRMt9TLL+BSqObQriBPmv5DVTG/Cwh7qmkm95UzVdA0Jqwc4bY488Qmh7kfn/O8rqXGj5H0HAKUMNpjoAW8p7zvOX3CZmT5wl++QLJL18gPu5VWqD3ELKeppP2EFrL6eDeWh3ovZ4GBMIZgZi9rEg4HI3Ify8rP+Sl5+eFs8Lh/Nz0UF4oJy9ckJ3uZRemh9Mjefl5ueKaOV5hqDAnL7sw689rmQTCGSQgfDGBuOAXCUA403IglHHPJAChLDY5ihfjF1taGY6BxWoS7wYMFvKs4CdT6DvlTGCHELxTzvqXO+V+1py3H3H+2CizDuFOuT/RZwE34GxSByKvO+IQa8ET2uV5ocJQdjiUE4rmZUZzs/PDuVk5hZHCjEh+5FB13V+xI3V9iaTrS4eu6/+Lep1D0nXO/3i9vkzS9WVfV3XjNNGpIW+ewZv9XL+pmCfvGYwb3CxCtzbL8o+1DnVzhA4i7njX+IrlH2vJwnyF8PHEfJIpzP8Xsw3Fd3jzSFosIGmxgKiFNEKGFklV7PYU1n5I/m/jztvP+mi1XwEctzrQf8ULrEsPmGsPqZ9spI4spv8UothB6rm/egpek3HPQmkSbCoX/tunEKH4Du8V0k1g4aF/Xu/t778j17yQYAqVSaZQ4iBzdjDNW7wxL0qw02CQuQjW5aJAc3Ko+dmf5sj8LA4+W4hExN7Ij3qF+YWRjGh2ONfLjGRmFqYXRjOz0vMLM9Jz8qMFXnpOJJxdEA0VelkFBdGMSF40szA7Py+zMGjaXn4kkp6fnZvnZYQzc3JDWfmRnFBhejQigD8/Es3Pj2RlZuZEIvmZWYVZ2QLSBfpnhTKi0exQZjiSHWblZ3GArlE3hf19mhO8pis3hSUu3hSWkG8KSwg3hTRLbgr/WMTRP17SUog0nVctvSmkkUznVcBNYX8fbSLzs9TSmwIrP0v/H33k+pr/kesy3UeuofiOf3zegXxWGe+1gB/fUr4ZpTREf6OZpWG811pueT7khllOuLG/TmpyXid+/LmMpMUKkhYryB8FM7Q42fKPgln74RTLPwpm1f6pjnwUDKxLD5hr79Sij4Jjjz/uWShNgs3uSib1LyfdBFYSqV+ueSXBFKo68lHwcmAj+EaCnQZTlUSVbxj4KBiZn1VA6j8VSP2s/KzS5Odgv1Ozv49+kflZTfLP1QAd9vfpFFKHNSQd1jhWD2tJOqx1rB7WkXRYdwCPimxu7DTLhdVxsGlc72LTuJ7cNK4nNI1nGmoa4/xWPNTk3gReC9k0nklqSt48gKYx3m/XI/PzVgKu0UM2jaz8vAW4Oe7n8FoA/3b0bZh/ZlG+iD3T/9QN/UQJWeMbLH+CIXO8gXC/eYd075XXLen/39Fifz9Q/011PbTek4+xf40b0Y2kK0Vb3fLHKzLmjYS4a1jyieJ+jn0KM96Y3wUaM7BuPGQuyCb512OK/0WTfPd/1SQ3Wf7neTLmTYS4N5M6ms0Je9+2xvhzT12HHIrv8JAd8nuW15MkqvcI9fS+A/vofULcH5D20Qf/so9C8R00TwlV+d+sAc/Q91riXecWYJMIzLXnkT6h2lJE1/Q1bmU3jgjK3ErY9OmOUOZWBzZ9vLnIcMSAPwTmAlh/XkYRpTthth8izdbVu+IMBxK1rShR4oGWA4naXpSokDfbgUTtKEpUyJvjQKI+KkpUyJvrQKJ2FiUq5L3iQKJ2FSUq5C1wIFEfFyUq5C1yIFGfFCUq5C1xIFGfFiUq5C11IFGfFSUq5C1zIFGfFyUq5L3uQKK+KEpUyFvpQKJ2FyUq5K1yIFFfFiUq5PUtbv8avypKVMhb68CO+rooUSFvvQOJ+qYoUSHvLQcS9W1RokLeBgcS9V1RokLeRgcS9X1RokLeJgcS9UNRokLeew4kak9RokLeBw4k6seiRIW8rQ4k6qeiRIW8bQ4k6ueiRIW8HQ4k6peiRIW8nQ4k6teiRIW8jx1I1G9FiQp5nzqQqN+LEiUeczuQqGJlixLl7XYgUYchEyXfoXlUsb1/WyYXe1JM0oqDAwC+5MJD/6E/I2HbHFjjdgfWuMOBNX7kwBp3OrDGXQ6s8WMH1viJA2v81IE1fubAGj93YI1fOLDG3Q6s8UsH1viVA2v82oE1fuPAGr91YI3fObDG7x1Y4w8OrHGPA2v80YE1/uTAGn92YI2/OLDGXx1Y428OrPF3B9YI/bSXtMbDCGssBl1jRPcZN+jaYY937b2/TH5Y4JrFhd6Hi1FCjCPEOFKMo8QoKcbRYhwjxrFiHCfG8WKcIMaJYpQSo7QYZcRIEKOsGOXESBSjvBhJYiSLUUGMFDEqilFJjMpipIqRJsZJYpwsxilinCrGaWKcLkYVMaqKcYYYZ4pRTYzqYtQQo6YYtcQIieGJERYjIka6GBliZIoRFSNLjGwxaotRR4y6YtQTo74YDWSNidGo7J8aNC7ri6Le2ihFKRlz7nDNuRKac0dozh2pOXeU5lxJzbmjNeeO0Zw7VnPuOM254zXnTtCcO1FzrpTmXGnNuTKacwmac2U158ppziVqzpXXnEvSnEvWnKugOZeiOVdRc66S5lxlzblUzbk0zbmTNOdkQaYV2/dAvwhwE/CN08AHMl5x0g2gOFg/4AMe73BHYgY+MPJKOBIz8AGUd4QjMQMfaHlHOhIz8AGZd5QjMQMfuHklHYkZ+ADPO9qRmIEPBL1jHIkZ+IDRO9aRmIEPLL3jHIkZ+ADUO96RmIEPVL0THIkZ+IDWO9GRmIEPfL1SjsQMfIDslXYkZuADaa+MIzEDH3B7CY7EDHxg7pV1JGbgA3ivnCMxAx/oe4mOxAz8goBX3pGYgV848JIciRn4BQYv2ZGYgV+I8Co4EjPwCxZeiiMxA7+w4VV0JGbgF0C8So7EDPxCiVfZkZiBX1DxUh2JGfiFFy/NkZiBX6DxTiLFjP7S0Mll49evoFAeeTnMdZ7iiJ6nOrLO0xxZ5+mOrLOKI+us6sg6z3BknWc6ss5qjqyzuiPrrOHIOms6ss5ajqwz5Mg6PUfWGXZknRFH1pnuyDozHFlnpiPrjDqyzixH1pntyDprO7LOOo6ss64j66znyDrrO7LOBo6ss6Ej62wEXKd86Zr8O5/gS9caFtv3QK+f8bc06DUWvSgNs8aiF6Vh1lj0ojTMGotelIZZY9GL0jBrLHpRGmaNRS9Kw6yx6EVpmDUWvSgNs8aiF6Vh1lj0ojTMGotelIZZY9GL0jBrLHpRGmaNRS9Kw6zRxRelYa6bRVpvqOi6Rdctum7RdYuuW3TdousWXbfouv+j18VdOxwmXttTTBH8LkETwQVNxWgmRnMxWojRUoxWYrQWo40YbcVoJ0Z7MTqI0VGMTmJ0FqOLGF3F6CZGdzF6iNFTjF5i9Bajjxh9xegnxlli9BdjgBg5YuSKkSdGvhgFYhSKMVCMQWKcLcY5YgwWY4gY54pxnhjnizFUjAvEuFCMi8QYJsbFYlwixqViXCbG5WJcIcaVYgwX4yoxrhbjGjFGiHGtGNeVLbbvi1SlGLEvV22qOddMc6655lwLzbmWmnOtNOdaa8610ZxrqznXTnOuveZcB825jppznTTnOmvOddGc66o5101zrrvmXA/NuZ6ac70053przvXRnOurOddPc+4szbn+mnMDNOdyNOdyNeeu1Jwbrjl3lebc1Zpz12jOjdCcu1Zz7jr/XPAo7v+zof/PeP/4FPiFI68J6QMOdMzIFwE3dSRm5IuAmzkSM/JFwM0diRn5IuAWjsSMfBFwS0diRr4IuJUjMSNfBNzakZiRLwJu40jMyBcBt3UkZuSLgNs5EjPyRcDtHYkZ+SLgDo7EjHwRcEdHYka+CLiTIzEjXwTc2ZGYkS8C7uJIzMgXAXd1JGbki4C7ORIz8kXA3R2JGfki4B6OxIx8EXBPR2JGvgi4lyMxI18E3NuRmJEvAu7jSMzIFwH3dSRm5IuA+zkSM/JFwGc5EjPyRcD9HYkZ+SLgAY7EjHwRcI4jMSNfBJxLihn9pfi8svHrZ+JFwPmwdWZ5zHUWOJL3QkfWOdCRdQ5yZJ1nO7LOcxxZ52BH1jnEkXWe68g6z3Nknec7ss6hjqzzAkfWeaEj67zIkXUOc2SdFzuyzkscWeeljqzzMkfWebkj67yCtM4S8a7T2/f/vDK+de5zteHxxhy42lUAXlefy2RVsTQXoX2jvhpRM/7VrsHU3x9XGwHMRbbduQipqK8FfpZ3HfBawFr2grmI6zOxgsJs+bLd44rt/UyVkhtybYfiOeytGcYfW/7lWcF8X1/2z3/eEPtHgfJ/eD/mnPyX0ooVFUq8hlrXBUONKehDjDnsx+xdD9TvBuCmZeWiODgXSP1u1FwrN5SXn+HlZuZHvYKcjKy8vOyI54VzMnMyc8NZhQW5GV5WRpa4Zl5OOEv858I5eV5BKCezQN5Eji22txkPHugG/UagwQbXe1NZ4oLlxdHXvRlYDKy4by67V2DQdbVrRZiJXCtqw6rrInM0Elz46oYur3uS+KfJTvBK4A1+OPAGfxXwpnJ1Wc5NBbSftJ3gLf5+vTW2E7xF0wneyuwE/UVeDew+bgFuxlsD1wrnZxSEsrNys8K5OZFobnokNzs7R1w30/OyCvPDofz0cGGGl5mZl12QXehFCnMzCnIyM3KyM/P/uHvmZznSfSD1u83R7uM2Uvdxe1nigm8ndB93WN59yLjvcKT7uNVfK7r7QOboTlL3ced/0H2Avsv6x9Vg3xH1sN+9PMzB7uMuf7+Oiu0+7tJ0H6MMfA7lQqHEu7HrO/I51GHATvAuoH6jgJu2viOdIFK/ux3tBO8mdYL3lCUu+B5CJ3iv5Z2gjPteRzrBUf5a0Z0gMkejSZ3g6P+gE/wJeIP/GXiDR/5VHePnOIJHnNfWdoL3+fv1/thO8D5NJ3i/gU7QhUKJd2M3dKQT/DUB1wneBzTG+4GdYENHOkGkfg842gk+QOoEHyxLXPCDhE7wIcs7QRn3Q450gvf7a0V3gsgcPUzqBB/+DzrB74E3+B+AN3jk+1J+dLATfMTfr4/GdoKPaDrBRw10gi4USrwbu7EjneCPwE7wEaAxPgrsBBs70gki9XvM0U7wMVIn+HhZ4oIfJ3SCYyzvBGXcYxzpBB/114ruBJE5GkvqBMf+B53g18Ab/DfAGzzyTZjfOdgJPuHv13GxneATmk5wnIFO0IVCiXdjN3WkE/wO2Ak+ATTGccBOsKkjnSBSvycd7QSfJHWC48sSFzye0AlOsLwTlHFPcKQTHOevFd0JInP0FKkTfOo/6AS/AN7gdwNv8MjfOPjKwU5wor9fJ8V2ghM1neAkA52gC4US78Zu7kgn+BWwE5wINMZJwE6wuSOdIFK/yY52gpNJneDTZYkLfprQCT5jeSco437GkU5wkr9WdCeIzNEUUic45T/oBD8B3uA/Bd7gkb9e97mDneCz/n6dGtsJPqvpBKca6ARdKJR4N3ZLRzrBz4Gd4LNAY5wK7ARbOtIJIvV7ztFO8DlSJzitLHHB0wid4POWd4Iy7ucd6QSn+mtFd4LIHL1A6gRf+A86wY+AN/idwBs88nfJP3awE5zu79cZsZ3gdE0nOMNAJ+hCocS7sVs70gl+DOwEpwONcQawE2ztSCeI1O9FRzvBF0md4MyyxAXPJHSCsyzvBGXcsxzpBGf4a0V3gsgczSZ1grNNdoL+TXkb8Ka8Hdi97UjANTHFy3JuKqD9pO0EX/L365zYTvAlTSc4h9kJOlQo8W7strZ3gpqCjrcTfAlojHOAnWBbRzpBpH4vO9oJvkzqBOeWJS54LqETnGd5JyjjnudIJzjHXyu6E0Tm6BVSJ/iK3wnKuWoA1E0++NFP8IFg8GtiwT8eCP5JafBFI3I+KnidY/fOJx9z6PNbA9e8ITB/LnD9aYH584H5C4H59MB8RmD+YmA+05/PF/+dBWIsFGORGIvFWCLGq2IsLfv3Thq9r5YC60A1C6+Jay4TY7kYr/tFEKwR+b+XLLbvuWWac8s15173zwUP9MdVS4H77DXAtf78/eSQtwy4rvakJuXwmFzEE7PMxXKIfn/m9XVgk4fUj73HXyXs8RXimivFeEOMVZo9vkKzd1dqzr2hObfKwB5/FbiXVgD3+Ergujo6ssffAO7xVcA93tGhPb6EsMdXi2uuEWOtGOs0e3y1Zu+u0Zxbqzm3zsAeXwLcS6uBe3wNcF2dHdnja4F7fB1wj3d2aI8vJuzx9eKab4rxlhhva/b4es3efVNz7i3NubcN7PHFwL20HrjH3wSuq6sje/wt4B5/G7jHuzq0xxcR9vgGcc13xNgoxruaPb5Bs3ff0ZzbqDn3roE9vgi4lzYA9/g7wHV1d2SPbwTu8XeBe7y7Q3t8IWGPbxLX3CzGe/Ihq2aPb9Ls3c2ac+9pzr1vYI8vBO6lTcA9vhm4rp6O7PH3gHv8feAe7+nQHl9A2OMfiGtuEWOrGB9q9vgHmr27RXNuq+bchwb2+ALgXvoAuMe3ANfV25E9vhW4xz8E7vHeDu3x+YQ9vk1cc7sYO8T4SLPHt2n27nbNuR2acx8Z2OPzgXtpG3CPbweuq68je3wHcI9/BNzjSP3Unh7r//OPz5aL7639tYH5msB8dWC+KjB/IzBfGZivCMxfD8yXB+bLAvPXAvOlgfmrgfmSwHxxYL4oMF8YmC8IzOcH5q8E5vMC87mB+cuB+ZzA/KXAfHZgPiswnxmYvxiYzwjMpxff6y0NQbktul7R9YquV3S9ousVXa/oekXXc+t6kXzs9Qqi2OtlhbHXy8xWveBZJfb2hf0C876BeZ/AvHdg3isw7xmY9wjMuwfm3QLzroF5l8C8c2DeKTDvGJh3CMzbB+btAvO2gXmbwLx1YN4qMG8ZmLcIzJsH5s0C86aBeZPAvHFg3igwbxiYNwjMPzli7/zjwHxXYL4zMP8oMN8RmG8PzLcF5h8G5lsD8y2B+QeB+fuB+XuB+ebAfFNg/m5gvjEwfycw3xCYvx2YvxWYvxmYrw/M1wXmawPzNYH56sB8VWD+RmC+MjBfEZhfctTe+cWB+bDA/KLA/MLA/ILAfGhgfn5gfl5gfm5gPiQwHxyYnxOYnx2YDwrMBwbmhYF5QWCeH5jnBea5gXlOYD4gMO8fmJ8VmPcLzPsG5n0C896Bea/AvGdg3iMwfzvw2VfweynB760Ev9eyLjAPflct+F224HfdVgXmwe+vBr/fGvz+6+uBefA77cHvvAe/E/9RYB78HC/4OV/wc8APA/PgZ/vBz/6DzwbeD8yDz/uCzwODzwvfDcyD3wEIfkdAfYdgWrE/j53i/94lxsdifCLGp2J8JsbnYnwhxm4xvhTjKzG+FuMbMb4V4zsxvhfjBzH2iPGjGD+J8bMYv4jxqxi/ifG7/Gy0nPhvi1FcjMPFKCHGEWIcKcZRYpQU42gxjhHjWDGOE+N4MU4Q40QxSolRWowyYiSIUVaMcmIkilFejCQxksWoIEaKGBXFqCRGZTFSxUgT4yQxThbjFDFOFeM0MU4Xo4oYVcU4Q4wzxagmRnUxaohRU4xaYoTE8MQIixERI12MDDEyxYiKkSVGthi1xagjRl0x6olRX4wGYjQUo5EYjcVoIkZTMZqJ0VyMFmK0FKOVGK3FaCNGWzHaidFejA5idBSjkxidxegiRlcxuonRXYweYvQUo5cYvcXoI0ZfMfqJcZYY/cUYIEaOGLli5ImRL0aBGIViDBRjkBhni3GOGIPFGCLGuWKcJ8b5YgwV4wIxLhTjIjGGiXGxGJeIcakYl4lxuRhXiHGlGMPFuEqMq8W4RowRYlwrxnViXC/GDWLcKMZNYtwsxkgxbhHjVjFuE+N2Me4Q404x7hJjlBh3i3GPGPeKMVqM+8S4v9yff8le3K9tdah5Q/+fcb9FVPwHphT/+3VD8R2evCboWvs8Q3mg3J//fLCcL4Z6sCD/hxEx5x70zzGFO5woXNy/plvugK+Vt59reQ+WwyVUFvaRxfSvaCh2kHrub93Ba6KL/AGgJsFN/lBsccsTh8UIhHpSoyuW/azV218wD5XDrevhcrBi2PcXZgPmwNL0QaAOSE0fOQhN9/ffCmr6iK8p+6n3jpK4jZfmX+dRsfbHxHhcjDFijBXjCTHGifGkGOPFmCDGU2JMFGOSGJPFeFqMZ8SYIsazYkwV4zkxponxvBgviDFdjBlivCjGTDFmiTFbjJfEmCPGy/6GD2op16M6W3XuMc25xzXnxmjOjdWce0Jzbpzm3JOac+M15yZozj2lOTdRc26S5txkzbmnNeee0Zybojn3rObcVM255zTnpmnOPa8594Lm3HTNuRmacy9qzs3UnJulOTdbc+4lzbk5mnMv++eCB/pbGcE9G/fvYQK8UH0r4zGgr55l6BU48X4r43GIfn/mdUz81/rrdTpjgbnob3Mu0vc2qE/EF3Mo2OyOi+da4X0b5yeBuRhgZy5CsbAw/hBjziz8O3hMOLRrZekg5ilgLnJsy0WWHtwmHnzM0X+CwEkHe63oPwPlZGAucu3JRfjfIPrpg4k5+u9A/gzwQ4kpwFzk2ZCL6H7X6T17YDGHDiBmb+qBXCt0QPp5zwFzkf/f5iLjANfpTdtfzOkHHLP3/L9eK73wIPTzXgDmouC/ykX0oNbpTf/nmLMOMmZvxj9cK7vwoPXzXgTmotB8LkKHsE5vpi7m0CHF7M36+7W8Q9TPmw3MxUCTucg/5HV6L+0bcySOmL05gWuFC+PSz3sZmItBjvwIAfDzAQ/It16Qz+LNxdmO5ALIQR6wj/fygLk4x5FcAPs9D9iveIXAXAx2JBfA+5oH9GXvbGAuhhj667lQfIcH3L8esP48ln7FY/SL+5XgwB5jLuxhfyRk8vXiuHXv+yWFeeWIC55XDn/dV4DFwIr7lXJ7BQZdN/RvP4iCjuFlWLHlM34sxF/lvl8pm+9rvsB/CP/XU9H5fhEGzy3QPClFuz7CtdTTzfnAol8ATi5jg88vh/+q3/xybtzt5gBzvRAWc2a6ybvdQtLdblE54oIXEe52iy2/28m4Fzt+t5sDK7bsPM1yKXe7Jb7mr8be7ZZo7navGrjbzQHe7ZYAi/5VUnLRro+MeSnOPf/44jX6TvyKbxrFwTWIRIPXwN0C2rRkjl8jdEm2x61qBx33Mke6Q2SNLyf7RCi+w5M5WU7wideAGr7uwH55nbBfVoA79L9+7SWwVpYW6HpaDqynlSRdV5b7O7mhvekloA5vwHRIN/ozkG+A86eOVeWIC15FINfVlpOrjHu14+T6EqzYcsOa5VLIdY2v+dpYcl2jIde1BsgV4Vp//R4PsOjXkpKLdn1kzOss70hX+qaB/gvTlUANkca73vJ8yHpZT+hugXFTfhdY1SG6k0XWzpuWk5HU8E2ChuuBGr7lyKcSSP9623LPkTl5m+A5G0jkt4FI1EoL9B5C1tM7JF3fMUDUyG+6b4TpEA2bJOqN4Pyp491yxAW/SyDqTZYTtYx7k+NEPRtWbFkFmuVSiHqzr/l7sUS9WUPU7xkgaoRr/fWrWcCif4+UXLTrI2N+3/Ju6h3fNNBE/Q5QQ6TxfmB5PmS9fEDoboFxU4ha1SG6k0XWzhbLiVpquIWg4QdADbc6QtRI//rQcs+ROfmQ4DnbSOS3jUjUSgv0HkLW03aSrtsNEPUsoA47YDoUeCaJegc4f+r4qBxxwR8RiHqn5UQt497pOFHPghWbV6hZLoWod/mafxxL1Ls0RP2xAaJGuJYi6l3Aov+YlFy06yNj/sTybmq7bxpoot4O1BBpvJ9ang9ZL58Sultg3BSiVnWI7mSRtfOZ5UQtNfyMoOGnQA0/d4Sokf71heWeI3PyBcFzdpPIbzeRqJUW6D2ErKcvSbp+aYCoZwJ1+AqmQ8QoUX8Fzp86vi5HXPDXBKL+xnKilnF/4zhRz4QVW54xov7W1/y7WKL+VkPU3xkgaoRrKaL+Flj035GSi3Z9ZMzfW95NfembBpqovwRqiDTeHyzPh6yXHwjdLTBuClGrOkR3ssja2WM5UUsN9xA0/AGo4Y+OEDXSv36y3HNkTn4ieM7PJPL7mUjUSgv0HkLW0y8kXX8xQNTId83/CtMhx+j7Ln8F508dv5UjLvg3AlH/bjlRy7h/d5yoX4QVW6ax910WS/S1SCy2Lz3L/yGWqOW/xCZqhGspopYxxHstVfSHJXKSi3Z9ZMzFE+3upn7xTQNN1L8AzRJpvIdbng9ZL4cn4rtbYNwUolZ1iO5kkbVTgqxhKL7jj70s14jW8HCgHx4B1lAd6HsA0r+OtNxzZE6OJHjOUcBcB3uooxJ5RK20QO8hZD2VJOlaMpFP1DOAOhwN0yGcbZKojwbnTx3HJBIXfEwi/rrHAm8srLiPTdwrMOi6Rol6Boyo86Oa5VKI+jhf8+Njifo4DVEfb4CoZwCJ+jhg0R+fyEku2vWRMZ9geTdV0jcNNFGXBGqINN4TLc+HrJcTCd3tiWCSQa9P1SG6k0XWTinLiVpqWIqg4YlADUs7QtRI/ypjuefInJQheE4CifwSiESttEDvIWQ9lSXpWtYAUU8HEnU5mA65WSaJuhw4f+pITCQuOJFA1OUtJ2oZd3nHiXo6jKjTszTLpRB1kq95cixRJ2mIOtkAUU8HEnUSsOiTEznJRbs+MuYKlndTZX3TQBN1WaCGSONNsTwfsl5SCN0tMG4KUas6RHeyyNqpaDlRSw0rEjRMAWpYyRGiRvpXZcs9R+akMsFzUknkl0okaqUFeg8h6ymNpGuaAaJ+AUjUJ8F0yDD6re+TwPlTx8mJxAWfTCDqUywnahn3KY4T9Qswos419q3vU33NT4sl6lM1RH2aAaJ+AUjUpwKL/rRETnLRro+M+XTLu6k03zTQRJ0G1BBpvFUsz4eslyqE7hYYN4WoVR2iO1lk7VS1nKilhlUJGlYBaniGI0SN9K8zLfccmZMzCZ5TjUR+1YhErbRA7yFkPVUn6VrdAFE/DyTqGrgnNBkmiboGOH/qqJlIXHBNAlHXspyoZdy1HCfq53FEnatZLoWoQ77mXixRhzRE7Rkg6ueBRB0CFr2XyEku2vWRMYct76aq+6aBJurqQA2RxhuxPB+yXiKE7hYYN4WoVR2iO1lk7aRbTtRSw3SChhGghhmOEDXSvzIt9xyZk0yC50RJ5BclErXSAr2HkPWURdI1ywBRTwMSdTaun8w0SdTZ4Pypo3YiccG1CURdx3KilnHXcZyop+G+9Z2jWS6FqOv6mteLJeq6GqKuZ4CopwGJui6w6OslcpKLdn1kzPUt76ayfNNAE3UWUEOk8TawPB+yXhoQultg3BSiVnWI7mSRtdPQcqL+Y88RNGwA1LCRI0SN9K/GlnuOzEljguc0IZFfEyJRKy3QewhZT01JujY1QNTPAYm6GUyHLKO/ntUMnD91NE8kLrg5gahbWE7UMu4WjhP1czCijhr79ayWvuatYom6pYaoWxkg6ueARN0SWPStEjnJRbs+MubWlndTTX3TQBN1U6CGSONtY3k+ZL20IXS3wLgpRK3qEN3JImunreVELTVsS9CwDVDDdo4QNdK/2lvuOTIn7Qme04FEfh2IRK20QO8hZD11JOna0QBRTwUSdSdHiboTOH/q6JxIXHBnAlF3sZyoZdxdHCfqqQ4SdVdf826xRN1VQ9TdDBD1VCBRdwUWfTdHiBoZc3fLu6mOvmmgibojUEOk8fawPB+yXnoQultg3BSiVnWI7mSRtdPTcqKWGvYkaNgDqGEvR4ga6V+9LfccmZPeBM/pQyK/PkSiVlqg9xCynvqSdO1rgKifBRJ1P5gOGUbf9d0PnD91nJVIXPBZBKLubzlRy7j7O07Uz+J+tN3Yu74H+JrnxBL1AA1R5xgg6meBRD0AWPQ5iZzkol0fGXOu5d1UX9800ETdF6gh0njzLM+HrJc8QncLjJtC1KoO0Z0ssnbyLSdqqWE+QcM8oIYFjhA10r8KLfccmZNCgucMJJHfQCJRKy3QewhZT4NIug4yQNRTgER9No6o800S9dng/KnjnETigs8hEPVgy4laxj3YcaKegiPqiGa5FKIe4mt+bixRD9EQ9bkGiHoKkKiHAIv+3EROctGuj4z5PMu7qUG+aaCJehBQQ6Txnm95PmS9nE/oboFxU4ha1SG6k0XWzlDLiVpqOJSg4flADS9whKiR/nWh5Z4jc3IhwXMuIpHfRUSiVlqg9xCynoaRdB1mgKifARL1xTAdwkafUV8Mzp86LkkkLvgSAlFfajlRy7gvdZyon4ERdb6xZ9SX+ZpfHkvUl2mI+nIDRP0MkKgvAxb95Ymc5KJdHxnzFZZ3U8N800AT9TCghkjjvdLyfMh6uZLQ3QLjphC1qkN0J4usneGWE7XUcDhBwyuBGl7lCFEj/etqyz1H5uRqgudcQyK/a4hErbRA7yFkPY0g6TrCAFE/DSTqa2E6RCImifpacP7UcV0iccHXEYj6esuJWsZ9veNE/TSMqPPyNculEPUNvuY3xhL1DRqivtEAUT8NJOobgEV/YyInuWjXR8Z8k+Xd1AjfNNBEPQKoIdJ4b7Y8H7JebiZ0t8C4KUSt6hDdySJrZ6TlRC01HEnQ8Gaghrc4QtRI/7rVcs+RObmV4Dm3kcjvNiJRKy3QewhZT7eTdL3dAFFPBhL1HTAdCow+o74DnD913JlIXPCdBKK+y3KilnHf5ThRT4YRtWfsGfUoX/O7Y4l6lIao7zZA1JOBRD0KWPR3J3KSi3Z9ZMz3WN5N3e6bBpqobwdqiDTeey3Ph6yXewndLTBuClGrOkR3ssjaGW05UUsNRxM0vBeo4X2OEDXSv+633HNkTu4neM4DJPJ7gEjUSgv0HkLW04MkXR80QNSTgET9EEyHdKNE/RA4f+p4OJG44IcJRP2I5UQt437EcaKeBCPqXGNE/aiv+WOxRP2ohqgfM0DUk4BE/Siw6B9L5CQX7frImB+3vJt60DcNNFE/CNQQabxjLM+HrJcxhO4WGDeFqFUdojtZZO2MtZyopYZjCRqOAWr4hCNEjfSvcZZ7jszJOILnPEkivyeJRK20QO8hZD2NJ+k63gBRTwQS9QSYDtFsk0Q9AZw/dTyVSFzwUwSinmg5Ucu4JzpO1BNhRJ0V1SyXQtSTfM0nxxL1JA1RTzZA1BOBRD0JWPSTEznJhX+OCoz5acu7qfG+aaCJejxQQ6TxPmN5PmS9PEPoboFxU4ha1SG6k0XWzhTLiVpqOIWg4TNADZ91hKiR/jXVcs+ROZlK8JznSOT3HJGolRboPYSsp2kkXacZIOqngET9PO4JjVGifh6cP3W8kEhc8AsEop5uOVHLuKc7TtRPwYg63RhRz/A1fzGWqGdoiPpFA0T9FJCoZwCL/sVETnLRro+Meabl3dQ03zTQRD0NqCHSeGdZng9ZL7MI3S0wbgpRqzpEd7LI2pltOVFLDWcTNJwF1PAlR4ga6V9zLPccmZM5BM95mUR+LxOJWmmB3kPIeppL0nWuAaKeACTqebhn1CGTRD0PnD91vJJIXPArBKKebzlRy7jnO07UE2BEnR3SLJdC1At8zRfGEvUCDVEvNEDUE4BEvQBY9AsTOclFuz4y5kWWd1NzfdNAE/VcoIZI411seT5kvSwmdLfAuClEreoQ3ckia2eJ5UQtNVxC0HAxUMNXHSFqpH8ttdxzZE6WEjznNRL5vUYkaqUFeg8h62kZSddlBoh6PJCol+P6Sc8kUS8H508drycSF/w6gahXWE7UMu4VjhP1eBhRZxZqlksh6pW+5m/EEvVKDVG/YYCoxwOJeiWw6N9I5CQX7frImFdZ3k0t800DTdTLgBoijXe15fmQ9bKa0N0C46YQtapDdCeLrJ01lhO11HANQcPVQA3XOkLUSP9aZ7nnyJysI3jOehL5rScStdICvYeQ9fQmSdc3DRD1k0Cifgv3nUejv571Fjh/6ng7kbjgtwlEvcFyopZxb3CcqJ/EvZnM2K9nveNrvjGWqN/REPVGA0T9JJCo3wEW/cZETnLRro+M+V3Lu6k3fdNAE/WbQA2RxrvJ8nzIetlE6G6BcVOIWtUhupNF1s5my4laariZoOEmoIbvOULUSP9633LPkTl5n+A5H5DI7wMiUSst0HsIWU9bSLpuMUDU44BEvRWmQ4HRZ9RbwflTx4eJxAV/SCDqbZYTtYx7m+NEPQ7361nGnlFv9zXfEUvU2zVEvcMAUY8DEvV2YNHvSOQkF+36yJg/sryb2uKbBpqotwA1RBrvTsvzIetlJ6G7BcZNIWpVh+hOFlk7uywnaqnhLoKGO4EafuwIUSP96xPLPUfm5BOC53xKIr9PiUSttEDvIWQ9fUbS9TMDRP0EkKg/h+lQmGGSqD8H508dXyQSF/wFgah3W07UMu7djhP1EzCiDuVqlksh6i99zb+KJeovNUT9lQGifgJI1F8Ci/6rRE5y0a6PjPlry7upz3zTQBP1Z0ANkcb7jeX5kPXyDaG7BcZNIWpVh+hOFlk731pO1FLDbwkafgPU8DtHiBrpX99b7jkyJ98TPOcHEvn9QCRqpQV6DyHraQ9J1z0GiHoskKh/hOmQbfRb3z+C86eOnxKJC/6JQNQ/W07UMu6fHSfqsbi/ozb2re9ffM1/jSXqXzRE/asBoh4LJOpfgEX/ayInuWjXR8b8m+Xd1B7fNNBEvQeoIdJ4f7c8H7Jefid0t8C4KUSt6hDdyUJv2uXtJmqpoVwjWsPfgRoeBtZQHeh7ANK/ipe323NkTuQa0Xv6cGCugz3U4eV5RK20QO8hZD2VIOlaojyfqMcAifoImA6FRt/1fQQ4f+o4sjxxwUeWx1/3qPJ2E7WM+6jyewUGXdcoUY/Bfevb2Lu+S/qaH12+2L70XLL834la/ktsoh4DJOqSwKI/ujwnuWjXR8Z8jOXdVAnfNNBEXQKoIdJ4j7U8H7JejiV0t8C4KUSt6hDdySJr5zjLiVpqeBxBw2OBGh7vCFEj/esEyz1H5uQEguecSCK/E4lErbRA7yFkPZUi6VrK19UkXT5eDhuLOkqXJy64NIEuy1hOlzLuMgS61K0VsUHKEDYxcOPR822rhsi4ExxpJkoBYy5reTMhY00gNBPlLG++ZV7KkT0nXg0TSY1D4n/QODxGahzKlycuuDyhcUiyvHGQcSc50jjIQk4ibGLgxqPn21YNkXEnO9I4JAJjrmB54yBjTSY0DimWNw4yLylkz4lXw4qkxqGigWf4jwKf4VcC7iGTzVKl8pxmqXJ54oIrE5qlVMubJRl3qqFmKRTf4VX014p+dFgRmCNkvtMsv4FKo0sj3EBPsvwGKmM+iRD3yaSb3smar4CgNWHnDLHHUwlND3K/n2J53UsNTyFomAbU8FRHQAt5zznN8vuEzMlpBL88neSXpxMf9yot0HsIWU9VSHsIrWUVYMzFi+17oNe6vSRO0zT/OlVF/GeIcaYY1cSoLkYNMWqKUUuMkBieGGExImKki5EhRqYYUTGyxMgWo7YYdcSoK0Y9MeqL0UBqK0YjMRqL0USMpmI0E6O5GC3K/ylScN9U9fuM4LkzNOfO1JyrpjlXXXOuhuZcTc25WppzIc05T3MurDkX0ZxL15zL0JzL1JyLas5lac5la87V1pyrozlXV3OunuZcfc25BppzDTXnGmnONdaca6I511RzrpnmXHPNuRaanraE/8+G/j9D8R377Nl4/aUqwKvUV6TPAPre8Cocr4/NRTwxy1ycCdHvz7xWi/9aYV8/rzowF1fZnIv0v9bp1Ygv5lAgZq9mPNcK76OfVwuYi6vtzEUoZp1e6BBjziz8W8yed2jXytLo54WBubjGtlxkadfpRQ4+5ug/xOylH+y1ov+on5cBzMUIe3IR/pd1epkHE3P0X2P2ogd+rbz96OdlAXNxrQ25iO53nV72gcUcOoCYvdoHcq3QAenn1QHm4rr/NhcZB7hOr+7+Yk4/4Ji9ev96rfTCg9DPqw/MxfX/VS6iB7VOr8E/x5x1kDF7Df/hWtmFB62f1wiYixvM5yJ0COv0GutiDh1SzF6Tv1/LO0T9vKbAXNxoMhf5h7xOr9m+MUfiiNlrHrhWuDAu/bwWwFzcZCgXofgOD/j5gAfkWy/IZ/Hm4mZHcgHkIA/Yx3vXAnMx0pFcAPs9D9iveDcAc3GLI7kA3tc8oC97NwNzcSspF+hXgQD3rwesP4+lH/p7AcgeoyXsOW7E6AugcOve98ujrcoTF9yqPP66rYHFwIq7dfm9AoOua/QFUC1gxZZv7AVQbXzN2/oP4f96KtrGL8Lgubbl+S+AQriWerrZBlj0bcHJZWzwNuXx34xqU96Nu11zYK7bwWLOTDd5t2tHutu1L09ccHvC3a6D5Xc7GXcHx+92zWHFlp2nWS7lbtfR17xT7N2uo+Zu18nA3a458G7XEVj0nUjJRbs+MubOOPfUfvc53vW19k2jOLgGkWjQBdwtoE1L5rgLoUuyPW5VO+i4uzrSHSJrvBvZJ0LxHZ7MSTeCT3QBatjdgf3SnbBfeoA7dNWr9AislaUFup66AeupJ0nXnuX5f+TfDKhDL5gO6QUmybUXOH/q6F2euODeBHLtYzm5yrj7OE6uzWDFlhvWLJdCrn19zfvFkmtfDbn2M0CuCNdS5NoXWPT9SMlFuz4y5rMs70h7+qaBfttGT6CGSOPtb3k+ZL30J3S3wLgpb25QdYjuZJG1M8ByMpIaDiBo2B+oYY4jn0og/SvXcs+ROckleE4eifzyiESttEDvIWQ95ZN0zTdA1MhvuhfAdIiGTRJ1ATh/6igsT1xwIYGoB1pO1DLugY4TdVNYsWUVaJZLIepBvuZnxxL1IA1Rn22AqBGupYh6ELDozyYlF+36yJjPsbybyvdNA03U+UANkcY72PJ8yHoZTOhugXFTiFrVIbqTRdbOEMuJWmo4hKDhYKCG5zpC1Ej/Os9yz5E5OY/gOeeTyO98IlErLdB7CFlPQ0m6DjVA1E2AOlwA06HA6IvoLwDnTx0Xlicu+EICUV9kOVHLuC9ynKibwIrNK9Qsl0LUw3zNL44l6mEaor7YAFEjXEsR9TBg0V9MSi7a9ZExX2J5NzXUNw00UQ8Faog03kstz4esl0sJ3S0wbgpRqzpEd7LI2rnMcqKWGl5G0PBSoIaXO0LUSP+6wnLPkTm5guA5V5LI70oiUSst0HsIWU/DSboON0DUjYE6XAXTIWKUqK8C508dV5cnLvhqAlFfYzlRy7ivcZyoG8OKLc8YUY/wNb82lqhHaIj6WgNEjXAtRdQjgEV/LSm5aNdHxnyd5d3UcN800EQ9HKgh0nivtzwfsl6uJ3S3wLgpRK3qEN3JImvnBsuJWmp4A0HD64Ea3ugIUSP96ybLPUfm5CaC59xMIr+biUSttEDvIWQ9jSTpOtIAUSPfNX8LTIcco++7vAWcP3XcWp644FsJRH2b5UQt477NcaJuBCu2TGPvu7zd1/yOWKK+XUPUdxggaoRrKaK+HVj0d5CSi3Z9ZMx3Wt5NjfRNA03UI4EaIo33LsvzIevlLkJ3C4ybQtSqDtGdLLJ2RllO1FLDUQQN7wJqeLcjRI30r3ss9xyZk3sInnMvifzuJRK10gK9h5D1NJqk62gDRN0QqMN9MB3C2SaJ+j5w/tRxf3nigu8nEPUDlhO1jPsBx4m6IazY8qOa5VKI+kFf84diifpBDVE/ZICoEa6liPpBYNE/REou2vWRMT9seTc12jcNNFGPBmqINN5HLM+HrJdHCN0tMG4KUas6RHeyyNp51HKilho+StDwEaCGjzlC1Ej/etxyz5E5eZzgOWNI5DeGSNRKC/QeQtbTWJKuYw0QdQOgDk/AdMjNMknUT4Dzp45x5YkLHkcg6ictJ2oZ95OOE3UDWLGlZ2mWSyHq8b7mE2KJeryGqCcYIGqEaymiHg8s+gmk5KJdHxnzU5Z3U2N900AT9VighkjjnWh5PmS9TCR0t8C4KUSt6hDdySJrZ5LlRC01nETQcCJQw8mOEDXSv5623HNkTp4meM4zJPJ7hkjUSgv0HkLW0xSSrlMMEHV9oA7PwnTIMPqt72fB+VPH1PLEBU8lEPVzlhO1jPs5x4m6Pu5jJ2Pf+p7ma/58LFFP0xD18waIGuFaiqinAYv+eVJy0a6PjPkFy7upKb5poIl6ClBDpPFOtzwfsl6mE7pbYNwUolZ1iO5kkbUzw3KilhrOIGg4Hajhi44QNdK/ZlruOTInMwmeM4tEfrOIRK20QO8hZD3NJuk62wBR1wPq8BLuCU2GSaJ+CZw/dcwpT1zwHAJRv2w5Ucu4X3acqOvhoCtXs1wKUc/1NZ8XS9RzNUQ9zwBRI1xLEfVcYNHPIyUX7frImF+xvJua7ZsGmqhnAzVEGu98y/Mh62U+obsFxk0halWH6E4WWTsLLCdqqeECgobzgRoudISokf61yHLPkTlZRPCcxSTyW0wkaqUFeg8h62kJSdclBoi6LlCHV3H9ZKZJon4VnD91LC1PXPBSAlG/ZjlRy7hfc5yo6+I+dsrRLJdC1Mt8zZfHEvUyDVEvN0DUCNdSRL0MWPTLSclFuz4y5tct76aW+KaBJuolQA2RxrvC8nzIellB6G6BcVOIWtUhupNF1s5Ky4laariSoOEKoIZvOELUSP9aZbnnyJysInjOahL5rSYStdICvYeQ9bSGpOsaA0RdB6jDWpgOWUZ/PWstOH/qWFeeuOB1BKJebzlRy7jXO07UdWDFFjX261lv+pq/FUvUb2qI+i0DRI1wLUXUbwKL/i1SctGuj4z5bcu7qTW+aaCJeg1QQ6TxbrA8H7JeNhC6W2DcFKJWdYjuZJG1847lRC01fIeg4QaghhsdIWqkf71ruefInLxL8JxNJPLbRCRqpQV6DyHraTNJ180GiLo2UIf3HCXq98D5U8f75YkLfp9A1B9YTtQy7g8cJ+raDhL1Fl/zrbFEvUVD1FsNEDXCtRRRbwEW/VZHiBoZ84eWd1ObfdNAE/VmoIZI491meT5kvWwjdLfAuClEreoQ3ckia2e75UQtNdxO0HAbUMMdjhA10r8+stxzZE4+InjOThL57SQStdICvYeQ9bSLpOsuA0SdDdThY5gOGUbf9f0xOH/q+KQ8ccGfEIj6U8uJWsb9qeNEnQ0rthxj7/r+zNf881ii/kxD1J8bIGqEaymi/gxY9J+Tkot2fWTMX1jeTe3yTQNN1LuAGiKNd7fl+ZD1spvQ3QLjphC1qkN0J4usnS8tJ2qp4ZcEDXcDNfzKEaJG+tfXlnuOzMnXBM/5hkR+3xCJWmmB3kPIevqWpOu3Bog6C6jDdziizjdJ1N+B86eO78sTF/w9gah/sJyoZdw/OE7UWTjoimiWSyHqPb7mP8YS9R4NUf9ogKgRrqWIeg+w6H8kJRft+siYf7K8m/rWNw00UX8L1BBpvD9bng9ZLz8Tultg3BSiVnWI7mSRtfOL5UQtNfyFoOHPQA1/dYSokf71m+WeI3PyG8FzfieR3+9EolZaoPcQsp6KJXF0lddlE3UUqMNhMB3CRp9RHwbO31+5SiIuuHgS/rqHJ9lN1DLuw5P2Cgy6rlGijsJMON/YM+oSvuZHJBXbl55LJP2dqOW/xCbqKJCoSwCL/ogkTnLRro+M+cgku7upYr5poIm6GFBDpPEeZXk+ZL0clYTvboFxU4ha1SG6k0XWTkmyhqH4jj/2ckmChkcBNTwarKE60PcApH8dY7nnyJwcQ/CcY0nkd2wSj6iVFug9hKyn40i6HmeAqDOBRH08TIdIxCRRHw/OnzpOSCIu+AQCUZ9oOVHLuE90nKgzYUSdl69ZLoWoS/mal44l6lIaoi5tgKgzgURdClj0pZM4yUW7PjLmMpZ3U8f5poEm6uOAGiKNN8HyfMh6SSB0t8C4KUSt6hDdySJrp6zlRC01LEvQMAGoYTlHiBrpX4mWe47MSSLBc8qTyK88kaiVFug9hKynJJKuSQaIOgNI1MkwHQqMPqNOBudPHRWSiAuuQCDqFMuJWsad4jhRZ8CI2svSLJdC1BV9zSvFEnVFDVFXMkDUGUCirggs+kpJnOSiXR8Zc2XLu6kk3zTQRJ0E1BBpvKmW50PWSyqhuwXGTSFqVYfoThZZO2mWE7XUMI2gYSpQw5McIWqkf51suefInJxM8JxTSOR3CpGolRboPYSsp1NJup5qgKjTgUR9GkyHdKNEfRo4f+o4PYm44NMJRF3FcqKWcVdxnKjTYUSda4yoq/qanxFL1FU1RH2GAaJOBxJ1VWDRn5HESS7a9ZExn2l5N3Wqbxpooj4VqCHSeKtZng9ZL9UI3S0wbgpRqzpEd7LI2qluOVFLDasTNKwG1LCGI0SN9K+alnuOzElNgufUIpFfLSJRKy3QewhZTyGSriEDRB0BErUH0yGabZKoPXD+1BFOIi44TCDqiOVELeOOOE7UERhRZ0U1y6UQdbqveUYsUadriDrDAFFHgESdDiz6jCROcuGfowJjzrS8mwr5poEm6hBQQ6TxRi3Ph6yXKKG7BcZNIWpVh+hOFlk7WZYTtdQwi6BhFKhhtiNEjfSv2pZ7jsxJbYLn1CGRXx0iUSst0HsIWU91SbrWNUDUYSBR18M9oTFK1PXA+VNH/STigusTiLqB5UQt427gOFGHYUSdboyoG/qaN4ol6oYaom5kgKjDQKJuCCz6Rkmc5KJdHxlzY8u7qbq+aaCJui5QQ6TxNrE8H7JemhC6W2DcFKJWdYjuZJG109RyopYaNiVo2ASoYTNHiBrpX80t9xyZk+YEz2lBIr8WRKJWWqD3ELKeWpJ0bWmAqD0gUbfCPaMOmSTqVuD8qaN1EnHBrQlE3cZyopZxt3GcqD0YUWeHNMulEHVbX/N2sUTdVkPU7QwQtQck6rbAom+XxEku2vWRMbe3vJtq6ZsGmqhbAjVEGm8Hy/Mh66UDobsFxk0halWH6E4WWTsdLSdqqWFHgoYdgBp2coSokf7V2XLPkTnpTPCcLiTy60IkaqUFeg8h66krSdeuBog6BCTqbrh+0jNJ1N3A+VNH9yTigrsTiLqH5UQt4+7hOFGHYESdWahZLoWoe/qa94ol6p4aou5lgKhDQKLuCSz6Xkmc5KJdHxlzb8u7qa6+aaCJuitQQ6Tx9rE8H7Je+hC6W2DcFKJWdYjuZJG109dyopYa9iVo2AeoYT9HiBrpX2dZ7jkyJ2cRPKc/ifz6E4laaYHeQ8h6GkDSdYABoq4FJOoc3Hcejf56Vg44f+rITSIuOJdA1HmWE7WMO89xoq6FezOZsV/Pyvc1L4gl6nwNURcYIOpaQKLOBxZ9QRInuWjXR8ZcaHk3NcA3DTRRDwBqiDTegZbnQ9bLQEJ3C4ybQtSqDtGdLLJ2BllO1FLDQQQNBwI1PNsRokb61zmWe47MyTkEzxlMIr/BRKJWWqD3ELKehpB0HWKAqGsCifpcmA4FRp9RnwvOnzrOSyIu+DwCUZ9vOVHLuM93nKhr4n49y9gz6qG+5hfEEvVQDVFfYICoawKJeiiw6C9I4iQX7frImC+0vJsa4psGmqiHADVEGu9FludD1stFhO4WGDeFqFUdojtZZO0Ms5yopYbDCBpeBNTwYkeIGulfl1juOTInlxA851IS+V1KJGqlBXoPIevpMpKulxkg6hpAor4cpkNhhkmivhycP3VckURc8BUEor7ScqKWcV/pOFHXgBF1KFezXApRD/c1vyqWqIdriPoqA0RdA0jUw4FFf1USJ7lo10fGfLXl3dRlvmmgifoyoIZI473G8nzIermG0N0C46YQtapDdCeLrJ0RlhO11HAEQcNrgBpe6whRI/3rOss9R+bkOoLnXE8iv+uJRK20QO8hZD3dQNL1BgNEXR1I1DfCdMg2+q3vG8H5U8dNScQF30Qg6pstJ2oZ982OE3V13N9RG/vW90hf81tiiXqkhqhvMUDU1YFEPRJY9LckcZKLdn1kzLda3k3d4JsGmqhvAGqINN7bLM+HrJfbCN0tMG4KUas6RHeyyNq53XKilhreTtDwNqCGdzhC1Ej/utNyz5E5uZPgOXeRyO8uIlErLdB7CFlPo0i6jjJA1NWARH037hm10Xd93w3OnzruSSIu+B4CUd9rOVHLuO91nKir4b71bexd36N9ze+LJerRGqK+zwBRVwMS9Whg0d+XxEku2vWRMd9veTc1yjcNNFGPAmqINN4HLM+HrJcHCN0tMG4KUas6RHeyyNp50HKilho+SNDwAaCGDzlC1Ej/ethyz5E5eZjgOY+QyO8RIlErLdB7CFlPj5J0fdTX1SRdnlkeG4s6HksiLvgxAl0+bjldyrgfJ9Clbq2IDfI4YRMDNx4937ZqiIx7jCPNxKPAmMda3kzIWMcQmoknLG++ZV6eIHtOvBqOIzUO4/6DxuEMUuPwZBJxwU8SGofxljcOMu7xjjQOspDHEzYxcOPR822rhsi4JzjSOIwDxvyU5Y2DjHUCoXGYaHnjIPMykew58Wo4idQ4TDLwDL8q8Bn+ZOAeMtksTU7iNEtPJxEX/DShWXrG8mZJxv2MoWYpFN/hTfLXin50OAmYI2S+p1h+A5VGN4VwA33W8huojPlZQtxTSTe9qZqvgKA1YecMscefITQ9yP3+nOV1LzV8jqDhFKCG0xwBLeQ953nL7xMyJ88T/PIFkl++QHzcq7RA7yFkPU0n7SG0ltOBMRcvtu+BXmsV3LVCaf51Zoj4XxRjphizxJgtxktizBHjZTHmijFPjFfEmC/GAjEWirFIjMViLBHjVTGWivGaGMvEWC7G62KsEGOlGG+IsUqM1WKsEWOtGOvEWJ/0p0jBfTPD7zOC517UnJupOTdLc2625txLmnNzNOde1pybqzk3T3PuFc25+ZpzCzTnFmrOLdKcW6w5t0Rz7lXNuaWac69pzi3TnFuuOfe65twKzbmVmnNvaM6t0pxbrTm3RnNurebcOs259ZqetoT/z4b+P0PxHfvs2Xj9ZQbAq9RXpF8E+t7DVTheH5uLeGKWuZgJ0e/PvM6K/1phXz9vNjAXj9ici/S/1um9FF/MoUDM3px4rhXeRz/vZWAuHrUzF6GYdXpzDzHmzMK/xezNO7RrZWn0814B5uIx23KRpV2nN//gY47+Q8zegoO9VvQf9fMWAnPxuD25CP/LOr1FBxNz9F9j9hYf+LXy9qOftwSYizE25CK633V6rx5YzKEDiNlbeiDXCh2Qft5rwFyM/W9zkXGA6/SW7S/m9AOO2Vv+r9dKLzwI/bzXgbl44r/KRfSg1umt+OeYsw4yZm/lP1wru/Cg9fPeAOZinPlchA5hnd4qXcyhQ4rZW/33a3mHqJ+3BpiLJ03mIv+Q1+mt3TfmSBwxe+sC1woXxqWftx6Yi/GGchGK7/CAnw94QL71gnwW95fzHMkFkIM8YB/vjQHm4ilHcgHs9zxgv+KNA+ZioiO5AN7XPKAvexOAuZhEygX6VSDA/esB689j6Yf+XgCyx3gT9hw3YvQFULh17/vl0beSiAt+Kwl/3beBxcCK++2kvQKDrmv0BVDrYcWWb+wFUBt8zd/xH8L/9VR0g1+EwXPvJPFfAIVwLfV0cwOw6N8BJ5exwTck4b8ZtSHJjbvdOmCuN8Jizkw3ebfbSLrbvZtEXPC7hLvdJsvvdjLuTY7f7dbBii07T7Ncyt1us6/5e7F3u82au917Bu5264B3u83Aon+PlFy06yNjfh/nntrvPse7vrd90ygOrkEkGnwA7hbQpiVz/AGhS7I9blU76Li3ONIdImt8K9knQvEdnszJVoJPfADU8EMH9suHhP2yDdyhq15lW2CtLC3Q9bQVWE/bSbpuT+L/kf9aoA47YDqkF5gk1x3g/KnjoyTigj8ikOtOy8lVxr3TcXJdCyu23LBmuRRy3eVr/nEsue7SkOvHBsgV4VqKXHcBi/5jUnLRro+M+RPLO9Ltvmmg37axHagh0ng/tTwfsl4+JXS3wLgpb25QdYjuZJG185nlZCQ1/Iyg4adADT935FMJpH99YbnnyJx8QfCc3STy200kaqUFeg8h6+lLkq5fGiBq5Dfdv4LpEA2bJOqvwPlTx9dJxAV/TSDqbywnahn3N44T9RpYsWUVaJZLIepvfc2/iyXqbzVE/Z0Boka4liLqb4FF/x0puWjXR8b8veXd1Je+aaCJ+kughkjj/cHyfMh6+YHQ3QLjphC1qkN0J4usnT2WE7XUcA9Bwx+AGv7oCFEj/esnyz1H5uQnguf8TCK/n4lErbRA7yFkPf1C0vUXA0S9GqjDrzAdCoy+iP5XcP7U8VsSccG/EYj6d8uJWsb9u+NEvRpWbF6hZrkUoi6W7GuRXGxfepb/QyxRy3+JTdQI11JELWOI91qq6A9L5iQX7frImIsn291N/eKbBpqofwGaJdJ4D7c8H7JeDk/Gd7fAuClEreoQ3ckia6cEWcNQfMcfe1muEa3h4UA/PAKsoTrQ9wCkfx1puefInBxJ8JyjgLkO9lBHJfOIWmmB3kPIeipJ0rVkMp+oVwF1OBqmQ8QoUR8Nzp86jkkmLviYZPx1jwXeWFhxH5u8V2DQdY0S9SoYUecZI+rjfM2PjyXq4zREfbwBol4FJOrjgEV/fDInuWjXR8Z8guXdVEnfNNBEXRKoIdJ4T7Q8H7JeTiR0tyeCSQa9PlWH6E4WWTulLCdqqWEpgoYnAjUs7QhRI/2rjOWeI3NShuA5CSTySyAStdICvYeQ9VSWpGtZA0SNfNd8OZgOOUbfd1kOnD91JCYTF5xIIOrylhO1jLu840T9BoyoM4297zLJ1zw5lqiTNESdbICo3wASdRKw6JOTOclFuz4y5gqWd1NlfdNAE3VZoIZI402xPB+yXlII3S0wbgpRqzpEd7LI2qloOVFLDSsSNEwBaljJEaJG+ldlyz1H5qQywXNSSeSXSiRqpQV6DyHrKY2ka5oBol4JJOqTYDqEs00S9Ung/Knj5GTigk8mEPUplhO1jPsUx4l6JYyo86Oa5VKI+lRf89NiifpUDVGfZoCoVwKJ+lRg0Z+WzEku2vWRMZ9ueTeV5psGmqjTgBoijbeK5fmQ9VKF0N0C46YQtapDdCeLrJ2qlhO11LAqQcMqQA3PcISokf51puWeI3NyJsFzqpHIrxqRqJUW6D2ErKfqJF2rGyDqFUCirgHTITfLJFHXAOdPHTWTiQuuSSDqWpYTtYy7luNEvQL3QvwszXIpRB3yNfdiiTqkIWrPAFGvABJ1CFj0XjInuWjXR8Yctrybqu6bBpqoqwM1RBpvxPJ8yHqJELpbYNwUolZ1iO5kkbWTbjlRSw3TCRpGgBpmOELUSP/KtNxzZE4yCZ4TJZFflEjUSgv0HkLWUxZJ1ywDRP06kKizYTpkGP3WdzY4f+qonUxccG0CUdexnKhl3HUcJ+rXcT+wZOxb33V9zevFEnVdDVHXM0DUrwOJui6w6Oslc5KLdn1kzPUt76ayfNNAE3UWUEOk8TawPB+yXhoQultg3BSiVnWI7mSRtdPQcqL+Y88RNGwA1LCRI0SN9K/GlnuOzEljguc0IZFfEyJRKy3QewhZT01JujY1QNTLgUTdDPeEJsMkUTcD508dzZOJC25OIOoWlhO1jLuF40S9HEfUuZrlUoi6pa95q1iibqkh6lYGiHo5kKhbAou+VTInuWjXR8bc2vJuqqlvGmiibgrUEGm8bSzPh6yXNoTuFhg3hahVHaI7WWTttLWcqKWGbQkatgFq2M4Rokb6V3vLPUfmpD3BczqQyK8DkaiVFug9hKynjiRdOxog6mVAou6E6yczTRJ1J3D+1NE5mbjgzgSi7mI5Ucu4uzhO1Mtw3/rO0SyXQtRdfc27xRJ1Vw1RdzNA1MuARN0VWPTdkjnJRbs+MubulndTHX3TQBN1R6CGSOPtYXk+ZL30IHS3wLgpRK3qEN3JImunp+VELTXsSdCwB1DDXo4QNdK/elvuOTInvQme04dEfn2IRK20QO8hZD31Jena1wBRvwYk6n4wHbKM/npWP3D+1HFWMnHBZxGIur/lRC3j7u84Ub8GI+qosV/PGuBrnhNL1AM0RJ1jgKhfAxL1AGDR5yRzkot2fWTMuZZ3U31900ATdV+ghkjjzbM8H7Je8gjdLTBuClGrOkR3ssjaybecqKWG+QQN84AaFjhC1Ej/KrTcc2ROCgmeM5BEfgOJRK20QO8hZD0NIuk6yABRLwUS9dmOEvXZ4Pyp45xk4oLPIRD1YMuJWsY92HGiXuogUQ/xNT83lqiHaIj6XANEvRRI1EOARX+uI0SNjPk8y7upQb5poIl6EFBDpPGeb3k+ZL2cT+hugXFTiFrVIbqTRdbOUMuJWmo4lKDh+UANL3CEqJH+daHlniNzciHBcy4ikd9FRKJWWqD3ELKehpF0HWaAqF8FEvXFMB0yjL7r+2Jw/tRxSTJxwZcQiPpSy4laxn2p40T9Koyoc4y96/syX/PLY4n6Mg1RX26AqF8FEvVlwKK/PJmTXLTrI2O+wvJuaphvGmiiHgbUEGm8V1qeD1kvVxK6W2DcFKJWdYjuZJG1M9xyopYaDidoeCVQw6scIWqkf11tuefInFxN8JxrSOR3DZGolRboPYSspxEkXUcYIOolQKK+FkfU+SaJ+lpw/tRxXTJxwdcRiPp6y4laxn2940S9BEfUEc1yKUR9g6/5jbFEfYOGqG80QNRLgER9A7Dob0zmJBft+siYb7K8mxrhmwaaqEcANUQa782W50PWy82E7hYYN4WoVR2iO1lk7Yy0nKilhiMJGt4M1PAWR4ga6V+3Wu45Mie3EjznNhL53UYkaqUFeg8h6+l2kq63GyDqxUCivgOmQ9joM+o7wPlTx53JxAXfSSDquywnahn3XY4T9WIYUecbe0Y9ytf87liiHqUh6rsNEPViIFGPAhb93cmc5KJdHxnzPZZ3U7f7poEm6tuBGiKN917L8yHr5V5CdwuMm0LUqg7RnSyydkZbTtRSw9EEDe8FanifI0SN9K/7LfccmZP7CZ7zAIn8HiAStdICvYeQ9fQgSdcHDRD1IiBRPwTTIRIxSdQPgfOnjoeTiQt+mEDUj1hO1DLuRxwn6kUwos7L1yyXQtSP+po/FkvUj2qI+jEDRL0ISNSPAov+sWROctGuj4z5ccu7qQd900AT9YNADZHGO8byfMh6GUPoboFxU4ha1SG6k0XWzljLiVpqOJag4Righk84QtRI/xpnuefInIwjeM6TJPJ7kkjUSgv0HkLW03iSruMNEPVCIFFPgOlQYPQZ9QRw/tTxVDJxwU8RiHqi5UQt457oOFEvhBG1Z+wZ9SRf88mxRD1JQ9STDRD1QiBRTwIW/eRkTnLRro+M+WnLu6nxvmmgiXo8UEOk8T5jeT5kvTxD6G6BcVOIWtUhupNF1s4Uy4laajiFoOEzQA2fdYSokf411XLPkTmZSvCc50jk9xyRqJUW6D2ErKdpJF2nGSDqBUCifh6mQ7pRon4enD91vJBMXPALBKKebjlRy7inO07UC2BEnWuMqGf4mr8YS9QzNET9ogGiXgAk6hnAon8xmZNctOsjY55peTc1zTcNNFFPA2qINN5ZludD1sssQncLjJtC1KoO0Z0ssnZmW07UUsPZBA1nATV8yRGiRvrXHMs9R+ZkDsFzXiaR38tEolZaoPcQsp7mknSda4Co5wOJeh5Mh2i2SaKeB86fOl5JJi74FQJRz7ecqGXc8x0n6vkwos6KapZLIeoFvuYLY4l6gYaoFxog6vlAol4ALPqFyZzkwj9HBca8yPJuaq5vGmiingvUEGm8iy3Ph6yXxYTuFhg3hahVHaI7WWTtLLGcqKWGSwgaLgZq+KojRI30r6WWe47MyVKC57xGIr/XiESttEDvIWQ9LSPpuswAUb8CJOrluCc0Rol6OTh/6ng9mbjg1wlEvcJyopZxr3CcqF+BEXW6MaJe6Wv+RixRr9QQ9RsGiPoVIFGvBBb9G8mc5KJdHxnzKsu7qWW+aaCJehlQQ6TxrrY8H7JeVhO6W2DcFKJWdYjuZJG1s8ZyopYariFouBqo4VpHiBrpX+ss9xyZk3UEz1lPIr/1RKJWWqD3ELKe3iTp+qYBop4HJOq3cM+oQyaJ+i1w/tTxdjJxwW8TiHqD5UQt497gOFHPgxF1dkizXApRv+NrvjGWqN/REPVGA0Q9D0jU7wCLfmMyJ7lo10fG/K7l3dSbvmmgifpNoIZI491keT5kvWwidLfAuClEreoQ3ckia2ez5UQtNdxM0HATUMP3HCFqpH+9b7nnyJy8T/CcD0jk9wGRqJUW6D2ErKctJF23GCDquUCi3orrJz2TRL0VnD91fJhMXPCHBKLeZjlRy7i3OU7Uc2FEnVmoWS6FqLf7mu+IJertGqLeYYCo5wKJejuw6Hckc5KLdn1kzB9Z3k1t8U0DTdRbgBoijXen5fmQ9bKT0N0C46YQtapDdCeLrJ1dlhO11HAXQcOdQA0/doSokf71ieWeI3PyCcFzPiWR36dEolZaoPcQsp4+I+n6mQGifhlI1J/jvvNo9NezPgfnTx1fJBMX/AWBqHdbTtQy7t2OE/XLuDeTGfv1rC99zb+KJeovNUT9lQGifhlI1F8Ci/6rZE5y0a6PjPlry7upz3zTQBP1Z0ANkcb7jeX5kPXyDaG7BcZNIWpVh+hOFlk731pO1FLDbwkafgPU8DtHiBrpX99b7jkyJ98TPOcHEvn9QCRqpQV6DyHraQ9J1z0GiHoOkKh/hOlQYPQZ9Y/g/Knjp2Tign8iEPXPlhO1jPtnx4l6Du7Xs4w9o/7F1/zXWKL+RUPUvxog6jlAov4FWPS/JnOSi3Z9ZMy/Wd5N7fFNA03Ue4AaIo33d8vzIevld0J3C4ybQtSqDtGdLPSmXcFuopYayjWiNfwdqOFhYA3Vgb4HIP2reAW7PUfmRK4RvacPB+Y62EMdXoFH1EoL9B5C1lMJkq4lKvCJ+iUgUR8B06EwwyRRHwHOnzqOrEBc8JEV8Nc9qoLdRC3jPqrCXoFB1zVK1C/BiDqUq1kuhahL+pofXaHYvvRcssLfiVr+S2yifglI1CWBRX90BU5y0a6PjPkYy7upEr5poIm6BFBDpPEea3k+ZL0cS+hujwWTDHp9qg7RnSyydo6znKilhscRNDwWqOHxjhA10r9OsNxzZE5OIHjOiSTyO5FI1EoL9B5C1lMpkq6lDBD1bCBRl4bpkG30W9+lwflTR5kKxAWXIRB1guVELeNOcJyoZ+P+jtrYt77L+pqXiyXqshqiLmeAqGcDibossOjLVeAkF+36yJgTLe+mSvmmgSbqUkANkcZb3vJ8yHopT+hugXFTiFrVIbqTRdZOkuVELTVMImhYHqhhsiNEjfSvCpZ7jsxJBYLnpJDIL4VI1EoL9B5C1lNFkq4VDRD1LCBRV8I9ozb6ru9K4Pypo3IF4oIrE4g61XKilnGnOk7Us3Df+jb2ru80X/OTYok6TUPUJxkg6llAok4DFv1JFTjJRbs+MuaTLe+mKvqmgSbqikANkcZ7iuX5kPVyCqG7BcZNIWpVh+hOFlk7p1pO1FLDUwkangLU8DRHiBrpX6db7jkyJ6cTPKcKifyqEIlaaYHeQ8h6qkrStaqvq0m6nJmEjUUdZ1QgLvgMAl2eaTldyrjPJNClbq2IDXImYRMDNx4937ZqiIy7miPNRFVgzNUtbyZkrNUIzUQNy5tvmZcaZM+JV8OapMah5n/QOLxIahxqVSAuuBahcQhZ3jjIuEOONA6ykEOETQzcePR826ohMm7PkcahJjDmsOWNg4zVIzQOEcsbB5mXCNlz4tUwndQ4pBt4hj8D+Aw/A7iHTDZLGRU4zVJmBeKCMwnNUtTyZknGHTXULIXiO7x0f63oR4fpwBwh851l+Q1UGl0W4QaabfkNVMacTYi7NummV1vzFRC0JuycIfZ4lND0IPd7HcvrXmpYh6BhFlDDuo6AFvKeU8/y+4TMST2CX9Yn+WV94uNepQV6DyHrqQFpD6G1bADurVnrHFgcp2fxYvse6LUWANeaptYm8tRIjMZiNBGjqRjNxGguRgsxWorRSozWYrQRo60Y7cRoL0YHMTqK0UmMzmJ0EaOrGN3E6C5GDzF6itFLjN5i9BGjrxj9xDhLjP4V/hQpuL8b+v1Q8FwjzbnGmnNNNOeaas4105xrrjnXQnOupeZcK8251ppzbTTn2mrOtdOca68510FzrqPmXCfNuc6ac10057pqznXTnOuuOddDc66n5lwvzbnemnN9NOf6as7105w7S3Ouv6b3LuH/s6H/z1B8xz57Nl4fbAjwVPVV7kZAf55dhXNPis1FPDHLXDSG6PdnXpvEf62wr5/XFJiLl2zORfpf6/SaxRdzKBCz1zyea4X30c9rAczFHDtzEYpZp9fyEGPOLPxbzF6rQ7tWlkY/rzUwFy/bloss7Tq9Ngcfc/QfYvbaHuy1ov+on9cOmIu59uQi/C/r9NofTMzRf43Z63Dg18rbj35eR2Au5tmQi+h+1+l1OrCYQwcQs9f5QK4VOiD9vC7AXLzy3+Yi4wDX6XXdX8zpBxyz1+1fr5VeeBD6ed2BuZj/X+UielDr9Hr8c8xZBxmz1/MfrpVdeND6eb2AuVhgPhehQ1in11sXc+iQYvb6/P1a3iHq5/UF5mKhyVzkH/I6vX77xhyJI2bvrMC1woVx6ef1B+ZikaFchOI7PODnAx6Qb70gn8Wbi8WO5ALIQR6wj/fmAXOxxJFcAPs9D9iveAuAuXjVkVwA72se0Je9xcBcLCXlAv3KEuD+9YD15yH1k/XbQow0/3r9/Wdi/fxnZH38Z2a9/GdoPfxnat38Z2xd/GdunfxncB38Z3Lt/Gd0bfxndq38Z3gt/Gd6zfxnfE38Z35/PAeoUOxvB/o7Fci+Z0AFVB4iRl+ehVv3vl+8zalAXLC8OPq6ucBiYMWdG9gUoOsafXlWf1ix5Rt7eVaer3m+/8WAv57U5vlFGDyXX4H/8iyEa6knrnnAos8HJ5exwfMq4L9VlleB08Gg73ZnAXNdAIs5M93k3a6AdLcrrEBccCHhbjfQ8rudjHug43e7s2DFlp2nWS7lbjfI1/zs2LvdIM3d7mwDd7uzgHe7QcCiP5uUXLTrI2M+B+ee2u+Nx7u+XN80ioNrEIkGg8HdAtq0ZI4HE7ok2+NWtYOOe4gj3SGyxs8l+0QovsOTOTmX4BODgRqe58B+OY+wX84Hd+iqVzk/sFaWFuh6OhdYT0NJug6twH9BQj+gDhfAdEgvMEmuF4Dzp44LKxAXfCGBXC+ynFxl3Bc5Tq79YMWWG9Ysl0Kuw3zNL44l12Eacr3YALkiXEuR6zBg0V9MSi7a9ZExX2J5RzrUNw30m0qGAjVEGu+lludD1sulhO4WGDflrReqDtGdLLJ2LrOcjKSGlxE0vBSo4eWOfCqB9K8rLPccmZMrCJ5zJYn8riQStdICvYeQ9TScpOtwA0SN/Pb9VTAdomGTRH0VOH/quLoCccFXE4j6GsuJWsZ9jeNE3RdWbFkFmuVSiHqEr/m1sUQ9QkPU1xogaoRrKaIeASz6a0nJRbs+MubrLO+mhvumgSbq4UANkcZ7veX5kPVyPaG7BcZNIWpVh+hOFlk7N1hO1FLDGwgaXg/U8EZHiBrpXzdZ7jkyJzcRPOdmEvndTCRqpQV6DyHraSRJ15EGiLoPUIdbYDoUGH2J/y3g/Knj1grEBd9KIOrbLCdqGfdtjhN1H1ixeYWa5VKI+nZf8ztiifp2DVHfYYCoEa6liPp2YNHfQUou2vWRMd9peTc10jcNNFGPBGqINN67LM+HrJe7CN0tMG4KUas6RHeyyNoZZTlRSw1HETS8C6jh3Y4QNdK/7rHcc2RO7iF4zr0k8ruXSNRKC/QeQtbTaJKuow0QdW+gDvfBdIgYJer7wPlTx/0ViAu+n0DUD1hO1DLuBxwn6t6wYsszRtQP+po/FEvUD2qI+iEDRI1wLUXUDwKL/iFSctGuj4z5Ycu7qdG+aaCJejRQQ6TxPmJ5PmS9PELoboFxU4ha1SG6k0XWzqOWE7XU8FGCho8ANXzMEaJG+tfjlnuOzMnjBM8ZQyK/MUSiVlqg9xCynsaSdB1rgKiR779/AqZDjtH3XT4Bzp86xlUgLngcgaiftJyoZdxPOk7UvWDFlmnsfZfjfc0nxBL1eA1RTzBA1AjXUkQ9Hlj0E0jJRbs+MuanLO+mxvqmgSbqsUANkcY70fJ8yHqZSOhugXFTiFrVIbqTRdbOJMuJWmo4iaDhRKCGkx0haqR/PW2558icPE3wnGdI5PcMkaiVFug9hKynKSRdpxgg6p5AHZ6F6RDONknUz4Lzp46pFYgLnkog6ucsJ2oZ93OOE3VPWLHlRzXLpRD1NF/z52OJepqGqJ83QNQI11JEPQ1Y9M+Tkot2fWTML1jeTU3xTQNN1FOAGiKNd7rl+ZD1Mp3Q3QLjphC1qkN0J4usnRmWE7XUcAZBw+lADV90hKiR/jXTcs+ROZlJ8JxZJPKbRSRqpQV6DyHraTZJ19kGiLoHUIeXYDrkZpkk6pfA+VPHnArEBc8hEPXLlhO1jPtlx4m6B6zY0rM0y6UQ9Vxf83mxRD1XQ9TzDBA1wrUUUc8FFv08UnLRro+M+RXLu6nZvmmgiXo2UEOk8c63PB+yXuYTultg3BSiVnWI7mSRtbPAcqKWGi4gaDgfqOFCR4ga6V+LLPccmZNFBM9ZTCK/xUSiVlqg9xCynpaQdF1igKi7A3V4FaZDhtFvfb8Kzp86llYgLngpgahfs5yoZdyvOU7U3XEfOxn71vcyX/PlsUS9TEPUyw0QNcK1FFEvAxb9clJy0a6PjPl1y7upJb5poIl6CVBDpPGusDwfsl5WELpbYNwUolZ1iO5kkbWz0nKilhquJGi4AqjhG44QNdK/VlnuOTInqwies5pEfquJRK20QO8hZD2tIem6xgBRdwPqsBb3hCbDJFGvBedPHesqEBe8jkDU6y0nahn3eseJuhsOunI1y6UQ9Zu+5m/FEvWbGqJ+ywBRI1xLEfWbwKJ/i5RctOsjY37b8m5qjW8aaKJeA9QQabwbLM+HrJcNhO4WGDeFqFUdojtZZO28YzlRSw3fIWi4AajhRkeIGulf71ruOTIn7xI8ZxOJ/DYRiVppgd5DyHraTNJ1swGi7grU4T1cP5lpkqjfA+dPHe9XIC74fQJRf2A5Ucu4P3CcqLviPnbK0SyXQtRbfM23xhL1Fg1RbzVA1AjXUkS9BVj0W0nJRbs+MuYPLe+mNvumgSbqzUANkca7zfJ8yHrZRuhugXFTiFrVIbqTRdbOdsuJWmq4naDhNqCGOxwhaqR/fWS558icfETwnJ0k8ttJJGqlBXoPIetpF0nXXQaIugtQh49hOmQZ/fWsj8H5U8cnFYgL/oRA1J9aTtQy7k8dJ+ousGKLGvv1rM98zT+PJerPNET9uQGiRriWIurPgEX/OSm5aNdHxvyF5d3ULt800ES9C6gh0nh3W54PWS+7Cd0tMG4KUas6RHeyyNr50nKilhp+SdBwN1DDrxwhaqR/fW2558icfE3wnG9I5PcNkaiVFug9hKynb0m6fmuAqDsDdfjOUaL+Dpw/dXxfgbjg7wlE/YPlRC3j/sFxou7sIFHv8TX/MZao92iI+kcDRI1wLUXUe4BF/6MjRI2M+SfLu6lvfdNAE/W3QA2Rxvuz5fmQ9fIzobsFxk0halWH6E4WWTu/WE7UUsNfCBr+DNTwV0eIGulfv1nuOTInvxE853cS+f1OJGqlBXoPIeupWApHV3ldNlF3AupwGEyHDKPv+j4MnL+/cpVCXHDxFPx1D0+xm6hl3Ien7BUYdF2jRN0JZsI5xt71XcLX/IiUYvvSc4mUvxO1/JfYRN0JSNQlgEV/RAonuWjXR8Z8ZIrd3VQx3zTQRF0MqCHSeI+yPB+yXo5KwXe3wLgpRK3qEN3JImunJFnDUHzHH3u5JEHDo4AaHg3WUB3oewDSv46x3HNkTo4heM6xJPI7NoVH1EoL9B5C1tNxJF2PM0DUHYFEfTyOqPNNEvXx4Pyp44QU4oJPIBD1iZYTtYz7RMeJuiOOqCOa5VKIupSveelYoi6lIerSBoi6I5CoSwGLvnQKJ7lo10fGXMbybuo43zTQRH0cUEOk8SZYng9ZLwmE7hYYN4WoVR2iO1lk7ZS1nKilhmUJGiYANSznCFEj/SvRcs+ROUkkeE55EvmVJxK10gK9h5D1lETSNckAUXcAEnUyTIew0WfUyeD8qaNCCnHBFQhEnWI5Ucu4Uxwn6g4wos439oy6oq95pViirqgh6koGiLoDkKgrAou+UgonuWjXR8Zc2fJuKsk3DTRRJwE1RBpvquX5kPWSSuhugXFTiFrVIbqTRdZOmuVELTVMI2iYCtTwJEeIGulfJ1vuOTInJxM85xQS+Z1CJGqlBXoPIevpVJKupxog6vZAoj4NpkMkYpKoTwPnTx2npxAXfDqBqKtYTtQy7iqOE3V7GFHn5WuWSyHqqr7mZ8QSdVUNUZ9hgKjbA4m6KrDoz0jhJBft+siYz7S8mzrVNw00UZ8K1BBpvNUsz4esl2qE7hYYN4WoVR2iO1lk7VS3nKilhtUJGlYDaljDEaJG+ldNyz1H5qQmwXNqkcivFpGolRboPYSspxBJ15ABom4HJGoPpkOB0WfUHjh/6ginEBccJhB1xHKilnFHHCfqdjCi9ow9o073Nc+IJep0DVFnGCDqdkCiTgcWfUYKJ7lo10fGnGl5NxXyTQNN1CGghkjjjVqeD1kvUUJ3C4ybQtSqDtGdLLJ2siwnaqlhFkHDKFDDbEeIGulftS33HJmT2gTPqUMivzpEolZaoPcQsp7qknSta4Co2wKJuh5Mh3SjRF0PnD911E8hLrg+gagbWE7UMu4GjhN1WxhR5xoj6oa+5o1iibqhhqgbGSDqtkCibggs+kYpnOSiXR8Zc2PLu6m6vmmgibouUEOk8TaxPB+yXpoQultg3BSiVnWI7mSRtdPUcqKWGjYlaNgEqGEzR4ga6V/NLfccmZPmBM9pQSK/FkSiVlqg9xCynlqSdG1pgKjbAIm6FUyHaLZJom4Fzp86WqcQF9yaQNRtLCdqGXcbx4m6De4n5qKa5VKIuq2vebtYom6rIep2Boi6DZCo2wKLvl0KJ7nwz1GBMbe3vJtq6ZsGmqhbAjVEGm8Hy/Mh66UDobsFxk0halWH6E4WWTsdLSdqqWFHgoYdgBp2coSokf7V2XLPkTnpTPCcLiTy60IkaqUFeg8h66krSdeuBoi6NZCou+Ge0Bgl6m7g/Kmjewpxwd0JRN3DcqKWcfdwnKhbw4g63RhR9/Q17xVL1D01RN3LAFG3BhJ1T2DR90rhJBft+siYe1veTXX1TQNN1F2BGiKNt4/l+ZD10ofQ3QLjphC1qkN0J4usnb6WE7XUsC9Bwz5ADfs5QtRI/zrLcs+ROTmL4Dn9SeTXn0jUSgv0HkLW0wCSrgMMEHUrIFHn4J5Rh0wSdQ44f+rITSEuOJdA1HmWE7WMO89xom4FI+rskGa5FKLO9zUviCXqfA1RFxgg6lZAos4HFn1BCie5aNdHxlxoeTc1wDcNNFEPAGqINN6BludD1stAQncLjJtC1KoO0Z0ssnYGWU7UUsNBBA0HAjU82xGiRvrXOZZ7jszJOQTPGUwiv8FEolZaoPcQsp6GkHQdYoCoWwKJ+lxcP+mZJOpzwflTx3kpxAWfRyDq8y0nahn3+Y4TdUsYUWcWapZLIeqhvuYXxBL1UA1RX2CAqFsCiXoosOgvSOEkF+36yJgvtLybGuKbBpqohwA1RBrvRZbnQ9bLRYTuFhg3hahVHaI7WWTtDLOcqKWGwwgaXgTU8GJHiBrpX5dY7jkyJ5cQPOdSEvldSiRqpQV6DyHr6TKSrpcZIOoWQKK+HPedR6O/nnU5OH/quCKFuOArCER9peVELeO+0nGiboF7M5mxX88a7mt+VSxRD9cQ9VUGiLoFkKiHA4v+qhROctGuj4z5asu7qct800AT9WVADZHGe43l+ZD1cg2huwXGTSFqVYfoThZZOyMsJ2qp4QiChtcANbzWEaJG+td1lnuOzMl1BM+5nkR+1xOJWmmB3kPIerqBpOsNBoi6OZCob4TpUGD0GfWN4Pyp46YU4oJvIhD1zZYTtYz7ZseJujnu17OMPaMe6Wt+SyxRj9QQ9S0GiLo5kKhHAov+lhROctGuj4z5Vsu7qRt800AT9Q1ADZHGe5vl+ZD1chuhuwXGTSFqVYfoThZZO7dbTtRSw9sJGt4G1PAOR4ga6V93Wu45Mid3EjznLhL53UUkaqUFeg8h62kUSddRBoi6GZCo74bpUJhhkqjvBudPHfekEBd8D4Go77WcqGXc9zpO1M1gRB3K1SyXQtSjfc3viyXq0Rqivs8AUTcDEvVoYNHfl8JJLtr1kTHfb3k3Nco3DTRRjwJqiDTeByzPh6yXBwjdLTBuClGrOkR3ssjaedByopYaPkjQ8AGghg85QtRI/3rYcs+ROXmY4DmPkMjvESJRKy3QewhZT4+SdH3UAFE3BRL1YzAdso1+6/sxcP7U8XgKccGPE4h6jOVELeMe4zhRN8X9HbWxb32P9TV/Ipaox2qI+gkDRN0USNRjgUX/RAonuWjXR8Y8zvJu6lHfNNBE/ShQQ6TxPml5PmS9PEnoboFxU4ha1SG6k0XWznjLiVpqOJ6g4ZNADSc4QtRI/3rKcs+ROXmK4DkTSeQ3kUjUSgv0HkLW0ySSrpMMEHUTIFFPxj2jNvqu78ng/Knj6RTigp8mEPUzlhO1jPsZx4m6Ce5b38be9T3F1/zZWKKeoiHqZw0QdRMgUU8BFv2zKZzkol0fGfNUy7upSb5poIl6ElBDpPE+Z3k+ZL08R+hugXFTiFrVIbqTRdbONMuJWmo4jaDhc0ANn3eEqJH+9YLlniNz8gLBc6aTyG86kaiVFug9hKynGSRdZ/i6mqTLxhWwsajjxRTigl8k0OVMy+lSxj2TQJe6tSI2yEzCJgZuPHq+bdUQGfcsR5qJGcCYZ1veTMhYZxGaiZcsb75lXl4ie068Gs4hNQ5z/oPGoRGpcXg5hbjglwmNw1zLGwcZ91xHGgdZyHMJmxi48ej5tlVDZNzzHGkc5gBjfsXyxkHGOo/QOMy3vHGQeZlP9px4NVxAahwWGHiG3xD4DH8hcA+ZbJYWpnCapUUpxAUvIjRLiy1vlmTciw01S6H4Dm+Bv1b0o8MFwBwh873E8huoNLolhBvoq5bfQGXMrxLiXkq66S3VfAUErQk7Z4g9vpjQ9CD3+2uW173U8DWChkuAGi5zBLSQ95zllt8nZE6WE/zydZJfvk583Ku0QO8hZD2tIO0htJYrwL21OtB7vbA47lorAzF7WZFwOBqR/15WfshLz88LZ4XD+bnpobxQTl64IDvdyy5MD6dH8vLzcsU1c7zCUGFOXnZh1p/XMgmEK0lA+EYKccFvEIBwleVAKONeRQBCWWxyFC/GL7bghgvFeWiWC9uAwUJeHfxkCn2nXAXsEIJ3ytX/cqfcz5rz9iPOHxtl9SHcKfcn+mrgBlxD6kDkdUccYi14Qrs8L1QYyg6HckLRvMxobnZ+ODcrpzBSmBHJjxyqrvsrdqSua0m6rj10Xf9f1Os6kq7r/sfrdT1J1/W+rurGaaJTQ948gzf7N/2m4i15z2Dc4FYTurXVln+sdaibI3QQcce7xrct/1hLFubbhI8nNpBMYcO/mG0ovsN7i6TFOyQt3iFqIY2QocXbVez2FNp++G/jztvP+ni1D45bHei/4gXWpQfMtYfUTzZSRxbTfwpR7CD13F89Ba/JuGehNAk2lRv/7VOIUHyH9zbpJrDx0D+v9/b335Fr3kgwhc0kUyhxkDk7mOYt3pjfTbHTYJC5CNblu4Hm5FDzsz/NkfnZFHy2EImIvZEf9QrzCyMZ0exwrpcZycwsTC+MZmal5xdmpOfkRwu89JxIOLsgGir0sgoKohmRvGhmYXZ+XmZh0LS9/EgkPT87N8/LCGfm5Iay8iM5ocL0aEQAf34kmp8fycrMzIlE8jOzCrOyBaQL9M8KZUSj2aHMcCQ7zMrPpgBdo24K+/s0J3hNV24Km128KWwm3xQ2E24K71tyU/jHIo7+8ZKWQqTpvGfpTeF9kum8B7gp7O+jTWR+3rf0psDKz/v/jz5y/cD/yHWL7iPXUHzHPz7vQD6rjPdawI9vKd+MUhqiv9HM0jDea221PB9yw2wl3Ng/JDU5HxI//txC0mIbSYtt5I+CGVpssfyjYNZ+2Gr5R8Gs2v/QkY+CgXXpAXPtfVj0UXDs8cc9C6VJsNndzqT+raSbwHYi9cs1byeYwkeOfBS8FdgI7kix02A+IlHlDgMfBSPz8xGQ+j8EUj8rPx9p8nOw36nZ30e/yPzsJPnnToAO+/t0CqnDLpIOuxyrh49JOnzsWD18QtLhkwN4VGRzY6dZLqyOg03jpy42jZ+Sm8ZPCU3jLkNNY5zfioea3GfITyKBTeMuUlPy2QE0jfF+ux6Zn89TcI0esmlk5edzwM1xP4fXH/gyoS9g/plF+SL2Kv9TN/QTJWSN77b8CYbM8W7C/eZL0r1XXrek/3+3KPb3A/XfVNdD6z35GPvX+BW6kXSlaD+x/PGKjPkrQtyfWvKJ4n6OfQoz3pi/BhozsG48ZC7IJvnXY4r/RZP8+n/VJL+x/M/zZMzfEOL+ltTRfJuy921rjD/31HXIofgOD9khf2d5PUmi+o5QT987sI++J8T9A2kf/fAv+ygU30HzlC+q/G/WwG5D32uJd517gE0iMNfebtInVHuK6Jq+xh/ZjSOCMn8kbPqvHaHMHx3Y9HE38Y4Y8E/AXADrz/umiNKdMNufkGbr6l1xhgOJ+rkoUSFvpgOJ+qUoUSFvtgOJ+rUoUSFvjgOJ+q0oUSFvrgOJ+r0oUSHvFQcSVaxiUaK8BQ4k6rCiRIW8RQ4kqnhRokLeEgcSdXhRokLeUgcSVaIoUSFvmQOJOqIoUSHvdQcSdWRRokLeSgcSdVRRokLeKgcSVbIoUSGvb3H713h0UaJC3loHdtQxRYkKeesdSNSxRYkKeW85kKjjihIV8jY4kKjjixIV8jY6kKgTihIV8jY5kKgTixIV8t5zIFGlihIV8j5wIFGlixIV8rY6kKgyRYkKedscSFRCUaJC3g4HElW2KFEhb6cDiSpXlKiQ97EDiUosSlTI+9SBRJUvSlTI+9yBRCUVJSrk7XYgUckV8WvULjTevy+rAFtoJCrXllBs798jyv9bXv83f/5gub3zBwLztOJ/ztX/X4r4/6koRiUxKlfce14d6Jf3f1QSd62UirjcpJKKCK3fTqB+FYH6pQH109V2aqC20wLzSoF55Yr71vZJ4v8+WYxTxDjVr+3ixfY90GZ0ElCHNP86p4lrni5GFTGqinGGGGeKUU2M6mLUEKOmGLXECInhiREWIyJGuhgZYmSKERUjS4xsMWqLUUeMumLUE6O+GA3k2sVoJEZjMZqI0bTinyIF/3BfrqdksX3Pna45V0Vzrqrm3Bmac2dqzlXTnKuuOVdDc66m5lwtzbmQ5pynORfWnItozqVrzmVozmVqzkU157I057I152prztXRnKurOVdPc66+5lwDzbmGmnONNOcaa8410ZxrWnHvi1bUgf4b/JOAPnga4FoFf/yOZcg7Hbiu7+14JfO/xixzUQWi3595rRr/tcLqR3LOAObiB5tzkb73h4HOjC/mUPBHhqrFc63wvj9YVB2Yiz125iIU+yNNNQ4x5szCv//gU81Du1aW7sejagFz8aNtucjS/2BW6OBjjv7Tj295B3ut6D//kFcYmIuf7MlF+N9+vCxyMDFH//2H0NIP/Fr7/ZG+DGAufrYhF9H9rtPLPLCYQwcQsxc9kGuFDkg/LwuYi1/+21xkHOA6vez9xZx+wDF7tf/1WumFB6GfVweYi1//q1xED2qdXt1/jjnrIGP26v3DtbILD1o/rz4wF7+Zz0XoENbpNdDFHDqkmL2Gf7+Wd4j6eY2AufjdZC7yD3mdXuN9Y47EEbPXJHCtcGFc+nlNgbkoVtVMLkLxHR7w8wEPyLfeHuB7CA9zJBdADvKAfbz3MzAXxR3JBbDf84D9ivcbMBeHO5IL4H3NA/qyF/SVeHNRgpQL9HNI4P71gPXnsfQrHqNfvHlG9hjNcN8r+OOH548ttve5aPBAPyvFrXvf3/lsXpG4YHlx9HVbIBtOUtwtKu4VGHTdP4rtuGJmfrC2KazY8kOa5WKu7YnGKHDNlr7mrfyH8H89FW3pF2HwXCvNk1K06yNcSz3dbAks+lbg5DI2eMuK+G+Utazoxt2uCTDXrWExZ6abvNu1Jt3t2lQkLrgN4W7X1vK7nYy7reN3uyawYsvO0yyXcrdr52vePvZu105zt2tv4G7XBHi3awcs+vak5KJdHxlzB5x7an/aON71tfBNozi4BpFo0BHcLaBNS+a4I6FLsj1uVTvouDs50h0ia7wz2SdC8R2ezElngk90BGrYxYH90oWwX7qCO3TVq3QNrJWlBbqeOgPrqRtJ124V/05uaG9qDNShO0yH9AKT5NodnD919KhIXHAPArn2tJxcZdw9HSfXxrBiyw1rlksh116+5r1jybWXhlx7GyBXhGspcu0FLPrepOSiXR8Zcx/LO9Juvmmgf02zG1BDpPH2tTwfsl76ErpbYNzamxeiXnoSOllk7fSznIykhv0IGvYFaniWI59KIP2rv+WeI3PSn+A5A0jkN4BI1EoL9B5C1lMOSdccA0SN/KZ7LkyHaNgkUeeC86eOvIrEBecRiDrfcqKWcec7TtSNYMWWVaBZLoWoC3zNC2OJukBD1IUGiBrhWoqoC4BFX0hKLtr1kTEPtLybyvFNA03UOUANkcY7yPJ8yHoZROhugXFTiFrVIbqTRdbO2ZYTtdTwbIKGg4AanuMIUSP9a7DlniNzMpjgOUNI5DeESNRKC/QeQtbTuSRdzzVA1A2BOpwH06HAM0nU54Hzp47zKxIXfD6BqIdaTtQy7qGOE3VDWLF5hZrlUoj6Al/zC2OJ+gINUV9ogKgRrqWI+gJg0V9ISi7a9ZExX2R5N3Wubxpooj4XqCHSeIdZng9ZL8MI3S0wbgpRqzpEd7LI2rnYcqKWGl5M0HAYUMNLHCFqpH9darnnyJxcSvCcy0jkdxmRqJUW6D2ErKfLSbpeboCoGwB1uAKmQ8QoUV8Bzp86rqxIXPCVBKIebjlRy7iHO07UDWDFlmeMqK/yNb86lqiv0hD11QaIGuFaiqivAhb91aTkol0fGfM1lndTl/umgSbqy4EaIo13hOX5kPUygtDdAuOmELWqQ3Qni6yday0naqnhtQQNRwA1vM4Rokb61/WWe47MyfUEz7mBRH43EIlaaYHeQ8h6upGk640GiBr5rvmbYDrkGH3f5U3g/Knj5orEBd9MIOqRlhO1jHuk40RdH1Zsmcbed3mLr/mtsUR9i4aobzVA1AjXUkR9C7DobyUlF+36yJhvs7ybutE3DTRR3wjUEGm8t1ueD1kvtxO6W2DcFKJWdYjuZJG1c4flRC01vIOg4e1ADe90hKiR/nWX5Z4jc3IXwXNGkchvFJGolRboPYSsp7tJut5tgKjrAXW4B6ZDONskUd8Dzp867q1IXPC9BKIebTlRy7hHO07U9WDFlh/VLJdC1Pf5mt8fS9T3aYj6fgNEjXAtRdT3AYv+flJy0a6PjPkBy7upu33TQBP13UANkcb7oOX5kPXyIKG7BcZNIWpVh+hOFlk7D1lO1FLDhwgaPgjU8GFHiBrpX49Y7jkyJ48QPOdREvk9SiRqpQV6DyHr6TGSro8ZIOq6QB0eh+mQm2WSqB8H508dYyoSFzyGQNRjLSdqGfdYx4m6LqzY0rM0y6UQ9RO+5uNiifoJDVGPM0DUCNdSRP0EsOjHkZKLdn1kzE9a3k095psGmqgfA2qINN7xludD1st4QncLjJtC1KoO0Z0ssnYmWE7UUsMJBA3HAzV8yhGiRvrXRMs9R+ZkIsFzJpHIbxKRqJUW6D2ErKfJJF0nGyDqOkAdnobpkGH0W99Pg/OnjmcqEhf8DIGop1hO1DLuKY4TdR3cx07GvvX9rK/51FiiflZD1FMNEDXCtRRRPwss+qmk5KJdHxnzc5Z3U5N900AT9WSghkjjnWZ5PmS9TCN0t8C4KUSt6hDdySJr53nLiVpq+DxBw2lADV9whKiR/jXdcs+ROZlO8JwZJPKbQSRqpQV6DyHr6UWSri8aIOraQB1m4p7QZJgk6png/KljVkXigmcRiHq25UQt457tOFHXxkFXrma5FKJ+ydd8TixRv6Qh6jkGiBrhWoqoXwIW/RxSctGuj4z5Zcu7qRd900AT9YtADZHGO9fyfMh6mUvoboFxU4ha1SG6k0XWzjzLiVpqOI+g4Vyghq84QtRI/5pvuefInMwneM4CEvktIBK10gK9h5D1tJCk60IDRJ0N1GERrp/MNEnUi8D5U8fiisQFLyYQ9RLLiVrGvcRxos7GfeyUo1kuhahf9TVfGkvUr2qIeqkBoka4liLqV4FFv5SUXLTrI2N+zfJuaqFvGmiiXgjUEGm8yyzPh6yXZYTuFhg3hahVHaI7WWTtLLecqKWGywkaLgNq+LojRI30rxWWe47MyQqC56wkkd9KIlErLdB7CFlPb5B0fcMAUWcBdVgF0yHL6K9nrQLnTx2rKxIXvJpA1GssJ2oZ9xrHiToLVmxRY7+etdbXfF0sUa/VEPU6A0SNcC1F1GuBRb+OlFy06yNjXm95N/WGbxpoon4DqCHSeN+0PB+yXt4kdLfAuClEreoQ3ckia+cty4laavgWQcM3gRq+7QhRI/1rg+WeI3OygeA575DI7x0iUSst0HsIWU8bSbpuNEDUUaAO7zpK1O+C86eOTRWJC95EIOrNlhO1jHuz40QddZCo3/M1fz+WqN/TEPX7Boga4VqKqN8DFv37jhA1MuYPLO+mNvqmgSbqjUANkca7xfJ8yHrZQuhugXFTiFrVIbqTRdbOVsuJWmq4laDhFqCGHzpC1Ej/2ma558icbCN4znYS+W0nErXSAr2HkPW0g6TrDgNEnQnU4SOYDhlG3/X9ETh/6thZkbjgnQSi3mU5Ucu4dzlO1JmwYssx9q7vj33NP4kl6o81RP2JAaJGuJYi6o+BRf8JKblo10fG/Knl3dQO3zTQRL0DqCHSeD+zPB+yXj4jdLfAuClEreoQ3ckia+dzy4laavg5QcPPgBp+4QhRI/1rt+WeI3Oym+A5X5LI70siUSst0HsIWU9fkXT9ygBRZwB1+BpH1PkmifprcP7U8U1F4oK/IRD1t5YTtYz7W8eJOgMHXRHNcilE/Z2v+fexRP2dhqi/N0DUCNdSRP0dsOi/JyUX7frImH+wvJv6yjcNNFF/BdQQabx7LM+HrJc9hO4WGDeFqFUdojtZZO38aDlRSw1/JGi4B6jhT44QNdK/frbcc2ROfiZ4zi8k8vuFSNRKC/QeQtbTryRdfzVA1OlAHX6D6RA2+oz6N3D+1PF7ReKCfycQdbFKdhO1jFuusRj2ukaJOh1WbPnGnlEf5mtevFKxfelZ/g+xRC3/JTZRI1xLEfVhwKIvXomTXLTrI2M+vBLQgIrhN9yvvmmgifpX5MePwHyUsDwfsl5KVMJ3t8C4KUSt6hDdySJr5wiyhqH4jj/28hEEDUsANTwSrKE60PcApH8dZbnnyJwcRfCcksBcB3uokpV4RK20QO8hZD0dTdL16Ep8oo4AdTgGpkMkYpKojwHnTx3HViIu+NhK+OseZzlRy7iPc5yoIzCizsvXLJdC1Mf7mp8QS9THa4j6BANEHQES9fHAoj+hEie5aNdHxnyi5d3U0b5poIn6aKCGSOMtZXk+ZL2UInS3pcAkg16fqkN0J4usndKWE7XUsDRBw1JADcs4QtRI/0qw3HNkThIInlOWRH5liUSttEDvIWQ9lSPpWs4AUYeBRJ0I06HA6DPqRHD+1FG+EnHB5QlEnWQ5Ucu4kxwn6jCMqD1jz6iTfc0rxBJ1soaoKxgg6jCQqJOBRV+hEie5aNdHxpxieTdVzjcNNFGXA2qINN6KludD1ktFQncLjJtC1KoO0Z0ssnYqWU7UUsNKBA0rAjWs7AhRI/0r1XLPkTlJJXhOGon80ohErbRA7yFkPZ1E0vUkA0TtAYn6ZJgO6UaJ+mRw/tRxSiXigk8hEPWplhO1jPtUx4nagxF1rjGiPs3X/PRYoj5NQ9SnGyBqD0jUpwGL/vRKnOSiXR8ZcxXLu6mTfNNAE/VJQA2RxlvV8nzIeqlK6G6BcVOIWtUhupNF1s4ZlhO11PAMgoZVgRqe6QhRI/2rmuWeI3NSjeA51UnkV51I1EoL9B5C1lMNkq41DBB1CEjUNWE6RLNNEnVNcP7UUasSccG1CEQdspyoZdwhx4k6BCPqrKhmuRSi9nzNw7FE7WmIOmyAqENAovaARR+uxEku/HNUYMwRy7upGr5poIm6BlBDpPGmW54PWS/phO4WGDeFqFUdojtZZO1kWE7UUsMMgobpQA0zHSFqpH9FLfccmZMowXOySOSXRSRqpQV6DyHrKZuka7YBoq4FJOrauCc0Rom6Njh/6qhTibjgOgSirms5Ucu46zpO1LVgRJ1ujKjr+ZrXjyXqehqirm+AqGsBiboesOjrV+IkF+36yJgbWN5NZfumgSbqbKCGSONtaHk+/qgXQncLjJtC1KoO0Z0ssnYaWU7UUsNGBA0bAjVs7AhRI/2rieWeI3PShOA5TUnk15RI1EoL9B5C1lMzkq7NDBB1TSBRN8c9ow6ZJOrm4Pypo0Ul4oJbEIi6peVELeNu6ThR14QRdXZIs1wKUbfyNW8dS9StNETd2gBR1wQSdStg0beuxEku2vWRMbexvJtq5psGmqibATVEGm9by/Mh66UtobsFxk0halWH6E4WWTvtLCdqqWE7goZtgRq2d4Sokf7VwXLPkTnpQPCcjiTy60gkaqUFeg8h66kTSddOBoi6BpCoO+P6Sc8kUXcG508dXSoRF9yFQNRdLSdqGXdXx4m6BoyoMws1y6UQdTdf8+6xRN1NQ9TdDRB1DSBRdwMWffdKnOSiXR8Zcw/Lu6lOvmmgiboTUEOk8fa0PB+yXnoSultg3BSiVnWI7mSRtdPLcqKWGvYiaNgTqGFvR4ga6V99LPccmZM+BM/pSyK/vkSiVlqg9xCynvqRdO1ngKirA4n6LNx3Ho3+etZZ4Pypo38l4oL7E4h6gOVELeMe4DhRV8e9mczYr2fl+JrnxhJ1joaocw0QdXUgUecAiz63Eie5aNdHxpxneTfVzzcNNFH3A2qINN58y/Mh6yWf0N0C46YQtapDdCeLrJ0Cy4laalhA0DAfqGGhI0SN9K+BlnuOzMlAgucMIpHfICJRKy3QewhZT2eTdD3bAFFXAxL1OTAdCow+oz4HnD91DK5EXPBgAlEPsZyoZdxDHCfqarhfzzL2jPpcX/PzYon6XA1Rn2eAqKsBifpcYNGfV4mTXLTrI2M+3/Ju6mzfNNBEfTZQQ6TxDrU8H7JehhK6W2DcFKJWdYjuZJG1c4HlRC01vICg4VCghhc6QtRI/7rIcs+RObmI4DnDSOQ3jEjUSgv0HkLW08UkXS82QNRnAon6EpgOhRkmifoScP7UcWkl4oIvJRD1ZZYTtYz7MseJ+kwYUYdyNculEPXlvuZXxBL15RqivsIAUZ8JJOrLgUV/RSVOctGuj4z5Ssu7qYt900AT9cVADZHGO9zyfMh6GU7oboFxU4ha1SG6k0XWzlWWE7XU8CqChsOBGl7tCFEj/esayz1H5uQagueMIJHfCCJRKy3QewhZT9eSdL3WAFGfASTq62A6ZBv91vd14Pyp4/pKxAVfTyDqGywnahn3DY4T9Rm4v6M29q3vG33Nb4ol6hs1RH2TAaI+A0jUNwKL/qZKnOSiXR8Z882Wd1PX+qaBJuprgRoijXek5fmQ9TKS0N0C46YQtapDdCeLrJ1bLCdqqeEtBA1HAjW81RGiRvrXbZZ7jszJbQTPuZ1EfrcTiVppgd5DyHq6g6TrHQaIuiqQqO/EPaM2+q7vO8H5U8ddlYgLvotA1KMsJ2oZ9yjHiboq7lvfxt71fbev+T2xRH23hqjvMUDUVYFEfTew6O+pxEku2vWRMd9reTd1h28aaKK+A6gh0nhHW54PWS+jCd0tMG4KUas6RHeyyNq5z3KilhreR9BwNFDD+x0haqR/PWC558icPEDwnAdJ5PcgkaiVFug9hKynh0i6PuTrapIuq1TExqKOhysRF/wwgS4fsZwuZdyPEOhSt1bEBnmEsImBG4+eb1s1RMb9qCPNxEPAmB+zvJmQsT5KaCYet7z5lnl5nOw58Wo4htQ4jPkPGofTSY3D2ErEBY8lNA5PWN44yLifcKRxkIX8BGETAzcePd+2aoiMe5wjjcMYYMxPWt44yFjHERqH8ZY3DjIv48meE6+GE0iNwwQDz/BPAz7Dfwq4h0w2S09V4jRLEysRFzyR0CxNsrxZknFPMtQsheI7vAn+WtGPDicAc4TM92TLb6DS6CYTbqBPW34DlTE/TYj7GdJN7xnNV0DQmrBzhtjjkwhND3K/T7G87qWGUwgaTgZq+KwjoIW850y1/D4hczKV4JfPkfzyOeLjXqUFeg8h62kaaQ+htZwG7q3Vgf565DcpuGt9n4KL+XkCpI0I5Prlcn/2HXI+JzB/KTCfHZjPCsxnBuYvBuYzAvPpgfkLgfnzgfm0wPy5wHxqYP5sYD4lMH8mMH86MJ8cmE8KzCcG5k8F5hMC8/GB+ZOB+bjA/InAfGxgPiYwfzwwfywwfzQwb1F+77x5YN4sMG8amDcJzBsH5o0C84aBeYPAvH5gXi8wrxuY1wnMawfm2YF5VmAeDcwzA/OMwDw9MI8E5uHA3AvMQ4F5rcC8ZmBeIzCvHphXC8zPDMzPCMyrBubrk/bO1wXmawPzNYH56sB8VWD+RmC+MjBfEZi/HpgvD8yXBeavBeZLA/NXA/MlgfniwHxRYL4wMF8QmM8PzF8JzOcF5nMD85cD8zmB+UuB+ezAfFZgPjMwfzEwnxGYP19p7/znlL3zXwLzXwPz3wLz3wPzYhX3zg8LzIsH5ocH5iUC8yMC8yMD86MC85KB+dGB+TGB+bGB+XGB+fGB+QmB+YmBeanAvHRgXiYwTwjMywbm5QLzxMC8fGCeFJgnB+bpgXkkMA8H5l5gHgrMawXmNQPzGoF59cC8WmB+ZmB+RmBeNTCvEpifHpifFpg3DcybBOaNA/NGgXnDwLxBYF4/MK8XmNcNzOsE5rUD8+zAPCswjwbmmYF5hj8fVezP4wWxB6aLMUOMF8WYKcYsMWaL8ZIYc8R4WYy5YswT4xUx5ouxQIyFYiwSY7EYS8R4VYylYrwmxjIxlovxuhgrxFgpxhtirBJjtRhrxFgrxjox1ovxphhvifG2GBvEeEeMjWK8K8YmMTaL8Z4Y74vxgRhbxNgqxodibBNjuxg7xPhIjJ1i7BLjYzE+EeNTMT4T43MxvhBjtxhfivGVGF+L8Y0Y34rxnRjfi/GDGHvE+FGMn8T4WYxfxPhVjN/E+F1+HlpZ6ClGcTEOF6OEGEeIcaQYR4lRUoyjxThGjGPFOE6M48U4QYwTxSglRmkxyoiRIEZZMcqJkShGeTGSxEgWo4IYKWJUFKOSGJXFSBUjTYyTxDhZjFPEOFWM08Q4XYwqYlQV4wwxzhSjmhjVxaghRk0xaokREsMTIyxGRIx0MTLEyBQjKkaWGNli1Bajjhh1xagnRn0xGojRUIxGlYvtcxzm/7Oh/89QfIf3SUlc/1m8GHetHwHXmuZfp7HQt4kYTcVoJkZzMVqI0VKMVmK0FqONGG3FaCdGezE6iNFRjE5idBajixhdxegmRncxeojRU4xeYvQWo48YfcXoJ8ZZYvQXY4AYOZX/FOmPe5fytcqB+5nyPc25pppzzTTnmmvOtdCca6k510pzrrXmXBvNubaac+0059prznXQnOuoOddJc66z5lwXzbmumnPdNOe6a8710JzrqTnXS3Out+ZcH825vppz/TTnztKc6685N0BzLsc/FzxK+P9s6P8zFN+xz56Nl5Xl3oj3WupPHJtUxq2rbFXOZzWxuYgnZpmLphD9/sxrs/ivFfb185oDc1HO5lyk/7VOr0V8MYcCMXst47lWeB/9vFbAXCTamYtQzDq91ocYc2bh32L22hzatbI0+nltgbkob1susrTr9NodfMzRf4jZa3+w14r+o35eB2AukuzJRfhf1ul1PJiYo/8as9fpwK+Vtx/9vM7AXCTbkIvoftfpdTmwmEMHELPX9UCuFTog/bxuwFxU+G9zkXGA6/S67y/m9AOO2evxr9dKLzwI/byewFyk/Fe5iB7UOr1e/xxz1kHG7PX+h2tlFx60fl4fYC4qms9F6BDW6fXVxRw6pJi9fn+/lneI+nlnAXNRyWQu8g95nV7/fWOOxBGzNyBwrXBhXPp5OcBcVDaUi1B8hwf8fMAD8q0X5LN4c5HqSC6AHOQB+3gvGZiLNEdyAez3PGC/4lUE5uIkR3IBvK95QF/2UoG5OJmUC/R31YD71wPWn4fUT9ZvWzHS/Ovl+M/E+vvPyPr5z8z6+M/QevnP1Hr4z9i6+c/cuvjP4Dr5z+Q6+M/o2vnP7Nr4z/Ba+c/0WvjP+Jr5z/zkc4DGMc9Y5YH+rjGy78mtjMpDxOhLZXHr3vcP0vIqExcsL46+bj6wGFhx5wc2Bei6Rl8qmwMrtnxjL5Ut8DUv9L8Y8NeT2gK/CIPnCjVPb9F3IoRrqSeuBcCiLwQnl7HBCzTGEW/cBZU5HQz6bjcAmOuBsJgz003e7QaS7naDKhMXPIhwtzvb8rudjPtsx+92A2DFlp2nWS7lbneOr/ng2LvdOZq73WADd7sBwLvdOcCiH0xKLtr1kTEPwbmn9u8p411fvm8axcE1iESDc8HdAtq0ZI7PJXRJtsetagcd93mOdIfIGj+f7BOh+A5P5uR8gk+cC9RwqAP7ZShhv1wA7tBVr3JBYK0sLdD1dD6wni4k6Xph5b+TG9qb+gN1uAimQ3qBSXK9CJw/dQyrTFzwMAK5Xmw5ucq4L3acXPvDii03rFkuhVwv8TW/NJZcL9GQ66UGyBXhWopcLwEW/aWk5KJdHxnzZZZ3pBf6poF+g9+FQA2Rxnu55fmQ9XI5obsFxk15G5yqQ3Qni6ydKywnI6nhFQQNLwdqeKUjn0og/Wu45Z4jczKc4DlXkcjvKiJRKy3QewhZT1eTdL3aAFEjv31/DUyHaNgkUV8Dzp86RlQmLngEgaivtZyoZdzXOk7UZ8GKLatAs1wKUV/na359LFFfpyHq6w0QNcK1FFFfByz660nJRbs+MuYbLO+mrvZNA03UVwM1RBrvjZbnQ9bLjYTuFhg3hahVHaI7WWTt3GQ5UUsNbyJoeCNQw5sdIWqkf4203HNkTkYSPOcWEvndQiRqpQV6DyHr6VaSrrcaIOp+QB1ug+lQYPTHrW4D508dt1cmLvh2AlHfYTlRy7jvcJyo+8GKzSvULJdC1Hf6mt8VS9R3aoj6LgNEjXAtRdR3Aov+LlJy0a6PjHmU5d3Urb5poIn6VqCGSOO92/J8yHq5m9DdAuOmELWqQ3Qni6ydeywnaqnhPQQN7wZqeK8jRI30r9GWe47MyWiC59xHIr/7iESttEDvIWQ93U/S9X4DRN0XqMMDMB0iRon6AXD+1PFgZeKCHyQQ9UOWE7WM+yHHibovrNjyjBH1w77mj8QS9cMaon7EAFEjXEsR9cPAon+ElFy06yNjftTybup+3zTQRH0/UEOk8T5meT5kvTxG6G6BcVOIWtUhupNF1s7jlhO11PBxgoaPATUc4whRI/1rrOWeI3MyluA5T5DI7wkiUSst0HsIWU/jSLqOM0DUyPffPwnTIcfo+y6fBOdPHeMrExc8nkDUEywnahn3BMeJug+s2DKNve/yKV/zibFE/ZSGqCcaIGqEaymifgpY9BNJyUW7PjLmSZZ3U+N800AT9TighkjjnWx5PmS9TCZ0t8C4KUSt6hDdySJr52nLiVpq+DRBw8lADZ9xhKiR/jXFcs+ROZlC8JxnSeT3LJGolRboPYSsp6kkXacaIOreQB2eg+kQzjZJ1M+B86eOaZWJC55GIOrnLSdqGffzjhN1b1ix5Uc1y6UQ9Qu+5tNjifoFDVFPN0DUCNdSRP0CsOink5KLdn1kzDMs76am+qaBJuqpQA2Rxvui5fmQ9fIiobsFxk0halWH6E4WWTszLSdqqeFMgoYvAjWc5QhRI/1rtuWeI3Mym+A5L5HI7yUiUSst0HsIWU9zSLrOMUDUvYA6vAzTITfLJFG/DM6fOuZWJi54LoGo51lO1DLueY4TdS9YsaVnaZZLIepXfM3nxxL1Kxqinm+AqBGupYj6FWDRzyclF+36yJgXWN5NzfFNA03Uc4AaIo13oeX5kPWykNDdAuOmELWqQ3Qni6ydRZYTtdRwEUHDhUANFztC1Ej/WmK558icLCF4zqsk8nuVSNRKC/QeQtbTUpKuSw0QdU+gDq/BdMgw+q3v18D5U8eyysQFLyMQ9XLLiVrGvdxxou6J+9jJ2Le+X/c1XxFL1K9riHqFAaJGuJYi6teBRb+ClFy06yNjXml5N7XUNw00US8Faog03jcsz4eslzcI3S0wbgpRqzpEd7LI2lllOVFLDVcRNHwDqOFqR4ga6V9rLPccmZM1BM9ZSyK/tUSiVlqg9xCyntaRdF1ngKh7AHVYj3tCk2GSqNeD86eONysTF/wmgajfspyoZdxvOU7UPXDQlatZLoWo3/Y13xBL1G9riHqDAaJGuJYi6reBRb+BlFy06yNjfsfybmqdbxpool4H1BBpvBstz4esl42E7hYYN4WoVR2iO1lk7bxrOVFLDd8laLgRqOEmR4ga6V+bLfccmZPNBM95j0R+7xGJWmmB3kPIenqfpOv7Boi6O1CHD3D9ZKZJov4AnD91bKlMXPAWAlFvtZyoZdxbHSfq7riPnXI0y6UQ9Ye+5ttiifpDDVFvM0DUCNdSRP0hsOi3kZKLdn1kzNst76be900DTdTvAzVEGu8Oy/Mh62UHobsFxk0halWH6E4WWTsfWU7UUsOPCBruAGq40xGiRvrXLss9R+ZkF8FzPiaR38dEolZaoPcQsp4+Ien6iQGi7gbU4VOYDllGfz3rU3D+1PFZZeKCPyMQ9eeWE7WM+3PHibobrNiixn496wtf892xRP2Fhqh3GyBqhGspov4CWPS7SclFuz4y5i8t76Y+8U0DTdSfADVEGu9XludD1stXhO4WGDeFqFUdojtZZO18bTlRSw2/Jmj4FVDDbxwhaqR/fWu558icfEvwnO9I5PcdkaiVFug9hKyn70m6fm+AqLsCdfjBUaL+AZw/deypTFzwHgJR/2g5Ucu4f3ScqLs6SNQ/+Zr/HEvUP2mI+mcDRI1wLUXUPwGL/mdHiBoZ8y+Wd1Pf+6aBJurvgRoijfdXy/Mh6+VXQncLjJtC1KoO0Z0ssnZ+s5yopYa/ETT8Fajh744QNdK/iqXa7TkyJ3KN6D19GC7ufcjvsFQeUSst0HsIWU/FSboWT+UTdRegDofDdMgw+q7vw8H5U0eJVOKCS6Tir3tEqt1ELeM+InWvwKDrGiXqLrAbbo6xd30f6Wt+VGqxfen5yNS/E7X8l9hE3QVI1EcCi/6oVE5y0a6PjLmk5d1Ucd800ERdHKgh0niPtjwfsl6OJnS3wLgpRK3qEN3JImvnGLKGofiOP/byMQQNjwZqeCxYQ3Wg7wFI/zrOcs+ROTmO4DnHk8jveCJRKy3QewhZTyeQdD3BAFF3BhL1iTiizjdJ1CeC86eOUqnEBZciEHVpy4laxl3acaLujCPqiGa5FKIu42ueEEvUZTREnWCAqDsDiboMsOgTUjnJRbs+MuaylndTJ/imgSbqE4AaIo23nOX5kPVSjtDdAuOmELWqQ3Qni6ydRMuJWmqYSNCwHFDD8o4QNdK/kiz3HJmTJILnJJPIL5lI1EoL9B5C1lMFkq4VDBB1JyBRp8B0CBt9Rp0Czp86KqYSF1yRQNSVLCdqGXclx4m6E4yo8409o67sa54aS9SVNUSdaoCoOwGJujKw6FNTOclFuz4y5jTLu6kKvmmgiboCUEOk8Z5keT5kvZxE6G6BcVOIWtUhupNF1s7JlhO11PBkgoYnATU8xRGiRvrXqZZ7jszJqQTPOY1EfqcRiVppgd5DyHo6naTr6QaIuiOQqKvAdIhETBJ1FXD+1FE1lbjgqgSiPsNyopZxn+E4UXeEEXVevma5FKI+09e8WixRn6kh6moGiLojkKjPBBZ9tVROctGuj4y5uuXd1Om+aaCJ+nSghkjjrWF5PmS91CB0t8C4KUSt6hDdySJrp6blRC01rEnQsAZQw1qOEDXSv0KWe47MSYjgOR6J/DwiUSst0HsIWU9hkq5hA0TdAUjUEZgOBUafUUfA+VNHeipxwekEos6wnKhl3BmOE3UHGFF7xp5RZ/qaR2OJOlND1FEDRN0BSNSZwKKPpnKSi3Z9ZMxZlndTYd800EQdBmqINN5sy/Mh6yWb0N0C46YQtapDdCeLrJ3alhO11LA2QcNsoIZ1HCFqpH/VtdxzZE7qEjynHon86hGJWmmB3kPIeqpP0rW+AaJuDyTqBjAd0o0SdQNw/tTRMJW5YAJRN7KcqGXcjRwn6vYwos41RtSNfc2bxBJ1Yw1RNzFA1O2BRN0YWPRNUjnJRbs+MuamlndT9X3TQBN1faCGSONtZnk+ZL00I3S3wLgpRK3qEN3JImunueVELTVsTtCwGVDDFo4QNdK/WlruOTInLQme04pEfq2IRK20QO8hZD21Juna2gBRtwMSdRuYDtFsk0TdBpw/dbRNJS64LYGo21lO1DLudo4TdTvcT8xFNculEHV7X/MOsUTdXkPUHQwQdTsgUbcHFn2HVE5y4Z+jAmPuaHk31do3DTRRtwZqiDTeTpbnQ9ZLJ0J3C4ybQtSqDtGdLLJ2OltO1FLDzgQNOwE17OIIUSP9q6vlniNz0pXgOd1I5NeNSNRKC/QeQtZTd5Ku3Q0QdVsgUffAPaExStQ9wPlTR89U4oJ7Eoi6l+VELePu5ThRt4URdboxou7ta94nlqh7a4i6jwGibgsk6t7Aou+Tykku2vWRMfe1vJvq7psGmqi7AzVEGm8/y/Mh66UfobsFxk0halWH6E4WWTtnWU7UUsOzCBr2A2rY3xGiRvrXAMs9R+ZkAMFzckjkl0MkaqUFeg8h6ymXpGuuAaJuAyTqPNwz6pBJos4D508d+anEBecTiLrAcqKWcRc4TtRtYESdHdIsl0LUhb7mA2OJulBD1AMNEHUbIFEXAot+YConuWjXR8Y8yPJuKtc3DTRR5wI1RBrv2ZbnQ9bL2YTuFhg3hahVHaI7WWTtnGM5UUsNzyFoeDZQw8GOEDXSv4ZY7jkyJ0MInnMuifzOJRK10gK9h5D1dB5J1/MMEHVrIFGfj+snPZNEfT44f+oYmkpc8FACUV9gOVHLuC9wnKhbw4g6s1CzXApRX+hrflEsUV+oIeqLDBB1ayBRXwgs+otSOclFuz4y5mGWd1Pn+aaBJurzgBoijfdiy/Mh6+ViQncLjJtC1KoO0Z0ssnYusZyopYaXEDS8GKjhpY4QNdK/LrPcc2ROLiN4zuUk8rucSNRKC/QeQtbTFSRdrzBA1K2ARH0l7juPRn8960pw/tQxPJW44OEEor7KcqKWcV/lOFG3wr2ZzNivZ13ta35NLFFfrSHqawwQdSsgUV8NLPprUjnJRbs+MuYRlndTV/imgSbqK4AaIo33WsvzIevlWkJ3C4ybQtSqDtGdLLJ2rrOcqKWG1xE0vBao4fWOEDXSv26w3HNkTm4geM6NJPK7kUjUSgv0HkLW000kXW8yQNQtgUR9M0yHAqPPqG8G508dI1OJCx5JIOpbLCdqGfctjhN1S9yvZxl7Rn2rr/ltsUR9q4aobzNA1C2BRH0rsOhvS+UkF+36yJhvt7ybusk3DTRR3wTUEGm8d1ieD1kvdxC6W2DcFKJWdYjuZJG1c6flRC01vJOg4R1ADe9yhKiR/jXKcs+RORlF8Jy7SeR3N5GolRboPYSsp3tIut5jgKhbAIn6XpgOhRkmifpecP7UMTqVuODRBKK+z3KilnHf5zhRt4ARdShXs1wKUd/va/5ALFHfryHqBwwQdQsgUd8PLPoHUjnJRbs+MuYHLe+m7vFNA03U9wA1RBrvQ5bnQ9bLQ4TuFhg3hahVHaI7WWTtPGw5UUsNHyZo+BBQw0ccIWqkfz1quefInDxK8JzHSOT3GJGolRboPYSsp8dJuj5ugKibA4l6DEyHbKPf+h4Dzp86xqYSFzyWQNRPWE7UMu4nHCfq5ri/ozb2re9xvuZPxhL1OA1RP2mAqJsDiXocsOifTOUkF+36yJjHW95NPe6bBpqoHwdqiDTeCZbnQ9bLBEJ3C4ybQtSqDtGdLLJ2nrKcqKWGTxE0nADUcKIjRI30r0mWe47MySSC50wmkd9kIlErLdB7CFlPT5N0fdoAUTcDEvUzuGfURt/1/Qw4f+qYkkpc8BQCUT9rOVHLuJ91nKib4b71bexd31N9zZ+LJeqpGqJ+zgBRNwMS9VRg0T+Xykku2vWRMU+zvJt62jcNNFE/DdQQabzPW54PWS/PE7pbYNwUolZ1iO5kkbXzguVELTV8gaDh80ANpztC1Ej/mmG558iczCB4zosk8nuRSNRKC/QeQtbTTJKuM31dTdJl08rYWNQxK5W44FkEupxtOV3KuGcT6FK3VsQGmU3YxMCNR8+3rRoi437JkWZiJjDmOZY3EzLWlwjNxMuWN98yLy+TPSdeDeeSGoe5/0Hj0ITUOMxLJS54HqFxeMXyxkHG/YojjYMs5FcImxi48ej5tlVDZNzzHWkc5gJjXmB54yBjnU9oHBZa3jjIvCwke068Gi4iNQ6LDDzDbwx8hr8YuIdMNkuLUznN0pJU4oKXEJqlVy1vlmTcrxpqlkLxHd4if63oR4eLgDlC5nup5TdQaXRLCTfQ1yy/gcqYXyPEvYx001um+QoIWhN2zhB7/FVC04Pc78str3up4XKChkuBGr7uCGgh7zkrLL9PyJysIPjlSpJfriQ+7lVaoPcQsp7eIO0htJZvgHtrdaD3+s6SuGutCsTsZUXC4WhE/ntZ+SEvPT8vnBUO5+emh/JCOXnhgux0L7swPZweycvPyxXXzPEKQ4U5edmFWX9eyyQQriIB4epU4oJXE4BwjeVAKONeQwBCWWxyFC/GL7bghgvFeWiWC9uAwUJeG/xkCn2nXAPsEIJ3yrX/cqfcz5rz9iPOHxtl7SHcKfcn+lrgBlxH6kDkdUccYi14Qrs8L1QYyg6HckLRvMxobnZ+ODcrpzBSmBHJjxyqrvsrdqSu60m6rj90Xf9f1OubJF3f/B+v17dIur7l66punCY6NeTNM3izf9tvKjbIewbjBreW0K2ttfxjrUPdHKGDiDveNb5j+cdasjDfIXw8sZFkChv/xWxD8R3eBpIW75K0eJeohTRChhbhqnZ7Cms/RP7buPP2sz5a7aeD41YH+q94gXXpAXPtIfWTjdSRxfSfQhQ7SD33V0/BazLuWShNgk3lpn/7FCIU3+G9Q7oJbDr0z+u9/f135Jo3EUwhi2QKJQ4yZwfTvMUb8+ZUOw0GmYtgXW4ONCeHmp/9aY7Mz3vBZwuRiNgb+VGvML8wkhHNDud6mZHMzML0wmhmVnp+YUZ6Tn60wEvPiYSzC6KhQi+roCCaEcmLZhZm5+eJfy+gqZcfiaTnZ+fmeRnhzJzcUFZ+JCdUmB6NCODPj0Tz8yNZmZk5kUh+ZlZhVraAdIH+WaGMaDQ7lBmOZIdZ+XkvQNeom8L+Ps0JXtOVm8L7Lt4U3iffFN4n3BRqW3JT+Mcijv7xkpZCpOl8YOlNoTbJdD4A3BT299EmMj9bLL0psPKz5f/RR65b/Y9cP9R95BqK7/jH5x3IZ5XxXgv48S3lm1FKQ/Q3mlkaxnutbZbnQ26YbYQb+3ZSk7Od+PHnhyQtdpC02EH+KJihRV3LPwpm7Yd6ln8UzKr9+o58FAysSw+Ya69+0UfBsccf9yyUJsFm9yMm9W8j3QQ+IlK/XPNHBFNo7MhHwduAjeDOVDsNpjGJKnca+CgYmZ9dQOqvD6R+Vn52afJzsN+p2d9Hv8j8fEzyz48BOuzv0ymkDp+QdPjEsXr4lKTDp47Vw2ckHT47gEdFNjd2muXC6jjYNH7uYtP4Oblp/JzQNDY11DTG+a14qMl9AbwWsmlsSmpKvjiApjHeb9cj87M7FdfoIZtGVn52A26O+zm8HODLhL6E+WcW5YvYa/xP3dBPlJA1/pXlTzBkjr8i3G++Jt175XVL+v9322J/P1D/TXU9tN6Tj7F/jd+gG0lXira55Y9XZMzfEOJuYcknivs59inMeGP+FmjMwLrxkLkgm+Rfjyn+F03y2/9Vk/zO8j/PkzF/R4j7e1JH833q3retMf7cU9chh+I7PGSH/IPl9SSJ6gdCPe1xYB/tIcT9I2kf/fgv+ygU30HzlNZV/zdroI2h77XEu86fgE0iMNdeG9InVD8V0TV9jT+zG0cEZf5M2PTtHaHMnx3Y9PHmooMjBvwLMBfA+vM6FFG6E2b7C9JsXb0rznAgUb8WJSrkzXQgUb8VJSrkzXYgUb8XJSrkzXEgUcXSihLlzXUgUYelFSXKe8WBRBVPK0qUt8CBRB2eVpQob5EDiSqRVpQob4kDiToirShR3lIHEnVkWlGivGUOJOqotKJEea87kKiSaUWJ8lY6kKij04oS5a1yIFHHpBUlyutb3P41HptWlChvrQM76ri0okR56x1I1PFpRYny3nIgUSekFSXK2+BAok5MK0qUt9GBRJVKK0qUt8mBRJVOK0qU954DiSqTVpQo7wMHEpWQVpQob6sDiSqbVpQob5sDiSqXVpQob4cDiUpMK0qUt9OBRJVPK0qU97EDiUpKK0qU96kDiUpOK0qU97kDiaqQVpQob7cDiUpJA65RvkPz6GJ7/7bsj8UWL6Y9YP/RousWXbfoukXXLbpu0XWLrlt03aLrFl236LpF1y26btF1i65bdN2i6xZdt+i6Rdctuq4V1y2Ove7/sXcWcHIU29uelSQbd7fZzcZtey278eBOCO7sJrskxF0IcUJIQogR5GIXuNjlAhd3d3d3J0Dc9asmM6Qyt3rJ1JzezPP9Z34cplPznprnVEu9O9Pd4wje5NiRvtGr+4jr2y/5xLgLwLgbwCh6vxmfGJMAjKJ3GfGJMQXAKHpvCZ8YRW+r4BOj6B0FfGIUvZjeJ0bR68h9YhS9hNonRtGrh31iFL1w1idG0WtGfWIUvVzSJ0bRKwV9YhS9SM4nRtHrw3xiFL00yidG0auCfGIUvSDGJ0bRa0F8YhS9DMInRtErAHxiFD353SdG0fO+fWIUPeXZJ0bRs319YhQ90dUnxqHV459xGIBxOIBxBIBxJIBxFIBxNIBxDIBxLIBxHIBxPIBxAoBxIoBxEoBxMoBxCoDxQgDjVADjRQDGaQDG6QDGGQDGmQDGWQDG2QDGOQDGiwGMcwGMlwAY5wEYLwUwzgcwLgAwLgQwXgZgXARgvBzAuBjAuATAuBTAuAzAuBzAeAWAcQWA8UoA41UAxqsBjNcAGFfXjn/GNQDGtQDGdQDG9QDGDQDGjQDGTQDGzQDGLQDGrQDGbQDG7QDGHQDGnQDGXQDG3QDGQJ34Z0wCMCYDGFMAjKkAxgoAxooAxkoAxjQAY2UAYxUAY1UAYzUAY3UAYw0AY00AYy0AY20AYx0AY10AYz0AY30AYwMAY0MAYyMAY2MAYxMAY1MAYzMAY3MAYwsA433N45/xfgDjAwDGBwGMDwEYHwYwPgJgfBTA+BiA8XEA4xMAxicBjE8BGJ8GMD4DYHwWwPgcgPF5AOMLAMYXAYwvARhfBjC+AmB8FcD4GoDxdQDjGwDGNwGMbwEY3wYwvgNgfBfA+B6A8X0A4wcAxg8BjB8BGD8GMH4CYPwUwPgZgPFzAOMXAMYvAYxfARi/BjB+A2D8FsD4HYDxewDjDwDGHwGMPwEYfwYw/gJg/BXAuBLA+BuA8XcA4x8AxlUAxtUAxjUAxrUAxnUAxvUAxg0Axo0Axk0Axs0Axi0Axq0Axm0Axu0Axh0Axp0Axl0Axt0AxkCL+GdMAjAmAxhTAIypAMYKAMaKAMZKAMY0AGNlAGMVAGNVAGM1AGN1AGMNAGNNAGMtAGNtAGMdAGNdAGM9AGN9AGMDAGNDAGMjAGNjAGMTAGNTAGMzAGNzAGMLAGNLAGMQwJgOYMwAMLYCMGYCGFsDGNsAGNsCGNsBGNsDGDsAGDsCGDsBGDsDGLsAGLsCGLMAjA6AMRvAmANgzAUw5gEY8wGM3QCMBQDGQgBjdwBjDwBjTwBjLwBjbwBjHwBjXwBjPwDjz/Xin/EXAOOvAMaVAMbfAIy/Axj/ADCuAjCuBjCuATCuBTCuAzCuBzBuADBuBDBuAjBuBjBuATBuBTBuAzBuBzDuADDuBDDuAjDuBjAG6sc/YxKAMRnAmAJgTAUwVgAwVgQwVgIwpgEYKwMYqwAYqwIYqwEYqwMYawAYawIYawEYawMY6wAY6wIY6wEY6wMYGwAYGwIYGwEYGwMYmwAYmwIYmwEYmwMYWwAYWwIYgwDGdABjBoCxFYAxE8DYGsDYBsDYFsDYDsDYHsDYAcDYEcDYCcDYGcDYBcDYFcCYBWB0AIzZAMYcAGMugDEPwJgPYOwGYCwAMBYCGLsDGHsAGHsCGHsBGHsDGPsAGPsCGPsBGA8CMB4MYDwEwHgogPEwAOPhAMYjAIxHAhiPAjAeDWA8BsB4LIDxOADj8QDG/gDGEwCMAwCMJwIYTwIwngxgPAXAeCqA8TQA4+kAxjMAjGcCGM8CMJ4NYDwHwHgugPE8AGMRgLEYwDgQwDgIwFgCYCwFMJ4PYBwMYBwCYLwAwDgUwDgMwDgcwDgCwDgSwDgKwDgawDgGwDgWwDgOwDgewDgBwDgRwDgJwDgZwDgFwHghgHEqgPEiAOM0AON0AOMMAONMAOMsAONsAOMcAOPFAMa5AMZLAIzzAIyXAhjnAxgXABgXAhgvAzAuAjBeDmBcDGBcAmBcCmBcBmBcDmC8AsC4wgdG/SHSd7aPfatHsja24T6bBQOB5ipaqGipIqgiXUWGilYqMlW0VtFGRVsV7VS0V9FBRUcVnVR0VtFFRVcVWSocFdkqclTkqshTka+im4oCFYUquqvooaKnil4qeqvoo6Kvin4qDlJxsIpDVByq4jAVh6s4QsWRKo5ScbSKY1Qcq+I4Fcer6K/iBBUDVJyo4iQVJ6s4RcWpKk5TcbqKM1ScGdwzBmcFQ4OSEnp2G4KBfR/SG6Q78EJ9ZfnJ2RzC2QLC2RLCGYRwpkM4MyCcrSCcmRDO1hDONhDOthDOdhDO9hDODhDOjhDOThDOzhDOLhDOrhDOLAinA+HMhnDmQDhzIZx5EM58CGc3CGcBhLMQwtkdwtkDwtkTwtkLwtkbwtkHwtkXwtkPwnkQhPNgCOchEM5DIZyHQTgPh3AeAeE8EsJ5FITzaAjnMRDOYyGcx0E4j4dw9odwngDhHADhPBHCeRKE82QI5ykQzlMhnKdBOE+HcJ4B4TxTkNNlqxdivKPKnnNCqcv3VN27fK+2/F9t+T5t+X5t+QFt+UFt+aHQ8tnqf+eoOFfFeSqKVBSrGKhikIoKSlM5sOf82r/WeXLA+OgbkFl3iX4T/Sb6TfSb6DfRb6LfRL+JfhP9JvpN9JvoN9Fvot9Ev4l+E/0m+k30m+g3PvpNlu3X2dhSrq8tLeXrlf7eYyeAcReAcTeA0f3SJd4ZkwCMyQDGFABjKoCxAoCxIoCxEoAxDcBYGcBYBcBYFcBYDcBYHcBYA8BYE8BYC8BYG8BYB8BYF8BYD8BYH8DYAMDYEMDYCMDYGMDYBMDYFMA4tHr8Mw4DMA4HMI4AMI4EMI4CMI4GMI4BMI4FMI4DMI4HME4AME4EME4CME4GME4BMF4IYJwKYLwIwDgNwDgdwDgDwDgTwDgLwDgbwDgHwHgxgHEugPESAOM8AOOlAMb5AMYFAMaFAMbLAIyLAIyXAxgXAxiXABiXAhiXARiXAxivADCuADBeCWC8CsB4NYDxGgDj6trxz7gGwLgWwLgOwLgewLgBwLgRwLgJwLgZwLgFwLgVwLgNwLgdwLgDwLgTwLgLwLgbwBioE/+MSQDGZABjCoAxFcBYAcBYEcBYCcCYBmCsDGCsAmCsCmCsBmCsDmCsAWCsCWCsBWCsDWCsA2CsC2CsB2CsD2BsAGBsCGBsBGBsDGBsAmBsCmBsBmBsDmBsAWC8r3n8M94PYHwAwPgggPEhAOPDAMZHAIyPAhgfAzA+DmB8AsD4JIDxKQDj0wDGZwCMzwIYnwMwPg9gfAHA+CKA8SUA48sAxlcAjK8CGF8DML4OYHwDwPgmgPEtAOPbAMZ3AIzvAhjfAzC+D2D8AMD4IYDxIwDjxwDGTwCMnwIYPwMwfg5g/ALA+CWA8SsA49cAxm8AjN8CGL8DMH4PYPwBwPgjgPEnAOPPAMZfAIy/AhhXAhh/AzD+DmD8A8C4CsC4GsC4BsC4FsC4DsC4HsC4AcC4EcC4CcC4GcC4BcC4FcC4DcC4HcC4A8C4E8C4C8C4G8AYaBH/jEkAxmQAYwqAMRXAWAHAWBHAWAnAmAZgrAxgrAJgrApgrAZgrA5grAFgrAlgrAVgrA1grANgrAtgrAdgrA9gbABgbAhgbARgbAxgbAJgbApgbAZgbA5gbAFgbAlgDAIY0wGMGQDGVgDGTABjawBjGwBjWwBjOwBjewBjBwBjRwBjJwBjZwBjFwBjVwBjFoDRATBmAxhzAIy5AMY8AGM+gLEbgLEAwFgIYOwOYOwBYOwJYOwFYOwNYOwDYOwLYOwHYPy5Xvwz/gJg/BXAuBLA+BuA8XcA4x8AxlUAxtUAxjUAxrUAxnUAxvUAxg0Axo0Axk0Axs0Axi0Axq0Axm0Axu0Axh0Axp0Axl0Axt0AxkD9+GdMAjAmAxhTAIypAMYKAMaKAMZKAMY0AGNlAGMVAGNVAGM1AGN1AGMNAGNNAGMtAGNtAGMdAGNdAGM9AGN9AGMDAGNDAGMjAGNjAGMTAGNTAGMzAGNzAGMLAGNLAGMQwJgOYMwAMLYCMGYCGFsDGNsAGNsCGNsBGNsDGDsAGDsCGDsBGDsDGLsAGLsCGLMAjA6AMRvAmANgzAUw5gEY8wGM3QCMBQDGQgBjdwBjDwBjTwBjLwBjbwBjHwBjXwBjPwDjQQDGgwGMhwAYDwUwHgZgPBzAeASA8UgA41EAxqMBjMcAGI8FMB4HYDwewNgfwHgCgHEAgPFEAONJAMaTAYynABhPBTCeBmA8HcB4BoDxTADjWQDGswGM5wAYzwUwngdgLAIwFgMYBwIYBwEYSwCMpQDG8wGMgwGMQwCMFwAYhwIYhwEYhwMYRwAYRwIYRwEYRwMYxwAYxwIYxwEYxwMYJwAYJwIYJwEYJwMYpwAYLwQwTgUwXgRgnAZgnA5gnAFgnAlgnAVgnA1gnANgvBjAOBfAeAmAcR6A8VIA43wA4wIA40IA42UAxkUAxssBjIsBjEsAjEsBjMsAjMsBjFcAGFf4wKg/RPrO9rHvrNysZG1sw32WBAOBUhXnqxisYoiKC1QMVTFMxXAVI1SMVDFKxWgVY1SMVTFOxXgVE1RMVDFJxWQVU1RcqGKqiotUTFMxXcUMFTNVzFIxW8UcFRermKviEhXzVFyqYr6KBSoWqrhMxSIVl6tYrGKJiqUqlqlYruIKFStUXKniKhVXq7hGxT9UXKviOhXXq7hBxY0q/qniJhU3q7gluGcM/hUMDUpK6NkdlLSItlJD2/mGtsGGtiGGtgsMbUMNbcMMbcMNbSMMbSMNbaMMbaMNbWMMbWMNbeMMbeMNbRMMbRMNbZMMbZMNbVMMbRca2qYa2i4ytE0ztE03tM0wtM00tM0ytM02tM0xtF1saJtraLvE0DbP0HapoW2+oW2BoW2hoe0yQ9siQ9vlhrbFhrYlhralhrZlhrblhrYrDG0rDG1XGtquMrRdbWi7xtD2D0PbtYa26wxt1xvabjC03Who+6eh7SZD282GtlsMbe4BUf23zyMl9Nw39JyTlZ+bW9Itu8TJcYqysguLC/KycvOK8wucAievIG9QdkFOTklBbkG3wuLCblmFTm5OiVOaV5hTGpqONraU62tLS8GT8YL+GIVk4fHbKVhzKaTmXYI1nw+pebdgzYMhNQfkOJ0hkJqTBGu+AFJzsmDNQyE1pwjWPAxSc6pgzcMhNVcQrHkEpOaKgjWPhNRcSbDmUZCa0wRrHg2pubJgzWMgNVcRrHkspOaqgjWPg9RcTbDm8ZCaqwvWPAFScw3BmidCaq4pWPMkSM21BGueDKm5tmDNUyA11xGs+UJIzXUFa54KqbmeYM0XQWquL1jzNEjNDQRrng6puaFgzTMgNTcSrHkmpObGgjXPgtTcRLDm2ZCamwrWPAdS89DqcjVfDKl5mGDNcyE1Dxes+RJIzSMEa54HqXmkYM2XQmoeJVjzfEjNowVrXgCpeYxgzQshNY8VrPkySM3jBGteBKl5vGDNl0NqniBY82JIzRMFa14CqXmSYM1LITVPFqx5GaTmKYI1L4fUfKFgzVdAap4qWPMKSM0XCdZ8JaTmaYI1XwWpebpgzVdDap4hWPM1kJpnCtb8D0jNswRrvhZS82zBmq+D1DxHsObrITVfLFjzDZCa5wrWfCOk5ksEa/4npOZ5gjXfBKn5UsGab4bUPF+w5lsEa66g+qim1as/UiPGIMv24ex5Etq//+xNbL9xZLdHwfXsx01XnPCCvr5vDe55vs191i+4d1/4KqLNFQUDiQ0l1gPCgHb+bChi62LPY58N2rLm7FDNjrs9SY3fbUG5Gv1aF8nC60Jy/G439FWcNXBQnlOcP6ibU1KUVzBwYGGO42QX5RflF2cXlJYU5zkFeQWqz4FF2QXq7bKLBjolWUX5Je4kUjWw5/gQ+UgSHoPb5dZ7ls57R9BHYLdz6X7vFNwY/Kr7zuDeARbq18gqcTBxWaV22HC/kuvo30HZDT88obv9pqvn8nSCswUn+DmCE7zkJw1zgU7wruCe5/8EA/u6PveFSCfoioKBxIYS6459EsQJzhV0gu72JDV+/wnK1XgSxAlKjt/dQaYTvDsoOyGGH/cEfQR2O5fu917BjcGvuu8N7h1goX59cYL/CbFKO0HJdfTfoD9O0O23vJ3gdMEJfobgBC/5HfIsoBO8L7jn+f5gYF/X574Q6QRdUTCQ2FBi3bFPgTjBWYJO0N2epMbv/qBcjadAnKDk+D0QZDrBB4KyE2L48WDQR2C3c+l+HxLcGPyq+6Hg3gEW6tcXJ3h/iFXaCUquo4eD/jhBt9/ydoIXCk7wUwUneMmzg6cBneAjwT3PjwYD+7o+94VIJ+iKgoHEhhLrjn0axAlOE3SC7vYkNX6PBuVqPA3iBCXH77Eg0wk+FpSdEMOPx4M+ArudS/f7hODG4FfdTwT3DrBQv744wUdDrNJOUHIdPRn0xwm6/Za3E5woOMFPEpzgJa/7nAJ0gk8F9zw/HQzs6/rcFyKdoCsKBhIbSqw79hkQJzhF0Am625PU+D0dlKvxDIgTlBy/Z4JMJ/hMUHZCDD+eDfoI7HYu3e9zghuDX3U/F9w7wEL9+uIEnw6xSjtByXX0fNAfJ+j2W95OcKzgBD9OcIKXvKPPBKATfCG45/nFYGBf1+e+EOkEXVEwkNhQYt2xz4I4wQmCTtDdnqTG78WgXI1nQZyg5Pi9FGQ6wZeCshNi+PFy0Edgt3Ppfl8R3Bj8qvuV4N4BFurXFyf4YohV2glKrqNXg/44Qbff8naCIwUn+FGCE7zkvVrHAJ3ga8E9z68HA/u6PveFSCfoioKBxIYS6459DsQJjhF0gu72JDV+rwflajwH4gQlx++NINMJvhGUnRDDjzeDPgK7nUv3+5bgxuBX3W8F9w6wUL++OMHXQ6zSTlByHb0d9McJuv2WtxMcKjjBDxOc4CV/hWME0Am+E9zz/G4wsK/rc1+IdIKuKBhIbCix7tjnQZzgCEEn6G5PUuP3blCuxvMgTlBy/N4LMp3ge0HZCTH8eD/oI7DbuXS/HwhuDH7V/UFw7wAL9euLE3w3xCrtBCXX0YdBf5yg2295O0Gh36v8szex34F0ZH9fUfB3C8vNCX4U3PP8cTCwr+tzX4h0gq4oGEhsKLHu2MUQJ9g0KOcEPxIcv4+DcjUWQ5yg5Ph9EmQ6wU+CshNi+PFp0Edgt3Ppfj8T3Bj8qvuz4N4BFurXFyf4cYhV2glKrqPPg/44Qbff8naC9YJyE3z9oNwE30BujB3BX6QvNyf4RXDP85fBwL6uz30h0gm6omAgsaHEumMPgjjBhkE5J/iF4Ph9GZSrcRDECUqO31dBphP8Kig7IYYfXwd9BHY7l+73G8GNwa+6vwnuHWChfn1xgl+GWKWdoOQ6+jbojxN0+y1vJ1grKDfB1w7KTfB15MbYqRv0Z1IJyKwLoxP8Lrjn+ftgYF/X574Q6QRdUTCQ2FBi3bFLIU6wblDOCX4nOH7fB+VqLIU4Qcnx+yHIdII/BGUnxPDjx6CPwG7n0v3+JLgx+FX3T8G9AyzUry9O8PsQq7QTlFxHPwf9cYJuv+XtBKsF5Sb46kG5Cb6G3Bg7NYP+TCpC+5PRCf4S3PP8azCwr+tzX4h0gq4oGEhsKLHu2IMhTrBmUM4J/iI4fr8G5WocDHGCkuO3Msh0giuDshNi+PFb0Edgt3Ppfn8X3Bj8qvv34N4BFurXFyf4a4hV2glKrqM/gv44Qbff8naCaUG5Cb5yUG6CryI3xk7VoD+TitD+ZHSCq4J7nlcHA/u6PveFSCfoioKBxIYS6459AcQJVg3KOcFVguO3OihX4wUQJyg5fmuCTCe4Jig7IYYfa4M+ArudS/e7TnBj8KvudcG9AyzUry9OcHWIVdoJSq6j9UF/nKDbb3k7wdSg3ARfISg3wVeUG2OnUtCfSUVofzI6wQ3BPc8bg4F9XZ/7QqQTdEXBQGJDiXXHHgZxgpWCck5wg+D4bQzK1TgM4gQlx29TkOkENwVlJ8TwY3PQR2C3c+l+twhuDH7VvSW4d4CF+vXFCW4MsUo7Qcl1tDXojxN0+y1vJxgIyk3wSUG5CT5ZboydlKA/k0pAZl0YneC24J7n7cHAvq7PfSHSCbqiYCCxocS6Y4+AOMGUoJwT3CY4ftuDcjWOgDhByfHbEWQ6wR1B2Qkx/NgZ9BHY7Vy6312CG4Nfde8K7h1goX59cYLbQ6zSTlByHe0O+uME3X7LzQmGJuWdLeUm5V0t5bbZ3S3lTExJkOcE/9wQ3O0iPbCv63NfiHSCrigYSGwose7Yo+LdCRo26FidoLs9SY1fUrrceh0FcYKS45ecznSCyemyE2L4kZLuI7DbuXS/qYIbg191p6bvHWChfn1xgkkhVmknKLmOKqT74wTdfsMTf73AvpO8/tGP/oWgfpqYfvGAfkmpu/yltvyxtvyutvy6tvyitvy0tvyotny/tvwfbfk2bflsbfkcbflcbfk8bblIWy7Wlgdqy4NCyxXV2FRSkaaisooqKqqqqKaievoeR105NL6BUK7RXgf8c4qJfhP9JvpN9JvoN9Fvot9Ev4l+E/0m+k30m+g30W+i30S/iX4T/Sb6TfSb6PfA9Cv9XYsfZx1IM+5sGf+MuwCMuwGMQqfy+sqYBGBMBjCmABiFLjL0lVHs4kUfGSsCGCsBGIVuf+Iro9htVXxkrAJgrApgFLoxo6+MYjd89JGxBoCxJoBR6JbxvjKK3YreR8Y6AMa6AEahH7PylVHsR7J8ZGwAYGwIYBT6mV1fGcV+vtdHxiYAxqYAxqHV459xGIBxOIBxBIBxJIBxFIBxNIBxDIBxLIBxHIBxPIBxAoBxIoBxEoBxMoBxCoDxQgDjVADjRQDGaQDG6QDGGQDGmQDGWQDG2QDGOQDGiwGMcwGMlwAY5wEYLwUwzgcwLgAwLgQwXgZgXARgvBzAuBjAuATAuBTAuAzAuBzAeAWAcQWA8UoA41UAxqsBjNcAGFfXjn/GNQDGtQDGdQDG9QDGDQDGjQDGTQDGzQDGLQDGrQDGbQDG7QDGHQDGnQDGXQDG3QDGQJ34Z0wCMCYDGFMAjKkAxgoAxooAxkoAxjQAY2UAYxUAY1UAYzUAY3UAYw0AY00AYy0AY20AYx0AY10AYz0AY30AYwMAY0MAYyMAY2MAYxMAY1MAYzMAY3MAYwsA433N45/xfgDjAwDGBwGMDwEYHwYwPgJgfBTA+BiA8XEA4xMAxicBjE8BGJ8GMD4DYHwWwPgcgPF5AOMLAMYXAYwvARhfBjC+AmB8FcD4GoDxdQDjGwDGNwGMbwEY3wYwvgNgfBfA+B6A8X0A4wcAxg8BjB8BGD8GMH4CYPwUwPgZgPFzAOMXAMYvAYxfARi/BjB+A2D8FsD4HYDxewDjDwDGHwGMPwEYfwYw/gJg/BXAuBLA+BuA8XcA4x8AxlUAxtUAxjUAxrUAxnUAxvUAxg0Axo0Axk0Axs0Axi0Axq0Axm0Axu0Axh0Axp0Axl0Axt0AxkCL+GdMAjAmAxhTAIypAMYKAMaKAMZKAMY0AGNlAGMVAGNVAGM1AGN1AGMNAGNNAGMtAGNtAGMdAGNdAGM9AGN9AGMDAGNDAGMjAGNjAGMTAGNTAGMzAGNzAGMLAGNLAGMQwJgOYMwAMLYCMGYCGFsDGNsAGNsCGNsBGNsDGDsAGDsCGDsBGDsDGLsAGLsCGLMAjA6AMRvAmANgzAUw5gEY8wGM3QCMBQDGQgBjdwBjDwBjTwBjLwBjbwBjHwBjXwBjPwDjz/Xin/EXAOOvAMaVAMbfAIy/Axj/ADCuAjCuBjCuATCuBTCuAzCuBzBuADBuBDBuAjBuBjBuATBuBTBuAzBuBzDuADDuBDDuAjDuBjAG6sc/YxKAMRnAmAJgTAUwVgAwVgQwVgIwpgEYKwMYqwAYqwIYqwEYqwMYawAYawIYawEYawMY6wAY6wIY6wEY6wMYGwAYGwIYGwEYGwMYmwAYmwIYmwEYmwMYWwAYWwIYgwDGdABjBoCxFYAxE8DYGsDYBsDYFsDYDsDYHsDYAcDYEcDYCcDYGcDYBcDYFcCYBWB0AIzZAMYcAGMugDEPwJgPYOwGYCwAMBYCGLsDGHsAGHsCGHsBGHsDGPsAGPsCGPsBGA8CMB4MYDwEwHgogPEwAOPhAMYjAIxHAhiPAjAeDWA8BsB4LIDxOADj8QDG/gDGEwCMAwCMJwIYTwIwngxgPAXAeCqA8TQA4+kAxjMAjGcCGM8CMJ4NYDwHwHgugPE8AGMRgLEYwDgQwDgIwFgCYCwFMJ4PYBwMYBwCYLwAwDgUwDgMwDgcwDgCwDgSwDgKwDgawDgGwDgWwDgOwDgewDgBwDgRwDgJwDgZwDgFwHghgHEqgPEiAOM0AON0AOMMAONMAOMsAONsAOMcAOPFAMa5AMZLAIzzAIyXAhjnAxgXABgXAhgvAzAuAjBeDmBcDGBcAmBcCmBcBmBcDmC8AsC4wgdG/SHSd7aPfWcVZCVrYxvus0Z6IFBTRS0VtVXUUVFXRT0V9VU0UNFQRSMVjVU0UdFURTMVzVW0UNFSRVBFuooMFa1UZKporaKNirYq2qlor6KDio4qOqnorKKLiq4qslQ4KrJV5KjIVZGnIl9FNxUFKgpVdFfRQ0VPFb1U9FbRR0VfFf1UHKTiYBWHqDhUxWEqDldxhIojVRyl4mgVx6g4Nn3PGByXHhqUlNCzOyhpEW01DW21DG21DW11DG11DW31DG31DW0NDG0NDW2NDG2NDW1NDG1NDW3NDG3NDW0tDG0tDW1BQ1u6oS3D0NbK0JZpaGttaGtjaGtraGtnaGtvaOtgaOtoaOtkaOtsaOtiaOtqaMsytDmGtmxDW46hLdfQlmdoyze0dTO0FRjaCg1t3Q1tPQxtPQ1tvQxtvQ1tfQxtfQ1t/QxtBxnaDja0HWJoO9TQdpih7XBD2xGGtiMNbUcZ2o42tB1jaDvW0OYeEIOBfR/hyaNv6DknKz83t6RbdomT4xRlZRcWF+Rl5eYV5xc4BU5eQd6g7IKcnJKC3IJuhcWF3bIKndycEqc0rzCnNDQdLaguN7m7x2uhvrL8rHmhYM01ITVfJlhzLUjNiwRrrg2p+XLBmutAal4sWHNdSM1LBGuuB6l5qWDN9SE1LxOsuQGk5uWCNTeE1HyFYM2NIDWvEKy5MaTmKwVrbgKp+SrBmptCar5asOZmkJqvEay5OaTm1bXlam4BqXmNYM0tITWvFaw5CKl5nWDN6ZCa1wvWnAGpeYNgza0gNW8UrDkTUvMmwZpbQ2reLFhzG0jNWwRrbgupeatgze0gNW8TrLk9pObtgjV3gNS8Q7DmjpCadwrW3AlS8y7BmjtDat4tWHMXSM2BOnI1d4XUnCRYcxak5mTBmh1IzSmCNWdDak4VrDkHUnMFwZpzITVXFKw5D1JzJcGa8yE1pwnW3A1Sc2XBmgsgNVcRrLkQUnNVwZq7Q2quJlhzD0jN1QVr7gmpuYZgzb0gNdcUrLk3pOZagjX3gdRcW7DmvpCa6wjW3A9Sc13Bmg+C1FxPsOaDITXXF6z5EEjNDQRrPhRSc0PBmg+D1NxIsObDITU3Fqz5CEjNTQRrPhJSc1PBmo+C1NxMsOajITU3F6z5GEjNLQRrPlaw5gqqj2pavfojNWIMsmwfzp4nof37z97E9htHdnsUXM9+3CjFCS/o6/v49D3P/d3npMDei+TdF76KaOtvuHD+/+KGEusBYUw7fzYUsXWx57HPBm1Zc3aoZuf4dLnx6y93EHT8WhfJwutCcvxOMPRVnDVwUJ5TnD+om1NSlFcwcGBhjuNkF+UX5RdnF5SWFOc5BXkFqs+BRdkF6u2yiwY6JVlF+SXuJFI1sOf4EPlIEh6DEwQnP513QLqPwG7n0v2eKLgx+FX3iel7B1ioXyOrxMHEZZXaYcP9Sq6jk4Q3/PCE7vbrrqbydIINBSf4RoITvOQnDU2ATvDk0P56SqQTPNngBE8pBydI2FBi3bHHQZxgE0EneLLggfEUQSc4DuIEJcfvVKgTPNUnJ3hauo/Ap/ngBE+Pcyfo1n06xAmeEmKVdoKS6+gMn5zgGQfACdYVnODrCU7wkt8hNwA6wTND++tZkU7wTIMTPKscnCBhQ4l1x54AcYINBJ3gmYIHxrMEneAEiBOUHL+zoU7wbJ+c4DnpPgKf44MTPDfOnaBb97kQJ3hWiFXaCUquo/N8coLnHQAnWFNwgq8lOMFLnh1cB+gEi0L7a3GkEywyOMHicnCChA0l1h17EsQJ1hF0gkWCB8ZiQSc4CeIEJcdvINQJDvTJCQ5K9xF4kA9OsCTOnaBbdwnECRaHWKWdoOQ6KvXJCZYeACdYVXCCryY4wUte91kD6ATPD+2vgyOd4PkGJzi4HJwgYUOJdceeAnGCNQSd4PmCB8bBgk5wCsQJSo7fEKgTHOKTE7wg3UfgC3xwgkPj3Am6dQ+FOMHBIVZpJyi5job55ASHHQAnWElwgk8TnOAl7+hTBegEh4f21xGRTnC4wQmOKAcnSNhQYt2xp0KcYBVBJzhc8MA4QtAJToU4QcnxGwl1giN9coKj0n0EHuWDExwd507QrXs0xAmOCLFKO0HJdTTGJyc45gA4wRTBCT5VcIKXvFdrRaATHBvaX8dFOsGxBic4rhycIGFDiXXHngZxghUFneBYwQPjOEEnOA3iBCXHbzzUCY73yQlOSPcReIIPTnBinDtBt+6JECc4LsQq7QQl19Ekn5zgpAPgBIV+1eTP3gKCE7zkr3AkA53g5ND+OiXSCU42OMEp5eAECRtKrDv2DIgTTBZ0gpMFD4xTBJ3gDIgTlBy/C6FO8EKfnODUdB+Bp/rgBC+Kcyfo1n0RxAlOCbFKO0HJdTTNJyc47QA4we2CE7zY70A6sr+vKPi7heXmBKeH9tcZkU5wusEJzigHJ0jYUGLdsWdBnOCu2nJOcLrggXGGoBOcBXGCkuM3E+oEZ/rkBGel+wg8ywcnODvOnaBb92yIE5wRYpV2gpLraI5PTnDOAXCCmwUn+C2CE/xWQSe4DegELw7tr3MjneDFBic4txycIGFDiXnHhjjBbYJO8GLBA+NcQSc4B+IEJcfvEqgTvMQnJzgv3UfgeT44wUvj3Am6dV8KcYJzQ6zSTlByHc33yQnOPwBOcL3gBL9BcILfKOgENwGd4ILQ/row0gkuMDjBheXgBAkbSswHH4gT3CToBBcIHhgXCjrBuRAnKDl+l0Gd4GU+OcFF6T4CL/LBCV4e507QrftyiBNcGGKVdoKS62ixT05w8QFwgqsFJ/g1ghP8WkEnuA7oBJeE9telkU5wicEJLi0HJ0jYUGLdsedBnOA6QSe4RPDAuFTQCc6DOEHJ8VsGdYLLfHKCy9N9BF7ugxO8Is6doFv3FRAnuDTEKu0EJdfRCp+c4IoD4ASvrC43wV9VXW6Cv7q63PZ/TXV/JhWh/cnoBK8M7a9XRTrBKw1O8KpycIKEDSXmD/shTvCa6nJO8ErBA+NVgk5wPsQJSo7f1VAneLVPTvCadB+Br/HBCf4jzp2gW/c/IE7wqhCrtBOUXEfX+uQErz0ATnCZ4AS/XHCCv0LQCa4AOsHrQvvr9ZFO8DqDE7y+HJwgYUOJ+QsJiBNcIegErxM8MF4v6AQXQpyg5PjdAHWCN/jkBG9M9xH4Rh+c4D/j3Am6df8T4gSvD7FKO0HJdXSTT07wpgPgBC8XnOAXC07wSwSd4FKgE7w5tL/eEukEbzY4wVvKwQkSNpRYd+xFECe4VNAJ3ix4YLxF0AkugjhByfH7F9QJ/ssnJ3hruo/At/rgBG+Lcyfo1n0bxAneEmKVdoKS6+h2n5zg7QfACS4QnOAXCk7wlwk6wUVAJ3hHaH+9M9IJ3mFwgneWgxMkbCgxnwAMcYKLBJ3gHYIHxjsFneBiiBOUHL9/Q53gv31ygnel+wh8lw9O8D9x7gTduv8DcYJ3hlilnaDkOrrbJyd4d8gJusv1AvtO8vpHP/oXgu7yVdryUm15obY8V1ueoS1P0ZbHacsjtOXB2nKxtnyWtnyKttxfW66oLVfSltO05crachVtuaq2XE1brh5avkc936vivyruU3G/igdUPKjiofQ9jrpyaHz/2lZN9jrgz6ST6DfRb6LfRL+JfhP9JvpN9JvoN9Fvot9Ev4l+E/0m+k30m+g30W+i30S/iX4PXL/S37WUBOOfcWfL+GfcBWDcDWAMALbHJABjMoAxBcCYCmCsAGCsCGCsBGBMAzBWBjBWATBWBTBWAzBWBzDWADDWBDDWAjDWBjDWATDWBTDWAzDWBzA2ADA2BDA2AjA2BjA2ATA2BTAOrR7/jMMAjMMBjCMAjCMBjKMAjKMBjGMAjGMBjOMAjOMBjBMAjBMBjJMAjJMBjFMAjBcCGKcCGC8CME4DME4HMM4AMM4EMM4CMM4GMM4BMF4MYJwLYLwEwDgPwHgpgHE+gHEBgHEhgPEyAOMiAOPlAMbFAMYlAMalAMZlAMblAMYrAIwrAIxXAhivAjBeDWC8BsC4unb8M64BMK4FMK4DMK4HMG4AMG4EMG4CMG4GMG4BMG4FMG4DMG4HMO4AMO4EMO4CMO4GMAbqxD9jEoAxGcCYAmBMBTBWADBWBDBWAjCmARgrAxirABirAhirARirAxhrABhrAhhrARhrAxjrABjrAhjrARjrAxgbABgbAhgbARgbAxibABibAhibARibAxhbABjvax7/jPcDGB8AMD4IYHwIwPgwgPERAOOjAMbHAIyPAxifADA+CWB8CsD4NIDxGQDjswDG5wCMzwMYXwAwvghgfAnA+DKA8RUA46sAxtcAjK8DGN8AML4JYHwLwPg2gPEdAOO7AMb3AIzvAxg/ADB+CGD8CMD4MYDxEwDjpwDGzwCMnwMYvwAwfglg/ArA+DWA8RsA47cAxu8AjN8DGH8AMP4IYPwJwPgzgPEXAOOvAMaVAMbfAIy/Axj/ADCuAjCuBjCuATCuBTCuAzCuBzBuADBuBDBuAjBuBjBuATBuBTBuAzBuBzDuADDuBDDuAjDuBjAGWsQ/YxKAMRnAmAJgTAUwVgAwVgQwVgIwpgEYKwMYqwAYqwIYqwEYqwMYawAYawIYawEYawMY6wAY6wIY6wEY6wMYGwAYGwIYGwEYGwMYmwAYmwIYmwEYmwMYWwAYWwIYgwDGdABjBoCxFYAxE8DYGsDYBsDYFsDYDsDYHsDYAcDYEcDYCcDYGcDYBcDYFcCYBWB0AIzZAMYcAGMugDEPwJgPYOwGYCwAMBYCGLsDGHsAGHsCGHsBGHsDGPsAGPsCGPsBGH+uF/+MvwAYfwUwrgQw/gZg/B3A+AeAcRWAcTWAcQ2AcS2AcR2AcT2AcQOAcSOAcROAcTOAcQuAcSuAcRuAcTuAcQeAcSeAcReAcTeAMVA//hmTAIzJAMYUAGMqgLECgLEigLESgDENwFgZwFgFwFgVwFgNwFgdwFgDwFgTwFgLwFgbwFgHwFgXwFgPwFgfwNgAwNgQwNgIwNgYwNgEwNgUwNgMwNgcwNgCwNgSwBgEMKYDGDMAjK0AjJkAxtYAxjYAxrYAxnYAxvYAxg4Axo4Axk4Axs4Axi4Axq4AxiwAowNgzAYw5gAYcwGMeQDGfABjNwBjAYCxEMDYHcDYA8DYE8DYC8DYG8DYB8DYF8DYD8B4EIDxYADjIQDGQwGMhwEYDwcwHgFgPBLAeBSA8WgA4zEAxmMBjMcBGI8HMPYHMJ4AYBwAYDwRwHgSgPFkAOMpAMZTAYynARhPBzCeAWA8E8B4FoDxbADjOQDGcwGM5wEYiwCMxQDGgQDGQQDGEgBjKYDxfADjYADjEADjBQDGoQDGYQDG4QDGEQDGkQDGUQDG0QDGMQDGsQDGcQDG8QDGCQDGiQDGSQDGyQDGKQDGCwGMUwGMFwEYpwEYpwMYZwAYZwIYZwEYZwMY5wAYLwYwzgUwXgJgnAdgvBTAOB/AuADAuBDAeBmAcRGA8XIA42IA4xIA41IA4zIA43IA4xUAxhU+MOoPkb6zfew7a2BWsja24T4fTg8EHlHxqIrHVDyu4gkVT6p4SsXTKp5R8ayK51Q8r+IFFS+qeEnFyypeUfGqitdUvK7iDRVvqnhLxdsq3lHxror3VLyv4gMVH6r4SMXHKj5R8amKz1R8ruILFV+q+ErF1yq+UfGtiu9UfK/iBxU/qvhJxc8qflHxq4qVKn5T8buKP1SsUrFaxRoVa1WsU7FexQYVG1VsSt8zBpvTQ4OSEnp2ByUtou0RQ9ujhrbHDG2PG9qeMLQ9aWh7ytD2tKHtGUPbs4a25wxtzxvaXjC0vWhoe8nQ9rKh7RVD26uGttcMba8b2t4wtL1paHvL0Pa2oe0dQ9u7hrb3DG3vG9o+MLR9aGj7yND2saHtE0Pbp4a2zwxtnxvavjC0fWlo+8rQ9rWh7RtD27eGtu8Mbd8b2n4wtP1oaPvJ0Pazoe0XQ9uvhraVhrbfDG2/G9r+MLStMrStNrStMbStNbStM7StN7RtMLRtNLRtMrS5B8RgYN9HePLoG3rOycrPzS3pll3i5DhFWdmFxQV5Wbl5xfkFToGTV5A3KLsgJ6ekILegW2FxYbesQic3p8QpzSvMKQ1NR/c1l5vc3eO1UF9ZftZ8v2DNj0BqfkCw5kchNT8oWPNjkJofEqz5cUjNDwvW/ASk5kcEa34SUvOjgjU/Ban5McGan4bU/Lhgzc9Aan5CsOZnITU/KVjzc5CanxKs+XlIzU8L1vwCpOZnBGt+EVLzs4I1vwSp+TnBml+G1Py8YM2vQGp+QbDmVyE1vyhY82uQml8SrPl1SM0vC9b8BqTmVwRrfhNS86uCNb8Fqfk1wZrfhtT8umDN70BqfkOw5nchNb8pWPN7kJrfEqz5fUjNbwvW/AGk5ncEa/4QUvO7gjV/BKn5PcGaP4bU/L5gzZ9Aav5AsOZPITV/KFjzZ5CaPxKs+XNIzR8L1vwFpOZPBGv+ElLzp4I1fwWp+TPBmr+G1Py5YM3fQGr+QrDmbyE1fylY83eQmr8SrPl7SM1fC9b8A6TmbwRr/hFS87eCNf8Eqfk7wZp/htT8vWDNv0Bq/kGw5l8hNf8oWPNKSM0/Cdb8G6TmnwVr/h1S8y+CNf8BqflXwZpXQWpeKVjzakjNvwnWvAZS8++CNa+F1PyHYM3rIDWvEqx5PaTm1YI1b4DUvEaw5o2QmtcK1rxJsOYKqo9qWr36IzViDLJsH86eJ6H9+8/exPYbR3Z7FFzPftwoxQkv6Ot7S/qe563uc1Jg70Xy7gtfRbRtNVw4/39xQ4n1gLC0nT8biti62PPYZ4O2rDk7VLOzJV1u/LbKHQQdv9ZFsvC6kBy/bYa+irMGDspzivMHdXNKivIKBg4szHGc7KL8ovzi7ILSkuI8pyCvQPU5sCi7QL1ddtFApySrKL/EnUSqBvYcHyIfScJjsE1w8tN5t6f7COx2Lt3vDsGNwa+6d6TvHWChfo2sEgcTl1Vqhw33K7mOdgpv+OEJ3e3XXU3l6QRXCk7wvwlO8JKfNPwBdIK7Qvvr7kgnuMvgBHeXgxMkbCix7tjLIU7wD0EnuEvwwLhb0AkuhzhByfELZDCdoM6dFeND503K8BHY7Vy63+SM+HaCbt3JGXsHWKhfX5ygezBxWaWdoOQ6ShHe8MMTuttveTvBnwQn+J8FJ3jJ75B/BTrB1ND+WiEjsK/rc1+IdIKuKBhIbCix7tgrIE7wV0EnmCp4YKwgd2B0VkCcoOT4VYQ6wYo+OcFKGT4CV/LBCabFuRN0607L2DvAQv364gQrhFilnaDkOqrskxOsfACc4HeCE/z3ghO85NnBPwKdYJXQ/lo10glWMTjBquXgBAkbSqw79lUQJ/ijoBOsInhgrCroBK+COEHJ8asGdYLVfHKC1TN8BK7ugxOsEedO0K27RsbeARbq1xcnWDXEKu0EJddRTZ+cYM0D4AS/Epzgvxac4CWv+/wW6ARrhfbX2pFOsJbBCdYuBydI2FBi3bGvgTjBbwWdYC3BA2NtQSd4DcQJSo5fHagTrOOTE6yb4SNwXR+cYL04d4Ju3fUy9g6wUL++OMHaIVZpJyi5jur75ATrHwAn+JngBP+54AQveUefL4FOsEFof20Y6QQbGJxgw3JwgoQNJdYd+1qIE/xS0Ak2EDwwNhR0gtdCnKDk+DWCOsFGPjnBxhk+Ajf2wQk2iXMn6NbdJGPvAAv164sTbBhilXaCkuuoqU9OsOkBcIIfCU7wHwtO8JL3av0U6ASbhfbX5pFOsJnBCTYvBydI2FBi3bGvhzjBTwWdYDPBA2NzQSd4PcQJSo5fC6gTbOGTE2yZ4SNwSx+cYDDOnaBbdzBj7wAL9euLE2weYpV2gpLrKN0nJ5h+AJzge4IT/PuCE7zkr3B8CHSCGaH9tVWkE8wwOMFW5eAECRtKrDv2jRAn+KGgE8wQPDC2EnSCN0KcoOT4ZUKdYKZPTrB1ho/ArX1wgm3i3Am6dbfJ2DvAQv364gRbhVilnaDkOmrrkxNsewCc4FuCE/zbghO85O8rvgt0gu1C+2v7SCfYzuAE25eDEyRsKLHu2DdBnOC7gk6wneCBsb2gE7wJ4gQlx68D1Al28MkJdszwEbijD06wU5w7QbfuThl7B1ioX1+cYPsQq7QTlFxHnX1ygp0PgBN8TXCCf11wgn9D0Am+CXSCXUL7a9dIJ9jF4AS7loMTJGwose7Yt0Cc4JuCTrCL4IGxq6ATvAXiBCXHLwvqBLN8coJOho/Ajg9OMDvOnaBbd3bG3gEW6tcXJ9g1xCrtBCXXUY5PTjDnADjBlwQn+JcFJ/hXBJ3gq0AnmBvaX/MinWCuwQnmlYMTJGwose7Yt0Kc4KuCTjBX8MCYJ+gEb4U4Qcnxy4c6wXyfnGC3DB+Bu/ngBAvi3Am6dRdk7B1goX59cYJ5IVZpJyi5jgp9coKFB8AJPic4wT8vOMG/IOgEXwQ6we6h/bVHpBPsbnCCPcrBCRI2lFh37NshTvBFQSfYXfDA2EPQCd4OcYKS49cT6gR7+uQEe2X4CNzLByfYO86doFt374y9AyzUry9OsEeIVdoJSq6jPj45wT4HwAk+JTjBPy04wT8j6ASfBTrBvqH9tV+kE+xrcIL9ysEJEjaUWHfsOyFO8FlBJ9hX8MDYT9AJ3glxgpLjdxDUCR7kkxM8OMNH4IN9cIKHxLkTdOs+JGPvAAv164sT7BdilXaCkuvoUJ+c4KEHwAk+JjjBPy44wT8h6ASfBDrBw0L76+GRTvAwgxM8vBycIGFDiXXHvgviBJ8UdIKHCR4YDxd0gndBnKDk+B0BdYJH+OQEj8zwEfhIH5zgUXHuBN26j8rYO8BC/friBA8PsUo7Qcl1dLRPTvDoA+AEHxKc4B8WnOAfEXSCjwKd4DGh/fXYSCd4jMEJHlsOTpCwocS6Y98NcYKPCjrBYwQPjMcKOsG7IU5QcvyOgzrB43xygsdn+Ah8vA9OsH+cO0G37v4ZewdYqF9fnOCxIVZpJyi5jk7wyQmecACc4H2CE/z9ghP8A4JO8EGgExwQ2l9PjHSCAwxO8MRycIKEDSXWHfteiBN8UNAJDhA8MJ4o6ATvhThByfE7CeoET/LJCZ6c4SPwyT44wVPi3Am6dZ+SsXeAhfr1xQmeGGKVdoKS6+hUn5zgqSEn6C7XC+w7yesf/ehfCOqniekXD+iXlOo3GnGX22vLrbTl5tpyQ225trZcVVuuoC3vTt+7vFVbvkdbvldb/q+2fJ+2fL+2/IC2/KC2/FBo+TT1/qerOEPFmSrOUnG2inNUnJuxx1FXDo3vX9tqeMOKePQVWp+JfhP9JvpN9JvoN9Fvot9Ev4l+E/0m+k30m+g30W+i30S/iX4T/Sb6TfSb6Dc++pX+rqUkGP+MO1vGP+MuAONuAGMAsD0mARiTAYwpAMZUAGMFAGNFAGMlAGMagLEygLEKgLEqgLEagLE6gLEGgLEmgLEWgLE2gLEOgLEugLEegLE+gLEBgLEhgLERgLExgLEJgLEpgHFo9fhnHAZgHA5gHAFgHAlgHAVgHA1gHANgHAtgHAdgHA9gnABgnAhgnARgnAxgnAJgvBDAOBXAeBGAcRqAcTqAcQaAcSaAcRaAcTaAcQ6A8WIA41wA4yUAxnkAxksBjPMBjAsAjAsBjJcBGBcBGC8HMC4GMC4BMC4FMC4DMC4HMF4BYFwBYLwSwHgVgPFqAOM1AMbVteOfcQ2AcS2AcR2AcT2AcQOAcSOAcROAcTOAcQuAcSuAcRuAcTuAcQeAcSeAcReAcTeAMVAn/hmTAIzJAMYUAGMqgLECgLEigLESgDENwFgZwFgFwFgVwFgNwFgdwFgDwFgTwFgLwFgbwFgHwFgXwFgPwFgfwNgAwNgQwNgIwNgYwNgEwNgUwNgMwNgcwNgCwHhf8/hnvB/A+ACA8UEA40MAxocBjI8AGB8FMD4GYHwcwPgEgPFJAONTAManAYzPABifBTA+B2B8HsD4AoDxRQDjSwDGlwGMrwAYXwUwvgZgfB3A+AaA8U0A41sAxrcBjO8AGN8FML4HYHwfwPgBgPFDAONHAMaPAYyfABg/BTB+BmD8HMD4BYDxSwDjVwDGrwGM3wAYvwUwfgdg/B7A+AOA8UcA408Axp8BjL8AGH8FMK4EMP4GYPwdwPgHgHEVgHE1gHENgHEtgHEdgHE9gHEDgHEjgHETgHEzgHELgHErgHEbgHE7gHEHgHEngHEXgHE3gDHQIv4ZkwCMyQDGFABjKoCxAoCxIoCxEoAxDcBYGcBYBcBYFcBYDcBYHcBYA8BYE8BYC8BYG8BYB8BYF8BYD8BYH8DYAMDYEMDYCMDYGMDYBMDYFMDYDMDYHMDYAsDYEsAYBDCmAxgzAIytAIyZAMbWAMY2AMa2AMZ2AMb2AMYOAMaOAMZOAMbOAMYuAMauAMYsAKMDYMwGMOYAGHMBjHkAxnwAYzcAYwGAsRDA2B3A2APA2BPA2AvA2BvA2AfA2BfA2A/A+HO9+Gf8BcD4K4BxJYDxNwDj7wDGPwCMqwCMqwGMawCMawGM6wCM6wGMGwCMGwGMmwCMmwGMWwCMWwGM2wCM2wGMOwCMOwGMuwCMuwGMgfrxz5gEYEwGMKYAGFMBjBUAjBUBjJUAjGkAxsoAxioAxqoAxmoAxuoAxhoAxpoAxloAxtoAxjoAxroAxnoAxvoAxgYAxoYAxkYAxsYAxiYAxqYAxmYAxuYAxhYAxpYAxiCAMR3AmAFgbAVgzAQwtgYwtgEwtgUwtgMwtgcwdgAwdgQwdgIwdgYwdgEwdgUwZgEYHQBjNoAxB8CYC2DMAzDmAxi7ARgLAIyFAMbuAMYeAMaeAMZeAMbeAMY+AMa+AMZ+AMaDAIwHAxgPATAeCmA8DMB4OIDxCADjkQDGowCMRwMYjwEwHgtgPA7AeDyAsT+A8QQA4wAA44kAxpMAjCcDGE8BMJ4KYDwNwHg6gPEMAOOZAMazAIxnAxjPATCeC2A8D8BYBGAsBjAOBDAOAjCWABhLAYznAxgHAxiHABgvADAOBTAOAzAOBzCOADCOBDCOAjCOBjCOATCOBTCOAzCOBzBOADBOBDBOAjBOBjBOATBeCGCcCmC8CMA4DcA4HcA4A8A4E8A4C8A4G8A4B8B4MYBxLoDxEgDjPADjpQDG+QDGBQDGhQDGywCMiwCMlwMYFwMYlwAYlwIYlwEYlwMYrwAwrvCBUX+I9J3tY99OVlayNrbhPs/LCASKVBSrGKhikIoSFaUqzlcxWMUQFReoGKpimIrhKkaoGKlilIrRKsaoGKtinIrxKiaomKhikorJKqaouFDFVBUXqZimYrqKGSpmqpilYraKOSouVjFXxSUq5qm4VMV8FQtULFRxmYpFKi5XsVjFEhVLVSxTsVzFFSpWqLhSxVUqrlZxjYp/qLhWxXUqrldxQ8aeMbgxIzQoKaFnd1DSItqKDG3FhraBhrZBhrYSQ1upoe18Q9tgQ9sQQ9sFhrahhrZhhrbhhrYRhraRhrZRhrbRhrYxhraxhrZxhrbxhrYJhraJhrZJhrbJhrYphrYLDW1TDW0XGdqmGdqmG9pmGNpmGtpmGdpmG9rmGNouNrTNNbRdYmibZ2i71NA239C2wNC20NB2maFtkaHtckPbYkPbEkPbUkPbMkPbckPbFYa2FYa2Kw1tVxnarja0XWNo+4eh7VpD23WGtusNbTcY2twDYjCw7yM59Nw39JyTlZ+bW9Itu8TJcYqysguLC/KycvOK8wucAievIG9QdkFOTklBbkG3wuLCblmFTm5OiVOaV5hTGpqP1jUXPOk0w5/JXbrm9YI1F0Fq3iBYczGk5o2CNQ+E1LxJsOZBkJo3C9ZcAql5i2DNpZCatwrWfD6k5m2CNQ+G1LxdsOYhkJp3CNZ8AaTmnYI1D4XUvEuw5mGQmncL1jwcUnOghVzNIyA1JwnWPBJSc7JgzaMgNacI1jwaUnOqYM1jIDVXEKx5LKTmioI1j4PUXEmw5vGQmtMEa54AqbmyYM0TITVXEax5EqTmqoI1T4bUXE2w5imQmqsL1nwhpOYagjVPhdRcU7DmiyA11xKseRqk5tqCNU+H1FxHsOYZkJrrCtY8E1JzPcGaZ0Fqri9Y82xIzQ0Ea54DqbmhYM0XQ2puJFjzXEjNjQVrvgRScxPBmudBam4qWPOlkJqbCdY8H1Jzc8GaF0BqbiFY80JIzS0Fa74MUnNQsOZFkJrTBWu+HFJzhmDNiyE1txKseQmk5kzBmpdCam4tWPMySM1tBGteDqm5rWDNV0BqbidY8wpIze0Fa74SUnMHwZqvgtTcUbDmqyE1dxKs+RpIzZ0Fa/4HpOYugjVfC6m5q2DN10FqzhKs+XpIzY5gzTcI1lxB9VFNq1d/pEaMQZbtw9nzJLR//9mb2H7j9ia4bgTXsx83SnHCC/r6/mfGnueb3Gf9Inn3ha8i2lxRMJDYUGI9INzXzp8NRWxd7Hnss0Fb1pwdqtn5Z4bc+N0kdxB0/FoXycLrQnL8bjb0VZw1cFCeU5w/qJtTUpRXMHBgYY7jZBflF+UXZxeUlhTnOQV5BarPgUXZBertsosGOiVZRfkl7iRSNbDn+BD5SBIeg5sFJz+d95YMH4HdzqX7/ZfgxuBX3f/K2DvAQv0aWSUOJi6r1A4b7ldyHd0qvOGHJ3S333T1XJ5OsIPgBN9RcIKX/KShM9AJ3hbaX2+PdIK3GZzg7eXgBAkbSqw79gMQJ9hZ0AneJnhgvF3QCT4AcYKS43cH1Ane4ZMTvDPDR+A7fXCC/45zJ+jW/e+MvQMs1K8vTvD2EKu0E5RcR3f55ATvOgBOsI3gBN9WcIKX/A65PdAJ/ie0v94d6QT/Y3CCd5eDEyRsKLHu2A9BnGB7QSf4H8ED492CTvAhiBOUHL97oE7wHp+c4L0ZPgLf64MT/G+cO0G37v9m7B1goX59cYJ3h1ilnaDkOrrPJyd43wFwghmCE3wrwQle8uzg1kAneH9of30g0gneb3CCD5SDEyRsKLHu2I9AnGBrQSd4v+CB8QFBJ/gIxAlKjt+DUCf4oE9O8KEMH4Ef8sEJPhznTtCt++GMvQMs1K8vTvCBEKu0E5RcR4/45AQfOQBOsIXgBN9ScIKXvO4zHegEHw3tr49FOsFHDU7wsXJwgoQNJdYd+zGIE0wXdIKPCh4YHxN0go9BnKDk+D0OdYKP++QEn8jwEfgJH5zgk3HuBN26n8zYO8BC/friBB8LsUo7Qcl19JRPTvCpA+AEmwhO8E0FJ3jJO/o0BzrBp0P76zORTvBpgxN8phycIGFDiXXHfgLiBJsLOsGnBQ+Mzwg6wScgTlBy/J6FOsFnfXKCz2X4CPycD07w+Th3gm7dz2fsHWChfn1xgs+EWKWdoOQ6esEnJ/jCAXCCDQQn+IaCE7zkvVobA53gi6H99aVIJ/iiwQm+VA5OkLChxPwnHsQJNhZ0gi8KHhhfEnSCT0GcoOT4vQx1gi/75ARfyfAR+BUfnOCrce4E3bpfzdg7wEL9+uIEXwqxSjtByXX0mk9O8LUD4ATrCE7wdQUneMlf4agPdIKvh/bXNyKd4OsGJ/hGOThBwoYS85+hECdYX9AJvi54YHxD0Ak+A3GCkuP3JtQJvumTE3wrw0fgt3xwgm/HuRN06347Y+8AC/XrixN8I8Qq7QQl19E7PjnBdw6AE6whOMHXFJzgJX9fsTbQCb4b2l/fi3SC7xqc4Hvl4AQJG0qsO/ZzECdYW9AJvit4YHxP0Ak+B3GCkuP3PtQJvu+TE/wgw0fgD3xwgh/GuRN06/4wY+8AC/XrixN8L8Qq7QQl19FHPjnBjw6AE6wiOMFXFZzgqwk6wepAJ/hxaH/9JNIJfmxwgp+UgxMkbCgxn/YBcYLVBZ3gx4IHxk8EneALECcoOX6fQp3gpz45wc8yfAT+zAcn+HmcO0G37s8z9g6wUL++OMFPQqzSTlByHX3hkxP84gA4wYqCE3wlwQk+TdAJVgY6wS9D++tXkU7wS4MT/KocnCBhQ4n51BSIE6ws6AS/FDwwfiXoBF+COEHJ8fsa6gS/9skJfpPhI/A3PjjBb+PcCbp1f5uxd4CF+vXFCX4VYpV2gpLr6DufnOB3B8AJJgtO8CmCE3yqoBOsAHSC34f21x8ineD3Bif4Qzk4QcKGEuuO/QrECVYQdILfCx4YfxB0gq9AnKDk+P0IdYI/+uQEf8rwEfgnH5zgz3HuBN26f87YO8BC/friBH8IsUo7Qcl19ItPTvCXA+AEdzWXm+B3N5eb4AOCTjAJ6AR/De2vKyOd4K8GJ7iyHJwgYUOJ+VIwiBNMEnSCvwoeGFcKOsHXIE5Qcvx+gzrB33xygr9n+Aj8uw9O8I84d4Ju3X9k7B1goX59cYIrQ6zSTlByHa3yyQmuOgBOcJvgBL9dcILf0Vxu+9/ZnOcEV4f21zWRTnC1wQmuKQcnSNhQYr5cDeIEdzaXc4KrBQ+MawSd4BsQJyg5fmuhTnCtT05wXYaPwOt8cILr49wJunWvz9g7wEL9+uIE14RYpZ2g5Dra4JMT3HAAnOAmwQl+s+AEv6W53Pa/FegEN4b2102RTnCjwQluKgcnSNhQYt2x34I4wa2CTnCj4IFxk6ATfAviBCXHbzPUCW72yQluyfAReIsPTnBrnDtBt+6tGXsHWKhfX5zgphCrtBOUXEfbfHKC2w6AE1wnOMGvF5zgNwg6wY1AJ7g9tL/uiHSC2w1OcEc5OEHChhLz7aEgTnCjoBPcLnhg3CHoBN+BOEHJ8dsJdYI7fXKCuzJ8BN7lgxPcHedO0K17d8beARbq1xcnuCPEKu0ERddRK3+coNtvemi5XmDfSV7/6Ef/QlA/TUy/eEC/pFS/0Yi7/J62/Ia2/JK2/Iy2/Ji2/IC2fLe2fLu2fJO2fJq2fLq2fIa2fKa2fJa2fLa2fI62fG54WY1XsooUFakqKqioqKKSirRWexx15dD4/rWthjesiEdfofWZ6DfRb6LfRL+JfhP9JvpN9JvoN9Fvot9Ev4l+E/0m+k30m+g30W+i30S/iX7jo1/p71pKgvHPuLNl/DPuAjDuBjAGANtjEoAxGcCYAmBMBTBWADBWBDBWAjCmARgrAxirABirAhirARirAxhrABhrAhhrARhrAxjrABjrAhjrARjrAxgbABgbAhgbARgbAxibABibAhiHVo9/xmEAxuEAxhEAxpEAxlEAxtEAxjEAxrEAxnEAxvEAxgkAxokAxkkAxskAxikAxgsBjFMBjBcBGKcBGKcDGGcAGGcCGGcBGGcDGOcAGC8GMM4FMF4CYJwHYLwUwDgfwLgAwLgQwHgZgHERgPFyAONiAOMSAONSAOMyAONyAOMVAMYVAMYrAYxXARivBjBeA2BcXTv+GdcAGNcCGNcBGNcDGDcAGDcCGDcBGDcDGLcAGLcCGLcBGLcDGHcAGHcCGHcBGHcDGAN14p8xCcCYDGBMATCmAhgrABgrAhgrARjTAIyVAYxVAIxVAYzVAIzVAYw1AIw1AYy1AIy1AYx1AIx1AYz1AIz1AYwNAIwNAYyNAIyNAYxNAIxNAYzNAIzNAYwtAIz3NY9/xvsBjA8AGB8EMD4EYHwYwPgIgPFRAONjAMbHAYxPABifBDA+BWB8GsD4DIDxWQDjcwDG5wGMLwAYXwQwvgRgfBnA+AqA8VUA42sAxtcBjG8AGN8EML4FYHwbwPgOgPFdAON7AMb3AYwfABg/BDB+BGD8GMD4CYDxUwDjZwDGzwGMXwAYvwQwfgVg/BrA+A2A8VsA43cAxu8BjD8AGH8EMP4EYPwZwPgLgPFXAONKAONvAMbfAYx/ABhXARhXAxjXABjXAhjXARjXAxg3ABg3Ahg3ARg3Axi3ABi3Ahi3ARi3Axh3ABh3Ahh3ARh3AxgDLeKfMQnAmAxgTAEwpgIYKwAYKwIYKwEY0wCMlQGMVQCMVQGM1QCM1QGMNQCMNQGMtQCMtQGMdQCMdQGM9QCM9QGMDQCMDQGMjQCMjQGMTQCMTQGMzQCMzQGMLQCMLQGMQQBjOoAxA8DYCsCYCWBsDWBsA2BsC2BsB2BsD2DsAGDsCGDsBGDsDGDsAmDsCmDMAjA6AMZsAGMOgDEXwJgHYMwHMHYDMBYAGAsBjN0BjD0AjD0BjL0AjL0BjH0AjH0BjP0AjD/Xi3/GXwCMvwIYVwIYfwMw/g5g/APAuArAuBrAuAbAuBbAuA7AuB7AuAHAuBHAuAnAuBnAuAXAuBXAuA3AuB3AuAPAuBPAuAvAuBvAGKgf/4xJAMZkAGMKgDEVwFgBwFgRwFgJwJgGYKwMYKwCYKwKYKwGYKwOYKwBYKwJYKwFYKwNYKwDYKwLYKwHYKwPYGwAYGwIYGwEYGwMYGwCYGwKYGwGYGwOYGwBYGwJYAwCGNMBjBkAxlYAxkwAY2sAYxsAY1sAYzsAY3sAYwcAY0cAYycAY2cAYxcAY1cAYxaA0QEwZgMYcwCMuQDGPABjPoCxG4CxAMBYCGDsDmDsAWDsCWDsBWDsDWDsA2DsC2DsB2A8CMB4MIDxEADjoQDGwwCMhwMYjwAwHglgPArAeDSA8RgA47EAxuMAjMcDGPsDGE8AMA4AMJ4IYDwJwHgygPEUAOOpAMbTAIynAxjPADCeCWA8C8B4NoDxHADjuQDG8wCMRQDGYgDjQADjIABjCYCxFMB4PoBxMIBxCIDxAgDjUADjMADjcADjCADjSADjKADjaADjGADjWADjOADjeADjBADjRADjJADjZADjFADjhQDGqQDGiwCM0wCM0wGMMwCMMwGMswCMswGMcwCMFwMY5wIYLwEwzgMwXgpgnA9gXABgXAhgvAzAuAjAeDmAcTGAcQmAcSmAcRmAcTmA8QoA4wofGPWHSN/ZPvbt5GYla2Mb7rNyq0CgioqqKqqpqK6ihoqaKmqpqK2ijoq6KuqpqK+igYqGKhqpaKyiiYqmKpqpaK6ihYqWKoIq0lVkqGilIlNFaxVtVLRV0U5FexUdVHRU0UlFZxVdVHRVkaXCUZGtIkdFroo8FfkquqkoUFGooruKHip6quiloreKPir6quin4iAVB6s4RMWhKg5TcbiKI1rtGYMjW4UGJSX07A5KWkRbFUNbVUNbNUNbdUNbDUNbTUNbLUNbbUNbHUNbXUNbPUNbfUNbA0NbQ0NbI0NbY0NbE0NbU0NbM0Nbc0NbC0NbS0Nb0NCWbmjLMLS1MrRlGtpaG9raGNraGtraGdraG9o6GNo6Gto6Gdo6G9q6GNq6GtqyDG2OoS3b0JZjaMs1tOUZ2vINbd0MbQWGtkJDW3dDWw9DW09DWy9DW29DWx9DW19DWz9D20GGtoMNbYcY2g41tB1maDvc0HaEoc09IAYD+z7Ck0ff0HNOVn5ubkm37BInxynKyi4sLsjLys0rzi9wCpy8grxB2QU5OSUFuQXdCosLu2UVOrk5JU5pXmFOaXiuk/tBYcc9Xgv1leVnzTmCNVeB1JwrWHNVSM15gjVXg9ScL1hzdUjN3QRrrgGpuUCw5pqQmgsFa64Fqbm7YM21ITX3EKy5DqTmnoI114XU3Euw5nqQmnsL1lwfUnMfwZobQGruK1hzQ0jN/QRrbgSp+We5H+N1GkNq/kWw5iaQmn8VrLkppOaVgjU3g9T8m2DNzSE1/y5YcwtIzX8I1twSUvMqwZqDkJpXC9acDql5jWDNGZCa1wrW3ApS8zrBmjMhNa8XrLk1pOYNgjW3gdS8UbDmtpCaNwnW3A5S82bBmttDat4iWHMHSM1bBWvuCKl5m2DNnSA1bxesuTOk5h2CNXeB1LxTsOaukJp3CdacBal5t2DNDqTmgNxJ6k42pOYkwZpzIDUnC9acC6k5RbDmPEjNqYI150NqriBYczdIzRUFay6A1FxJsOZCSM1pgjV3h9RcWbDmHpCaqwjW3BNSc1XBmntBaq4mWHNvSM3VBWvuA6m5hmDNfSE11xSsuR+k5lqCNR8Eqbm2YM0HQ2quI1jzIZCa6wrWfCik5nqCNR8Gqbm+YM2HQ2puIFjzEYI1V1B9VNPq1R+pEWOQZftw9jwJ7d9/9ia23ziy22OD+L4JixNe0Nf3Ua32PB/tPusXybsvfBXRdrThwvn/ixtKrAeE99r5s6GIrYs9j302aMuas0M1O0e1khu/o+UOgo5f6yJZeF1Ijt8xhr6KswYOynOK8wd1c0qK8goGDizMcZzsovyi/OLsgtKS4jynIK9A9TmwKLtAvV120UCnJKsov8SdRKoG9hwfIh9JwmNwjODkp/Me28pHYLdz6X6PE9wY/Kr7uFZ7B1ioXyOrxMHEZZXaYcP9Sq6j44U3/PCE7vabrp7L0wnWFJzgawlO8JKfNNQBOsH+of31hEgn2N/gBE8oBydI2FBi3bE/gDjBOoJOsL/ggfEEQSf4AcQJSo7fAKgTHOCTEzyxlY/AJ/rgBE+Kcyfo1n0SxAmeEGKVdoKS6+hkn5zgyQfACVYVnOCrCU7wkt8h1wA6wVNC++upkU7wFIMTPLUcnCBhQ4l1x/4I4gRrCDrBUwQPjKcKOsGPIE5QcvxOgzrB03xygqe38hH4dB+c4Blx7gTdus+AOMFTQ6zSTlByHZ3pkxM88wA4wUqCE3ya4AQveXZwFaATPCu0v54d6QTPMjjBs8vBCRI2lFh37E8gTrCKoBM8S/DAeLagE/wE4gQlx+8cqBM8xycneG4rH4HP9cEJnhfnTtCt+zyIEzw7xCrtBCXXUZFPTrDoADjBFMEJPlVwgpe87rMi0AkWh/bXgZFOsNjgBAeWgxMkbCix7tifQZxgRUEnWCx4YBwo6AQ/gzhByfEbBHWCg3xygiWtfAQu8cEJlsa5E3TrLoU4wYEhVmknKLmOzvfJCZ5/AJyg0B2S/uwtIDjBS97RJxnoBAeH9tchkU5wsMEJDikHJ0jYUGLdsb+AOMFkQSc4WPDAOETQCX4BcYKS43cB1Ale4JMTHNrKR+ChPjjBYXHuBN26h0Gc4JAQq7QTlFxHw31ygsMPgBPcLjjBi91T1pG9V6vgPVDLzQmOCO2vIyOd4AiDExxZDk6QsKHEumN/BXGCu+rJOcERggfGkYJO8CuIE5Qcv1FQJzjKJyc4upWPwKN9cIJj4twJunWPgTjBkSFWaScouY7G+uQExx4AJ7hZcILfIjjBS/4KxzagExwX2l/HRzrBcQYnOL4cnCBhQ4l1x/4G4gS3CTrBcYIHxvGCTvAbiBOUHL8JUCc4wScnOLGVj8ATfXCCk+LcCbp1T4I4wfEhVmknKLmOJvvkBCcfACe4XnCC3yA4wUv+vuImoBOcEtpfL4x0glMMTvDCcnCChA0l1h37O4gT3CToBKcIHhgvFHSC30GcoOT4TYU6wak+OcGLWvkIfJEPTnBanDtBt+5pECd4YYhV2glKrqPpPjnB6QfACa4WnODXCE7wawWd4DqgE5wR2l9nRjrBGQYnOLMcnCBhQ4l1x/4B4gTXCTrBGYIHxpmCTvAHiBOUHL9ZUCc4yycnOLuVj8CzfXCCc+LcCbp1z4E4wZkhVmknKLmOLvbJCV58AJzgb4IT/O+CE/wfgk5wFdAJzg3tr5dEOsG5Bid4STk4QcKGEuuO/RPECa4SdIJzBQ+Mlwg6wZ8gTlBy/OZBneA8n5zgpa18BL7UByc4P86doFv3fIgTvCTEKu0EJdfRAp+c4IID4AR/FpzgfxGc4H8VdIIrgU5wYWh/vSzSCS40OMHLysEJEjaUWHfsXyBOcKWgE1woeGC8TNAJ/gJxgpLjtwjqBBf55AQvb+Uj8OU+OMHFce4E3boXQ5zgZSFWaScouY6W+OQElxwAJ9i7hdwE36eF3ATft4Xc9t+vhT+TitD+ZHSCS0P767JIJ7jU4ASXlYMTJGwose7YKyFOsF8LOSe4VPDAuEzQCa6EOEHJ8VsOdYLLfXKCV7TyEfgKH5zgijh3gm7dKyBOcFmIVdoJSq6jK31yglceACfYXXCC7yE4wfcUdIK9gE7wqtD+enWkE7zK4ASvLgcnSNhQYt2xf4c4wV6CTvAqwQPj1YJO8HeIE5Qcv2ugTvAan5zgP1r5CPwPH5zgtXHuBN26r4U4watDrNJOUHIdXeeTE7zuADjBfMEJvpvgBF8g6AQLgU7w+tD+ekOkE7ze4ARvKAcnSNhQYt2xV0GcYKGgE7xe8MB4g6ATXAVxgpLjdyPUCd7okxP8Zysfgf/pgxO8Kc6doFv3TRAneEOIVdoJSq6jm31ygjcfACeYLTjB5whO8LmCTjAP6ARvCe2v/4p0grcYnOC/ysEJEjaUWHfsNRAnmCfoBG8RPDD+S9AJroE4QcnxuxXqBG/1yQne1spH4Nt8cIK3x7kTdOu+HeIE/xVilXaCkuvoDp+c4B0hJ+gu1wvsO8nrH/3oXwjqp4npFw/ol5TqNxpxly/UlsdryyO15SHa8kBt+Wxt+VRt+QRt+WhtOUlbTtaWU7TlVG25grZcUVuupC2nhZbvVM//VnGXiv+ouFvFPSruVfHfVnscdeXQ+P61rZrsdcCfSSfRb6LfRL+JfhP9JvpN9JvoN9Fvot9Ev4l+E/0m+k30m+g30W+i30S/iX4T/R64fqW/aykJxj/jzpbxz7gLwLgbwBgAbI9JAMZkAGMKgDEVwFgBwFgRwFgJwJgGYKwMYKwCYKwKYKwGYKwOYKwBYKwJYKwFYKwNYKwDYKwLYKwHYKwPYGwAYGwIYGwEYGwMYGwCYGwKYBxaPf4ZhwEYhwMYRwAYRwIYRwEYRwMYxwAYxwIYxwEYxwMYJwAYJwIYJwEYJwMYpwAYLwQwTgUwXgRgnAZgnA5gnAFgnAlgnAVgnA1gnANgvBjAOBfAeAmAcR6A8VIA43wA4wIA40IA42UAxkUAxssBjIsBjEsAjEsBjMsAjMsBjFcAGFcAGK8EMF4FYLwawHgNgHF17fhnXANgXAtgXAdgXA9g3ABg3Ahg3ARg3Axg3AJg3Apg3AZg3A5g3AFg3Alg3AVg3A1gDNSJf8YkAGMygDEFwJgKYKwAYKwIYKwEYEwDMFYGMFYBMFYFMFYDMFYHMNYAMNYEMNYCMNYGMNYBMNYFMNYDMNYHMDYAMDYEMDYCMDYGMDYBMDYFMDYDMDYHMLYAMN7XPP4Z7wcwPgBgfBDA+BCA8WEA4yMAxkcBjI8BGB8HMD4BYHwSwPgUgPFpAOMzAMZnAYzPARifBzC+AGB8EcD4EoDxZQDjKwDGVwGMrwEYXwcwvgFgfBPA+BaA8W0A4zsAxncBjO8BGN8HMH4AYPwQwPgRgPFjAOMnAMZPAYyfARg/BzB+AWD8EsD4FYDxawDjNwDGbwGM3wEYvwcw/gBg/BHA+BOA8WcA4y8Axl8BjCsBjL8BGH8HMP4BYFwFYFwNYFwDYFwLYFwHYFwPYNwAYNwIYNwEYNwMYNwCYNwKYNwGYNwOYNwBYNwJYNwFYNwNYAy0iH/GJABjMoAxBcCYCmCsAGCsCGCsBGBMAzBWBjBWATBWBTBWAzBWBzDWADDWBDDWAjDWBjDWATDWBTDWAzDWBzA2ADA2BDA2AjA2BjA2ATA2BTA2AzA2BzC2ADC2BDAGAYzpAMYMAGMrAGMmgLE1gLENgLEtgLEdgLE9gLEDgLEjgLETgLEzgLELgLErgDELwOgAGLMBjDkAxlwAYx6AMR/A2A3AWABgLAQwdgcw9gAw9gQw9gIw9gYw9gEw9gUw9gMw/lwv/hl/ATD+CmBcCWD8DcD4O4DxDwDjKgDjagDjGgDjWgDjOgDjegDjBgDjRgDjJgDjZgDjFgDjVgDjNgDjdgDjDgDjTgDjLgDjbgBjoH78MyYBGJMBjCkAxlQAYwUAY0UAYyUAYxqAsTKAsQqAsSqAsRqAsTqAsQaAsSaAsRaAsTaAsQ6AsS6AsR6AsT6AsQGAsSGAsRGAsTGAsQmAsSmAsRmAsTmAsQWAsSWAMQhgTAcwZgAYWwEYMwGMrQGMbQCMbQGM7QCM7QGMHQCMHQGMnQCMnQGMXQCMXQGMWQBGB8CYDWDMATDmAhjzAIz5AMZuAMYCAGMhgLE7gLEHgLEngLEXgLE3gLEPgLEvgLEfgPEgAOPBAMZDAIyHAhgPAzAeDmA8AsB4JIDxKADj0QDGYwCMxwIYjwMwHg9g7A9gPAHAOADAeCKA8SQA48kAxlMAjKcCGE8DMJ4OYDwDwHgmgPEsAOPZAMZzAIznAhjPAzAWARiLAYwDAYyDAIwlAMZSAOP5AMbBAMYhAMYLAIxDAYzDAIzDAYwjAIwjAYyjAIyjAYxjAIxjAYzjAIzjAYwTAIwTAYyTAIyTAYxTAIwXAhinAhgvAjBOAzBOBzDOADDOBDDOAjDOBjDOATBeDGCcC2C8BMA4D8B4KYBxPoBxAYBxIYDxMgDjIgDj5QDGxQDGJQDGpQDGZQDG5QDGKwCMK3xg1B8ifWf72LdTkJWsjW24z/taBQL3q3hAxYMqHlLxsIpHVDyq4jEVj6t4QsWTKp5S8bSKZ1Q8q+I5Fc+reEHFiypeUvGyildUvKriNRWvq3hDxZsq3lLxtop3VLyr4j0V76v4QMWHKj5S8bGKT1R8quIzFZ+r+ELFlyq+UvG1im9UfKviOxXfq/hBxY8qflLxs4pfVPyqYqWK31T8ruIPFatUrFaxRsXaVnvGYF2r0KCkhJ7dQUmLaLvf0PaAoe1BQ9tDhraHDW2PGNoeNbQ9Zmh73ND2hKHtSUPbU4a2pw1tzxjanjW0PWdoe97Q9oKh7UVD20uGtpcNba8Y2l41tL1maHvd0PaGoe1NQ9tbhra3DW3vGNreNbS9Z2h739D2gaHtQ0PbR4a2jw1tnxjaPjW0fWZo+9zQ9oWh7UtD21eGtq8Nbd8Y2r41tH1naPve0PaDoe1HQ9tPhrafDW2/GNp+NbStNLT9Zmj73dD2h6FtlaFttaFtjaFtraHNPSAGA/s+wpNH39BzTlZ+bm5Jt+wSJ8cpysouLC7Iy8rNK84vcAqcvIK8QdkFOTklBbkF3QqLC7tlFTq5OSVOaV5hTmloPhK82bHjHq+F+srys2bBmyc790NqFrwZs/MApGbBmzs7D0JqFrxZtPMQpGbBm087D0NqFryZtfMIpGbBm2M7j0JqFrzZtvMYpGbBm3c7j0NqFrwZuPMEpGbBm4s7T0JqFrxZufMUpGbBm587T0NqFryZuvMMpGbBm7M7z0JqFrzZu/McpGbBm8c7z0NqFrwZvfMCpGbBm9s7L0JqFrxZvvMSpGbBm+87L0NqFryZv/MKpGbBHwdwXoXULPhjA85rkJoFf7zAeR1Ss+CPIThvQGoW/HEF501IzYI/1uC8BalZ8McfnLchNQv+mITzDqRmwR+ncN6F1Cz4YxfOe5CaBX88w3kfUrPgj3E4H0BqFvxxD+dDSM2CPxbifASpWfDHR5yPITUL/piJ8wmkZsEfR3E+hdQs+GMrzmeQmgV/vMX5HFKz4I/BOF9Aahb8cRnnS0jNgj9W43wFqVnwx2+cryE1C/6YjvMNpGbBH+dxvoXULPhjP853kJoFfzzI+R5Ss+CPETk/QGoW/HEj50dIzYI/luT8BKlZ8MeXnJ8hNQv+mJPzC6RmwR+Hcn6F1Cz4Y1POSkjNgj9e5fwGqVnwx7Cc3yE1C/64lvMHpGbBH+tyVkFqFvzxL2c1pGbBHxNz1kBqFvxxMmetYM0VVB/VtHr1R2rEGGTZPpw9T0L795+9ie03juz26MeP0OmPGPt2wgv6+l7fas/zBvdZv0jefeGriLYNhgvn/y9uKLEeENa182dDEVsXex77bNCWNWeHanbWt5Ibvw1yB0HHr3WRLLwuJMdvo6Gv4qyBg/Kc4vxB3ZySoryCgQMLcxwnuyi/KL84u6C0pDjPKcgrUH0OLMouUG+XXTTQKckqyi9xJ5GqgT3Hh8hHkvAYbBSc/HTeTa18BHY7l+53s+DG4Ffdm1vtHWChfo2sEgcTl1Vqhw33K7mOtghv+OEJ3e03XT2XpxM8XnCC7y84wUt+0jAA6AS3hvbXbZFOcKvBCW4rBydI2FBiPvhAnOAAQSe4VfDAuE3QCW6AOEHJ8dsOdYLbfXKCO1r5CLzDBye4M86doFv3TogT3BZilXaCkutol09OcNcBcIJHC07wxwhO8JLfIR8HdIK7w/trZmBf17fb4ARdUTCQ2FBi3bE3QZzgcYJOcLfk5JUpV+MmiBOUHL+kTKYTTMqUnRD/WleZPgK7nUv3m5IZ307QrTslc+8AC/XrixMMhFilnaDkOkrN9McJuv2WtxM8XHCCP0Jwgpc8O/gooBOsENpfK0Y6QfeFSCdYsRycIGFDifnDfogTPErQCVYQPDBWFHSCWyBOUHL8KkGdYCWfnGBapo/AaT44wcpx7gTduitDnGDFEKu0E5RcR1V8coJVDoATPFhwgj9EcIKXvO7zMKATrBraX6tFOsGqBidYrRycIGFDifkLCYgTPEzQCVYVPDBWE3SC2yBOUHL8qkOdYHWfnGCNTB+Ba/jgBGvGuRN0664JcYLVQqzSTlByHdXyyQnWOgBOsI/gBN9XcIKXvKPPQUAnWDu0v9aJdIK1DU6wTjk4QcKGEuuOvQPiBA8SdIK1BQ+MdQSd4A6IE5Qcv7pQJ1jXJydYL9NH4Ho+OMH6ce4E3brrQ5xgnRCrtBOUXEcNfHKCDQ6AE+whOMH3FJzgJe/V2hvoBBuG9tdGkU6wocEJNioHJ0jYUGI+ARjiBHsLOsGGggfGRoJOcBfECUqOX2OoE2zskxNskukjcBMfnGDTOHeCbt1NIU6wUYhV2glKrqNmPjnBZgfACXYTnOALBCd4yV/h6A50gs1D+2uLSCfY3OAEW5SDEyRsKDEffNsznGB3QSfYXPDA2ELQCfq1LqSdoOT4tYQ6wZY+OcFgpo/AQR+cYHqcO0G37nSIE2wRYpV2gpLrKMMnJ5hxAJxgjuAEnys4wUv+vmI+0Am2Cu2vmZFOsJXBCWaWgxMkbCix7tjJECeYL+gEWwkeGDMFnWAyxAlKjl9rqBNs7ZMTbJPpI7DbuXS/bePcCbp1t4U4wcwQq7QTlFxH7Xxygu0OgBPsKjjBZwlO8I6gE8wGOsH2of21Q6QTbG9wgh3KwQkSNpSYbwoAcYLZgk6wveCBsYOgE0yFOEHJ8esIdYIdfXKCnTJ9BO7kgxPsHOdO0K27M8QJdgixSjtByXXUxScn2OUAOMGOghN8J8EJvrOgE+wCdIJdQ/trVqQT7Gpwglnl4AQJG0rMNy6AOMEugk6wq+CBMUvQCVaEOEHJ8XOgTtDxyQlmZ/oInO2DE8yJcyfo1p0DcYJZIVZpJyi5jnJ9coK5B8AJthWc4NsJTvDtBZ1gB6ATzAvtr/mRTjDP4ATzy8EJEjaUWHfsNIgT7CDoBPMED4z5gk4wDeIEJcevG9QJdvPJCRZk+ghc4IMTLIxzJ+jWXQhxgvkhVmknKLmOuvvkBLsfACfYSnCCzxSc4FsLOsE2QCfYI7S/9ox0gj0MTrBnOThBwoYS841CIU6wjaAT7CF4YOwp6ASrQJyg5Pj1gjrBXj45wd6ZPgL39sEJ9olzJ+jW3QfiBHuGWKWdoOQ66uuTE+x7AJxgS8EJPig4wacLOsEMoBPsF9pfD4p0gv0MTvCgcnCChA0l5puZQpxghqAT7Cd4YDxI0AlWgzhByfE7GOoED/bJCR6S6SPwIT44wUPj3Am6dR8KcYIHhVilnaDkOjrMJyd42AFwgk0FJ/hmghN8c0En2ALoBA8P7a9HRDrBww1O8IhycIKEDSXWHbsGxAm2EHSChwseGI8QdII1IE5QcvyOhDrBI31ygkdl+gh8lA9O8Og4d4Ju3UdDnOARIVZpJyi5jo7xyQkecwCcYEPBCb6R4ATfWNAJNgE6wWND++txkU7wWIMTPK4cnCBhQ4n5x4MgTrCJoBM8VvDAeJygE6wFcYKS43c81Ake75MT7J/pI3B/H5zgCXHuBN26T4A4weNCrNJOUHIdDfDJCQ4IOUF3uV5g30le/+hH/0JQP01Mv3hAv6RUv9GIu5ypLbfQlhtpy3W05WrackVtOaAtb2u1d3mDtnyntvxvbfkubfk/2vLd2vI92vK92vJ/Q8snqvc/ScXJKk5RcaqK01ScruKMzD2OunJofP/aVk32OuDPpJPoN9Fvot9Ev4l+E/0m+k30m+g30W+i30S/iX4T/Sb6TfSb6DfRb6LfRL+Jfg9cv9LftZQE459xZ8v4Z9wFYNwNYAwAtsckAGMygDEFwJgKYKwAYKwIYKwEYEwDMFYGMFYBMFYFMFYDMFYHMNYAMNYEMNYCMNYGMNYBMNYFMNYDMNYHMDYAMDYEMDYCMDYGMDYBMDYFMA6tHv+MwwCMwwGMIwCMIwGMowCMowGMYwCMYwGM4wCM4wGMEwCMEwGMkwCMkwGMUwCMFwIYpwIYLwIwTgMwTgcwzgAwzgQwzgIwzgYwzgEwXgxgnAtgvATAOA/AeCmAcT6AcQGAcSGA8TIA4yIA4+UAxsUAxiUAxqUAxmUAxuUAxisAjCsAjFcCGK8CMF4NYLwGwLi6dvwzrgEwrgUwrgMwrgcwbgAwbgQwbgIwbgYwbgEwbgUwbgMwbgcw7gAw7gQw7gIw7gYwBurEP2MSgDEZwJgCYEwFMFYAMFYEMFYCMKYBGCsDGKsAGKsCGKsBGKsDGGsAGGsCGGsBGGsDGOsAGOsCGOsBGOsDGBsAGBsCGBsBGBsDGJsAGJsCGJsBGJsDGFsAGO9rHv+M9wMYHwAwPghgfAjA+DCA8REA46MAxscAjI8DGJ8AMD4JYHwKwPg0gPEZAOOzAMbnAIzPAxhfADC+CGB8CcD4MoDxFQDjqwDG1wCMrwMY3wAwvglgfAvA+DaA8R0A47sAxvcAjO8DGD8AMH4IYPwIwPgxgPETAOOnAMbPAIyfAxi/ADB+CWD8CsD4NYDxGwDjtwDG7wCM3wMYfwAw/ghg/AnA+DOA8RcA468AxpUAxt8AjL8DGP8AMK4CMK4GMK4BMK4FMK4DMK4HMG4AMG4EMG4CMG4GMG4BMG4FMG4DMG4HMO4AMO4EMO4CMO4GMAZaxD9jEoAxGcCYAmBMBTBWADBWBDBWAjCmARgrAxirABirAhirARirAxhrABhrAhhrARhrAxjrABjrAhjrARjrAxgbABgbAhgbARgbAxibABibAhibARibAxhbABhbAhiDAMZ0AGMGgLEVgDETwNgawNgGwNgWwNgOwNgewNgBwNgRwNgJwNgZwNgFwNgVwJgFYHQAjNkAxhwAYy6AMQ/AmA9g7AZgLAAwFgIYuwMYewAYewIYewEYewMY+wAY+wIY+wEYf64X/4y/ABh/BTCuBDD+BmD8HcD4B4BxFYBxNYBxDYBxLYBxHYBxPYBxA4BxI4BxE4BxM4BxC4BxK4BxG4BxO4BxB4BxJ4BxF4BxN4AxUD/+GZMAjMkAxhQAYyqAsQKAsSKAsRKAMQ3AWBnAWAXAWBXAWA3AWB3AWAPAWBPAWAvAWBvAWAfAWBfAWA/AWB/A2ADA2BDA2AjA2BjA2ATA2BTA2AzA2BzA2ALA2BLAGAQwpgMYMwCMrQCMmQDG1gDGNgDGtgDGdgDG9gDGDgDGjgDGTgDGzgDGLgDGrgDGLACjA2DMBjDmABhzAYx5AMZ8AGM3AGMBgLEQwNgdwNgDwNgTwNgLwNgbwNgHwNgXwNgPwHgQgPFgAOMhAMZDAYyHARgPBzAeAWA8EsB4FIDxaADjMQDGYwGMxwEYjwcw9gcwngBgHABgPBHAeBKA8WQA4ykAxlMBjKcBGE8HMJ4BYDwTwHgWgPFsAOM5AMZzAYznARiLAIzFAMaBAMZBAMYSAGMpgPF8AONgAOMQAOMFAMahAMZhAMbhAMYRAMaRAMZRAMbRAMYxAMaxAMZxAMbxAMYJAMaJAMZJAMbJAMYpAMYLAYxTAYwXARinARinAxhnABhnAhhnARhnAxjnABgvBjDOBTBeAmCcB2C8FMA4H8C4AMC4EMB4GYBxEYDxcgDjYgDjEgDjUgDjMgDjcgDjFQDGFT4w6g+RvrN97NsZmJWsjW24zzMzA4GzVJyt4hwV56o4T0WRimIVA1UMUlGiolTF+SoGqxii4gIVQ1UMUzFcxQgVI1WMUjFaxRgVY1WMUzFexQQVE1VMUjFZxRQVF6qYquIiFdNUTFcxQ8VMFbNUzFYxR8XFKuaquETFPBWXqpivYoGKhSouU7FIxeUqFqtYomKpimUqlqu4QsUKFVequErF1SquydwzBv/IDA1KSujZHZS0iLazDG1nG9rOMbSda2g7z9BWZGgrNrQNNLQNMrSVGNpKDW3nG9oGG9qGGNouMLQNNbQNM7QNN7SNMLSNNLSNMrSNNrSNMbSNNbSNM7SNN7RNMLRNNLRNMrRNNrRNMbRdaGibami7yNA2zdA23dA2w9A209A2y9A229A2x9B2saFtrqHtEkPbPEPbpYa2+Ya2BYa2hYa2ywxtiwxtlxvaFhvalhjalhralhnalhvarjC0rTC0XWlou8rQdrWh7RpDm3tADAb2fYQnj76h55ys/Nzckm7ZJU6OU5SVXVhckJeVm1ecX+AUOHkFeYOyC3JySgpyC7oVFhd2yyp0cnNKnNK8wpzS0HwkeLK/4x6vhfrK8rNmwYsHnLMgNQtejOCcDalZ8OIG5xxIzYIXSzjnQmoWvPjCOQ9Ss+DFHE4RpGbBi0OcYkjNghebOAMhNQtevOIMgtQseDGMUwKpWfDiGqcUUrPgxTrO+ZCaBS/+cQZDaha8mMgZAqlZ8OIk5wJIzYIXOzlDITULXjzlDIPULHgxljMcUrPgxV3OCEjNgheLOSMhNQtefOaMgtQseDGbMxpSs+DFcc4YSM2CF9s5YyE1C16854yD1Cx4MaAzHlKz4MWFzgRIzYIXKzoTITULXvzoTILULHgxpTMZUrPgxZnOFEjNghd7OhdCaha8eNSZCqlZ8GJU5yJIzYIXtzrTIDULXizrTIfULHjxrTMDUrPgxbzOTEjNghcHO7MgNQtebOzMhtQsePGyMwdSs+DF0M7FkJoFL6525kJqFrxY27kEUrPgxd/OPEjNgheTO5dCaha8ON2ZD6lZ8GJ3ZwGkZsGL552FkJoFL8Z3LoPULHhxv7MIUrPgzQKcyyE1C958wFkMqVnwZgbOEkjNgjdHcJZCaha82YKzDFKz4M0bnOWQmgVvBuFcAalZ8OYSzgpIzYI3q3CuhNQsePML5ypIzYI303CuhtQseHMO5xrBmiuoPqpp9eqP1IgxyLJ9OHuehPbvP3sT228c2e0xzm/C4oQX9PV9beae5+vcZ/0iefeFryLarjNcOP9/cUOJ9YBQp70/G4rYutjz2GeDtqw5O1Szc22m3PhdJ3cQdPxaF8nC60Jy/K439FWcNXBQnlOcP6ibU1KUVzBwYGGO42QX5RflF2cXlJYU5zkFeQWqz4FF2QXq7bKLBjolWUX5Je4kUjWw5/gQ+UgSHoPrBSc/nfeGTB+B3c6l+71RcGPwq+4bM/cOsFC/RlaJg4nLKrXDhvuVXEf/FN7wwxO622+6ei5PJ3i54AS/WHCCl/ykYSnQCd4U2l9vjnSCNxmc4M3l4AQJG0qsO3Y9iBNcKugEbxI8MN4s6ATrQZyg5PjdAnWCt/jkBP+V6SPwv3xwgrfGuRN0674V4gRvDrFKO0HJdXSbT07wtgPgBBcITvALBSd4ye+QFwGd4O2h/fWOSCd4u8EJ3lEOTpCwocS6YzeAOMFFgk7wdsED4x2CTrABxAlKjt+dUCd4p09O8N+ZPgL/2wcneFecO0G37rsgTvCOEKu0E5RcR//xyQn+5wA4wUsEJ/h5ghO85NnB84FO8O7Q/npPpBO82+AE7ykHJ0jYUGLdsRtBnOB8QSd4t+CB8R5BJ9gI4gQlx+9eqBO81ycn+N9MH4H/64MTvC/OnaBb930QJ3hPiFXaCUquo/t9coL3HwAnOFtwgp8jOMFLXvc5F+gEHwjtrw9GOsEHDE7wwXJwgoQNJdYduwnECc4VdIIPCB4YHxR0gk0gTlBy/B6COsGHfHKCD2f6CPywD07wkTh3gm7dj0Cc4IMhVmknKLmOHvXJCT56AJzgdMEJfobgBC95R59ZQCf4WGh/fTzSCT5mcIKPl4MTJGwose7YzSBOcJagE3xM8MD4uKATbAZxgpLj9wTUCT7hkxN8MtNH4Cd9cIJPxbkTdOt+CuIEHw+xSjtByXX0tE9O8OkD4AQvFJzgpwpO8JL3ap0GdILPhPbXZyOd4DMGJ/hsOThBwoYS647dAuIEpwk6wWcED4zPCjrBFhAnKDl+z0Gd4HM+OcHnM30Eft4HJ/hCnDtBt+4XIE7w2RCrtBOUXEcv+uQEXzwATnCi4AQ/SXCCl/wVjilAJ/hSaH99OdIJvmRwgi+XgxMkbCix7thBiBOcIugEXxI8ML4s6ASDECcoOX6vQJ3gKz45wVczfQR+1Qcn+FqcO0G37tcgTvDlEKu0E5RcR6/75ARfPwBOcKzgBD9OcIKX/H3FCUAn+EZof30z0gm+YXCCb5aDEyRsKLHu2BkQJzhB0Am+IXhgfFPQCWZAnKDk+L0FdYJv+eQE3870EfhtH5zgO3HuBN2634E4wTdDrNJOUHIdveuTE3z3ADjBkYIT/CjBCX60oBMcA3SC74X21/cjneB7Bif4fjk4QcKGEuuOnQlxgmMEneB7ggfG9wWdYCbECUqO3wdQJ/iBT07ww0wfgT/0wQl+FOdO0K37I4gTfD/EKu0EJdfRxz45wY8PgBMcKjjBDxOc4IcLOsERQCf4SWh//TTSCX5icIKfloMTJGwose7YbSBOcISgE/xE8MD4qaATbANxgpLj9xnUCX7mkxP8PNNH4M99cIJfxLkTdOv+AuIEPw2xSjtByXX0pU9O8MsD4ATPF5zgBwtO8EMEneAFQCf4VWh//TrSCX5lcIJfl4MTJGwose7Y7SBO8AJBJ/iV4IHxa0En2A7iBCXH7xuoE/zGJyf4baaPwN/64AS/i3Mn6Nb9HcQJfh1ilXaCkuvoe5+c4PcHwAkOFJzgBwlO8CWCTrAU6AR/CO2vP0Y6wR8MTvDHcnCChA0l1h27A8QJlgo6wR8ED4w/CjrBDhAnKDl+P0Gd4E8+OcGfM30E/tkHJ/hLnDtBt+5fIE7wxxCrtBOUXEe/+uQEfz0ATvBcwQn+PMEJvkjQCRYDneDK0P76W6QTXGlwgr+VgxMkbCix7tidIE6wWNAJrhQ8MP4m6AQ7QZyg5Pj9DnWCv/vkBP/I9BH4Dx+c4Ko4d4Ju3asgTvC3EKu0E5RcR6t9coKrD4ATPFNwgj9LcII/W9AJngN0gmtC++vaSCe4xuAE15aDEyRsKLHu2F0gTvAcQSe4RvDAuFbQCXaBOEHJ8VsHdYLrfHKC6zN9BF7vgxPcEOdO0K17A8QJrg2xSjtByXW00ScnuPEAOMFTBSf40wQn+NMFneAZQCe4KbS/bo50gpsMTnBzOThBwoYS646dBXGCZwg6wU2CB8bNgk4wC+IEJcdvC9QJbvHJCW7N9BF4qw9OcFucO0G37m0QJ7g5xCrtBCXX0XafnOD2kBN0l+sF9p3k9Y9+9C8E9dPE9IsH9EtK9RuNuMtvassva8vPasuPa8sPasv3aMt3aMs3a8vXacsnassnacsna8unaMunasunacuna8tnhJZ3qOedKnap2O1u363V6yqSVaS03uOo00LjG95W+wbMj74i67Pgr0lHeh8+zQc3K814OoDxDADjmQDGswCMZwMYzwEwngtgPA/AWARgLAYwDgQwDgIwlgAYSwGM5wMYBwMYhwAYLwAwDgUwDgMwDgcwjgAwjgQwjgIwjgYwjgEwjgUwjgMwjgcwTgAwTgQwTgIwTgYwTgEwXghgnApgvAjAOA3AOB3AOAPAOBPAOAvAOBvAOAfAeDGAcS6A8RIA4zwA46UAxvkAxgUAxoUAxssAjIsAjJcDGBcDGJcAGJcCGJcBGJcDGK8AMK6I76tQ/uL0re/svSd36+dfprrnZ6qoqKKSijQVlVVUUVFVRTUV1VXUUFFTRS0VtVXUUVFXRT0V9VU0UNFQRSMVjVU0UdFURTMVzVW0UNFSRVBFuooMFa1UZKporaKNirYq2qlor6KDio4qOqnorKKLiq4qslQ4KrJV5KjIVZGnIl9FNxUFKgpVdFfRQ0VPFb1U9FbRR0VfFf1UHKTi4NaBfa/kccVpEW29DG29DW19DG19DW39DG0HGdoODrXpD+mdwl354b5sT8YuKXUfBY6fnBVa+7PzSnNWhHBWgnCmQTgrQzirQDirQjirQTirQzhrQDhrQjhrQThrQzjrQDjrQjjrQTjrQzgbQDgbQjgbQTgbQzibQDibQjibQTibQzhbQDhbQjiDEM50CGcGhLMVhDMTwtkawtkGwtkWwtkOwtkewtkBwtkRwtkJwtkZwtkFwtkVwpkF4XQgnNkQzhwIZy6EMw/CmQ/h7AbhLIBwFkI4u0M4e/jEmRorp7PvP3vGxrlPb71irVnrrbfAeVXhm1xmx/ddkf+quo/ENhPqra/M9vdnb/0E10UO4Q7VquqD5PZf52DBvgS3ZUdfFzGdu+ieXxgov1v++7VtZ8XyiN9tptxu+X9I6z3Ph0aeFOy+EHnLf1cUDCQ2lFgPqPmQW/4fHHvNf93y/xDB8TtUcKfNh9zyX3L8DjP0Rbjl/2GCB1id9/DWPgK7nUv3e4TgxuBX3Ue03jvAQv36csv/Q0OsUjtsuF/JdXSk8IYfntDdftMD5fvjTz0FJ/heghN8b8FJpU9rfyYVof3J6ASPCu2vR0c6waMMTvBoP51gCLKPoPs4SnBnPFrrK3tQXklWYUFxQXZxUU634tyc4sLCItVvvuMUlA7KzhqUm12a5+TnDywsKSx1ckqL80qK8vOKCvMH/Tl7DsqGuA/J8TsG6j6O8cl9HNvaR+BjfXAfx8W5+3DrPg7iPo4OsUq7D8l1dLxP7uP4kPvQH9Lj21+AvUBjD/8wUv/QBOgu31ElfpeP1jgP1ZZ3aD9otFNb3qUt79aWA1pukracrC2nhJZPUM8DVJyo4iQVJ6s4RcWpKk5r/b8uU3r/P01wew2bmtNVn2eoOFPFWSGHpG/L7uuR17KfYWg709B2Vuv/veZd2kydJng8OF2grz3Xz2c5ZwhyFfhkplIi1kUsNbvr4kyR8duzXs8S/KtFcvz83sdP9WEfP1v1eY6Kc1WcZ9jHzzbsu+cY2s41tJ1XDvv4qYL70tmC+/g5glzdIfv4uYL7+HmC+3h30D5+ig/7eJHqs1jFQBWDDPt4kWHfLTa0DTS0DSqHffwUwX2pSHAfLxbk6gnZxwcK7uODBPfxnqB9/GQf9vES1WepivNVDDbs4yWGfbfU0Ha+oW1wOezjJwvuSyWC+3ipIFdvyD5+vuA+PlhwH+8N2sdP8mEfH6L6vEDFUBXDDPv4EMO+e4GhbaihbVg57OMnCe5LQwT38QsEufpC9vGhgvv4MMF9vC9oHz/Rh318uOpzhIqRKkYZ9vHhhn13hKFtpKFtVDns4ycK7kvDBffxEYJcB0H28ZGC+/gowX38INA+PsCHfXy06nOMirEqxhn28dGGfXeMoW2soW1cOezjAwT3pdGC+/gYQa5DIPv4WMF9fJzgPn4IaB8/wYd9fLzqc4KKiSomGfbx8YZ9d4KhbaKhbVI57OMnCO5L4wX38QmCXIdB9vGJgvv4JMF9/DDIiVz/TJbbZiYLjp++T08OnUdQQUUVbRvSH9LHvY7Jwid3JQeMD6n3SPSb6DfRb6LfRL+JfhP9JvpN9JvoN9Fvot9Ev4l+E/0m+k30m+g30W+i30S/8dGv9OfVJcH4Z9zZMv4ZdwEYdwMYA4DtMQnAmAxgTAEwpgIYKwAYKwIYKwEY0wCMlQGMVQCMVQGM1QCM1QGMNQCMNQGMtQCMtQGMdQCMdQGM9QCM9QGMDQCMDQGMjQCMjQGMTQCMTQGMQ6vHP+MwAONwAOMIAONIAOMoAONoAOMYAONYAOM4AON4AOMEAONEAOMkAONkAOMUAOOFAMapAMaLAIzTAIzTAYwzAIwzAYyzAIyzAYxzAIwXAxjnAhgvATDOAzBeCmCcD2BcAGBcCGC8DMC4CMB4OYBxMYBxCYBxKYBxGYBxOYDxCgDjCgDjlQDGqwCMVwMYrwEwrq4d/4xrAIxrAYzrAIzrAYwbAIwbAYybAIybAYxbAIxbAYzbAIzbAYw7AIw7AYy7AIy7AYyBOvHPmARgTAYwpgAYUwGMFQCMFQGMlQCMaQDGygDGKgDGqgDGagDG6gDGGgDGmgDGWgDG2gDGOgDGugDGegDG+gDGBgDGhgDGRgDGxgDGJgDGpgDGZgDG5gDGFgDG+5rHP+P9AMYHAIwPAhgfAjA+DGB8BMD4KIDxMQDj4wDGJwCMTwIYnwIwPg1gfAbA+CyA8TkA4/MAxhcAjC8CGF8CML4MYHwFwPgqgPE1AOPrAMY3AIxvAhjfAjC+DWB8B8D4LoDxPQDj+wDGDwCMHwIYPwIwfgxg/ATA+CmA8TMA4+cAxi8AjF8CGL8CMH4NYPwGwPgtgPE7AOP3AMYfAIw/Ahh/AjD+DGD8BcD4K4BxJYDxNwDj7wDGPwCMqwCMqwGMawCMawGM6wCM6wGMGwCMGwGMmwCMmwGMWwCMWwGM2wCM2wGMOwCMOwGMuwCMuwGMgRbxz5gEYEwGMKYAGFMBjBUAjBUBjJUAjGkAxsoAxioAxqoAxmoAxuoAxhoAxpoAxloAxtoAxjoAxroAxnoAxvoAxgYAxoYAxkYAxsYAxiYAxqYAxmYAxuYAxhYAxpYAxiCAMR3AmAFgbAVgzAQwtgYwtgEwtgUwtgMwtgcwdgAwdgQwdgIwdgYwdgEwdgUwZgEYHQBjNoAxB8CYC2DMAzDmAxi7ARgLAIyFAMbuAMYeAMaeAMZeAMbeAMY+AMa+AMZ+AMaf68U/4y8Axl8BjCsBjL8BGH8HMP4BYFwFYFwNYFwDYFwLYFwHYFwPYNwAYNwIYNwEYNwMYNwCYNwKYNwGYNwOYNwBYNwJYNwFYNwNYAzUj3/GJABjMoAxBcCYCmCsAGCsCGCsBGBMAzBWBjBWATBWBTBWAzBWBzDWADDWBDDWAjDWBjDWATDWBTDWAzDWBzA2ADA2BDA2AjA2BjA2ATA2BTA2AzA2BzC2ADC2BDAGAYzpAMYMAGMrAGMmgLE1gLENgLEtgLEdgLE9gLEDgLEjgLETgLEzgLELgLErgDELwOgAGLMBjDkAxlwAYx6AMR/A2A3AWABgLAQwdgcw9gAw9gQw9gIw9gYw9gEw9gUw9gMwHgRgPBjAeAiA8VAA42EAxsMBjEcAGI8EMB4FYDwawHgMgPFYAONxAMbjAYz9AYwnABgHABhPBDCeBGA8GcB4CoDxVADjaQDG0wGMZwAYzwQwngVgPBvAeA6A8VwA43kAxiIAYzGAcSCAcRCAsQTAWApgPB/AOBjAOATAeAGAcSiAcRiAcTiAcQSAcSSAcRSAcTSAcQyAcSyAcRyAcTyAcQKAcSKAcRKAcTKAcQqA8UIA41QA40UAxmkAxukAxhkAxpkAxlkAxtkAxjkAxosBjHMBjJcAGOcBGC8FMM4HMC4AMC4EMF4GYFwEYLwcwLgYwLgEwLgUwLgMwLgcwHgFgHGFD4x+cP4z2R/Ovx7JEcA5Wfm5uSXdskucHKcoK7uwuCAvKzevOL/AKXDyCvIGZRfk5JQU5BZ0Kywu7JZV6OTmlDileYU5pdqbSBXfIeBP8dI1JwnW3BFSc7JgzZ0gNacI1ty5nGrOiu3hdBEcv7bJjINu1wCDMwvC6UA4syGcORDOXAhnHoQzH8LZDcJZAOEshHB2h3D2gHD2hHD2gnD2hnD2gXD2hXD2g3AeBOE8GMJ5CITzUAjnYRDOwyGcR0A4j4RwHgXhPBrCeQyE81gI53EQzuMhnP0hnCdAOAdAOE+EcJ4E4TwZwnkKhPNUCOdpEM7TIZxnQDjPhHCeBeE8G8J5DoTzXAjneRDOIghnMYRzIIRzEISzBMJZCuE8H8I5GMI5BMJ5AYRzKIRzGIRzOIRzBIRzJIRzFIRzNIRzDIRzrDCnNN/tyYHAHcny56KP0/qK9Vx0ly/ex/BOH8ZwvOAY3gkYw3/7MIYTBMfw34AxvMuHMZwoOIZ3Jftz3JaueZJYXznZtyfHPn4lpe5jYKles/jNvwKMOXUKhPNCCOdUCOdFEM5pEM7pEM4ZEM6ZEM5ZEM7ZEM45EM6LIZxzIZyXQDjnQTgvhXDOh3AugHAuhHBeBuFcBOG8HMK5GMK5BMK5FMK5DMK5HMJ5BYRzBYTzSgjnVRDOqyGc10A4/wHhvBbCeR2E83oI5w0QzhshnP+EcN4E4bwZwnkLhPNfEM5bIZy3QThvh3DeAeG8E8L5bwjnXRDO/0A474Zw3gPhvBfC+V8I530QzvshnA9AOB+EcD4E4XwYwvkIhPNRCOdjEM7HIZxPQDifhHA+BeF8GsL5DITzWQjncxDO533iTBbmfEHrK9brY65PZtT8omDNHZMZ2+NLAQbnyxDOVyCcr0I4X4Nwvg7hfAPC+SaE8y0I59sQzncgnO9CON+DcL4P4fwAwvkhhPMjCOfHEM5PIJyfQjg/g3B+DuH8AsL5JYTzKwjn1xDObyCc30I4v4Nwfg/h/AHC+SOE8ycI588Qzl8gnL9COFdCOH+DcP4O4fwDwrkKwrkawrkGwrkWwrkOwrkewrkBwrkRwrkJwrkZwrkFwrkVwrkNwrkdwrkDwrkTwrkLwrkbwul2SOBMgnAmQzhTIJypEM4KEM6KEM5KEM40CGdlCGcVCGdVCGc1CGd1CGcNCGdNCGctCGdtCGcdCGddCGc9CGd9CGcDCGdDCGcjCGdjCGcTCGdTCGczCGdzCGcLCGdLCGcQwpkO4cyAcLaCcGZCOFtDONtAONtCONtBONtDODtAODtCODtBODtDOLtAOLtCOLMgnA6EMxvCmQPhzIVw5kE48yGc3SCcBRDOQghndwhnDwhnTwhnLwhnbwhnHwhnXwhnPwjnQRDOgyGch0A4D4VwHgbhPBzCeQSE80gI51EQzqMhnMdAOI+FcB4H4TwewtkfwnkChHMAhPNECOdJEM6TIZynQDhPhXCeBuE8HcJ5BoTzTAjnWRDOsyGc50A4z4VwngfhLIJwFkM4B0I4B0E4SyCcpRDO8yGcgyGcQyCcF0A4h0I4h0E4h0M4R0A4R0I4R0E4R0M4x0A4x0I4x0E4x0M4J0A4J0I4J0E4J0M4p0A4L4RwToVwXgThnAbhnA7hnAHhnAnhnAXhnA3hnAPhvBjCORfCeQmEcx6E81II53wI5wII50II52UQzkUQzsshnIshnEsgnEshnMsgnMshnFdAOFdAOK+EcF4F4bwawnkNhPMfEM5rIZzXQTivh3De4BNncgRnTlZ+bm5Jt+wSJ8cpysouLC7Iy8rNK84vcAqcvIK8QdkFOTklBbkF3QqLC7tlFTq5OSVOaV5hTmmo79aCNd9YTjVnxfZw/pkkN36TW/tTc6rwej6jdex9lZS6jyznTKG+3HVxVmu5Go9oH9/romQPqHN27DVnh2p2zom1r9y/xs85V3BdHBm/6yJL43TOi6Xm7H1qdors+8qKGD+nWHBdHBWH6yK/9H84nYF2NRcYanYG2fRVYBw/p0RwXRwdX+uimwenUxptzd08a3bOj66v7DLGzxksuC6OiZd10a1MTmfI/tc88G9qdi7Y3766/e34OUMF18WxB35dZO0HpzNsf2rO2q+aneF/31fefo6fM0JwXRx3INdF7n5zOiPLrDm3NIqanVFl9dUtqvFzRguui+MPzLooiJLTGeNRc2Fp1DU7Y819ZVmMnzNOcF30L+91kWXF6Yz/35ody5qdCZF9DbIeP2ei4Lo4ofzWRU4MnM4kuc8HHMG/bx3977NY18WAcloXWbE9HMG/gxxBH+8cI7guToSsC0G/5wj6Fed4wXVxEmRdCM5rjuBx2RkguC5OhqyLm+Q+Q3cEjwWO4Lbs+LUupL8nuFnwe4J/JjO+t7pFoOY/vycYVDqorHUT63i+KFjzvyDfKd4K4bwNwnk7hPMOCOedEM5/QzjvgnD+B8J5N4TzHgjnvRDO/0I474Nw3g/hfADC+SCE8yEI58MQzkcgnI9COB+DcD4O4XwCwvkkhPMpCOfTEM5nIJzPQjifg3A+D+F8AcL5IoTzJQjnyxDOVyCcr0I4X4Nwvg7hfAPC+SaE8y0I59sQzncgnO9CON+DcL4P4fwAwvkhhPMjCOfHEM5PIJyfQjg/g3B+DuH8AsL5JYTzKwjn1xDObyCc30I4v4Nwfg/h/AHC+SOE8ycI588Qzl8gnL9COFdCOH+DcP4O4fwDwrkKwrkawrkGwrkWwrkOwrkewrkBwrkRwrkJwrkZwrkFwrkVwrkNwrkdwrkDwrnTJ87kCM5Yr1lNFax5F6TmCoI174bUXFGwZheOUHMlwZqTIDWnCdacDKm5smDNKZCaqwjWnAqpuapgzRUgNVcTrLkipObqgjVXgtRcQ7DmNEjNNQVrrgypuZZgzVUgNdcWrLkqpOY6gjVXg9RcV7Dm6pCa6wnWXANSc33BmmtCam4gWHMtSM0NBWuuDam5kWDNdSA1NxasuS6k5iaCNdeD1NxUsOb6kJqbCdbcAFJzc8GaG0JqbiFYcyNIzS0Fa24MqTkoWHMTSM3pgjU3hdScIVhzM0jNrQRrbg6pOVOw5haCNbvfi7vnBGwMnRjQQUVHFZ1UdFbRRUVX931UOCqy3bFQkasiT0W+im4qClQUquiuooeKnip6qeitok+o9n4qDlJxsIpDVByq4jAVh6s4QsWRKo5ScbSKY1Qcq+I4Fcer6K/iBBUDVJyo4iQVJ6s4RcWpKk5TcbqKM1ScqeIsFWerOEfFuSrOU1GkoljFQBXuDbJLVJSqOF/FYBVDVFygYqiKYSqGqxihYqSKUSpGqxijYqyKcSrGq5igYqKKSSomq5ii4kIVU1VcpGKaiukqZqiYqWKWitkq5qi4WMVcFZeomKfiUhXzVSxQsVDFZSoWqbhcxWIVS1QsVbFMxXIVV6hYoeJKFVepuFrFNSr+oeJaFdepuF7FDSpuVPFPFTepuFnFLSr+peJWFbepuF3FHSruVPFvFXep+I+Ku1Xco+JeFf9VcZ+K+1U8oOJBFQ+peFjFIyoeVfGYisdVPKHiSRVPqXhaxTMqnlXxnIrnVbygwr2P+EsqXlbxiopXVbym4nUVb6h4U8VbKt5W8Y6Kd1W8p+J9FR+o+FDFRyo+VvGJik9VfKbicxVfqPhSxVcqvlbxjYpvVXyn4nsVP6j4UcVPKn5W8YuKX1WsVPGbit9V/KFilYrVKtaoWKtinYr1Kjao2Khik4rNKrao2Kpim4rtKnao2Klil4rdKtydLElFsooUFakqKqioqKKSijQVlVVUUVFVRTUV1VXUUFFTRS0VtVXUUVFXRT0V9VU0UNFQRSMVjVU0UdFURTMVzVW0UNFSRVBFuooMFa1UZKporaKNirYq2qlor6KDio4qOqnorKKLiq4qslQ4KrJV5KjIVZGnIl9FNxUFKgpVdFfRQ0VPFb1U9FbRxz13REU/FQepOFjFISoOVXGYisNVHKHiSBVHqThaxTEqjlVxnIrjVfRXcYKKASpOVHGSipNVnKLiVBWnqThdxRkqzlRxloqzVZyj4lwV56koUlGsYqCKQSpKVJSqOF/FYBVDVFygYqiKYSqGqxihYqSKUSpGqxijYqyKcSrGq5igYqKKSSomq5ii4kIVU1VcpGKaiukqZqiYqWKWitkq5qi4WMVcFZeomKfiUhXzVSxQsVDFZSoWqbhcxWIVS1QsVbFMxXIVV6hYoeJKFVepcH/n3v0Neff32d3fPnd/V9z9zW7397BvVOH+9rL7Gxfubyu4vzXg3nvfva+9e894937s7r3O3fuIu/fodu9/7d5b2r1vs3tPZPd+w+69fN375Lr3oHXv7+reO9W9L6l7z0/3fpruvSrd+0C691h071/o3hvQve+ee0+7Z1S492Jz73Pm3kPMvT+Xe+8r975S7j2b3Pshufcacu/j494jx73/jHtvF/e+Ke49Sdz7fbj30nDvU+HeA8K9v4J77wL3vgDuNffu9ezuteLuddjuNc7u9cPutbnuda/uNaXu9ZrutZDudYbuNXzu9XHutWfudV3uNVPu9UjutT7udTTuNSru9R/utRXudQvuNQHu+fbuuezueeLuOdju+c3unOmel+ue8+qeT+qeq+meB+meY+iev+eeG+eeK+aeO+UaCvfcGvdcE/fcC/dcBPe7efe7ave7W/e7TPe7Pfe7Lve7H/e7EPe7AfezcvezY/ezVPezRfezNvezJ/ezGPezCfdvdfdvV/dvOfdvG9fru97X9YKuN3K9QvKew89fv5fSIbD3EUILpIRed88Zc8+hcs8pcs+xcc85cc/BcM9JcL+jd7+zdr/Ddb/TdL/jc7/zcr8Dcr8Tcb8jcD8zdz9Ddj9TdT9jdD9zcz+Dcj+TcT+jcP9md/+Gdf+mC6pIV5GhwvWErkdyfxO9jYq2KtqpaB/430fHCnuX62ntzULPRePGlQwfNS44bmSwaNCg4MQh4wYHR04oGVM6bKQ7Vf/JFH5kh57HDR4yNjh23MgxReeXBMcOGzkuqP49pmRsyZgJJYOCpSPHBEsmFQ0fNazk3IEjR4wdVzTCNQB/OqHwIzP0fOSICUXDhgwKjhpfPGzIwODQksljg4OHjBj3ZyeKR3XqGog/HY9t7ikWVd9tkXOvRc4zFjnPWeS8Z5HzgUXODxY5P1nkbLLI2WKR4zqNaHOqWOQ0schpZpHTySKni0VOb4ucvhY5/S1yBljkFFvkDLLIGWeRM8EiZ65FzjyLnKsscq6xyLnTIucui5wnLHKessh5yyLnHYucbyxyvrPIWWeRs8EiJzU5+pyKFjkNLHIaWeS0s8jpYJHT3SKnp0XOMRY5x1nknGORc55FziiLnDEWObMscuZY5Cy3yFlhkXODRc7tFjn3ajnp/5szfPywcUNGDZv8v4kPWbxZckr0OakWOfUschpY5LSxyGlnkVNgkdPdIucoi5xjLHLOssg5xyJnhEXOKIucGRY5syxyllrkLLfIucUi51aLnIcsch6xyHnFIuc1i5zPLHK+sMj53SJnlUXOLoucvz4XjCKnlkVOHYucDIucTIucXIucfIucwyxyjrDIOc0i5wyLnAsscoZZ5Ey1yJlmkbPIImexRc6NFjk3WeTcZ5HzgEXOCxY5L1nkfGSR84lFzi8WOSstctZb5OywyEnVvjKJ6o+GKhWif7NTLHJOs8gZbJFzgUXOFIucqRY5Cy1yFlnkXG+Rc6NFzr0WOfdZ5DxnkfOCRc4HFjkfWeT8ZJHzi0XOFoucbRY5VSpGn1PNIqeZRU4Li5wuFjlZFjl9LXIOssgZYJFzkkXOIIucUoucCRY5kyxy5lnkzLfIucYi51qLnLsscu62yHnKIucZi5x3LHLes8j5ziLnB4ucDRY5myxyKlaKPifNIqeRRU4Ti5wOFjmdLHJ6WuT0tsg53CKnv0XOaVpOVH80nGPxZnda5NxlkfOERc5TFjlvWeS8Y5HzjUXOdxY56yxyNljkpKZFn1PRIqeBRU4ji5x2FjkdLHK6W+T0tMg5xiLnOIuccyxyzrPIGWWRM8YiZ5ZFzhyLnOUWOSsscm61yLndIucRi5zHLHJes8h5wyLnC4ucryxyVlnkrLHI+fMM8Shzki1y6ljk1LPIybTIaWORk2+RU2CRc4RFzlEWOWdY5JxlkTPMImeERc40i5wZFjmLLXKWWuT8wyLnFoucu7ScqP5ouM/izd7QcjqFng8uGjFi5Ljg2JIxQ4qGDZlSEhw10r2ComhccMiI0iEjhoybHCwaGyyePK5krHtxa6Bhlejft7FFTnuLnI4WOT0scnpZ5BxrkXO8Rc65FjlFFjmjLXLGWuTMtsi52CLnCoucKy1ybrPIucMi51GLnMctcl63yHnTIudLi5yvLXJWW+SstchJqhp9TopFTl2LnPoWOa0tctpa5HSzyCm0yDnSIudoi5wzLXLOtsgZbpEz0iJnukXOTIucJRY5yyxybrbI+ZdFzoMWOQ9b5LxskfOqRc6nFjmfW+T8ZpHzh0XOTouc3RY5adWiz6ltkdNYy4nqD4+WFm/WXstpGnoeWDRs2J8JY9XfHuPOHV406dziIePOHav+BnFf7hh9SufoU7pGn5ITfUpe9Cm9o0/pG33KodGnHB59ytHRpxwbfcop0aecFn3KGdGnnBV9yjnRp5wXfUpJ9CnnR58y1OJ4Mc724DTJNnGqBeVFNaLPmW6Rc7lFzhKLnH9a5NxskXO/Rc6DFjkvWuS8bJHzsUXOpxY5v1rk/GaRs90iZ6dFTvWa0efUtMhpaZGTbpHjWOTkWOQcbJFzqEXOyRY5p1rknG+RM8QiZ7JFzoUWOQssci6zyLnOIucGi5x7LHL+a5HzrEXO8xY571vkfGiR86NFzs8WOZstcrZa5FSuFX1OVYucphY5zS1yOlvkdLXI6WOR088i5wSLnBMtcgZa5JRY5IywyJlokTNdy4nqj4aLLd5smZZj+x3sVxbv+41FzhqLnHUWOcm1o89JtcipZ5HTwCKnjUVOO4ucAouc7hY5R1nkHGORc5ZFzjkWOSMsckZZ5MywyJllkbPUIme5Rc4tFjm3WuQ8ZJHziEXOKxY5r1nkfGaR84VFzu8WOasscnZZ5Px529soc2pZ5NSxyMmwyMm0yMm1yMm3yDnMIucIi5zTLHLOsMi5wCJnmEXOVIucaRY5iyxyFlvk3GiRc5NFzn0WOQ9Y5LxgkfOSRc7bFjmfWOR8o+VE9YfHTxZvtkbL2c+vbtZFn7Ih+pRN0adsiz5lR/QpFepGnVIp+pRq0afUiD6lTvQp9aJPaR59SsvoU9KjT2kVfUrr6FPaRp/SKfqULtGnZGsp+/2HopYT1cGpt23iQRaUzepHn9PCIqeLRU6WRU5fi5yDLHIGWOScZJEzyCKn1CJngkXOJIuceRY58y1yrrHIudYi5y6LnLstcp6yyHnGIucdi5z3LHK+s8j5wSJng0XOJoucig2iz0mzyGlkkdPEIqeDRU4ni5yeFjm9LXKOs8jpb5FznkVOsUXOGIuccRY5cyxy5lrkrLDIucoi53aLnDstch6zyHnCIucNi5y3LHK+ssj5xiJnjUXOOouc5IbR56Ra5FS3yGlgkdNCy4nqj4ZMizfL1nJsv4O9yOJ9p1vkXG6Rs8Qi558WOTdb5NxvkfOgRc6LFjkvW+R8bJHzqUXOrxY5v1nkbLfI2WlzYGkUfU5Ni5yWFjnpFjmORU6ORc7BFjmHWuScbJFzqkXO+RY5QyxyJlvkXGiRs8Ai5zKLnOsscm6wyLnHIue/FjnPWuQ8b5HzvkXOhxY5P1rk/GyRs9kiZ6tFTuXG0edUtchpapHT3CKns0VOV4ucPhY5/SxyTrDIOdEiZ6BFTolFzgiLnIkWOdO1nOhO/rR4s8u1nP386mZJ9CnLok+5IvqUq6NP+Uf0KbdEn3Jr9Cn/jj7lP9Gn/Df6lPujT3ki+pSnok95JvqU56JPeSH6lJeiT3k9+pQ3o0951+J48antwelL28RvLSjHNY16MMZHnzIl+pSp0ae81DT6+l+xyPnEIuczi5yVFjm/W+TssMjZZZFTo1n0ObUscoIWORkWOdkWObkWOYdY5BxmkXOKRc5pFjmDLXIusMiZYpEz1SJnoUXOIouc6y1ybrTIudci5z6LnOcscl6wyPnAIucji5yfLHJ+scjZYpGzzSKnSvPoc6pZ5DSzyGlhkdPFIifLIqevRc5BFjkDLHJOssgZZJFTapEzwSJnkkXOPIuc+RY511jkXGuRc5dFzt0WOQ9b5DxjkfOKlhPVH0BvWbxZkxbR5zSzyOlkkdPFIqe3RU5fi5z+FjkDLHKKLXIGWeSMs8iZYJEz1yJnnkXOVRY511jk3GmRc5dFzhMWOU9Z5LxlkfOORc43FjnfWeSss8jZYJGT2jL6nIoWOQ0schpZ5LSzyOlgkdPdIqenRc4xFjnHWeScY5FznkXOKIucMRY5syxy5ljkLLfIWWGRc6tFzu0WOY9Y5DxmkfOaRc4bFjlfWOR8ZZGzyiJnjUVOIBh9TrJFTlWLnHoWOc20nKj+aMiweLMRFjmjLHJmWOTMsshZapGz3CLnFoucWy1yHrLIecQi5xWLnNcscj6zyPnCIud3i5xVFjm7LHL+2qujyKllkVPHIifDIifTIifXIiffIucwi5wjLHJOs8g5wyLnAoucYRY5Uy1yplnkLLLIWWyRc6NFzk0WOfdZ5DxgkfOCRc5LFjkfWeR8YpHzi0XOSoucbRY5OyxyqmVEn1PDIqeFRU7QIifLIifbIucgi5xDLHJOssg5xSLnXIucwRY5o7ScqP5omGDxZpO1HNsr116weN+XLHI+ssj5xCLnF4uclRY52yxydljkVGsVfU4Ni5wWFjlBi5wsi5xsi5yDLHIOscg5ySLnFIucUoucwRY5kyxypljkzLfIWWiRc61FzvUWOXdb5NxrkfOMRc5zFjnvWeR8YJHzg0XOTxY5myxytljkpGVGn1PFIqeJRU4zi5xOFjldLHJ6W+T0tcjpb5EzwCKn2CJnkEXOOIucCRY5cy1y5lnkXGWRc41Fzp0WOXdZ5DxokfOURc5LWk5Uf3i8YfFmH2k5+3kpxSfRp3wWfcoX0ad8E33Kd9Gn/BZ9yh/Rp6yLPmVD9Clbok/ZFn1KSuuoUypEn1Ip+pTK0adUjT6levQpdaJPqRd9SiMtZb//UNRyorufj21iOwvKf1jkXGeR8x+LnHsscp62yHnWIuddi5z3LXK+t8j50SJno0XOZoucSm2iz6lskdPYIqepRU5Hi5zOFjm9LHL6WOQcb5FzgkVOkUXOQIucsRY54y1yLrbIucQi50qLnKstcu6wyPm3Rc7jFjlPWuS8aZHztkXO1xY531rkrLXIWW+Rk9I2+pwKFjn1LXIaWuS0tchpb5FTaJHTwyLnaIucYy1yzrbIOdciZ6RFzmiLnJkWObMtchZa5FxhkXOdlhPVHw03W7zZ7VqO7Xew6y3ed6PNwahd9DmVLHIaWuQ0tshpb5HT0SKnh0VOL4ucYy1yjrfIOdcip8giZ7RFzliLnNkWORdb5FxhkXOlRc5tFjl3WOQ8apHzuEXO6xY5b1rkfGmR87VFzmqLnLUWOUnto89Jscipa5FT3yKntUVOW4ucbhY5hRY5R1rkHG2Rc6ZFztkWOcMtckZa5Ey3yJlpkbPEImeZRc7NFjn/ssh50CLnYYucly1yXrXI+dQi53OLnB8scv6wyNmo5UT1h8d2izer0GFvzv5+2RV9SuXoU6pGn1Iz+pTa0ac0iT6lWfQp6dGntIo+pW30Ke2jT8mOPiU3+pT86FMKok/pHn1Kz+hT+kWfcnD0KYdrKfv9h6KWE9XB6UTbxFMtKB/JiS4nSb3eJKQbsTc1UCP0fOK4ooFDVebI4KCSklGuOjcq9VGhV2rul/roCPKy1cdGpT4+KvUJUalPCr3Scb/UZ4Veydov9YOV97yyfyP4UOVouNtU2/NK06jUh2hqwwY9dnzxuDFFA8f974YW7uCIWDs4RusgfIvdfmPGFE1WHxAOKpkUHDl+XHBkabB45PgRg8bqiSfaJhZrifu7X2VV21df9uh2D6lbRaU+xnYowx30j7WDkwJRDmk48UzbxAu0xP1dF/2iGt1+sY5uv1hHt5/t6PazHd1+MYzuEVFt6QOiWhcDYl0XA2JdFwNs18UA23UxIIZ1URTV6BbFOrpFsY5uke3oFtmOblEMo/t0KLc0htyxtkMV7uCSGN58QbSjFU5capt4XQy0t2i53htxevU9r8wMlDmwZqetd3C9BWo496ZoxyeceIdt4oMx0D5h+6Yvx/Cmb2m53mvzjzp7XmkaldralIY7OCLWDqI2peHEE20TbUzp5jr76sse3aS6e15pFZXaejIJd9A/1g6inkzCiWfaJtpMJmlRjW5arKObFuvoptmObprt6KbFMLo16+6rL3t0G0e1LhrHui4ax7ouGtuui8a266JxDOuiXVSj2y7W0W0X6+i2sx3ddraj2y6G0T0/lFsaQ661KQ13YGNKw7lRm9Jw4lLbRBtTGs7dP1P6akg9M1DmwHqb0nAHNqY0nBu1KQ0n3mGbaGNKw7lRm9Jwoo0pDefunyldGOJpGpXa2pSGOzgi1g6iNqXhxBNtE21M6YrG++rLHt0bQ+pWUamtJ5NwB/1j7SDqySSceKZtos1kcltUo3tbrKN7W6yje5vt6N5mO7q3xTC6d0e1pT8S1bp4JNZ18Uis6+IR23XxiO26eCSGdfFyVKP7cqyj+3Kso/uy7ei+bDu6L8cwuhVDXyuXxpBrbUrDHdiY0nBu1KY0nLjUNtHGlIZz98+UDg6pZwbKHFhvUxruwMaUhnOjNqXhxDtsE21MaTg3alMaTrQxpeHc/TOlY5vu23vZ6okhdauo1NaHu3AH/WPtIOrDXTjxTNtEm8Pd+6E7dOzfHwhhtfUfCOEOjoi1g6j/QAgnnmibaPMHwpeZ++rLHt2fQ+pWUamtt/RwB/1j7SDqLT2ceKZtos2Wviqq0V0V6+iuinV0V9mO7irb0V0Vw+hujGpL3x3Vutgd67rYHeu62G27LnbbrovdMayLGq2jGd2w2np0wx30j7WDqEc3nHimbaLN6CaHTm/dvxkzrLaeMcMdHBFrB1HPmOHEE20TbWbMah321Zc9ug1C6lZRqa239HAH/WPtIOotPZx4pm2izZbePKrRbR7r6DaPdXSb245uc9vRbR7D6GZGtaV3iWpddIl1XXSJdV10sV0XXWzXRZcY1kWvqEa3V6yj2yvW0e1lO7q9bEe3VwyjOzWUe2iyfe6AZMuhCndQGsObX5Ac5WiFE0fbJk6NgXa2luu9ET8dw0p5OtaV8nQMK+Vp25XytO1KeTqGlfJ0VCtlXUf7lRLOtV4p4Q5KY3jzqFdKOHG0beLUGGj3b6W07hywXinhXOuVEu6gNIY3j3qlhBNH2yZOjYF2/1bKaV0C1islnGu9UsIdlMbw5lGvlHDiaNvEqTHQ7t9KWdA1YL1SwrnWKyXcQWkMbx71SgknjrZNnBoD7f6tlKey7FdKONd6pYQ7KI3hzaNeKeHE0baJU2Og3b+VstYJWK+UcK71Sgl3UBrDm0e9UsKJo20Tp8ZAu38rJTNnzyszA2UOrPe3zOEObL5lDufeFIhyfMKJd9gm2nzLHM59wvZNbb5lDufu37fMj4bUHf523QdC1/kERoWeQxejB8KZbncpKvqG/p0V28OprPUr3X9BVt5f/Qf84c+pHOrTz/EJ9+lD/1mVQv0cPGNv/5G1uI/qoX8naWMZzklT0UDTuY9DtP6SIl471PBe4dcOm2F+b/dxuPZaasRrR2ivVYh47UjttYoRrx2lvVYp4rWjtdfSIl47RnutcsRrx2qvVYl47TjttaoRrx2vvVYt4rX+2mvhNvf050Nm7KtzOYdqufoYh/MDIWYft6uSpIj3C0S8VyDi/asE/N2PkiLeL8wTOT7hZXf8W4SWzy8Z13988bAhA48umTy234hB/YvGjBtSNKzfoEFjSsaO1asxbbWRr+uPSE2kLlJf2fC65NEg3HdqYP9GKayvYNCnRmjcR83A/251FcqnNqcs1rJqq2jQVyijNr3uiuVTW3ZZrGXVVsmgr1hGbXrdlcrI03W6JskwNvrrpnGNPGL5NIY5ZY1JWWOYZtBXMtRR0zBOaeVTW25ZrGXVVtmgTyujNr3uyuVTW15ZrGXVVsWgr1xGbXrdVcrI03W6JskwNvrrpnEtp20/v6wxKWsMqxr0VQx11DSMU9Xyqa1bWaxl1VbNoK9aRm163dXKp7aCsljLqq26QV+tjNr0uquXkafrdE2SYWz0103jWk7bfmFZY1LWGNYw6Ksb6qhpGKca5VNbUVmsZdVW06CvUUZtet01y6e24rJYy6qtlkFfs4za9LprlZGn63RNkmFs9NdN41pO2/7AssakrDGsbdDXMtRR0zBO4dzIv07d5dSI10xeunrEv/W5s3rEv/XjcvWIf+v7ZPWA9z4a+clHeB3or5n+nqke8W93uVLEaya/VD3i3/rxsXrEv/V9r3rAe1+sqvWXOmPfOvqG2rNieHQr2PO3o/tICfVfIbDvX9uBiPevEKEfGfp3nYD54dYQ3nbYn0rm5pbXp5I+HTeyfP7U0/ippF5L+H3TAv/76Zspp25Eezg3vL+7z+H9XX3aM6BoxKCRww8bUjJsUFhtoijrQdjjwkfssva48Gdg8D0uP/E9QNkPqe8BIj/TPkTrLynitUMN76V/pq3v5eFv1FIM46BvM6mB/3Uwuj5gaEsKeB9hIo+k7qNv6DkruocT2aAz/11tpk/IUj3qNrmRgKEtydBPSoQ2tYz3T/LoN7mMOv4uVx/7shwi4fjaPPTvso6vnUPL8ONrUXkdXyv603+3cP+V/OnfeHzVa9E/TXcf4e8s9eUwU1nHYNN3foeEXvNzDlHbQJ7PY5gT+ZdfQBuD8Hun+fPeuSbflxLRpr9/lYCv2+tf32aZPtHXxyfy+/XwsSlyTncfqTP+t47waxW018LrV5+XTX8JR/7Frn+rGP6+PvKvZPcR3t7d/kPXfv7pC8Lf1Ycf4WNOpRn71tQ31J4V4+OvvxRC/evH/0oaS3hskiP0kcsVItpaBfZy/1mPpg2/T4rWFn7P8F/1FbXXwrll9ZVq6KuWQV8xoq9Khr70tnDd7voO/xKJO7e56y/8m3/h7dX0rZ8+p+rfv4f/2h8xctyQ0skHjykpGlcy6LiR40oizYN+wNEfFSJ0kXleX/V6maDwvysY+g+U8V6Rfeo6t51gZjqF/l2WmckOLcPNTGF5mRmf/pjLDvef6k//RjOj1xL5MW60RsU9cOgfv7oP/Y/FpIjX9JPGIie8ww2MppPGwsx1tfcKt7k8nSNqijxGuA+fxz1vf01I+P2rBHzdzpzIPyDDPGUd1BuGltXHbEeXTD6laNiQQUXjhowcMaBk9PiSseP0MvSuUw1lRh5iUyPezqTTN5HkgPlxIM+yMg1bWB/tWVZ6fjycZVVWbfSzrMqqLXGW1V+PMs+yKmsMJc6y2p9v6/S69+dzqLK+qSTYutBVIWXauvA3c4nvAMp8JGxd4O9tXeT3AyZbVzeiPZzbKLTs7zhn//XtZgVf+s/KN32OFYgYW9OxzXR2Q+QxqnIEcyCw73oKPyKPEXq9bv/NtX4jdZGs+vYYeYaDyZYSjovhC7HKOi6atkm/Pp+O3C70h2m7iJzX9Ydp3Ye53T5KtH4jdZHvqe8jaXE6FskGfj/GIskwFmVdg2NaR6Z9NvK7yIoRmr6h56wYH7UC/ztekZ/hVhKoo1bgf49xFcuoUdpjRG4fAR/6r+wPf5bpmBt+L3fMCrR2/bXw8c/kH8Kv6/peWp89Qss1AwFPj1w1YD7LO7yOw98JVzFw6+8ffr2f9v7netSUFDB/5x35t1UVrS/T31EpHgyHhp695oAkQ00pBsbIv9GrGnhM67NChP7Iv+GpHKGX9kVh/moaX4phDKpG8If1x/4Nf+T4BAL/+zer+4j82/DvzigPs5m2z8gz9fUzQP0Yu7++TwuYx04fW10fvr3Z342daSxMx+BIHl2vj0Hk2JnOPI3cD1ID5n21qsbg9T7uI3K7Cd+hzXQsqBKR4/WeprmtSsRr+nyUVsZ7mq7eMf39X9bxp6z9PawfGHr2Wuf7OxeYfKovf8M7e+en8v94PNvZHx+iv3+8fTxeOxRJAfMcq/cVDCeXdXq6u/FPDC0nPrwp85H48Cbg74c3Qa1PnadCwHuDrxChDd9n2j24RV5m5M+4Olnx+oe96QOfyA+DqhjGO8nwPn/3R3Brrd9IXSSr6QOBsj54d99HP8k8cltwH31Dz1mxPRwTR5KB4++OqfH+4VX4pKm/+/AqGPr3/08fXg3X+o3URb7n/+8fXkUzFkmGsUh8ePW/dSQ+vLJ//N0fLH21dv21aD+8OlTr8+DQcnl+eHWk9v7ne9SUFPD3w6v9/bClvD68OuFveOL9w6uT/4Y/cnwCgcSHV2H9WaHn/4sfXg0MPZuOBeXx4ZXX8cd9+Pnh1dDQs+2HV31Dyyafmvjw6v/Ih1ePh5bZH14VdSuvD6982jhzfD4jxvjhlV7LX3/gRugic/Tt5xBNc4iH5lBNc6iH5jBNc5iH5nBNc7iH5ghNc4SHxuuqP12jXwV1lIfmaE1ztIfmGE1zjIfmWE1zrIfmOE1znIfmeE1zvIemv6bp76E5QdOc4KEZoGkGeGhO1DQnemhO0jQneWhO1jQne2hO0TSneGhO1TSnemhO0zSneWhO1zSne2jO0DRneGjO1DRnemjO0jRneWjO1jRne2jO0TTneGjO1TTnemjO0zTneWiKNE2Rh6ZY0xR7aAZqmoEemkGaZpCmSdE0JZqmJEJj+jBU8AsVn4/p2Y7pqs9IM+XPByXZ2UkR7xcImM1U+P2rBPycP/eaKdPZ+Pr4RF68pF+tmxTxWuqM/63DdLWuflZnP00XuW1FfkGkf+g3aMa+r+kGMLzduv0fE9iXV9eV9Qedn/6lICs/399tPTcr2qurI+9evj/ry33cqunCY+d+4VYaau+njaf7qDTDj3r9vzL66MBe7j/r0bTh96FdGX1QaDn85cs/Q/+O/DJiH9aAn8fJ3P3+ozPyOOnT3wFlHidNH6KZ7jiRJMeTZfrAXfK4kRTRv15vmmH8TV/6en1go39Ip+vTtDHU9fpyOF9vC3+IV8vQZ+T4mz5k0tv0/eKU0LLpyq3IK9VM24Xpbhe1DPle948Mv256Dr9PZFvk+5iY/Z5zwmNS1pV0pjHUPxw06cP9VYjQhz9I/LsPcdO0/HD/yYb+Tfuu5BwVyT9cqzvyFzJMnzW4uilR1pbiMXYTtD5HefSZ9Dd9Ru5bXusv8uSZsH5c6PnvPpA1fSnuvtekMnSVytD93dj6/NmSE+lnI3kv0tojt3/T+og8cSmsn631OSO0bPrSMfI4ZOpb/0LS9EVzWfOGaVvY320nLaK2sH5e6PnvvryL/DKxb+jfWTE9sv/yBfqXc6Z5MvILlbB+4d/wR86dgUDZf69E8uh6fQzCbPtz/3t/xm7vPGEaO9MXSpFjtyz0XNZx48/6Z+ztSz/Gu4/UGb7U5rjje6vGEblPVNDe12v96vpo12+kD9C/YKwc0VdZvytimqdN+6rpGBa5r4Z/cc9rfZk8i9cJP17Hyng/Ae5fgbLHIHx8/bOuGXvb9W3YfYT/lgvfXTNSr8+1uv7OsFbFXaHlyL/19fdzdY+VoUvyeP6zD0Nbaig3vJ70v4H9+Bygyoy945AS8Z46T3KEPnK5QkTbIxG1VZ3xv3XrnwOE3zO8bvXPGMK5ZfVVwdBXLYM+LaIv02cKepv+9849oeUqEe8p7Xv0bcrd3reEuSKYpN/X3+9SB+axv0vNzU58l7rvcqTmcE1zuIcm8V3qvsuRmsR3qfsuR2oS36XuuxypoXyXqmtKNE2Jh6ZU05R6aM7XNOd7aAZrmsEemiGaZoiH5gJNc4GHZqimGeqhGaZphnlohmua4R6aEZpmhIdmpKYZ6aEZpWlGeWhGa5rRHpoxmmaMh2asphnroRmnacZ5aMZrmvEemgmaZoKHZqKmmeihmaRpJnloJmuayR6aKZpmiofmQk1zoYdmqqaZ6qG5SNNc5KGZpmmmeWima5rpHpoZmmaGh2amppnpoZmlaWZ5aGZrmtmaJkXTzNE0cyI07PM0crMO3Hka9t8//v9+nsa5mi5y2yrrPI3w9ms6T2POjL39XxDYl1fvo6zPPf28SLogqyDP57+9jOdpRK7L1Bn7vrf+mr6+9JsDh9eXey7GxSFNX23M3EelGX7U5P+5GEMCe7n/rEfTmj6DCb9nPJ+LcV5oOXwuxuuhf5d1Lsb+HKv09zF9Bx3Wmb7rTopYjva7btPx0t/jd04B+/yLLMf0HaW+nUyIqEv/vDfFkFtRe13XP6L1OTli3fg0l/3128D6RYwpHu+p8/jzPdTeu17/9d1BwPydyl+fxUboZwX2XRfhC6xStH4qGfoJ66sa3le/iCvye92qEe/r9V1CiuH99O96fD3PQbtoSf9cNNK/+bROC/fXv4Xfv0oEq1/+razfdncfpouWTOtP7+uv7wn9vVI1q8BkUvQfsXUfqdprVTXAdyIY/TBq7sP0RWH4vdyD3BKtPXKnTjHkRu58Yf01Wp/LQ8tl3d6+ZsC885tYkgL/u/MGAmVPrLohjHwtnFfVgyPSCPzdbeEjv4z+uyvBI78QDutvCD0fmCuv//dH6r22Aa8rr2/+G/7IA3wgUPZOH8mj6/UxCOvD69J0pbO/V17nlnnldSUDT+SV1+EvoqM5eUM3BO4jdYYvtf158sb3GkfkOqygve/frS/3Ebl+/+7q8PD41YrQ6+vaZOKrRrxPiuF9dJbIO9voJ1SY9JEGKKx/KPT8dyfw/d0xeX9+HuRAnIykm1Kvk5Ge3I8xcB+mP/APxPa8z11CtPfVawwE9u949XcnI4XHz3QyUuQfaKYPfPTxj9xm/+4uAJEnnYb1r4Se/+5kJH3/Co/B/v5xFu8nI70dKHsM9DuKVfShhqzQT9f8yRbqX/9wO8ytv394P9I/GArr4uWkonAt0Z5U9F1gL7deo3681OtOjtBHexKS/gHY/pyEpPeVFtFXpRj6KuuEpkpR9pVWRl+RH8xFc3LUB+H+Av6eoPez9p6/hpb/7gS9zWXokjye/+zD0JYayqWfoLcxorb/H07Q+z20XB4n6IW3KXd7vyYEgT5BL7ug3O7U68sHp9lZiRP0IpYjNYdrmsM9NIkT9PZdjtQkTtDbdzlSkzhBb9/lSE3iBL19lyM1iRP09l2O1CRO0Nt3OVKTOEFv3+VITTycoKdr5miaOR6aizXNxR6auZpmrofmEk1ziYdmnqaZ56G5VNNc6qGZr2nme2gWaJoFHpqFmmahh+YyTXOZh2aRplnkoblc01zuoVmsaRZ7aJZomiUemqWaZqmHZpmmWeahWa5plntortA0V3hoVmiaFR6aKzXNlR6aqzTNVR6aqzXN1R6aazTNNR6af2iaf3hortU013portM013lortc013tobtA0N3hobtQ0N3po/qlp/umhuUnT3OShuVnT3OyhuUXT3OKh+Zem+ZeH5lZNc6uH5jZNc5uH5nZNc7uH5g5Nc4eH5k5Nc6eH5t+a5t8emrs0zV0emv9omv94aO7WNHd7aO7RNPd4aO7VNPd6aP6raf7roblP09znoblf09zvoXlA0zzgoXlQ0zzooXlI0zzkoXlY0zzsoXlE0zzioXlU0zzqoXlM0zzmoXlc0zzuoXlC0zzhoXlS0zzpoXlK0zzloXla0zztoXlG0zzjoXlW0zzroXlO0zznoXle0zzvoXlB07zgoXlR07zooXlJ07zkoXlZ07zsoXlF07zioXlV07zqoXlN07zmoXld07zuoXlD07zhoXlT07zpoXlL07zloXlb07ztoXlH07zjoXlX07zroXlP07znoXlf07zvoflA03zgoflQ03zooflI03zkoflY03zsoflE03zioflU03zqoflM03zmoflc03zuoflC03zhoflS03zpoflK03zlofla03ztoflG03zjoflW03zroflO03znofle03zvoflB0/zgoflR0/zooflJ0/zkoflZ0/zsoflF0/zioflV0/zqoVmpaVZ6aH7TNL95aH7XNL97aP7QNH94aFZpmlUemtWaZrWHZo2mWeOhWatp1npo1mmadR6a9ZpmvYdmg6bZ4KHZqGk2emg2aZpNHprNmmazh2aLptniodmqabZ6aLZpmm0emu2aZruHZoem2eGh2alpdnpodmmaXR6a3Zpmt4cmMHOvJrwcqUnSNEkemmRNk+yhSdE0KR6aVE2T6qGpoGkqeGgqapqKHppKmqaShyZN06R5aCprmsoemiqapoqHpqqmqeqhqaZpqnloqmua6h6aGpqmhoempqap6aGppWlqeWhqa5raHpo6mqaOh6aupqnroamnaep5aOprmvoemgaapoGHpqGmaeihaaRpGnloGmuaxh6aJpqmiYemqaZp6qFppmmaeWiaa5rmHpoWmqaFh6alpmnpoQlqmqCHJl3TpHtoMjRNhoemlaZp5aHJ1DSZHprWmqa1h6aNpmnjoWmradp6aNppmnYemvaapr2HpoOm6eCh6ahpOnpoOmmaTh6azpqms4emi6bp4qHpqmm6emiyNE2Wh8bRNI6HJlvTZHtocjRNjocmV9PkemjyNE2ehyZf0+R7aLppmm4emgJNU+ChKdQ0hR6a7pqmu4emh6bp4aHpqWl6emh6aZpeHpremqa3h6aPpunjoemrafp6aPppmn4emoM0zUEemoM1zcEemkM0zSEemkM1zaEemsM0zWEemsM1zeEemiM0zREemiM1zZEemqM0zVEemqM1zdEemmM0zTEemmM1zbEemuM0zXEemuM1zfEemv6apr+H5gRNc4KHZoCmGeChOVHTnOihOUnTnOShOVnTnOyhOUXTnOKhOVXTnOqhOU3TnOahOV3TnO6hOUPTnOGhOVPTnOmhOUvTnOWhOVvTnO2hOUfTnOOhOVfTnOuhOU/TnOehKdI0RR6aYk1T7KEZqGkGemgGaZpBHpoSTVPioSnVNKUemvM1zfkemsGaZrCHZoimGeKhuUDTXOChGapphnpohmmaYR6a4ZpmuIdmhKYZ4aEZqWlGemhGaZpRHprRmma0h2aMphnjoRmracZ6aMZpmnEemvGaZryHZoKmmeChmahpJnpoJmmaSR6ayZpmsodmiqaZ4qG5UNNc6KGZqmmmemgu0jQXeWimaZppHprpmma6h2aGppnhoZmpaWZ6aGZpmlkemtmaZraHZo6mmeOhuVjTXOyhmatp5npoLtE0l3ho5mmaeR6aSzXNpR6a+ZpmvodmgaZZ4KFZqGkWemgu0zSXeWgWaZpFHprLNc3lHprFmmaxh2aJplnioVmqaZZ6aJZpmmUemuWaZrmH5gpNc4WHZoWmWeGhuVLTXOmhuUrTXOWhuVrTXO2huUbTXOOh+Yem+YeH5lpNc62H5jpNc52H5npNc72H5gZNc4OH5kZNc6OH5p+a5p8emps0zU0emps1zc0emls0zS0emn9pmn95aG7VNLd6aG7TNLd5aG7XNLd7aO7QNHd4aO7UNHd6aP6taf7toblL09zlofmPpvmPh+ZuTXO3h+YeTXOPh+ZeTXOvh+a/mua/Hpr7NM19Hpr7Nc39HpoHNM0DHpoHNc2DHpqHNM1DHpqHNc3DHppHNM0jHppHNc2jHprHNM1jHprHNc3jHponNM0THponNc2THpqnNM1THpqnNc3THppnNM0zHppnNc2zHprnNM1zHprnNc3zHpoXNM0LHpoXNc2LHpqXNM1LHpqXNc3LHppXNM0rHppXNc2rHprXNM1rHprXNc3rHpo3NM0bHpo3Nc2bHpq3NM1bHpq3Nc3bHpp3NM07Hpp3Nc27Hpr3NM17Hpr3Nc37HpoPNM0HHpoPNc2HHpqPNM1HHpqPNc3HHppPNM0nHppPNc2nHprPNM1nHprPNc3nHpovNM0XHpovNc2XHpqvNM1XHpqvNc3XHppvNM03HppvNc23HprvNM13HprvNc33HpofNM0PHpofNc2PHpqfNM1PHpqfNc3PHppfNM0vHppfNc2vHpqVmmalh+Y3TfObh+Z3TfO7h+YPTfOHh2aVplnloVmtaVZ7aNZomjUemrWaZq2HZp2mWeehWa9p1ntoNmiaDR6ajZpmo4dmk6bZ5KHZrGk2e2i2aJotHpqtmmarh2abptnmodmuabZ7aHZomh0emp2aZqeHZpem2eWh2a1pdnto/rorprYcqUnSNEkemmRNk+yhSdE0KR6aVE2T6qGpoGkqeGgqapqKHppKmqaShyZN06R5aCprmsoemiqapoqHpqqmqeqhqaZpqnloqmua6h6aGpqmhoempqap6aGppWlqeWhqa5raHpo6mqaOh6aupqnroamnaep5aOprmvoemgaapoGHpqGmaeihaaRpGnloGmuaxh6aJpqmiYemqaZp6qFppmmaeWiaa5rmHpoWmqaFh6alpmnpoQlqmqCHJl3TpHtoMjRNhoemlaZp5aHJ1DSZHprWmqa1h6aNpmnjoWmradp6aNppmnYemvaapr2HpoOm6eCh6ahpOnpoOmmaTh6azpqms4emi6bp4qHpqmm6emiyNE2Wh8bRNI6HJlvTZHtocjRNjocmV9PkemjyNE2ehyZf0+R7aLppmm4emgJNU+ChKdQ0hR6a7pqmu4emh6bp4aHpqWl6emh6aZpeHpremqa3h6aPpunjoemrafp6aPppmn4emoM0zUEemoM1zcGaJkXTHKJpDonQoH+gJjvrwP1ATXZW4gdqtNf0H6gJJu/VRW5bZf1ATXj7Nf1ATXi7dfvvmLwvr65LiXjPQOB/f6DGj/EvyM7NK48fY/qzxhn79h8eM/eROsM81u7j/7V3Bq9NBGEU392kJqUWhLagR/UgiIdUKgheKpgWpOhBRARBUEsR0UrpxYOQgz2I4FX639pNdjbfe/lmN8GsJvIWJC+b387OzM7ONhHmN831yrczM0eEvsvlNf1i/0PTn/nWGTTR3ublNbfNOBq2x7Dl90uzL5xzkeU114s3QV4zoHvRk9csqsiroTX2KudJ2z88byynyGa8rnbXaW/X6X9en5rHRprgGtwth++aPrS8zeF4u+9B0elXnDK5/1ed9nhrZOd1v1e88eRK7F6YVa5kj+c+tMelkddwHt7H5/Hq3PQzJ/SJ56NoOfXhsXYpwrOPIvB7RaPrfA5dc3woP3PKb1Swc7Fx/Q+ycbsf09zrreOZcy+z2drWSvy+e27O/TRSZlpTJt9bseuXUR0C/6zm+vFziMfKiyzOdSq4ur5teN3Wbc+vYOv7iq6HHf/e9WDnTeDfmGv8muY071m6XlG2ddF0nGOrnhveWJh27HSpbYE/qhk7jfon7vYq/RP2/on5Jz5MOXd5bofU7OP+rHM7hLqFa2mfmeHYf+nusO2J9d3JFPPGsP2DcVl2js+39qCRtg3dHWc039h7YsWcN3Z9LT/r9eW/A6y7Y5XK8p7T9nz8nPbuVW8O43v1a8318v5mCX0w7Vy56O6ObzV90LSn4Lt5Fvyg7/Arzvly7ryCSyOvwzKcfe3i2GX3FPyi3wH+B0/Bz+LN3/AUnJvfHO7Qvct/Y87rvM16Cka/5dltzvWXp8DUqfx/CsM8MkxqmL5h+hFmzzB7EWbfMPsRRp4CzMzIU4CZGXkKMDMjTwFmZuQpwMyMPAWYmZGnADMz8hRgZkaeAszMyFOAmRl5CjAzI08BZmbkKcDMjDwFmJmRpwAzM/IUYGZGngLMzMhTgJkZeQowMyNPAWZm5CnAzIw8BZiZkacAMzPyFGBmRp4CzMzIU4CZGXkKMDMjTwFmZuQpwMyMPAWYmZGnADMz8hRgZkaeAszMyFOAmRl5CjAzI08BZmbkKcDMjDwFmJmRpwAzM/IUYGZGngLMzMhTgJkZeQowMyNPAWZm5CnAzIw8BZiZkacAMzPyFGBmRp4CzMzIU4CZGXkKMDMjTwFmZuQpwMyMPAWYmZGnADMz8hRgZkaeAszMyFOAmRl5CjAzI08BZmbkKcDMjDwFmJmRpwAzM4vgKbBMlaeA15IfljMYvYa1jrIEj9kt3vf+YLvf29mRw2C5HAb8WXsw2Y66NfGvZmOOxxY7DMrvEwl6Cm4WB9m188O27Gvn38jG9R62x7Dldx6zL5xzkdfOv1a8CWvn3zJt5PEXxmSWTJZ1+eLfZpEPP74/7X96e/Ll8+nhuyfHp4cHx0cJbXb82Dlu4rwZcq3I8a1kcq4s3ztl5O1d9LU2g/Ojaq3Nch3K4nUzmX9bembtwa1myu91nPZtmrxF7bRjcHdOdQjllb87JJNbRp+VvxtQ/dL51287oa3lnCtsGyaX8yLVsZl1kUfrMObbWjPlu2PFrj+8Rp+Fa9Z2jksj7zN6rWLTinLXnc9CmRvOvt8df/MyPog5AA==","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block","attach_len_to_msg_block","build_msg_block","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"call_destroy_note","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"16137133351287663689":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["get_notes_internal","get_collapse_hints","decompose_hint","get_key_validation_request","notify_nullified_note_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"test_code_gen","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"a_field","type":{"kind":"field"},"visibility":"private"},{"name":"a_bool","type":{"kind":"boolean"},"visibility":"private"},{"name":"a_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"an_array","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},{"name":"a_struct","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::DummyNote"},"visibility":"private"},{"name":"a_deep_struct","type":{"fields":[{"name":"a_field","type":{"kind":"field"}},{"name":"a_bool","type":{"kind":"boolean"}},{"name":"a_note","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::DummyNote"}},{"name":"many_notes","type":{"kind":"array","length":3,"type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::DummyNote"}}}],"kind":"struct","path":"Test::DeepStruct"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7dvdauJAHAXwd5lrL+b7P+OrLEuJrS2BEIvahUX67jvpNqm7zamUpiS050YcPUlmfkI8OHhSN9vNw91V3d7uDmr946Sa3XV1rHdtGZ2UiU+vHe6rthsejtX+qNYmZr1S2/amPBWtH1fqtm62au1Nef4qbSXJc9omnYe0iWYk7XxMz2kXvLmQNkZH00/FaPFD3tkwlvfW9nF/dnbnR09u83BuSefhnytlhDSIJpEG0WTSABqrSYNoDGkQjSUNonGkQTSeNIgmkAbRsA1DGrZhSMM2DGnYhhGNYxuGNGzDkIZtGNKwDUMaTxpEs/w2nNMw/bKWSzQpxT6edfgQzfLb8Gw0y2/Ds9Esvw3PRjNBG3bZ93dKl0VeFptidwmvP/8So+1MYuhXLjGm7/ll4i1pEI0jDaLxpEE0gTSIJpIG0QhpEE0iDaLJpAE0QZMG0bANQxq2YUjDNgxpPGkQDdswpGEbhjRsw5Bm+W14rt8qw/Lb8Fw0cflteDaa5bfh2Wgm2LkveP0VotiXG2X3y/zrdBiWGt1ZVsvTdCbYLY8S3DAdsRem81U/V0/IaSADISeALIPNvm6a+u7qn3966e5hfHNWhkIlQf9/oxjftHzzkPFNyLcPMe885LEMf1X7uto022593bsP7XW/3DI8/r7/+04J/wE=","brillig_names":["pack_returns_oracle_wrapper"]},{"name":"test_setting_fee_payer","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"tZTdisMgEIXfxetcaP2ZmbzKUopp0yKIKUm6sIS8+5rdNdBNoMxFb8Sj53MGD8wkLm3zuJ1CunaDqD8mEbuzH0OXspqE0j9nw92nRQ6j70dRK0eyEm265C1IOVfiGmIraqPyfuPWZNSfWxPA6lbo5mMllHl/CbtXAggLhFLaFyVQkytua9RTia0bkIr5YFavVno+ZtX0IcZwOz19tVwWh3udEpRGCf+9VglHbAQkH1F85MBHNB8xfMTyEcdHgI/w0wd++shPH/npIz995KeP++kbWhHYIJaPOD4CfAT5CDGROctP3wffxHaZOsvtI53LEMpy/Lr/3mTzNw==","brillig_names":["debug_log_oracle_wrapper"]},{"name":"emit_nullifier_public","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAk4AIBEAAAiAAwxAgABIyUABHgAgAQNAAAAgASAAyEAABCAAzkBAAAjKwAYyhjK","debug_symbols":"bc9LCsMgEAbgu8w6C21SfFyllKCJBkE0qCkU8e41rZSUZiP8zjfDTIZZyW0ZjdM+Ar9lsH4SyXhXUy4dyGCsNct4/Aa0Pxi9fVyF22NMIiTglFHWgXIzcIYwrhO0sQr4gFHp/nRPyaXpnjLy1ZheTzShA2qa1MYffS81PkQwQlrVdtebmw6npOf6qVT8Ag==","brillig_names":["emit_nullifier_public"],"assert_messages":{"15":"Stack too deep"}},{"name":"emit_unencrypted","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"value","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"zd3dbtpAEIbhe/FxDnZm/2ZyK1VVkV8hIRIlpFIVce8lCTG0TsQJu35PohgW5hHyfFrbeHkdbm6vXu5/Ldd3D8/D5Y/XYfVwvdgsH9a7rdftxXD1tFytlve/jh8ewtsfCe/jnx8X67fN583iaTNcikqMF8Pt+ub9/yK797hbrm6HyyRhezEZX6vvR1us41ix/NVYj3U/uHqN/4z+eTGI0EBKA0UaKNFAmQYqNFClgYwGchhIaUmttKRWWlIrLamVltRKS2qlJbV+l9SuI0g1nABZCJ8gzSdAsarsB8cafRytwd9BRgM5DBQDDSQ0kNJAkQZKNFCmgQoNREvqSEvqSEvqREvqREvqREvqREvqREvqNENS2+dbx93rJqBCA1UayGggh4FyoIGEBlIaKNJAiQaiJXWmJXWmJXXt/wmZHkAaJ6D+Se1SPkEeJyALNJDQQEoDnTupY9r+dxrTUvsSuX2J0r5EbV/C2pfw5iU8tC8h7Uto+xLtu9vbd7e3725v393evru9fXf7Wbr7nBfrQ8CJBCdSnOibZNJsB5GVc06EooynzqLo0UQofYgSTpRxooITVZzIcCKnib776umMIsGJFCfCZbbgMltwmS24zBZcZgsuswWX2YrLbMVltuIyu8zQa9FGUfKJqM6wH5U0imqcis69H00Pm6VqhxqxQ43UoUbuUKN0qFE71LAONbx9DQsdanToc+vQ59ahz61Dn1uHPrcOfW5n6fOz3lFlOJHTRB5wIqXN1XyGI/46Xq6OlqaihBNlnKjgRBUnMpzIYSINYVaRx6lIYMeOGhQnijhRwokyTlRwoooTGU7kNJHQzq6p4DJbcJktuMwWXGYLLrMFl9nS/xvhlsfrD5btSPRxg74GnEhwIsWJIk6UcKKME5VZReULUcWJDCdymigGnEhwIsWJIk6UcKKME+Eye4aVOszHs37mdSJKtJvmdIaVKE6JEk6UcSLD7dkz3MGr8fAZ6UQ0w2ILp0SCEylOFHGiGfIoHro/TZcKnGHFhVOighNVnMhwIqeJSsCJaOsuaMHNIQtuDllwc8iCm0OWghNVnMhwItpKOVppS+VoxWV2xWV2xWV2xWV2xWV2ZWX2drf5e/G0XFytbvc/0nP3sr4++s2ezZ/Hj2d2g/8C","brillig_names":["emit_unencrypted"],"assert_messages":{"282":"Stack too deep","215":"attempt to add with overflow","196":"Array index out of bounds","257":"Array index out of bounds","222":"Array index out of bounds","276":"attempt to add with overflow","264":"Array index out of bounds","245":"attempt to add with overflow","204":"Array index out of bounds","252":"attempt to add with overflow"}},{"name":"test_setting_teardown","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"3ZPdioMwEIXfJddeZPLjJL7KspTY2hIIsahdWKTvvqPrz7oKsrCl0BvJMecw34inZaciv10OPp7LmmVvLQvl0TW+jKRaBrJ/V19d7GTduKphGaSWJ6yIJzoi5/eEnX0oWKaAziu3tAoGt7SIkxtMen9PGKjHj9BbIxClGkKIuDdCcG7FYBcchF0MWfsJY+TnYCazhR4o/Q8gkHYGMntAgms9+zWme34weloYjIHVV8VXWMI8YQkAnKGkNksoUnnlQ/CXw6KLvHtI2GyLkFNbRCp//W1S/DVDAvr6m+0k6jGp1I+2cU1Rkh+u8i4PRYfd3d7icdyCZPN5/b4h8xc=","brillig_names":["pack_arguments_array_oracle_wrapper","set_public_teardown_function_call_internal"]},{"name":"dummy_public_call","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"JAAEAQIlAASAQwABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAg4AIBDAAAiAA8eAgEAAR4CAAACCjgBAgMhAgAOAAM5AQAAIyUABHgAgAQNAAAAgASAAyEAABOAAzkBAAAjKwAYyhjK","debug_symbols":"pZHRCoMgFIbf5Vx3ofNo2auMEVYWgliUDUb07rOtRqPBaLuR8+v3ywdnhFLnQ50ZVzU9pOcRbFMobxoX0jhFkHfGWlNn22sg8yEfeN8qN6feq85DSoUkEWhXhjEmJHxQGashRRrmHY2EJQuNBMWLpgn/QAuOKy24YG/0JQJK/hdiUvCFZjLGb0KY0FUIZbwTokeF5tLplxI7XJpCvKrOqNzqZdXV4IrN5v2tfb4E+A4=","brillig_names":["dummy_public_call"],"assert_messages":{"13":"Function dummy_public_call can only be called internally","18":"Stack too deep"}},{"name":"consume_message_from_arbitrary_sender_public","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"content","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"},{"name":"message_leaf_index","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"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","brillig_names":["consume_message_from_arbitrary_sender_public"],"assert_messages":{"250":"Array index out of bounds","506":"Array index out of bounds","610":"attempt to subtract with overflow","1250":"Array index out of bounds","793":"Array index out of bounds","1049":"attempt to add with overflow","1238":"attempt to multiply with overflow","848":"Array index out of bounds","1305":"Array index out of bounds","775":"attempt to add with overflow","903":"attempt to add with overflow","830":"attempt to add with overflow","696":"attempt to multiply with overflow","885":"Array index out of bounds","1202":"attempt to subtract with overflow","812":"Array index out of bounds","489":"Tried to consume nonexistent L1-to-L2 message","550":"attempt to subtract with overflow","977":"Stack too deep","782":"attempt to add with overflow","971":"attempt to add with overflow","648":"Array index out of bounds","837":"attempt to add with overflow","892":"Array index out of bounds","1337":"attempt to add with overflow","819":"Array index out of bounds","685":"attempt to add with overflow","618":"Array index out of bounds","929":"Array index out of bounds","606":"attempt to multiply with overflow","667":"attempt to add with overflow","1246":"attempt to add with overflow","1313":"Array index out of bounds","655":"Array index out of bounds","1222":"attempt to add with overflow","576":"Array index out of bounds","637":"attempt to add with overflow","954":"Array index out of bounds","1210":"Array index out of bounds","625":"Array index out of bounds","881":"attempt to add with overflow","936":"Array index out of bounds","485":"L1-to-L2 message is already nullified","674":"Array index out of bounds","863":"Array index out of bounds","534":"Array index out of bounds","595":"attempt to add with overflow","266":"attempt to add with overflow","644":"attempt to add with overflow","565":"attempt to add with overflow","1260":"attempt to add with overflow","1321":"Array index out of bounds","614":"attempt to subtract with overflow","870":"Array index out of bounds","925":"attempt to add with overflow","1242":"attempt to subtract with overflow","718":"attempt to subtract with overflow","523":"attempt to add with overflow","907":"Array index out of bounds","1230":"attempt to add with overflow","706":"attempt to add with overflow","572":"attempt to subtract with overflow","554":"Array index out of bounds","804":"attempt to add with overflow","859":"attempt to add with overflow","530":"attempt to subtract with overflow","786":"Array index out of bounds","914":"Array index out of bounds","841":"Array index out of bounds","1030":"Array index out of bounds"}},{"name":"consume_message_from_arbitrary_sender_private","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"content","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["build_msg_block","attach_len_to_msg_block","get_l1_to_l2_membership_witness","directive_invert","directive_integer_quotient"]},{"name":"assert_public_global_vars","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"chain_id","type":{"kind":"field"},"visibility":"private"},{"name":"version","type":{"kind":"field"},"visibility":"private"},{"name":"block_number","type":{"kind":"field"},"visibility":"private"},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"fee_per_da_gas","type":{"kind":"field"},"visibility":"private"},{"name":"fee_per_l2_gas","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASASQABJAAEAwAkAgQGByQCBAAIHxgACAAHgEMdAAWARoBGKwiAQwABKwiARAACKwiARQADKwiARgAEKwiARwAFKwiASAAGIgAPOACASQAAIgApHgIEAAcKOAcBCCECABQACDkBAAAeAgUAAQo4AQIHIQIAGAAHOQEAAB4CBgABCjgBAwIhAgAcAAI5AQAAHgIHAAEKOAEEAiECACAAAjkBAAAeAgkAAQo4AQUCIQIAJAACOQEAAB4CCAABCjgBBgIhAgAoAAI5AQAAIyUABHgAgAQNAAAAgASAAyEAAC2AAzkBAAAjKwAYyhjK","debug_symbols":"nZXbisIwEIbfJddeZJrJHHyVZZGqVQqlitaFRXz3rW4PaiopuSlN+39h8jFJrmZbrC/7VVnvDmez/Lqa6rDJm/JQt6PrbWHWp7Kqyv3q+bOx9wfQI38+5vV9eG7yU2OWgF5gYYp6+3hXbufYlVVhlgj2tgjySOy6OJK4IQ3iJ9Iknrs0CeNL+nthgOMlEcBLSXdM0jBNwjI7jRHqiBHGvLHrTSAjxbwp9JOTOv/uLYMZJTEHK8nSMJeG4TTGgAPGLupNrO+9CWjUm/RptpYCb35GST4LVkJpGKdhH7qbdcTkrU2nvI37VAQj3th6GLyRBt50RkkZva/E2TQM0rAP3S3kR0xi55u3znZxb6P7lEGp95ZB4M25eElqg53jMA3zadiH7lY/HovKLtZvOpwGqOSj3rKh3wCDe8HxjJLUBSuRNEwTsFs7/MlPZb6uiu7q3V3qzdNN3Pwe//+04T8=","brillig_names":["assert_public_global_vars"],"assert_messages":{"35":"Invalid fee per da gas","27":"Invalid block number","23":"Invalid version","31":"Invalid timestamp","39":"Invalid fee per l2 gas","44":"Stack too deep","19":"Invalid chain id"}},{"name":"assert_header_private","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"header_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZrLasJAFIbfZdYu5sw5c/NVikjUKIEQRWOhSN+9U2tiShNSesHFn6zm8jOH70wWHyQXtclX592yqLb7k5o/XVS5X2d1sa/S7KKIr2unQ1a9T091dqzVnFzUM5VXmzT0Wr/O1LYoczUXSuMvaeODv6VN0LFNk6OeNIsLtzRboZE0kY5NnNJj2jwb25cPwTXxqO09Lb2Hm9ie7UM3vJgpkqk1Q62xU2uGWuOm1gy1xv++NRyFGtjo/R02uGuJ8P8lYm8Jmxrb1LAko0WMaa6YWXObNr4vTdqZ9nTtmMcuTYxp4tJ5JX5waUZj4RIWrsHCZSxcwcK1WLgOC9dj4QYsXCyrYiyrYiyrYiyrYiyrYsHCxbIqxrIqxrIqxrIqxrIqwbIqwbIqwbIqwbIqESxcLKsSLKsSLKsSLKsSLKuyj7Eq6++4nsZw/+4rtSUs3O9YlfWfcBdptjoWZVnslt2/idLyc3YsslWZ36bbc7Xu7NYvh4+ddMQb","brillig_names":[]},{"name":"deploy_contract","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7Z3RbtswDEX/Jc99ECmKovorwzCkWzcECNKh7QYMxf59TjrZzqJY0CZXnqw+FHHDK+seOjHZKPbL5tP93bcvH3aHzw9Pm9t3L5v9w8ft8+7h0G29bECf/vb0dXs4bj49bx+fN7fATt1s7g+fuodWqZ83m8+7/f3mlqB7fBGNVuzvaBTl+mhgCERrYvkdrQ1BJBpAOR8O3Q/28RpNKF6EfbhTZoim4ODo+rGtjIPf32yAGppraExDcw0NNzTX0Nh/R6MdgTfrrB3MCp92IfPvwgV3Ych5FRhzpDO5E1I+mrQa7QJDVBWhH1rJkGDnjvNB9fbzgdF8cDyfwLGswLNHwtEhgRyaBrA/8qk78kbR9uQVVuQVV+RVr8grrcirWZFXXpFXuyKvsiKvbj1edVV1k3Z+aCLQF16rqpsiXquqmyJeq6qbIl5pRV6rqpsiXquqmyJeq6qbIl6rqpsiXquqm6a9UlV1E0NfI7K+qBGpqrop4rWquinitaq6KeKVVuS1qrop4rWquinitaq6KeK1qrop4rWqumnaq6mqbpL+M1ISvqgRTVV1U8RrVXVTxGtVdVPEK63Ia1V1U8RrVXVTxGtVdVPEa1V1U8RrVXXTtFd++7oJRfuhtYp5Zfbr45DFRrxq6Mlo1HzmNQSdsV+4pliP2QTX6hH2SaLRSsC/WKvH0KgXoI6NegHqulEvQJ0a9QLUTaNegDo36gWo20a9AHVp1AtQd43621O3rTctQb31piWot960BPXWm5agTo16Aeqr7k2NHahbiFHP961su+retBj1hfemVvlgFIEIdUDouaCMqCsJRA/MZcxQuYW9Gy28j20ZsgvveVuGZOH98XIyVOo8JAvvpVuGZOF9d1qGYJQhZyMZAgPko1l0LLpgjhbepbccdTmihfc5GvocOYzliFXPxfIwaQ24MOpL7+nrpF62px99afT1GmWSp9tlX8aSmMh8tNLG/yNAGXWWquOEZGkTcgubkMtSuhvyJwcj9mxCx13A/LvA+XeR5dwPRqsh3MVebZptH67ZjS76KMF/i2H/lW6tTeyCkgUbRkcNZj6YpsHMB5MbzHwwbYOZD6Y0mPlgugYzG0xQqtHMSBMazYw0sdHMSLN1QTlpUqOZkWbrg3LSbI1QTpqtE8pJs7VCOWm2XigjTWi9UE6aNfZCpT4u7J5tNDPSrLEXKkeTStC0/Wff3ePRxfzCNJ0d6MAQ3GXh5KBI/2FJBgfR46GbzXCBH8OKzuJPLrgKF/Z/cME0csHu0oX89y66rbvH3X6/+/Lh7Iak6vgrnCXul5hYHNYrvK4wCROZVLhURfhOe5MKSFZgmqLbgGPglbue4JBhHF1a6/WN6crdQyY03Qae8hNmp/37+HhBbXe+mIA3KYF0CaZLdLqE0iXBc4D0Zz4huZBwusSmSyRd4pIl4ZstTUsgXYLpEp0uoXRJOPvilxWJc2eSy3dT7CsMdONFtub6LVTyDW/nHV7+dXjN/Uo2SxfDu1mHD98OI9/wMO/wOO/wet7had7hzbzDc8bh5eJlRXbe4WXe4YOvWoe+rXTa/vkmG77A+rQE0iWYLtHpEkqXmHQJJ0v4LyQ2XRI8uJD8AYNs/zxgwhdAmpSEr94zLYF0CaZLdLqE0iUmXcLpkmD2JwuC8DevpyUuWRL+buq0BNIlmC7RiZKf3eb37eNue7e/P/bQx2e/HT76lrrbfP7x9fWZLvgX","brillig_names":["get_contract_instance_internal","pack_arguments_array_oracle_wrapper","call_private_function_internal","directive_integer_quotient","directive_invert"]},{"name":"consume_note_from_secret","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"16137133351287663689":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["get_notes_internal","get_collapse_hints","lt_32_hint","decompose_hint","lte_16_hint","notify_nullified_note_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"get_constant","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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","brillig_names":["get_constant"]},{"name":"test_nullifier_key_freshness","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"public_nullifying_key","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZrRTuMwEEX/Jc88eOzxzJhfWSFUoKBKVUFQVloh/n0TaJxi7GQHQhYkv6CG+uQmZ2J3mvSpuVpfPN6cb3bXtw/N6a+nZnt7udpvbnft1lMD+PK/h7vVrtt82K/u980pUDAnzXp31b5kY55PmuvNdt2cIrSv3422LHwYbcWEOBoIMqMdkhxGO48wMRrAEPSHAoYxjnfW58ajtf1wPNq7w+zObYj7ZjkefHbSgK9qSmqoqimp4W+vJkg8/PZcptSIUD88GP8pNVLVlNSEqqagxprPq3EB++XABebhZIVeIuDrI2w+woW48BACTYSAHZY1d6S1s9aFuCVCcIkQv0QILRHCs4Q4jiFo8E1I5lpsp2t/LVpHR3OVc/s2ZOOFbsi55T4srVQ5ZTmhyinKcabKKcuBKqcsx1Y5ZTmuyinLwSqnLMdXOWU5VOWU5dQOeURO7ZBH5NQOuSwHa4c8Iqd2yCNyfkKH7HmQwzAlZ77bkfgTOuT/JgfnkYMxA+2UHCATD5/p6ElPd5P6W8nxVU5ZDlU5ZTkzdcjOluR0If/SaXqYCuEQFzY5CrGvJxK+PsObBTJggQw7S4YMF5agTTPcAhm4QIZfIIPmycC4iAiZNIMXyJAFMsLXZ9Bc89wMGZBmzDTP8Sgjva7ILpDxgXl+1m5d3G+2283N+ZufjJnuT/5RM7r+IFCGvQUqPzceJbyaIDXBakLURHY2eN+795QS+adbowSoCasmsjX31Lc5nn1KoJrwaoLURLbmPi4EPoSUEDURtET+fs0oAeMEGU4JqyacmsjWnKhfyokpJbyaIDXBaiJbc5K+ZaNgUiJoiXyvOkqAmsjWnI0/EAyYEk5NoJrwaoImCGtTgtWEqIlszYfGXkxaj3zfMkqAmrBqIltziWcu7+pBqCa8miA1ka350NiLk5QQNRG0BBs1ARMEpusVWzXh1ES25gHcgQjv5gd7NUFqgtVEtubB9p8GwaWfahy0hBg1AWoiW/MQe7hA6ZmLUxOoJryaoAmC0/VKWE2Imsh/izUY7+sZn86QYD7AwAcYq2We263fq/vN6mK77r7HdW8+7i77r3Xt5v7P3es77eC/","brillig_names":["get_public_keys_and_partial_address","directive_invert"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"14336010898202591232":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"","brillig_names":["public_dispatch"],"assert_messages":{"1792":"Array index out of bounds","1847":"attempt to add with overflow","1524":"Array index out of bounds","1579":"Array index out of bounds","2981":"attempt to add with overflow","3036":"attempt to add with overflow","921":"Array index out of bounds","2902":"attempt to multiply with overflow","3091":"Array index out of bounds","1799":"Array index out of bounds","2244":"Array index out of bounds","251":"Array index out of bounds","1586":"Array index out of bounds","2476":"attempt to subtract with overflow","2988":"attempt to add with overflow","2854":"L1-to-L2 message is already nullified","3043":"attempt to add with overflow","2720":"Array index out of bounds","3177":"attempt to add with overflow","3098":"Array index out of bounds","2263":"attempt to add with overflow","3244":"Array index out of bounds","2251":"Array index out of bounds","1605":"attempt to add with overflow","3330":"Array index out of bounds","1459":"Array index out of bounds","3251":"Array index out of bounds","1447":"attempt to add with overflow","2270":"Array index out of bounds","1624":"Stack too deep","1557":"Array index out of bounds","2392":"Array index out of bounds","3160":"Array index out of bounds","2892":"attempt to add with overflow","2380":"attempt to multiply with overflow","1478":"attempt to add with overflow","2057":"Array index out of bounds","3337":"Array index out of bounds","3069":"Array index out of bounds","1466":"Array index out of bounds","1722":"call to assert_max_bit_size","2167":"attempt to subtract with overflow","2033":"attempt to subtract with overflow","1198":"Invalid timestamp","1454":"attempt to add with overflow","2155":"attempt to add with overflow","229":"Array index out of bounds","1186":"Invalid chain id","1375":"Array index out of bounds","1564":"attempt to add with overflow","1631":"Function dummy_public_call can only be called internally","2399":"Array index out of bounds","2411":"attempt to add with overflow","2064":"Array index out of bounds","3569":"Array index out of bounds","1674":"Array index out of bounds","1284":"attempt to multiply with overflow","3076":"Array index out of bounds","1406":"Array index out of bounds","2875":"Array index out of bounds","1339":"attempt to add with overflow","1851":"Array index out of bounds","3131":"attempt to add with overflow","1382":"Array index out of bounds","1949":"attempt to add with overflow","1681":"Array index out of bounds","1346":"attempt to add with overflow","1535":"attempt to add with overflow","1858":"Array index out of bounds","1913":"attempt to add with overflow","2480":"Array index out of bounds","2736":"attempt to add with overflow","2346":"attempt to subtract with overflow","2858":"Tried to consume nonexistent L1-to-L2 message","2992":"Array index out of bounds","3047":"Array index out of bounds","2456":"attempt to subtract with overflow","1810":"attempt to add with overflow","207":"Array index out of bounds","1609":"Array index out of bounds","1597":"Array index out of bounds","2999":"Array index out of bounds","1774":"attempt to add with overflow","3054":"Array index out of bounds","3109":"attempt to add with overflow","1494":"Array index out of bounds","2384":"attempt to subtract with overflow","3018":"Array index out of bounds","1927":"attempt to add with overflow","3585":"attempt to add with overflow","3262":"attempt to add with overflow","2171":"attempt to add with overflow","1202":"Invalid fee per da gas","1391":"attempt to add with overflow","2281":"attempt to add with overflow","934":"attempt to add with overflow","1190":"Invalid version","1568":"Array index out of bounds","2147":"attempt to add with overflow","3226":"attempt to add with overflow","2135":"Array index out of bounds","3348":"attempt to add with overflow","3025":"Array index out of bounds","3561":"Array index out of bounds","3135":"Array index out of bounds","1788":"attempt to add with overflow","1398":"Array index out of bounds","1520":"attempt to multiply with overflow","3312":"attempt to add with overflow","1575":"attempt to add with overflow","2020":"attempt to add with overflow","3422":"Array index out of bounds","2075":"attempt to add with overflow","1618":"attempt to add with overflow","3087":"attempt to add with overflow","1417":"attempt to add with overflow","1350":"Array index out of bounds","1539":"Array index out of bounds","2185":"attempt to add with overflow","2240":"attempt to add with overflow","3142":"Array index out of bounds","3441":"attempt to add with overflow","2350":"Array index out of bounds","3240":"attempt to add with overflow","1692":"attempt to add with overflow","2460":"Array index out of bounds","1424":"Array index out of bounds","1357":"Array index out of bounds","1869":"attempt to add with overflow","2369":"attempt to add with overflow","3326":"attempt to add with overflow","2491":"attempt to add with overflow","1656":"attempt to add with overflow","242":"Array index out of bounds","2924":"attempt to subtract with overflow","1833":"attempt to add with overflow","3113":"Array index out of bounds","2211":"attempt to multiply with overflow","2912":"attempt to add with overflow","218":"Array index out of bounds","2388":"attempt to subtract with overflow","1553":"attempt to multiply with overflow","1931":"Array index out of bounds","2053":"attempt to add with overflow","3010":"attempt to add with overflow","2175":"Array index out of bounds","3065":"attempt to add with overflow","1206":"Invalid fee per l2 gas","2163":"attempt to multiply with overflow","3120":"Array index out of bounds","1194":"Invalid block number","3553":"Array index out of bounds","1371":"attempt to add with overflow","1938":"Array index out of bounds","2127":"attempt to subtract with overflow","1670":"attempt to add with overflow"}},{"name":"call_get_notes","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"16137133351287663689":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"active_or_nullified","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["get_notes_internal","get_collapse_hints","decompose_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e91704b"},{"kind":"string","value":"TestNote"},{"fields":[{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"fields":[{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Test"}},{"name":"fields","value":{"fields":[{"name":"example_constant","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"example_set","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"value0","type":{"kind":"field"}},{"name":"value1","type":{"kind":"field"}},{"name":"value2","type":{"kind":"field"}},{"name":"value3","type":{"kind":"field"}},{"name":"value4","type":{"kind":"field"}}],"kind":"struct","path":"Test::ExampleEvent"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"}},{"name":"amount","type":{"kind":"field"}},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"}},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"Test::consume_mint_private_message_parameters"}}],"kind":"struct","path":"Test::consume_mint_private_message_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"Test::test_setting_fee_payer_parameters"}}],"kind":"struct","path":"Test::test_setting_fee_payer_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Test::deploy_contract_parameters"}}],"kind":"struct","path":"Test::deploy_contract_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"nullifier","type":{"kind":"field"}}],"kind":"struct","path":"Test::emit_nullifier_parameters"}}],"kind":"struct","path":"Test::emit_nullifier_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"time","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"Test::is_time_equal_parameters"}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"Test::is_time_equal_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"Test::dummy_public_call_parameters"}}],"kind":"struct","path":"Test::dummy_public_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"header_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::assert_header_private_parameters"}}],"kind":"struct","path":"Test::assert_header_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"Test::create_l2_to_l1_message_public_parameters"}}],"kind":"struct","path":"Test::create_l2_to_l1_message_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Test::get_master_incoming_viewing_public_key_parameters"}},{"name":"return_type","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"Test::get_master_incoming_viewing_public_key_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"Test::assert_public_global_vars_parameters"}}],"kind":"struct","path":"Test::assert_public_global_vars_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_slot","type":{"kind":"field"}}],"kind":"struct","path":"Test::call_create_note_parameters"}}],"kind":"struct","path":"Test::call_create_note_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"Test::test_setting_teardown_parameters"}}],"kind":"struct","path":"Test::test_setting_teardown_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"Test::emit_unencrypted_parameters"}}],"kind":"struct","path":"Test::emit_unencrypted_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"active_or_nullified","type":{"kind":"boolean"}}],"kind":"struct","path":"Test::call_get_notes_many_parameters"}},{"name":"return_type","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"Test::call_get_notes_many_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"storage_slot","type":{"kind":"field"}}],"kind":"struct","path":"Test::call_destroy_note_parameters"}}],"kind":"struct","path":"Test::call_destroy_note_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"active_or_nullified","type":{"kind":"boolean"}}],"kind":"struct","path":"Test::call_get_notes_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Test::call_get_notes_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"content","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"Test::create_l2_to_l1_message_arbitrary_recipient_public_parameters"}}],"kind":"struct","path":"Test::create_l2_to_l1_message_arbitrary_recipient_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"fields","type":{"kind":"array","length":5,"type":{"kind":"field"}}},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nest","type":{"kind":"boolean"}}],"kind":"struct","path":"Test::emit_array_as_encrypted_log_parameters"}}],"kind":"struct","path":"Test::emit_array_as_encrypted_log_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"ovpk_m_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::get_ovsk_app_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Test::get_ovsk_app_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"max_block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"enqueue_public_call","type":{"kind":"boolean"}}],"kind":"struct","path":"Test::set_tx_max_block_number_parameters"}}],"kind":"struct","path":"Test::set_tx_max_block_number_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}],"kind":"struct","path":"Test::assert_private_global_vars_parameters"}}],"kind":"struct","path":"Test::assert_private_global_vars_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"content","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"Test::create_l2_to_l1_message_arbitrary_recipient_private_parameters"}}],"kind":"struct","path":"Test::create_l2_to_l1_message_arbitrary_recipient_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"a_field","type":{"kind":"field"}},{"name":"a_bool","type":{"kind":"boolean"}},{"name":"a_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"an_array","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"a_struct","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::DummyNote"}},{"name":"a_deep_struct","type":{"fields":[{"name":"a_field","type":{"kind":"field"}},{"name":"a_bool","type":{"kind":"boolean"}},{"name":"a_note","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::DummyNote"}},{"name":"many_notes","type":{"kind":"array","length":3,"type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::DummyNote"}}}],"kind":"struct","path":"Test::DeepStruct"}}],"kind":"struct","path":"Test::test_code_gen_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Test::test_code_gen_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"Test::set_constant_parameters"}}],"kind":"struct","path":"Test::set_constant_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"content","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"Test::consume_message_from_arbitrary_sender_private_parameters"}}],"kind":"struct","path":"Test::consume_message_from_arbitrary_sender_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"public_nullifying_key","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"Test::test_nullifier_key_freshness_parameters"}}],"kind":"struct","path":"Test::test_nullifier_key_freshness_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"nullifier","type":{"kind":"field"}}],"kind":"struct","path":"Test::emit_nullifier_public_parameters"}}],"kind":"struct","path":"Test::emit_nullifier_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"message_leaf_index","type":{"kind":"field"}},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"Test::consume_mint_public_message_parameters"}}],"kind":"struct","path":"Test::consume_mint_public_message_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Test::emit_encrypted_logs_nested_parameters"}}],"kind":"struct","path":"Test::emit_encrypted_logs_nested_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"Test::get_this_address_parameters"}},{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Test::get_this_address_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"content","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"message_leaf_index","type":{"kind":"field"}}],"kind":"struct","path":"Test::consume_message_from_arbitrary_sender_public_parameters"}}],"kind":"struct","path":"Test::consume_message_from_arbitrary_sender_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"secret","type":{"kind":"field"}}],"kind":"struct","path":"Test::consume_note_from_secret_parameters"}}],"kind":"struct","path":"Test::consume_note_from_secret_abi"}]}},"file_map":{"101":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"102":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, constants::L1_TO_L2_MSG_TREE_HEIGHT, utils::arr_copy_slice,\n};\n\n/// Returns the leaf index and sibling path of an entry in the L1 to L2 messaging tree, which can then be used to prove\n/// its existence.\npub unconstrained fn get_l1_to_l2_membership_witness(\n    contract_address: AztecAddress,\n    message_hash: Field,\n    secret: Field,\n) -> (Field, [Field; L1_TO_L2_MSG_TREE_HEIGHT]) {\n    let returned_message =\n        get_l1_to_l2_membership_witness_oracle(contract_address, message_hash, secret);\n    let leaf_index = returned_message[0];\n    let sibling_path = arr_copy_slice(returned_message, [0; L1_TO_L2_MSG_TREE_HEIGHT], 1);\n\n    (leaf_index, sibling_path)\n}\n\n// Obtains membership witness (index and sibling path) for a message in the L1 to L2 message tree.\n#[oracle(getL1ToL2MembershipWitness)]\nunconstrained fn get_l1_to_l2_membership_witness_oracle(\n    _contract_address: AztecAddress,\n    _message_hash: Field,\n    _secret: Field,\n) -> [Field; L1_TO_L2_MSG_TREE_HEIGHT + 1] {}\n"},"103":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            serialized_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"105":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) -> Field {}\n\npub unconstrained fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) -> Field {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n"},"106":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"107":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_returns_oracle_wrapper(returns) };\n}\n\npub unconstrained fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\npub unconstrained fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"108":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/execution.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n"},"109":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}},\n};\n\nuse dep::protocol_types::{\n    hash::{\n        compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n        compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    }, utils::arr_copy_slice,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash =\n                compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"114":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note = unsafe { get_note_internal(storage_slot) };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"},"116":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"120":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"132":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    note_emission::NoteEmission,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateImmutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateImmutable<T, Context> {}\n\nimpl<Note, Context> PrivateImmutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor.\n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\nimpl<Note> PrivateImmutable<Note, &mut PrivateContext> {\n    // docs:start:initialize\n    pub fn initialize<let N: u32>(self, note: &mut Note) -> NoteEmission<Note>\n    where\n        Note: NoteInterface<N> + NullifiableNote,\n    {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<let N: u32>(self) -> Note\n    where\n        Note: NoteInterface<N> + NullifiableNote,\n    {\n        let storage_slot = self.storage_slot;\n        get_note(self.context, storage_slot).0\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateImmutable<Note, UnconstrainedContext> {\n    // docs:start:is_initialized\n    pub unconstrained fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // view_note does not actually use the context, but it calls oracles that are only available in private\n    // docs:start:view_note\n    pub unconstrained fn view_note<let N: u32>(self) -> Note\n    where\n        Note: NoteInterface<N> + NullifiableNote,\n    {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n"},"141":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{\n    constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest,\n};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission,\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"144":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n"},"147":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"},"149":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"161":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n    }, point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice},\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER,\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"163":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_event_emission.nr","source":"use crate::{\n    context::PrivateContext, event::event_interface::EventInterface,\n    encrypted_logs::payload::compute_encrypted_log, keys::getters::get_ovsk_app,\n    oracle::random::random,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, public_keys::{OvpkM, IvpkM}, hash::sha256_to_field,\n};\n\nfn compute_raw_event_log<Event, let N: u32>(\n    context: PrivateContext,\n    event: Event,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> ([u8; 416 + N * 32], Field)\nwhere\n    Event: EventInterface<N>,\n{\n    let contract_address: AztecAddress = context.this_address();\n    let plaintext = event.private_to_be_bytes(randomness);\n    let encrypted_log: [u8; 416 + N * 32] =\n        compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n    (encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_event_log_unconstrained<Event, let N: u32>(\n    context: PrivateContext,\n    event: Event,\n    randomness: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> ([u8; 416 + N * 32], Field)\nwhere\n    Event: EventInterface<N>,\n{\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_event_log(context, event, randomness, ovsk_app, ovpk, ivpk, recipient)\n}\n\npub fn encode_and_encrypt_event<Event, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](Event) -> ()\nwhere\n    Event: EventInterface<N>,\n{\n    |e: Event| {\n        // We use the randomness to preserve function privacy by making it non brute-forceable, so a malicious sender could\n        // use non-random values to reveal the plaintext. But they already know it themselves anyway, and is presumably not\n        // interested in disclosing this information. We can therefore assume that the sender will cooperate in the random\n        // value generation.\n        let randomness = unsafe { random() };\n        let ovsk_app: Field = context.request_ovsk_app(ovpk.hash());\n        let (encrypted_log, log_hash) =\n            compute_raw_event_log(*context, e, randomness, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_event_log_with_masked_address(randomness, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_event_unconstrained<Event, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](Event) -> ()\nwhere\n    Event: EventInterface<N>,\n{\n    |e: Event| {\n        // We use the randomness to preserve function privacy by making it non brute-forceable, so a malicious sender could\n        // use non-random values to reveal the plaintext. But they already know it themselves anyway, and is presumably not\n        // interested in disclosing this information. We can therefore assume that the sender will cooperate in the random\n        // value generation.\n        let randomness = unsafe { random() };\n        let (encrypted_log, log_hash) = unsafe {\n            compute_raw_event_log_unconstrained(*context, e, randomness, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_event_log_with_masked_address(randomness, encrypted_log, log_hash);\n    }\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_event_with_randomness<Event, let N: u32>(\n    context: &mut PrivateContext,\n    randomness: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, Field, IvpkM, AztecAddress)](Event) -> ()\nwhere\n    Event: EventInterface<N>,\n{\n    |e: Event| {\n        let ovsk_app: Field = context.request_ovsk_app(ovpk.hash());\n        let (encrypted_log, log_hash) =\n            compute_raw_event_log(*context, e, randomness, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_event_log_with_masked_address(randomness, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_event_with_randomness_unconstrained<Event, let N: u32>(\n    context: &mut PrivateContext,\n    randomness: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, Field, OvpkM, IvpkM, AztecAddress)](Event) -> ()\nwhere\n    Event: EventInterface<N>,\n{\n    |e: Event| {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        let (encrypted_log, log_hash) = unsafe {\n            compute_raw_event_log_unconstrained(*context, e, randomness, ovpk, ivpk, recipient)\n        };\n        context.emit_raw_event_log_with_masked_address(randomness, encrypted_log, log_hash);\n    }\n}\n"},"164":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, public_keys::{PublicKeys, IvpkM, ToPoint}, scalar::Scalar, point::Point,\n};\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48]\n    where\n        T: ToPoint,\n    {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false,\n        },\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131,\n        160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171,\n        176, 218, 48, 209, 73, 89, 200, 209,\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"165":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::getters::get_ovsk_app, encrypted_logs::payload::compute_encrypted_log,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, public_keys::{PublicKeys, OvpkM, IvpkM}, hash::sha256_to_field,\n    abis::note_hash::NoteHash,\n};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 416 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] =\n        compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 416 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let ovsk_app: Field = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) =\n            compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) =\n            unsafe { compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient) };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress,\n) {\n    let ovsk_app: Field = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext,\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"166":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, public_keys::{OvpkM, IvpkM},\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, hash::poseidon2_hash_with_separator,\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose,\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes,\n    encrypted_logs::header::EncryptedLogHeader,\n    keys::point_to_symmetric_key::point_to_symmetric_key,\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] =\n        compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(\n    plaintext: [u8; P],\n    eph_sk: Scalar,\n    ivpk: IvpkM,\n) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point,\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field,\n    )\n        .to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::encrypted_logs::payload::{\n        compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext,\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{\n        address::AztecAddress, public_keys::{OvpkM, IvpkM}, point::Point, scalar::Scalar,\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false,\n            },\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false,\n            },\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41,\n            2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239,\n            247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118,\n            183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183,\n            12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78,\n            101, 153, 0, 0, 16, 39,\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(\n            0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2,\n        );\n\n        let log: [u8; 448] = compute_encrypted_log(\n            contract_address,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            plaintext,\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235,\n            86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79,\n            51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171,\n            62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203,\n            98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211,\n            49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205,\n            104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248,\n            193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110,\n            249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173,\n            151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4,\n            235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194,\n            90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219,\n            22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18,\n            204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167,\n            110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239,\n            95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25,\n            244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91,\n            68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76,\n            26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178,\n            143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189,\n            117, 147, 101, 230, 132,\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false,\n            },\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160,\n            190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157,\n            131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93,\n            46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130,\n            37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95,\n            115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234,\n            245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162,\n            25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185,\n            212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236,\n            23, 206, 229, 108,\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb,\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31,\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b,\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(\n            recipient,\n            recipient_ivpk,\n            sender_ovsk_app,\n            eph_sk,\n            eph_pk,\n        );\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238,\n            50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248,\n            43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31,\n            211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151,\n            152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58,\n            120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25,\n            173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224,\n            30, 168, 177, 26, 144, 5, 124, 128, 6,\n        ];\n\n        assert_eq(outgoing_body_ciphertext_from_typescript, ciphertext);\n    }\n}\n"},"177":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice,\n};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator =\n        arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158,\n        236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159,\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"178":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\nuse crate::{\n    oracle::{\n        keys::get_public_keys_and_partial_address,\n        key_validation_request::get_key_validation_request,\n    }, keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) =\n        unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    hinted_canonical_public_keys\n}\n"},"180":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/messaging.nr","source":"use crate::{\n    hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier},\n    oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness,\n};\n\nuse dep::protocol_types::{\n    address::{AztecAddress, EthAddress}, merkle_tree::root::root_from_sibling_path,\n};\n\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    version: Field,\n    content: Field,\n    secret: Field,\n) -> Field {\n    let secret_hash = compute_secret_hash(secret);\n    let message_hash = compute_message_hash(\n        portal_contract_address,\n        chain_id,\n        contract_address,\n        version,\n        content,\n        secret_hash,\n    );\n\n    // We prove that `message_hash` is in the tree by showing the derivation of the tree root, using a merkle path we\n    // get from an oracle.\n    let (leaf_index, sibling_path) =\n        unsafe { get_l1_to_l2_membership_witness(contract_address, message_hash, secret) };\n\n    let root = root_from_sibling_path(message_hash, leaf_index, sibling_path);\n    assert(root == l1_to_l2_root, \"Message not in state\");\n\n    compute_message_nullifier(message_hash, secret, leaf_index)\n}\n"},"182":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/deploy.nr","source":"use crate::{context::PrivateContext, oracle::get_contract_instance::get_contract_instance};\n\nuse dep::protocol_types::{\n    address::AztecAddress, abis::function_selector::FunctionSelector,\n    constants::DEPLOYER_CONTRACT_ADDRESS,\n};\n\n// Calls `deploy` on the deployer contract to deploy a new instance.\npub fn deploy_contract(context: &mut PrivateContext, target: AztecAddress) {\n    let instance = get_contract_instance(target);\n\n    let universal_deploy = instance.deployer.is_zero();\n    if !universal_deploy {\n        assert(\n            instance.deployer == context.this_address(),\n            \"Deployer address does not match current address\",\n        );\n    }\n\n    // Adapted from noir-contracts/contracts/contract_instance_deployer_contract/src/interface/ContractInstanceDeployer.nr\n    // That file was autogenerated running the following command from noir-projects/noir-contracts:\n    // ../../yarn-project/node_modules/.bin/aztec-cli codegen target/contract_instance_deployer_contract-ContractInstanceDeployer.json --nr -o ./contracts/contract_instance_deployer_contract/src/interface\n    let mut serialized_args = [0; 16];\n    serialized_args[0] = instance.salt;\n    serialized_args[1] = instance.contract_class_id.to_field();\n    serialized_args[2] = instance.initialization_hash;\n\n    let serialized_public_keys = instance.public_keys.serialize();\n\n    for i in 0..12 {\n        serialized_args[i + 3] = serialized_public_keys[i];\n    }\n\n    serialized_args[15] = universal_deploy as Field;\n\n    let _call_result = context.call_private_function(\n        DEPLOYER_CONTRACT_ADDRESS,\n        comptime {\n            FunctionSelector::from_signature(\n                \"deploy(Field,(Field),Field,(((Field,Field,bool)),((Field,Field,bool)),((Field,Field,bool)),((Field,Field,bool))),bool)\",\n            )\n        },\n        serialized_args,\n    );\n}\n"},"184":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::{\n    execution::{get_chain_id, get_version, get_contract_address, get_block_number},\n    storage::storage_read,\n};\n\npub struct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let contract_address = get_contract_address();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<let N: u32>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n"},"185":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Serialize<N>,\n    {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N],\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"186":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n        key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n        call_private_function::call_private_function_internal, header::get_header_at,\n        logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext, function_selector::FunctionSelector,\n        max_block_number::MaxBlockNumber,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n        nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash},\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL,\n        MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR,\n    }, header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests: BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator {\n                request,\n                sk_app_generator: sk_generators[key_index],\n            };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(\n        &mut self,\n        note_hash_counter: u32,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context,\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        let call_request = PublicCallRequest { call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.public_teardown_call_request = PublicCallRequest { call_context, args_hash, counter };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"},"190":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n    packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe { unpack_returns(self.packed_returns) };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"191":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs,\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {}\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n"},"204":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"209":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"},"234":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{\n        decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI,\n    };\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"270":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/header.nr","source":"use crate::{\n    abis::{\n        append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n        global_variables::GlobalVariables,\n    },\n    constants::{\n        GENERATOR_INDEX__BLOCK_HASH, GLOBAL_VARIABLES_LENGTH, HEADER_LENGTH, STATE_REFERENCE_LENGTH,\n        CONTENT_COMMITMENT_LENGTH,\n    }, hash::poseidon2_hash_with_separator, state_reference::StateReference,\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::arr_copy_slice,\n    content_commitment::ContentCommitment,\n};\n\n// docs:start:header\npub struct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n    total_fees: Field,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive)\n            & self.content_commitment.eq(other.content_commitment)\n            & self.state.eq(other.state)\n            & self.global_variables.eq(other.global_variables)\n            & self.total_fees.eq(other.total_fees)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.total_fees);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields =\n            arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields =\n            arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields =\n            arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n        offset = offset + GLOBAL_VARIABLES_LENGTH;\n\n        let total_fees = serialized[offset];\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n            total_fees,\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n            total_fees: 0,\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        poseidon2_hash_with_separator(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x1c97ed6fbc35f8b400d31bd38ce5cc938921e0cf2e20159d316f8c7011f9f42c;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"274":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/merkle_tree/root.nr","source":"use crate::{hash::merkle_hash, merkle_tree::merkle_tree::MerkleTree};\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like\n// this because it means we never even need to consider cases where\n// the index is greater than p.\npub fn root_from_sibling_path<let N: u32>(\n    leaf: Field,\n    leaf_index: Field,\n    sibling_path: [Field; N],\n) -> Field {\n    let mut node = leaf;\n    let indices: [u1; N] = leaf_index.to_le_bits();\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\npub fn calculate_subtree_root<let N: u32>(leaves: [Field; N]) -> Field {\n    MerkleTree::new(leaves).get_root()\n}\n\n// These values are precomputed and we run tests to ensure that they\n// are correct. The values themselves were computed from the cpp code.\n//\n// Would be good if we could use width since the compute_subtree\n// algorithm uses depth.\npub fn calculate_empty_tree_root(depth: u32) -> Field {\n    if depth == 0 {\n        0\n    } else if depth == 1 {\n        0x0b63a53787021a4a962a452c2921b3663aff1ffd8d5510540f8e659e782956f1\n    } else if depth == 2 {\n        0x0e34ac2c09f45a503d2908bcb12f1cbae5fa4065759c88d501c097506a8b2290\n    } else if depth == 3 {\n        0x21f9172d72fdcdafc312eee05cf5092980dda821da5b760a9fb8dbdf607c8a20\n    } else if depth == 4 {\n        0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e\n    } else if depth == 5 {\n        0x120157cfaaa49ce3da30f8b47879114977c24b266d58b0ac18b325d878aafddf\n    } else if depth == 6 {\n        0x01c28fe1059ae0237b72334700697bdf465e03df03986fe05200cadeda66bd76\n    } else if depth == 7 {\n        0x2d78ed82f93b61ba718b17c2dfe5b52375b4d37cbbed6f1fc98b47614b0cf21b\n    } else if depth == 8 {\n        0x067243231eddf4222f3911defbba7705aff06ed45960b27f6f91319196ef97e1\n    } else if depth == 9 {\n        0x1849b85f3c693693e732dfc4577217acc18295193bede09ce8b97ad910310972\n    } else if depth == 10 {\n        0x2a775ea761d20435b31fa2c33ff07663e24542ffb9e7b293dfce3042eb104686\n    } else {\n        panic(f\"depth should be between 0 and 10\")\n    }\n}\n\n#[test]\nfn test_merkle_root_interop_test() {\n    // This is a test to ensure that we match the cpp implementation.\n    // You can grep for `TEST_F(root_rollup_tests, noir_interop_test)`\n    // to find the test that matches this.\n    let root = calculate_subtree_root([1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4]);\n    assert(0x1a09d935ae110b4c861fcec8f9099ec30b4485022aeb3d3cf9d7168e38fdc231 == root);\n\n    let empty_root = calculate_subtree_root([0; 16]);\n    assert(0x2373ea368857ec7af97e7b470d705848e2bf93ed7bef142a490f2119bcf82d8e == empty_root);\n}\n\n#[test]\nfn test_empty_subroot() {\n    assert(calculate_empty_tree_root(0) == 0);\n\n    let expected_empty_root_2 = calculate_subtree_root([0; 2]);\n    assert(calculate_empty_tree_root(1) == expected_empty_root_2);\n\n    let expected_empty_root_4 = calculate_subtree_root([0; 4]);\n    assert(calculate_empty_tree_root(2) == expected_empty_root_4);\n\n    let expected_empty_root_8 = calculate_subtree_root([0; 8]);\n    assert(calculate_empty_tree_root(3) == expected_empty_root_8);\n\n    let expected_empty_root_16 = calculate_subtree_root([0; 16]);\n    assert(calculate_empty_tree_root(4) == expected_empty_root_16);\n\n    let expected_empty_root_32 = calculate_subtree_root([0; 32]);\n    assert(calculate_empty_tree_root(5) == expected_empty_root_32);\n\n    let expected_empty_root_64 = calculate_subtree_root([0; 64]);\n    assert(calculate_empty_tree_root(6) == expected_empty_root_64);\n\n    let expected_empty_root_128 = calculate_subtree_root([0; 128]);\n    assert(calculate_empty_tree_root(7) == expected_empty_root_128);\n\n    let expected_empty_root_256 = calculate_subtree_root([0; 256]);\n    assert(calculate_empty_tree_root(8) == expected_empty_root_256);\n\n    let expected_empty_root_512 = calculate_subtree_root([0; 512]);\n    assert(calculate_empty_tree_root(9) == expected_empty_root_512);\n\n    let expected_empty_root_1024 = calculate_subtree_root([0; 1024]);\n    assert(calculate_empty_tree_root(10) == expected_empty_root_1024);\n}\n"},"284":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: u32,\n) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"286":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n"},"305":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"308":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"309":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"310":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{constants::ETH_ADDRESS_LENGTH, traits::{Empty, ToField, Serialize, Deserialize}, utils};\n\npub struct EthAddress {\n    inner: Field,\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size::<160>();\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n"},"312":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, public_keys_hash::PublicKeysHash,\n        salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils,\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [pub_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        ))\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        functino_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys_hash: PublicKeysHash,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            functino_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys_hash, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"313":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n"},"317":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"325":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash}, note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n        MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX,\n    }, merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), unique_note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256(\n            [log_hash.contract_address.to_field(), log_hash.log_hash.value],\n        )\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n            0,\n        ))\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk<let N: u32>(\n    _vk: VerificationKey<N>,\n) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"326":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n        aztec_address::AztecAddress, partial_address::PartialAddress,\n        public_keys_hash::PublicKeysHash,\n    }, public_keys::PublicKeys, contract_class_id::ContractClassId,\n    constants::CONTRACT_INSTANCE_LENGTH, traits::{Deserialize, Hash, Serialize},\n};\n\npub struct ContractInstance {\n    salt: Field,\n    deployer: AztecAddress,\n    contract_class_id: ContractClassId,\n    initialization_hash: Field,\n    public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys.hash(),\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n"},"327":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr","source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        GENERATOR_INDEX__PUBLIC_KEYS_HASH, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_IVPK_M_X,\n        DEFAULT_IVPK_M_Y, DEFAULT_OVPK_M_X, DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y,\n    }, hash::poseidon2_hash_with_separator, point::POINT_LENGTH,\n    traits::{Deserialize, Serialize, Hash},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse dep::std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE = 16;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeroes.\ntype MSG_BLOCK = [u8; BLOCK_SIZE];\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !crate::runtime::is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: MSG_BLOCK) -> INT_BLOCK {\n    let mut msg32: INT_BLOCK = [0; INT_BLOCK_SIZE];\n\n    for i in 0..INT_BLOCK_SIZE {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4 * (i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeroes.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeroes by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    for i in 0..BLOCK_SIZE {\n        if i >= msg_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n    for i in msg_byte_ptr..MSG_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[MSG_SIZE_PTR + i] = len_bytes[i];\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    for i in 0..MSG_SIZE_PTR {\n        let predicate = (i < msg_byte_ptr) as u8;\n        let expected_byte = predicate * last_block[i];\n        assert_eq(msg_block[i], expected_byte);\n    }\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let len = 8 * message_size;\n    let mut reconstructed_len: Field = 0;\n    for i in MSG_SIZE_PTR..BLOCK_SIZE {\n        reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n    }\n    assert_eq(reconstructed_len, len as Field);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4 * j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"376":{"path":"/usr/src/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n        traits::Serialize, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n    }, macros::notes::note,\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    }, oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n"},"409":{"path":"/usr/src/noir-projects/noir-contracts/contracts/test_contract/src/test_note.nr","source":"use dep::aztec::{\n    note::{note_header::NoteHeader, note_interface::NullifiableNote}, context::PrivateContext,\n    macros::notes::note,\n};\n\n// A note which stores a field and is expected to be passed around using the `addNote` function.\n// WARNING: This Note is not private as it does not contain randomness and hence it can be easy to perform\n// serialized_note attack on it. This note has been developed purely for testing purposes so that it can easily be\n// manually added to PXE. Do not use for real applications.\n#[note]\npub struct TestNote {\n    value: Field,\n}\n\nimpl NullifiableNote for TestNote {\n\n    fn compute_nullifier(\n        _self: Self,\n        _context: &mut PrivateContext,\n        _note_hash_for_nullify: Field,\n    ) -> Field {\n        // This note is expected to be shared between users and fstructor this reason can't be nullified using a secret.\n        0\n    }\n\n    unconstrained fn compute_nullifier_without_context(_self: Self) -> Field {\n        // This note is expected to be shared between users and for this reason can't be nullified using a secret.\n        0\n    }\n}\n\nimpl TestNote {\n    pub fn new(value: Field) -> Self {\n        TestNote { value, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TestNote {\n    fn eq(self, other: Self) -> bool {\n        self.value == other.value\n    }\n}\n"},"410":{"path":"/usr/src/noir-projects/noir-contracts/contracts/test_contract/src/main.nr","source":"mod test_note;\n\n// A contract used for testing a random hodgepodge of small features from simulator and end-to-end tests.\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract Test {\n\n    use dep::aztec::prelude::{\n        AztecAddress, EthAddress, FunctionSelector, NoteGetterOptions, NoteViewerOptions,\n        PrivateImmutable, PrivateSet,\n    };\n    use dep::aztec::encrypted_logs::encrypted_note_emission::encode_and_encrypt_note;\n    use dep::aztec::encrypted_logs::encrypted_event_emission::encode_and_encrypt_event_with_randomness_unconstrained;\n\n    use dep::aztec::protocol_types::{\n        constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, traits::Serialize, point::Point,\n        public_keys::IvpkM,\n    };\n\n    use dep::aztec::note::constants::MAX_NOTES_PER_PAGE;\n    use dep::aztec::keys::getters::get_public_keys;\n\n    use dep::aztec::{\n        hash::{pedersen_hash, compute_secret_hash, ArgsHasher},\n        note::{\n            lifecycle::{create_note, destroy_note_unsafe}, note_getter::{get_notes, view_notes},\n            note_getter_options::NoteStatus,\n        }, deploy::deploy_contract as aztec_deploy_contract, oracle::random::random,\n        utils::comparison::Comparator,\n        macros::{storage::storage, events::event, functions::{private, public, internal}},\n    };\n    use dep::token_portal_content_hash_lib::{\n        get_mint_private_content_hash, get_mint_public_content_hash,\n    };\n    use dep::value_note::value_note::ValueNote;\n    // TODO investigate why the macros require EmbeddedCurvePoint and EmbeddedCurveScalar\n    use std::embedded_curve_ops::{EmbeddedCurveScalar, EmbeddedCurvePoint};\n    use std::meta::derive;\n\n    use crate::test_note::TestNote;\n\n    #[event]\n    #[derive(Serialize)]\n    struct ExampleEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n        value3: Field,\n        value4: Field,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        example_constant: PrivateImmutable<TestNote, Context>,\n        example_set: PrivateSet<TestNote, Context>,\n    }\n\n    #[private]\n    fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n        context.request_ovsk_app(ovpk_m_hash)\n    }\n\n    #[private]\n    fn get_master_incoming_viewing_public_key(address: AztecAddress) -> [Field; 2] {\n        let ivpk_m = get_public_keys(address).ivpk_m;\n\n        [ivpk_m.inner.x, ivpk_m.inner.y]\n    }\n\n    // Get the address of this contract (taken from the input context)\n    #[private]\n    fn get_this_address() -> AztecAddress {\n        context.this_address()\n    }\n\n    #[private]\n    fn set_tx_max_block_number(max_block_number: u32, enqueue_public_call: bool) {\n        context.set_tx_max_block_number(max_block_number);\n\n        if enqueue_public_call {\n            Test::at(context.this_address()).dummy_public_call().enqueue(&mut context)\n        }\n    }\n\n    #[public]\n    #[internal]\n    fn dummy_public_call() {}\n\n    #[private]\n    fn call_create_note(\n        value: Field,\n        owner: AztecAddress,\n        outgoing_viewer: AztecAddress,\n        storage_slot: Field,\n    ) {\n        assert(\n            storage_slot != storage.example_constant.get_storage_slot(),\n            \"this storage slot is reserved for example_constant\",\n        );\n\n        let outgoing_viewer_keys = get_public_keys(outgoing_viewer);\n        let owner_keys = get_public_keys(owner);\n\n        let mut note = ValueNote::new(value, owner_keys.npk_m.hash());\n        create_note(&mut context, storage_slot, &mut note).emit(encode_and_encrypt_note(\n            &mut context,\n            outgoing_viewer_keys.ovpk_m,\n            owner_keys.ivpk_m,\n            owner,\n        ));\n    }\n\n    #[private]\n    fn call_get_notes(storage_slot: Field, active_or_nullified: bool) -> Field {\n        assert(\n            storage_slot != storage.example_constant.get_storage_slot(),\n            \"this storage slot is reserved for example_constant\",\n        );\n\n        let mut options = NoteGetterOptions::new();\n        if (active_or_nullified) {\n            options = options.set_status(NoteStatus.ACTIVE_OR_NULLIFIED);\n        }\n\n        let (notes, _): (BoundedVec<ValueNote, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) =\n            get_notes(&mut context, storage_slot, options);\n\n        notes.get(0).value\n    }\n\n    #[private]\n    fn call_get_notes_many(storage_slot: Field, active_or_nullified: bool) -> [Field; 2] {\n        assert(\n            storage_slot != storage.example_constant.get_storage_slot(),\n            \"this storage slot is reserved for example_constant\",\n        );\n\n        let mut options = NoteGetterOptions::new();\n        if (active_or_nullified) {\n            options = options.set_status(NoteStatus.ACTIVE_OR_NULLIFIED);\n        }\n\n        let (notes, _): (BoundedVec<ValueNote, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) =\n            get_notes(&mut context, storage_slot, options);\n\n        [notes.get(0).value, notes.get(1).value]\n    }\n\n    unconstrained fn call_view_notes(storage_slot: Field, active_or_nullified: bool) -> pub Field {\n        assert(\n            storage_slot != storage.example_constant.get_storage_slot(),\n            \"this storage slot is reserved for example_constant\",\n        );\n\n        let mut options = NoteViewerOptions::new();\n        if (active_or_nullified) {\n            options = options.set_status(NoteStatus.ACTIVE_OR_NULLIFIED);\n        }\n\n        let notes: BoundedVec<ValueNote, MAX_NOTES_PER_PAGE> = view_notes(storage_slot, options);\n\n        notes.get(0).value\n    }\n\n    unconstrained fn call_view_notes_many(\n        storage_slot: Field,\n        active_or_nullified: bool,\n    ) -> pub [Field; 2] {\n        assert(\n            storage_slot != storage.example_constant.get_storage_slot(),\n            \"this storage slot is reserved for example_constant\",\n        );\n\n        let mut options = NoteViewerOptions::new();\n        if (active_or_nullified) {\n            options = options.set_status(NoteStatus.ACTIVE_OR_NULLIFIED);\n        }\n\n        let notes: BoundedVec<ValueNote, MAX_NOTES_PER_PAGE> = view_notes(storage_slot, options);\n\n        [notes.get(0).value, notes.get(1).value]\n    }\n\n    #[private]\n    fn call_destroy_note(storage_slot: Field) {\n        assert(\n            storage_slot != storage.example_constant.get_storage_slot(),\n            \"this storage slot is reserved for example_constant\",\n        );\n\n        let options = NoteGetterOptions::new();\n        let (notes, note_hashes): (BoundedVec<ValueNote, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>) =\n            get_notes(&mut context, storage_slot, options);\n\n        let note = notes.get(0);\n        let note_hash = note_hashes.get(0);\n\n        destroy_note_unsafe(&mut context, note, note_hash);\n    }\n\n    #[private]\n    fn test_code_gen(\n        a_field: Field,\n        a_bool: bool,\n        a_number: u32,\n        an_array: [Field; 2],\n        a_struct: DummyNote,\n        a_deep_struct: DeepStruct,\n    ) -> Field {\n        let mut args = ArgsHasher::new();\n        args.add(a_field);\n        args.add(a_bool as Field);\n        args.add(a_number as Field);\n        args.add_multiple(an_array);\n        args.add(a_struct.amount);\n        args.add(a_struct.secret_hash);\n        args.add(a_deep_struct.a_field);\n        args.add(a_deep_struct.a_bool as Field);\n        args.add(a_deep_struct.a_note.amount);\n        args.add(a_deep_struct.a_note.secret_hash);\n        for note in a_deep_struct.many_notes {\n            args.add(note.amount);\n            args.add(note.secret_hash);\n        }\n        args.hash()\n    }\n\n    #[private]\n    fn test_setting_teardown() {\n        context.set_public_teardown_function(\n            context.this_address(),\n            comptime { FunctionSelector::from_signature(\"dummy_public_call()\") },\n            [],\n        );\n    }\n\n    #[private]\n    fn test_setting_fee_payer() {\n        context.set_as_fee_payer();\n    }\n\n    // Purely exists for testing\n    #[public]\n    fn create_l2_to_l1_message_public(\n        amount: Field,\n        secret_hash: Field,\n        portal_address: EthAddress,\n    ) {\n        // Create a commitment to the amount\n        let note = DummyNote::new(amount, secret_hash);\n\n        // Public oracle call to emit new commitment.\n        context.message_portal(portal_address, note.get_commitment());\n    }\n\n    #[public]\n    fn create_l2_to_l1_message_arbitrary_recipient_public(content: Field, recipient: EthAddress) {\n        // Public oracle call to emit new commitment.\n        context.message_portal(recipient, content);\n    }\n\n    #[private]\n    fn create_l2_to_l1_message_arbitrary_recipient_private(content: Field, recipient: EthAddress) {\n        // Public oracle call to emit new commitment.\n        context.message_portal(recipient, content);\n    }\n\n    // Purely exists for testing\n    #[public]\n    fn emit_nullifier_public(nullifier: Field) {\n        context.push_nullifier(nullifier);\n    }\n\n    // Forcefully emits a nullifier (for testing purposes)\n    #[private]\n    fn emit_nullifier(nullifier: Field) {\n        context.push_nullifier(nullifier);\n    }\n\n    // For testing non-note encrypted logs\n    #[private]\n    fn emit_array_as_encrypted_log(\n        fields: [Field; 5],\n        owner: AztecAddress,\n        outgoing_viewer: AztecAddress,\n        nest: bool,\n    ) {\n        let owner_ivpk_m = get_public_keys(owner).ivpk_m;\n        let outgoing_viewer_ovpk_m = get_public_keys(outgoing_viewer).ovpk_m;\n\n        let event = ExampleEvent {\n            value0: fields[0],\n            value1: fields[1],\n            value2: fields[2],\n            value3: fields[3],\n            value4: fields[4],\n        };\n\n        event.emit(encode_and_encrypt_event_with_randomness_unconstrained(\n            &mut context,\n            // testing only - a secret random value is passed in here to salt / mask the address\n            5,\n            outgoing_viewer_ovpk_m,\n            owner_ivpk_m,\n            owner,\n        ));\n\n        // this contract has reached max number of functions, so using this one fn\n        // to test nested and non nested encrypted logs\n        if nest {\n            Test::at(context.this_address())\n                .emit_array_as_encrypted_log([0, 0, 0, 0, 0], owner, outgoing_viewer, false)\n                .call(&mut context);\n\n            let otherEvent = ExampleEvent { value0: 1, value1: 2, value2: 3, value3: 4, value4: 5 };\n\n            otherEvent.emit(encode_and_encrypt_event_with_randomness_unconstrained(\n                &mut context,\n                // testing only - a randomness of 0 signals the kernels to not mask the address\n                0,\n                outgoing_viewer_ovpk_m,\n                owner_ivpk_m,\n                owner,\n            ));\n        }\n    }\n\n    #[private]\n    fn emit_encrypted_logs_nested(\n        value: Field,\n        owner: AztecAddress,\n        outgoing_viewer: AztecAddress,\n    ) {\n        let mut storage_slot = storage.example_constant.get_storage_slot() + 1;\n        Test::at(context.this_address())\n            .call_create_note(value, owner, outgoing_viewer, storage_slot)\n            .call(&mut context);\n        storage_slot += 1;\n\n        let msg_sender_keys = get_public_keys(context.msg_sender());\n        let owner_keys = get_public_keys(owner);\n\n        let mut note = ValueNote::new(value + 1, owner_keys.npk_m.hash());\n        create_note(&mut context, storage_slot, &mut note).emit(encode_and_encrypt_note(\n            &mut context,\n            msg_sender_keys.ovpk_m,\n            owner_keys.ivpk_m,\n            owner,\n        ));\n        storage_slot += 1;\n        Test::at(context.this_address())\n            .call_create_note(value + 2, owner, outgoing_viewer, storage_slot)\n            .call(&mut context);\n    }\n\n    // docs:start:is-time-equal\n    #[public]\n    fn is_time_equal(time: u64) -> u64 {\n        assert(context.timestamp() == time);\n        time\n    }\n    // docs:end:is-time-equal\n\n    #[public]\n    fn emit_unencrypted(value: Field) {\n        // docs:start:emit_unencrypted\n        context.emit_unencrypted_log( /*message=*/ value);\n        context.emit_unencrypted_log( /*message=*/ [10, 20, 30]);\n        context.emit_unencrypted_log( /*message=*/ \"Hello, world!\");\n        // docs:end:emit_unencrypted\n    }\n\n    #[public]\n    fn consume_mint_public_message(\n        to: AztecAddress,\n        amount: Field,\n        secret: Field,\n        message_leaf_index: Field,\n        portal_address: EthAddress,\n    ) {\n        let content_hash = get_mint_public_content_hash(to, amount);\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(content_hash, secret, portal_address, message_leaf_index);\n    }\n\n    #[private]\n    fn consume_mint_private_message(\n        secret_hash_for_redeeming_minted_notes: Field,\n        amount: Field,\n        secret_for_L1_to_L2_message_consumption: Field,\n        portal_address: EthAddress,\n    ) {\n        // Consume L1 to L2 message and emit nullifier\n        let content_hash =\n            get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes, amount);\n        context.consume_l1_to_l2_message(\n            content_hash,\n            secret_for_L1_to_L2_message_consumption,\n            portal_address,\n        );\n    }\n\n    #[public]\n    fn consume_message_from_arbitrary_sender_public(\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        message_leaf_index: Field,\n    ) {\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(content, secret, sender, message_leaf_index);\n    }\n\n    #[private]\n    fn consume_message_from_arbitrary_sender_private(\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n    ) {\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(content, secret, sender);\n    }\n\n    #[private]\n    fn set_constant(value: Field) {\n        let mut note = TestNote::new(value);\n        storage.example_constant.initialize(&mut note).discard();\n    }\n\n    #[private]\n    fn assert_private_global_vars(chain_id: Field, version: Field) {\n        assert(context.chain_id() == chain_id, \"Invalid chain id\");\n        assert(context.version() == version, \"Invalid version\");\n    }\n\n    #[public]\n    fn assert_public_global_vars(\n        chain_id: Field,\n        version: Field,\n        block_number: Field,\n        timestamp: u64,\n        fee_per_da_gas: Field,\n        fee_per_l2_gas: Field,\n    ) {\n        assert(context.chain_id() == chain_id, \"Invalid chain id\");\n        assert(context.version() == version, \"Invalid version\");\n        assert(context.block_number() == block_number, \"Invalid block number\");\n        assert(context.timestamp() == timestamp, \"Invalid timestamp\");\n        assert(context.fee_per_da_gas() == fee_per_da_gas, \"Invalid fee per da gas\");\n        assert(context.fee_per_l2_gas() == fee_per_l2_gas, \"Invalid fee per l2 gas\");\n    }\n\n    #[private]\n    fn assert_header_private(header_hash: Field) {\n        assert(context.historical_header.hash() == header_hash, \"Invalid header hash\");\n    }\n\n    // TODO(4840): add AVM opcodes for getting header (members)\n    //#[public]\n    //fn assert_header_public(header_hash: Field) {\n    //    assert(context.historical_header.hash() == header_hash, \"Invalid header hash\");\n    //}\n\n    #[private]\n    fn deploy_contract(target: AztecAddress) {\n        aztec_deploy_contract(&mut context, target);\n    }\n\n    #[private]\n    // Adapted from TokenContract#redeem_shield but without an initcheck so it can be run in simulator/src/client/private_execution.test.ts\n    fn consume_note_from_secret(secret: Field) {\n        let notes_set = storage.example_set;\n        let secret_hash = compute_secret_hash(secret);\n        let mut options = NoteGetterOptions::new();\n        options =\n            options.select(TestNote::properties().value, Comparator.EQ, secret_hash).set_limit(1);\n        let notes = notes_set.pop_notes(options);\n        assert(notes.len() == 1, \"note not popped\");\n    }\n\n    unconstrained fn get_constant() -> pub Field {\n        let constant = storage.example_constant.view_note();\n        constant.value\n    }\n\n    #[private]\n    fn test_nullifier_key_freshness(address: AztecAddress, public_nullifying_key: Point) {\n        assert_eq(get_public_keys(address).npk_m.inner, public_nullifying_key);\n    }\n\n    // Purely exists for testing\n    unconstrained fn get_random(kinda_seed: Field) -> pub Field {\n        kinda_seed * random()\n    }\n\n    pub struct DummyNote {\n        amount: Field,\n        secret_hash: Field,\n    }\n\n    impl DummyNote {\n        fn new(amount: Field, secret_hash: Field) -> Self {\n            Self { amount, secret_hash }\n        }\n\n        fn get_commitment(self) -> Field {\n            pedersen_hash([self.amount, self.secret_hash], 0)\n        }\n    }\n\n    impl Serialize<2> for DummyNote {\n        fn serialize(self) -> [Field; 2] {\n            [self.amount, self.secret_hash]\n        }\n    }\n\n    pub struct DeepStruct {\n        a_field: Field,\n        a_bool: bool,\n        a_note: DummyNote,\n        many_notes: [DummyNote; 3],\n    }\n\n    // Serializing using \"canonical\" form.\n    // 1. Everything that fits in a field, *becomes* a Field\n    // 2. Strings become arrays of bytes (no strings here)\n    // 4. Arrays become arrays of Fields following rules 2 and 3 (no arrays here)\n    // 5. Structs become arrays of Fields, with every item defined in the same order as they are in Noir code, following rules 2, 3, 4 and 5 (recursive)\n    impl Serialize<10> for DeepStruct {\n        fn serialize(self) -> [Field; 10] {\n            let mut result = [0; 10];\n            result[0] = self.a_field;\n            result[1] = self.a_bool as Field;\n            result[2] = self.a_note.amount;\n            result[3] = self.a_note.secret_hash;\n            for i in 0..3 {\n                result[4 + i * 2] = self.many_notes[i].amount;\n                result[5 + i * 2] = self.many_notes[i].secret_hash;\n            }\n            result\n        }\n    }\n}\n"},"411":{"path":"/usr/src/noir-projects/noir-contracts/contracts/token_portal_content_hash_lib/src/lib.nr","source":"// docs:start:mint_public_content_hash_nr\nuse dep::aztec::prelude::{AztecAddress, EthAddress};\nuse dep::aztec::protocol_types::hash::sha256_to_field;\n\n// Computes a content hash of a deposit/mint_public message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_public_content_hash(owner: AztecAddress, amount: Field) -> Field {\n    let mut hash_bytes = [0; 68];\n    let recipient_bytes:[u8; 32] = owner.to_field().to_be_bytes();\n    let amount_bytes:[u8; 32] = amount.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0x3e87b9be keccak256('mint_public(bytes32,uint256)')\n    hash_bytes[0] = 0x3e;\n    hash_bytes[1] = 0x87;\n    hash_bytes[2] = 0xb9;\n    hash_bytes[3] = 0xbe;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:mint_public_content_hash_nr\n\n// docs:start:get_mint_private_content_hash\n// Computes a content hash of a deposit/mint_private message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_private_content_hash(\n    secret_hash_for_redeeming_minted_notes: Field,\n    amount: Field\n) -> Field {\n    let mut hash_bytes = [0; 68];\n    let secret_hash_bytes:[u8; 32] = secret_hash_for_redeeming_minted_notes.to_be_bytes();\n    let amount_bytes:[u8; 32] = amount.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0xefa012c1 keccak256('mint_private(bytes32,uint256)')\n    hash_bytes[0] = 0xef;\n    hash_bytes[1] = 0xa0;\n    hash_bytes[2] = 0x12;\n    hash_bytes[3] = 0xc1;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_mint_private_content_hash\n\n// docs:start:get_withdraw_content_hash\n// Computes a content hash of a withdraw message.\npub fn get_withdraw_content_hash(recipient: EthAddress, amount: Field, caller_on_l1: EthAddress) -> Field {\n    // Compute the content hash\n    // Compute sha256(selector || amount || recipient)\n    // then convert to a single field element\n    // add that to the l2 to l1 messages\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let amount_bytes: [u8; 32] = amount.to_be_bytes();\n    let caller_on_l1_bytes: [u8; 32] = caller_on_l1.to_field().to_be_bytes();\n\n    //  0x69328dec, selector for \"withdraw(address,uint256,address)\"\n    hash_bytes[0] = 0x69;\n    hash_bytes[1] = 0x32;\n    hash_bytes[2] = 0x8d;\n    hash_bytes[3] = 0xec;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = caller_on_l1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_withdraw_content_hash\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"91":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_oracle_wrapper(args) };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_array_oracle_wrapper(args) };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"93":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{\n    KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"96":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress}, public_keys::{PublicKeys, NpkM, IvpkM, OvpkM, TpkM},\n    point::Point,\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"98":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(\n            contract_address,\n            randomness,\n            encrypted_event,\n            counter,\n        )\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32,\n) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\npub unconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {}\n"},"99":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader,\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\npub unconstrained fn get_contract_instance_internal_avm(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"}}}