{"transpiled":true,"noir_version":"0.36.0+1094f036be7b102252a3a5c0d4b8c621779cf4bd-x8664","name":"Benchmarking","functions":[{"name":"recreate_note","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"16137133351287663689":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"","brillig_names":["get_notes_internal","get_collapse_hints","decompose_hint","get_key_validation_request","notify_nullified_note_oracle_wrapper","get_public_keys_and_partial_address","random","notify_created_note_oracle_wrapper","lt_32_hint","lte_16_hint","build_msg_block","attach_len_to_msg_block","build_msg_block","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"3469988399892582431":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"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","debug_symbols":"7Z3djhs3EoXfZa59wd8imVdZLAIncQIDhh3EzgKLIO++mvGopR1RUzOlonRqUjeBHXfRx9+QdXhaavZfd798+OnP3378+PnXL1/vfvjXX3efvvz8/tvHL593v/vr73d3P/3x8dOnj7/9ePy/78L9f0p9uP7r7+8/3//267f3f3y7+yHn/u7uw+dfdr8qeVf/68dPH3a/bvHvf7+7K/TqkppeV/Lu5NqWHi9tbbuyjoex88Kxy8Kx68KxaeHYbeHYfeHYY93YFBaOHReOvXBd0sJ1SQvXJS1cl7RwXdLCdUkL1yUtXJdt4bpsC9dlW7gu28J12Rauy7ZwXbaF67ItXJdt4bpsC9dlX7gu+8J12Reuy75wXfaF67IvXJd94brsC9dlX7gu+8J1ORauy7FwXY6F63IsXJdj4bocC9flWLgux8J1ORauy7FwXcYQVg4eVw6eVg6eVw5eVg5eVw5OKwdvKwfvKwdfuULjyhUaV67QuHKFxpUrNK5coXHlCo0rV2hcuULjyhUaV67QtHKFppUrNK1coWnlCk0rV2hauULTyhWaVq7QtHKFlot/oBT6eLyYYo7b1Tt7nlyd+4j7oUc8jJ3KdzkVSw5hyWlYcjqWnAElpwYsORFLTsKSk7HkYHXlitWVK1ZXrlhduWJ15YrVlQmrK9OVVxZF2l+c+kFMf1Rz5alDebu41FM1A0lNC1BqIpSaBKUmQ6kpUGoU+g0dqUmMmpb3/aaVcDQyfVdDUGoalJoOpWYgqekBSk2EUpOg1GQoNQVKzeW9OB6cIcV4mRqCUtOg1HQoNQNJzeVfMVJVE6HUJCg1GUpNgVID1YsHVC8eUL14QPXigdSLU0DqxSkg9eIUkHpxCki9OAWkXpwCUi9OAakXp4DUi1NA6sUpQPXiCNWLI1QvjlC9OEL14gjViyNUL45QvTjC9OLJx46N2l5GP/nYMUWYxv166TBd/tXSE4wlvF46jH+8XjqM2bxeOowzvV46jI29XjqM571eOoxBvl66XTdNdt002XXTbNdNs103zXbdNNt102zXTbNdN8123TTbddNs102zXTctdt202HXTYtdNi103VXjm8WbS7bppseumxa6bFrtuWuy6abXrptWum1a7blrtuqnCs6o3k27XTatdN6123bTaddNq103JrpuSXTclu25Kdt308pPwbyfdrpuSXTclu25Kdt2U7Lpps+umza6bNrtu2uy6qcLhCzeTbtdNm103bXbdtNl102bXTbtdN+123bTbddNu100Vjs+4mXRkN+0lb9JrO5GO7KaMdGQ3ZaRf7qappE36IEZ6HGN/dQpUDmOnOrs6lLGf7jHU3P7v+gf9w7Z+hWNFbqs/GtefjOvPxvUX4/qrcf1kXH8zrt+4/w7b/puDbf/Nwbb/5mDbf3Ow7b852PbfHGz7bw62/TcH2/6bg23/zcG4/0bj/huN+2807r/RuP8qHIN0W/3G/Tca998I7r91u/u8+3WlU/3g/svqB/dfTn8C919WP7j/svrB/ZfVD+6/rH5w/2X1g/svqx/cf1n9xv03o/f/o/0P3Y/4VD94/6F6pL/FU/3g/YfVD95/WP3g/YfVD95/WP3g+39WP/j+n9NfwPs/qx98/8/qB9//s/ov99/dUHv9eTRGf4p1/0W5lHq6+P6Jwhk5t9Vfjesn4/qbcf3duP5hW7/CCTq31R+N60/G9Rv3X4VTdW6r37j/VuP+W437bzXuv9W4/5Jx/yXj/kvG/ZeM+6/COTy31W/cf8m4/5Jx/yXj/kvG/bcZ998G7r/c578N3H9Z/eD+y+oH919WP7j/svrB/ZfVD+6/rH5w/2X1g/svp7+D+y+r37j/dvT+z3z/qoP3H+7z6w7ef1j94P2H0z/A+w+rH7z/sPrB9/+sfvD9P6sfvP+z+sH3/6x+8P0/o78onP9Qtr+CyqiM/ni0oamtH409O3ysUg6PV1dqgRs7tLD9Y0dirj5/CNoDl+Rcplyyc5lyKc5lyqU6lykXci5TLs25TLl05zLlMpzLjIvCuShvk4vvd+dcfL875+L73TmX4lymXHy/O+fi+905F9/vzrn4fnfOxfe7Uy7J97tzLr7fnXPx/e6ci+9351yKc5ly8f3unIvvd+dcfL875+L73TkX3+9OuWTf7865+H53zsX3u3Muvt+9+K2RReEQQoeYfSetANG33QoQfY+uANE39AoQffd/OcTiUUEBoucKBYgeQhQgemJRgFgc4uUQPbEoQPTEogDRE4sCRE8sChA9sVwOsXpiUYDoiUUBoicWBYieWBQgFod4OURPLAoQPbEoQPTEogDRE4sCRE8sl0MkTywKED2xKED0xKIA0ROLAsTiEF8AsW+qc6/tBKInFgWInlgUIL6lxJJq2Y+t/85T5sz/Qm8pttyW5FvKLjcl2d5SgLktybeUYm5L8i1FmduSfEt55rYki5NUIvmWks1tSb6leHNbkp5xtEh6xtEi6RlHiWT3jKNF0jOOFknPOFokPeNokSxOUomkZxwtkp5xtEh6xtEi6RlHi6RnHCWSwzOOFknPOFokPeNokfSMo0WyOEklkp5xXkiSeZd3GZ5xtEh6xtEi6RlHi6RnHB2SNXjG0SLpGUeLpGccLZKecbRIFiepRNL3ky8leZQW6X7EJyTf1Htpl5KkekTynsRTku7dWiTdu7VIundrkXTv1iLp9ye1SPr9SS2Svp/UIun3J7VI+v1JJZLo7yJu+zMBaiudGTvFA5tEg726ju3qnliSzGeLFf3txYZIgmccQyTBM44hksVJKpEEzziGSIJnHEMkwTOOIZLgGccQSfCMY4ck+vunDZH0jKNF0jOOFknPOFoki5NUIukZR4ukZxwtkp5xtEh6xtEi6RlHiST6i7MNkfSMo0XSM44WSc84WiSLk1Qi6RlHi6RnHC2SnnG0SHrGeSFJ7nkc9Lds2yGJ/qptQyQ942iR9IyjRdIzjhbJ4iSVSHrG0SLpGUeLpGccJZLoL0IGIsk8KY/+DlocktzzOOgvojVE0r1bi6R7txZJ924tkn5/Uouk359UIon+XlpDJP3+pBZJvz+pRfLaGYdC3AuiNBiSeTtEoBzls3j/EzjVMfbQWz1oHnlyaaH9sDWF40sfiBQn8oRIdSJPiJATeUKkOZEnRLoTeUJk/AOJ1LTtBag9f2kMbdMb+gFfyuWB39XfnvrW+EXndxG/a++6Ke/3urGxu27+219Xfz+ptv5iXH81rp+M62/G9Xfj+odt/Vd/s6G2/mhcv3H/Hcb99+pvrNPWb9x/h3H/Hcb9dxj332HbfynY9l8Ktv2Xgm3/pWDbfynY9l8Ktv2Xgm3/pWDbfynY9l8Kxv03gvsv881wiuD+y+oH919WP7j/svrB/ZfVD+6/rH5w/2X1g/svqx/cf1n94P7L6U/G/Teh9//nn4eiBN5/mO86UgLvP6x+8P7D6gfvP5z+DN5/WP3g+39WP/j+n9UP3v9Z/cW4fvD9P6e/ouvP5aD/WMteP/r+gdOPvn/g9KPvHzj96PsHRj+h7x84/ej7B04/+v6B04++f+D0F+P6jfsvGfdfMu6/ZNx/ybj/NuP+29D9N4WD/jzRj+6/nH50/+X0o/svpx/dfzn96P7L6Uf3X04/uv9y+tH9l9Hf0f2X02/cf9Gf32T1G/df9Oc3Wf1+zttLT91hdvLdz3nTIunnvCmRHH7OmxZJP+dNi6Sf86ZF0s+y1iJZnKQSST/LWoukn2WtRdIzjhZJzzhaJD3j6JBswTOOFknPOFokPeNokfSM81KSz9/pbaE4SSWSnnG0SHrG0SLpGUeLpGccLZKecZRIRs84WiQ942iR9IyjRdIzjhbJ4iSVSHrG0SLpGUeLJPh+Mu/l76AGbuy0vRokpkHc1ePAfXeb7OK7agl8P2mIJPh+0hBJ8P2kIZLg+0lDJIuTVCIJvp80RBJ8P2mIJPg9c0Mkwe+ZGyLpGUeJZPaMo0XSM44WSc84WiQ942iRLE5SiaRnnJeSZO70Zs84WiQ942iR9IyjRdIzjhLJ4hlHi6RnHC2SnnG0SHrG0SJZnKQSSc84WiQ942iR9IyjRdIzjhLJevl+cjfUnmQejdGv/dxlTcb1Z+P6i3H91bh+Mq6/GdffjesftvUrvNfmtvqN+y8Z918y7r8K77W5rX7j/kvG/ZfQ/ZfJL4Tuv5x+dP9l9Dd0/+X0o/svpx/dfzn96P7L6Uf3X04/uv9y+tH9l9Nv3H+bcf9txv23G/dfhfeqpLK/I07X/y6lwntVbqu/GtdPxvU34/q7cf3Dtn6FN6fcVn80rj8Z12/cfxXeiHFb/cb9dxj332Hcf4dx/x3o/vt8fukB3X85/ej+y+lH919OP7r/cvrR/ZfTj+6/nH50/+X0o/svpx/dfzn9xv03GvffaNx/o3H/VTg/NvT9HXGKOTL6KdL2jz18jzz18l0NXVlN2Y9MlE/VNCg1HUrNQFKjcE6qppoIpSZBqclXVpO3i0s9VVOg1FQoNQSlpkGp6VBqBpKaHKDURCg1CUoNVC/OUL04Q/XiDNWLM1QvzlC9+Mwzzinvn5/NqR0yXpr9BWN700MM4fD07DTgEW1iWju+9EFLB9Iyrqtl7H/8LZanWmq4spb9k9btOPI+aolAWtJVtbTtue9G6URLBtJSrqtlxMdrd3eHT7TUK2vZ3z7apdoTLXRVLTvf2WuZ/IzarbSc9rpzz8TW/fdMcx75WMtD0RAUnXv6s4znis5siUt8rihJirKgaP6JeIxp/2+K8fgEigfbHfOPoWM6HFuRKJ4URUlRkhRlSVGRFNV5Uatb0TilR4Ki+ScPscbthnONJ/Lmt/u5oiQpypKiIimaI6et9USicFJEkqImKeqSoiEomt+F5YqipChJirKkqEiKJDMiSWZEksyIJJkRSTIjsmRGZMmMyJIZkSUzIp+ZEX3/uVxsIZ0UVUkRSYqapKhLioagqARJUZQUzX+4JW1FpZz08vkBhFxRlRSRpKhJirqkaAiK5sGaK4qSoiQpksyIKpkRVTIj6pkZsR3UFks76Ua1SYq6pGgIiihIiqKkKEmKsqSoSIqqpEgyI0gyI0gyI0gyI5pkRjRJbGiS2NAksaFJYsP8yeEY6EAiUDsq+353Ycyf2I2tbZuW3Q2kp3/Z/DFZrihKipKkaE699+2OzC7YnhQVSVGVFJGkqEmKuqRoCIrmD85xRVFSlCRFkhkxJDNiSGbEkMyIIZkRQzIjhmBG3N/0FFVN50QK6fA9xTypSqKqLKoqkqp5zuvbrdXdRxSnNfOfcKjp0NInf1MXVQ1J1Zn8xVXF19+T3VUlUVUWVRVRVRVVkaiqiaq6qGpIqs7EN65KNDeqaG5U0dyoorlRRXOjiubGPJA932vO5LEQDw8c5tOqMzGJq8qiqiKqqqIqElWJ+jWJ+jWJ+nUT9eszeYmrSqKqLKoqoqozc2P75kkMPZ1Wkaiqiaq6qGpIqs6EOq4qiqr4uTGrEs2NLpobZ5IdV0WiKlHf6KK+0UV9Y4j6xhD1jSHqG0M0N4ZobgzR3BiiuTFEc2NIfsoxBFFVFFW9+qf89+53/3n/x8f3P3368HVXc/+Hf37++dvHL58ff/vtv79//5Pdxf8D","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"14336010898202591232":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["public_dispatch"],"assert_messages":{"448":"attempt to add with overflow","756":"Array index out of bounds","820":"attempt to add with overflow","430":"Array index out of bounds","933":"attempt to add with overflow","674":"Storage slot 0 not allowed. Storage slots must start from 1.","223":"Nested call failed!","665":"Storage slot 0 not allowed. Storage slots must start from 1.","793":"Index out of bounds","464":"Array index out of bounds","909":"Array index out of bounds","513":"attempt to add with overflow","437":"Array index out of bounds","535":"attempt to add with overflow","718":"attempt to add with overflow","517":"Array index out of bounds","901":"Array index out of bounds","767":"attempt to add with overflow","700":"Array index out of bounds","956":"Array index out of bounds","499":"attempt to add with overflow","426":"attempt to add with overflow","478":"Stack too deep","798":"Array index out of bounds","472":"attempt to add with overflow","917":"Array index out of bounds","271":"attempt to add with overflow","524":"Array index out of bounds","975":"attempt to add with overflow"}},{"name":"increment_balance","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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","brillig_names":["increment_balance"],"assert_messages":{"215":"Stack too deep","404":"Array index out of bounds","500":"Array index out of bounds","165":"Nested call failed!","197":"Array index out of bounds","508":"Array index out of bounds","374":"attempt to add with overflow","179":"Array index out of bounds","208":"attempt to add with overflow","566":"attempt to add with overflow","330":"Storage slot 0 not allowed. Storage slots must start from 1.","426":"attempt to add with overflow","356":"Array index out of bounds","321":"Storage slot 0 not allowed. Storage slots must start from 1.","187":"attempt to add with overflow","399":"Index out of bounds","492":"Array index out of bounds","524":"attempt to add with overflow","547":"Array index out of bounds"}},{"name":"create_note","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block","attach_len_to_msg_block","build_msg_block","emit_encrypted_note_log_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"broadcast","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"7Z3dbts4EIXfxde54M+QQ/ZVFosibdPCQJAUTbrAosi7V04j2Q1HZnNooBQ4N4Xd8Cgnn0bkHEdifuw+3Xz4/uX9/u7z/cPu3T8/drf3H68f9/d307sfT1e7D9/2t7f7L+9P/3tnDv9Y8zz+4ev13eHtw+P1t8fdOxeMvdrd3H06vHRmOsLn/e3N7p1n+3RVjM4+vwzOKS9jrcvCWBvifGDjjse1QRprDIWX0dPr7I/jnTTe59k0+ZNjkzDUeUOzD+8qg6OfPUfPp0P/vdpZq/ya+Dnl18TPK78mfqT8mvgF5dfELyq/Jn6s/Jr4JeXXxC8rvxZ+TvNHGz/NH238NH+08dP80caPlF8TP80fdX5sZn6Hn/93fpo/2vhp/mjjp/mjjZ/mjyZ+XvNHGz/NH6/4HaBoqBCgaFIQoJBCKaFoTy9A0UZdgKLdtwBFW2oBivbJJRTS5leAoh2tAEU7WgGKdrQCFFIoJRTtaAUo2tEKULSjFaBoRytA0Y62hBK0oxWgaEcrQNGOVoCiHa0AhRRKCUU7WgGKdrQCFO1oBSja0QpQtKMtoUTtaAUo2tEKULSjFaBoRytAIYVSQOFRJ1o6QgnhNZRBL5/kZs8ukYcHHwgOeq29haBl9rMNzq9vMeRBo+YFCQ6aSy9IcNAQ+yaCKc2mbTbFSjJo4r0gwUHj8eUIpkFbvAsSHDR4X5DgoCn9ggQ1k7QSJCXYSFAzSStBzSStBDWTtBLUTNJKUDNJI8GsmaSVoGaSVoKaSVoJaiZpJUhKsPqbJuPcYtoXBDWTtBLUTNJKUDNJK0HNJK0ENZM0EpycKcJWhJpKmhFqLGlGeIFcYk2c7xCz1tkKxGhn89HFypEjzzZiSsfjevvLO23Ye9iw97hh7/X+8/TyW/Gejt5N/u17lKNDpPkCDDEer1abpGkg+MTzaH/qfxr97D9t3H/etv8/+HNYffu3G/fvNu7fb9w/bdx/2Lj/uHH/G19/7cbXX7vx9df1Pv+TnY89vQyl/97nH/Jm8e9j6f8vzD9uqYjIqeLfkV3iLp3kCjd9n2f/vHH/aeP+5fmHeFEFU8uOzHMaTCd/7kP2w9nP7jmzL+p5ZXv3v+fHdubHdebHd+aHOvMTOvMTO/PDnflJnfnpbH6mzuZn6mx+ps7mZ+psfqbO5mfqPb9X8gv1nt8pLt0qMZf+e8/vFNxZ/73nd1p+nzr5r6WFbNzsJJtQ/rSh90/bK2k59P5pe81/95+2VPz3/ml7zT9t3P/GP+0K3a/WFf/dr9YV/92v1hX//a/WZ/3Hja+/cePrb9z4+hs3vv7+wT54ffvf+PobR90Fd9lqyvn0esM4y4PeOUx28UGOCiqD3gxcoTLoc4cVKqRUBCqDPh9YoTLoM38VKoM+x1ehMmi/UqEy6PN256mMutdghYr2thIV7W0lKtrbSlRIqQhUtLeVqGhvK1EZtbc1x1t3bfGk8Kh74VWojNrbnqUy6p51FSqj9rbnqYza256nMmpve54KKRWByqi97Xkqo/a256loFydR0S6upOJG3eSrQkW7OIGKvK9CouXJieALiTgVWbPcAG9NLL9PBkTOICKLiMRm1tplwy5rT26Kn0UeEREiCogoIiJGRAkRZUAkP/ZbE1lEhFSERyrCIxXhkYrwSEV4pCLkxxHPTiu0crEvzzVZ40uRR0SEiAIiioiIEREyKRMyKQdkUg7IpCw/xVITeUREiCggopWKiMvVZJIrRIyIEiLKgCgaRGQRkUNE9YoQREhFRKQiYkREjIiQOSIicwQjcwQjcwQjcwQjcwQjFcFIRTBSEYxUBCMVkZCTm5CTm5CTm4CT6w3QwXp5T0w7NSWzaJrlXovkjShrIouIHCLyiEi+NKbqX0S5oCcnz5pIRh7s/DjC9LKwtxIjKyKLiBwi8ohIRh79cp5iNIUoIKKIiBgRJUSUAdFKjKyILCJyiMgjIqQiPFIRHqkIj1SERyrCIxVBSEUQUhGEVMRKzo1pWdTYuEJEiCggooiIGBElRJQB0UrOrYjkk0vLXv6WqJjLVyJrRUSIKCCiiIgYESVElAHRSmStiCwiQioiIhURkYpYiawUeBFxMRutRNaKiBFRQkQZEK1E1orIIiKHiDwiIkSEVAQjFcFIRTBSEYxUREJiQ0JiQ0JiQ3pzbHia3v13/W1//eH25mHSHL74/e7j4/7+7uXt4/9ff31lGvwT","brillig_names":["broadcast"],"assert_messages":{"106":"Storage slot 0 not allowed. Storage slots must start from 1.","183":"Array index out of bounds","164":"attempt to add with overflow","327":"Array index out of bounds","346":"attempt to add with overflow","251":"Array index out of bounds","267":"Array index out of bounds","283":"attempt to add with overflow","207":"Stack too deep","153":"Array index out of bounds","201":"attempt to add with overflow","259":"Array index out of bounds"}}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"fields":[{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Benchmarking"}},{"name":"fields","value":{"fields":[{"name":"notes","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Benchmarking::recreate_note_parameters"}}],"kind":"struct","path":"Benchmarking::recreate_note_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"Benchmarking::create_note_parameters"}}],"kind":"struct","path":"Benchmarking::create_note_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Benchmarking::broadcast_parameters"}}],"kind":"struct","path":"Benchmarking::broadcast_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"Benchmarking::increment_balance_parameters"}}],"kind":"struct","path":"Benchmarking::increment_balance_abi"}]}},"file_map":{"101":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"103":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            serialized_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"109":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}},\n};\n\nuse dep::protocol_types::{\n    hash::{\n        compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n        compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    }, utils::arr_copy_slice,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash =\n                compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"114":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note = unsafe { get_note_internal(storage_slot) };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"},"116":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"120":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"129":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"131":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"141":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{\n    constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest,\n};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission,\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"147":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"},"149":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"161":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n    }, point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice},\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER,\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"164":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, public_keys::{PublicKeys, IvpkM, ToPoint}, scalar::Scalar, point::Point,\n};\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48]\n    where\n        T: ToPoint,\n    {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false,\n        },\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131,\n        160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171,\n        176, 218, 48, 209, 73, 89, 200, 209,\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"165":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::getters::get_ovsk_app, encrypted_logs::payload::compute_encrypted_log,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, public_keys::{PublicKeys, OvpkM, IvpkM}, hash::sha256_to_field,\n    abis::note_hash::NoteHash,\n};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 416 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] =\n        compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 416 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let ovsk_app: Field = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) =\n            compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) =\n            unsafe { compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient) };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress,\n) {\n    let ovsk_app: Field = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext,\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"166":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, public_keys::{OvpkM, IvpkM},\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, hash::poseidon2_hash_with_separator,\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose,\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes,\n    encrypted_logs::header::EncryptedLogHeader,\n    keys::point_to_symmetric_key::point_to_symmetric_key,\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] =\n        compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(\n    plaintext: [u8; P],\n    eph_sk: Scalar,\n    ivpk: IvpkM,\n) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point,\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field,\n    )\n        .to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::encrypted_logs::payload::{\n        compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext,\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{\n        address::AztecAddress, public_keys::{OvpkM, IvpkM}, point::Point, scalar::Scalar,\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false,\n            },\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false,\n            },\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41,\n            2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239,\n            247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118,\n            183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183,\n            12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78,\n            101, 153, 0, 0, 16, 39,\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(\n            0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2,\n        );\n\n        let log: [u8; 448] = compute_encrypted_log(\n            contract_address,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            plaintext,\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235,\n            86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79,\n            51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171,\n            62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203,\n            98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211,\n            49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205,\n            104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248,\n            193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110,\n            249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173,\n            151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4,\n            235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194,\n            90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219,\n            22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18,\n            204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167,\n            110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239,\n            95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25,\n            244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91,\n            68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76,\n            26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178,\n            143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189,\n            117, 147, 101, 230, 132,\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false,\n            },\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160,\n            190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157,\n            131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93,\n            46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130,\n            37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95,\n            115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234,\n            245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162,\n            25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185,\n            212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236,\n            23, 206, 229, 108,\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb,\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31,\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b,\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(\n            recipient,\n            recipient_ivpk,\n            sender_ovsk_app,\n            eph_sk,\n            eph_pk,\n        );\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238,\n            50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248,\n            43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31,\n            211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151,\n            152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58,\n            120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25,\n            173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224,\n            30, 168, 177, 26, 144, 5, 124, 128, 6,\n        ];\n\n        assert_eq(outgoing_body_ciphertext_from_typescript, ciphertext);\n    }\n}\n"},"177":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice,\n};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator =\n        arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158,\n        236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159,\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"178":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\nuse crate::{\n    oracle::{\n        keys::get_public_keys_and_partial_address,\n        key_validation_request::get_key_validation_request,\n    }, keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) =\n        unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    hinted_canonical_public_keys\n}\n"},"185":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Serialize<N>,\n    {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N],\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"186":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n        key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n        call_private_function::call_private_function_internal, header::get_header_at,\n        logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext, function_selector::FunctionSelector,\n        max_block_number::MaxBlockNumber,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n        nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash},\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL,\n        MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR,\n    }, header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests: BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator {\n                request,\n                sk_app_generator: sk_generators[key_index],\n            };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(\n        &mut self,\n        note_hash_counter: u32,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context,\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        let call_request = PublicCallRequest { call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.public_teardown_call_request = PublicCallRequest { call_context, args_hash, counter };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"},"191":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs,\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {}\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n"},"209":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"},"234":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{\n        decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI,\n    };\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"284":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: u32,\n) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n"},"305":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"312":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, public_keys_hash::PublicKeysHash,\n        salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils,\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [pub_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        ))\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        functino_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys_hash: PublicKeysHash,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            functino_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys_hash, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"315":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"317":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"325":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash}, note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n        MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX,\n    }, merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), unique_note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256(\n            [log_hash.contract_address.to_field(), log_hash.log_hash.value],\n        )\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n            0,\n        ))\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk<let N: u32>(\n    _vk: VerificationKey<N>,\n) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"327":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr","source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        GENERATOR_INDEX__PUBLIC_KEYS_HASH, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_IVPK_M_X,\n        DEFAULT_IVPK_M_Y, DEFAULT_OVPK_M_X, DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y,\n    }, hash::poseidon2_hash_with_separator, point::POINT_LENGTH,\n    traits::{Deserialize, Serialize, Hash},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse dep::std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE = 16;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeroes.\ntype MSG_BLOCK = [u8; BLOCK_SIZE];\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !crate::runtime::is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: MSG_BLOCK) -> INT_BLOCK {\n    let mut msg32: INT_BLOCK = [0; INT_BLOCK_SIZE];\n\n    for i in 0..INT_BLOCK_SIZE {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4 * (i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeroes.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeroes by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    for i in 0..BLOCK_SIZE {\n        if i >= msg_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n    for i in msg_byte_ptr..MSG_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[MSG_SIZE_PTR + i] = len_bytes[i];\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    for i in 0..MSG_SIZE_PTR {\n        let predicate = (i < msg_byte_ptr) as u8;\n        let expected_byte = predicate * last_block[i];\n        assert_eq(msg_block[i], expected_byte);\n    }\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let len = 8 * message_size;\n    let mut reconstructed_len: Field = 0;\n    for i in MSG_SIZE_PTR..BLOCK_SIZE {\n        reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n    }\n    assert_eq(reconstructed_len, len as Field);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4 * j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"371":{"path":"/usr/src/noir-projects/noir-contracts/contracts/benchmarking_contract/src/main.nr","source":"// A contract used for running benchmarks.\n// We should try to change this contract as little as possible, since any modification\n// would alter the metrics we're capturing in the benchmarks, and we want to keep the\n// subject being tested as unmodified as possible so we can detect metric changes that\n\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract Benchmarking {\n    use dep::aztec::prelude::{AztecAddress, NoteGetterOptions, Map, PublicMutable, PrivateSet};\n    use dep::value_note::{utils::increment, value_note::ValueNote};\n\n    use dep::aztec::macros::{storage::storage, functions::{private, public}};\n\n    #[storage]\n    struct Storage<Context> {\n        notes: Map<AztecAddress, PrivateSet<ValueNote, Context>, Context>,\n        balances: Map<AztecAddress, PublicMutable<Field, Context>, Context>,\n    }\n\n    // Creates a new value note for the target owner. Use this method to seed an initial set of notes.\n    #[private]\n    fn create_note(owner: AztecAddress, outgoing_viewer: AztecAddress, value: Field) {\n        // docs:start:increment_valuenote\n        increment(storage.notes.at(owner), value, owner, outgoing_viewer);\n        // docs:end:increment_valuenote\n    }\n    // Deletes a note at a specific index in the set and creates a new one with the same value.\n    // We explicitly pass in the note index so we can ensure we consume different notes when sending\n    // multiple txs that will land on the same block.\n    // See https://discourse.aztec.network/t/utxo-concurrency-issues-for-private-state/635\n    // by @rahul-kothari for a full explanation on why this is needed.\n    #[private]\n    fn recreate_note(owner: AztecAddress, outgoing_viewer: AztecAddress, index: u32) {\n        let owner_notes = storage.notes.at(owner);\n        let mut getter_options = NoteGetterOptions::new();\n        let notes = owner_notes.pop_notes(getter_options.set_limit(1).set_offset(index));\n        let note = notes.get(0);\n        increment(owner_notes, note.value, owner, outgoing_viewer);\n    }\n\n    // Reads and writes to public storage and enqueues a call to another public function.\n    #[public]\n    fn increment_balance(owner: AztecAddress, value: Field) {\n        let current = storage.balances.at(owner).read();\n        storage.balances.at(owner).write(current + value);\n        Benchmarking::at(context.this_address()).broadcast(owner).call(&mut context);\n    }\n\n    // Emits a public log.\n    #[public]\n    fn broadcast(owner: AztecAddress) {\n        context.emit_unencrypted_log(storage.balances.at(owner).read());\n    }\n}\n"},"372":{"path":"/usr/src/noir-projects/aztec-nr/value-note/src/utils.nr","source":"use dep::aztec::prelude::{AztecAddress, PrivateContext, PrivateSet, NoteGetterOptions};\nuse dep::aztec::note::note_getter_options::SortOrder;\nuse dep::aztec::encrypted_logs::encrypted_note_emission::encode_and_encrypt_note;\nuse dep::aztec::keys::getters::get_public_keys;\nuse crate::{filter::filter_notes_min_sum, value_note::{ValueNote, VALUE_NOTE_LEN}};\n\n// Sort the note values (0th field) in descending order.\n// Pick the fewest notes whose sum is equal to or greater than `amount`.\npub fn create_note_getter_options_for_decreasing_balance(\n    amount: Field,\n) -> NoteGetterOptions<ValueNote, VALUE_NOTE_LEN, Field, Field> {\n    NoteGetterOptions::with_filter(filter_notes_min_sum, amount).sort(\n        ValueNote::properties().value,\n        SortOrder.DESC,\n    )\n}\n\n// Creates a new note for the recipient.\n// Inserts it to the recipient's set of notes.\npub fn increment(\n    // docs:start:increment_args\n    balance: PrivateSet<ValueNote, &mut PrivateContext>,\n    amount: Field,\n    recipient: AztecAddress,\n    outgoing_viewer: AztecAddress, // docs:end:increment_args\n) {\n    let recipient_keys = get_public_keys(recipient);\n    let outgoing_viewer_ovpk_m = get_public_keys(outgoing_viewer).ovpk_m;\n\n    let mut note = ValueNote::new(amount, recipient_keys.npk_m.hash());\n    // Insert the new note to the owner's set of notes and emit the log if value is non-zero.\n    balance.insert(&mut note).emit(encode_and_encrypt_note(\n        balance.context,\n        outgoing_viewer_ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n    ));\n}\n\n// Find some of the `owner`'s notes whose values add up to the `amount`.\n// Remove those notes.\n// If the value of the removed notes exceeds the requested `amount`, create a new note containing the excess value, so that exactly `amount` is removed.\n// Fail if the sum of the selected notes is less than the amount.\npub fn decrement(\n    balance: PrivateSet<ValueNote, &mut PrivateContext>,\n    amount: Field,\n    owner: AztecAddress,\n    outgoing_viewer: AztecAddress,\n) {\n    let sum = decrement_by_at_most(balance, amount, owner, outgoing_viewer);\n    assert(sum == amount, \"Balance too low\");\n}\n\n// Similar to `decrement`, except that it doesn't fail if the decremented amount is less than max_amount.\n// The motivation behind this function is that there is an upper-bound on the number of notes a function may\n// read and nullify. The requested decrementation `amount` might be spread across too many of the `owner`'s\n// notes to 'fit' within this upper-bound, so we might have to remove an amount less than `amount`. A common\n// pattern is to repeatedly call this function across many function calls, until enough notes have been nullified to\n// equal `amount`.\n//\n// It returns the decremented amount, which should be less than or equal to max_amount.\npub fn decrement_by_at_most(\n    balance: PrivateSet<ValueNote, &mut PrivateContext>,\n    max_amount: Field,\n    owner: AztecAddress,\n    outgoing_viewer: AztecAddress,\n) -> Field {\n    let options = create_note_getter_options_for_decreasing_balance(max_amount);\n    let notes = balance.pop_notes(options);\n\n    let mut decremented = 0;\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            decremented += note.value;\n        }\n    }\n\n    // Add the change value back to the owner's balance.\n    let mut change_value = 0;\n    if max_amount.lt(decremented) {\n        change_value = decremented - max_amount;\n        decremented -= change_value;\n    }\n    increment(balance, change_value, owner, outgoing_viewer);\n\n    decremented\n}\n"},"376":{"path":"/usr/src/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n        traits::Serialize, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n    }, macros::notes::note,\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    }, oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"93":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{\n    KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"96":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress}, public_keys::{PublicKeys, NpkM, IvpkM, OvpkM, TpkM},\n    point::Point,\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"98":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(\n            contract_address,\n            randomness,\n            encrypted_event,\n            counter,\n        )\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32,\n) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\npub unconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {}\n"}}}