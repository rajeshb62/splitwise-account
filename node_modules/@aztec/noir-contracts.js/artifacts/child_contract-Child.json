{"transpiled":true,"noir_version":"0.36.0+1094f036be7b102252a3a5c0d4b8c621779cf4bd-x8664","name":"Child","functions":[{"name":"private_set_value","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"new_value","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"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lltiseWWWAYsFRZbbomFyy2xcLklFi63xMLlVlicfVZjseWWWGy5JRZbbollEAuFWJj37LPnWLjcEguXW2Kx5ZaXXFtuhcXZZzUWW26JxZZbYrHlllgGLBUWLrfEwuWWWLjcEostt8Riy62wOPusxmLLLbF4k1glFuY9++w5lgFLhYXLLbHYcstLri23xGLLLbHYcisszj6rsdhySyxcbomFyy2xDFgqLFxuicWWW2Kx5ZZYbLklFltuhWXes8+eioV5zz57joXLLbFwuSWW4ZJbXXJtuSUWW26JxZZbYrHlllhsuRWWec8+e46Fyy2xcLklFi63xDJgqbDYckssttwSiy23xOJNYpVYmPfss2dYzvOeffYcC5dbYrHlFpfcs7PPaiwDlgqLLbfEYsstsdhySyxcbomFy62wzHv22XMsXG6JxZZbYrHlllgGLBUWW26JxZvEKrEw79lnz7FwuSUWLrfC4uyz8pLr7LMaiy23xGLLLbEMWCosttwSC5dbYuFySyxcbomFy62wOPusxmLLLbHYckssttwSyyAWCrEw79lnz7FwuSUWLrfEYsstL7m23AqLs89qLLbcEostt8Riyy2xDFgqLFxuiYXLLbFwuSUWW26JxZZbYXH2WY3Fllti8SaxSizMe/bZcywDlgoLl1tiseWWl1xbbonFlltiseVWWJx9VmOx5ZZYuNwSC5dbYhmwVFi43BKLLbfEYsstsdhySyy23ArLvGefPRUL85599hwLl1ti4XJLLMMlt7rk2nJLLLbcEostt8Riyy2x2HIrLPOeffYcC5dbYuFySyxcbollwFJhseWWWGy5JRZbbonFm8QqsTDv2WdPscx79tlzLFxuicWWW11ynX1WYxmwVFhsuSUWW26JxZZbYuFySyxcboFlzHv22XMsXG6JxZZbYrHlllgGLBUWW26JxZvECrEw5j377DkWLrfEwuVWWJx9Vl5ynX1WY7HlllhsuSWWAUuFxZZbYuFySyxcbomFyy2xcLkVFmef1VhsuSUWW26JxZZbYhnEQiEW5j377DkWLrfEwuWWWGy55SXXllthcfZZjcWWW2Kx5ZZYbLkllgFLhYXLLbFwuSUWLrfEYsstsdhyKyzOPqux2HJLLN4kVomFec8+e45lwFJh4XJLLLbc8pJryy2x2HJLLLbcCouzz2osttwSC5dbYuFySywDlgoLl1tiseWWWGy5JRZbbonFllthmffss6diYd6zz55j4XJLLFxuiWW45FaXXFtuicWWW2Kx5ZZYbLklFltuhWXes8+eY+FySyxcbomFyy2xDFgqLLbcEostt8Riyy2xeJNYJRbmPfvsKZZ5zz57joXLLbHYcqtLrrPPaiwDlgqLLbfEYsstsdhySyxcbomFy62wzHv22XMsXG6JxZZbYrHlllgGLBUWW26JxZvEKrEw79lnz7FwuSUWLrfAcnH2WXXJvTj7rMZiyy2x2HJLLAOWCostt8TC5ZZYuNwSC5dbYuFyKyzOPqux2HJLLLbcEostt8QyiIVCLMx79tlzLFxuiYXLLbHYcstLri23wuLssxqLLbfEYsstsdhySywDlgoLl1ti4XJLLFxuicWWW2Kx5VZYnH1WY7Hllli8SawSC/OeffYcy4ClwsLlllhsueUl15ZbYrHlllhsuRUWZ5/VWGy5JRYut8TC5ZZYBiwVFi63xGLLLbHYckssttwSiy23wjLv2WdPxcK8Z589x8Lllli43BLLcMmtLrm23BKLLbfEYsstsdhySyy23ArLvGefPcfC5ZZYuNwSC5dbYhmwVFhsuSUWW26JxZZbYvEmsUoszHv22VMs85599hwLl1tiseVWl1xnn9VYBiwVFltuicWWW2Kx5ZZYuNwSC5dbYZn37LPnWLjcEostt8Riyy2xDFgqLLbcEos3iVViYd6zz55j4XJLLFxuhcXZZ+Ul19lnNRZbbonFlltiGbBUWGy5JRYut8TC5ZZYuNwSC5dbYLk6+6zGYsstsdhySyy23BLLIBY+ioXrvGefPcfC5ZZYuNwSiy23vOTacisszj6rsdhySyy23BKLLbfEMmCpsHC5JRYut8TC5ZZYbLklFltuhcXZZzUWW26JxZvEKrEw79lnz7EMWCosXG6JxZZbXnJtuSUWW26JxZZbYXH2WY3Fllti4XJLLFxuiWXAUmHhckssttwSiy23xGLLLbHYciss85599lQszHv22XMsXG6JxZZbXlsGLBUWW26JxZZbYrHlllhsuSUW71iobtDOPqux2HJLLFxudW2Z9+yz51gGLBUWW26JxZZbYrHllli8Say8QdtyKyzznn32HIstt8Riy60uuc4+q7EMWCosttwSiy23xGLLLbFwuSUWv7FQYZn37LPnWPxebonFlltimXXLvd3ffsIf//P8AcuYFMvpcnvDcrr9DcvHD1/G4e1PvozT+MBw1pU4yXDW/TnJcNZlO8lw1s08yXDWNT7IcNqT4JIMZy0ISYaztokkw1mrR5LhwHA1Qz1lPUM9ZT1DPWU9Qz1lPUM9ZTXDac/ySzLUU9Yz1FPWM9RT1jMcGK5mqKesZ6inrGeop6xnqKesZ6inrGV4m/Y0xiRDPWU9Qz1lPUM9ZT3DgeFqhnrKeoZ6ynqGesp6hnrKeoZ6ymqG056nmWSop6xnqKesZ6inrGc4MFzNUE9Zz1BPWc9QT1nPUE9Zz1BPWc1w2hNRkwz1lPUM9ZT1DB3MWrwu7OZg1hqLg1lLLNO+AOo5Fi+AKt5GcnMwa43FC6AqLA5mrbF4AVSJxZFV1Z1o3oNZn2MZsFRYbLklFq85LS+5ttwSiy23xGLLrbDMezDrcyy23BKL15yWWLzMv8QyYKmweJl/icWWW2Kx5ZZYbLklFltuhcXBrKVYcDBrjYXLLbFwuSWW4ZJbXXJtuSUWW26JxZZbYrHlllhsuRWWeQ9mfY6Fyy2xcLklFi63xDJgqbDYckssttwSiy23xDLtlvtULMx7MOtTLPMezPocC5dbYrHlVpfcaQ9mXcAyYKmw2HJLLLbcEostt8TC5ZZYuNwKy7RHkS5g4XJLLLbcEostt8QyYKmw2HJLLN6xUImFac/TXMDC5ZZYuNwKy7QHWT6/5E57NuUCFltuicWWW2IZsFRYbLklFi63xMLllli43BILl1tguU97DOICFltuicWWW2Kx5ZZYBrHwUSzcpz0lcAELl1ti4XJLLLbc8pJry62wTHuI3gIWW26JxZZbYrHlllgGLBUWLrfEwuWWWLjcEostt8Riy62wTHsE2wIWW26JxZvEKrHg7LMay4ClwsLlllhsueUl15ZbYrHlllhsuRUWZ5/VWGy5JRYut8TC5ZZYBiwVFi63xGLLLbHYckssttwSiy23wjLv2WdPxcK8Z589x8Lllli43BLLcMmtLrm23BKLLbfEYsstsdhySyy23ArLvGefPcfC5ZZYuNwSC5dbYhmwVFhsuSUWW26JxZZbYvEmsUoszHv22VMs85599hwLl1tiseVWl1xnn9VYBiwVFltuicWWW2Kx5ZZYuNwSC5dbYZn37LPnWLjcEostt8Riyy2xDFgqLLbcEos3iVViYd6zz55j4XJLLFxuhcXZZ+Ul19lnNRZbbonFlltiGbBUWGy5JRYut8TC5ZZYuNwSC5dbYXH2WY3FlltiseWWWGy5JZZBLBRiYd6zz55j4XJLLFxuicWWW15ybbkFloezz2osttwSiy23xGLLLbEMWCosXG6JhcstsXC5JRZbbonFllthcfZZjcWWW2LxJrFCLDzmPfvsOZYBS4WFyy2x2HLLS64tt8Riyy2x2HIrLM4+q7HYckssXG6JhcstsQxYKixcbonFlltiseWWWGy5JRZbboVl3rPPnoqFec8+e46Fyy2xcLklluGSW11ybbklFltuicWWW2Kx5ZZYbLkVlnnPPnuOhcstsXC5JRYut8QyYKmw2HJLLLbcEostt8TiTWKVWJj37LOnWOY9++w5Fi63xGLLrS65zj6rsQxYKiy23BKLLbfEYsstsXC5JRYut8Iy79lnz7FwuSUWW26JxZZbYhmwVFhsuSUWbxKrxMK8Z589x8Lllli43AqLs8/KS66zz2osttwSiy23xDJgqbDYckssXG6JhcstsXC5JRYut8Li7LMaiy23xGLLLbHYckssg1goxMK8Z589x8Lllli43BKLLbe85NpyKyzOPqux2HJLLLbcEostt8QyYKmwcLklFi63xMLlllhsuSUWW26B5Xhw+NknXOy5NRcvEyvcwg8u3iZWcxm4lFwY3ZqLZbe+7tp2ay7W3ZqLfbfk4hi0T7jYd2suxG7NhdmtuQxcSi7cbs3Fvltzse/WXOy7NRf7bsll3gPRnnuGeU9EW+DC79Zc+N2ay3DdLa+79t2ai3235mLfrbnYd2su9t2Sy7xHoy1w4XdrLvxuzYXfrbkMXEou9t2ai3235mLfrbl44VjpGeY9I+05l3kPSVvgwu/WXOy75XXXOWmfcBm4lFzsuzUX+27Nxb5bc+F3ay78bsll3uPSFrjwuzUX+27Nxb5bcxm4lFzsuzUXryArPcO8p6YtcOF3ay78bsnFwWn1ddfJaZ9wse/WXOy7NZeBS8nFvltz4XdrLvxuzYXfrbnwuyUXR6h9wsW+W3Ox79Zc7Ls1l8EzVJ5h3nPUFrjwuzUXfrfmYt+tr7v23ZKLw9Q+4WLfrbnYd2su9t2ay8Cl5MLv1lz43ZoLv1tzse/WXOy7JRfHqn3Cxb5bc/E+stIzzHuy2gKXgUvJhd+tudh36+uufbfmYt+tudh3Ky5H56t9wsW+W3Phd2su/G7NZeBScuF3ay723ZqLfbfmYt+tudh3Sy7znq/21DMc5z1fbYELv1tz4XdrLsN1t7zu2ndrLvbdmot9t+Zi36252HdLLvOer7bAhd+tufC7NRd+t+YycCm52HdrLvbdmot9t+bifWSlZ5j3fLXnXOY9X22BC79bc7Hvltdd56t9wmXgUnKx79Zc7Ls1F/tuzYXfrbnwuyWXec9XW+DC79Zc7Ls1F/tuzWXgUnKx79ZcvI+s9Azznq+2wIXfrbnwuyUX56vV113nq33Cxb5bc7Hv1lwGLiUX+27Nhd+tufC7NRd+t+bC75ZcnK/2CRf7bs3Fvltzse/WXAbPUHmGec9XW+DC79Zc+N2ai323vu7ad0suzlf7hIt9t+Zi36252HdrLgOXkgu/W3Phd2su/G7Nxb5bc7Hvllycr/YJF/tuzcX7yErPMO/5agtcBi4lF3635mLfra+79t2ai3235mLfLbk4X+0TLvbdmgu/W3Phd2suA5eSC79bc7Hv1lzsuzUX+27Nxb5bcTnNe77aU89wmvd8tQUu/G7Nhd+tuQzX3fK6a9+tudh3ay723ZqLfbfmYt8tucx7vtoCF3635sLv1lz43ZrLwKXkYt+tudh3ay723ZqL95GVnmHe89Wec5n3fLUFLvxuzcW+W153na/2CZeBS8nFvltzse/WXOy7NRd+t+bC75Zc5j1fbYELv1tzse/WXOy7NZeBS8nFvltz8T6y0jPMe77aAhd+t+Zi3y2vL85X+4SLfbfmYt+tudh3ay4Dl5KL9zOU92nnq33Cxb5bc+F36+uLfbfk4ny1T7jYd2su9t2ai3235jLcp6v79Lznqy1wse/WXOy7NRf7bn3dte+WXJyv9gkX+27Nxb5bc7Hv1lwGLiUXv89Qc/H7uzUXv79bc7Hv1lxm3Xdv97ef8Mf/PH/gMu35aj8a8xuX0+1vXD5++DIOb3/yZZzGR4izLsdRiLNu0lGIs67dUYgDxPUQZ13ooxBn3f6jEGetClGIs/aKKMRZS0gS4rQn5EUhaiwBiBpLAKLGEoA4QFwPUWMJQNRYAhA1lgBEjSUAUWNZD3HaMw6jEDWWAESNJQBRYwlAHCCuh6ixBCBqLAGIGksAosYSgKixrIZ4nvaUyihEjSUAUWMJQNRYAhAHiOshaiwBiBpLAKLGEoCosQQgaizrIU57zmgUosYSgKixBCBqLAGIA8T1EDWWAESNJQBRYwlA1FgCEB3+Wr1s7Ozw10+4OPy15jLty6MWuHh5VPUSk7PDXz/h4uVRNRcvj6q5eHlUzcVhWPX9yL5bcpn38NcFLvbdmouXpZbXXYe/fsJl4FJyse/WXOy7NRf7bs3Fy1JrLg4HKLk4/PUTLg4HqLnYd2su9t2ay8Cl5GLfrbk4DKv0DA5//YQLv1tz4XdLLg5/ra+7Dn/9hIt9t+Zi3625DFxKLvbdmgu/W3Phd2su/G7Nhd8tuTj89RMu9t2ai3235mLfrbkMnqHyDPMe/rrAhd+tufC7NRf7bn3dte+WXKY9/HWJi3235mLfrbnYd2suA5eSC79bc+F3ay78bs3Fvltzse+WXKY9OnSJi3235uL9DKVnmPbMziUuA5eSC79bc7Hv1tdd+27Nxb5bc7HvllymPXhyiYt9t+bC79Zc+N2ay8Cl5MLv1lzsuzUX+27Nxb5bc7HvVlzGtMcWPvcMY9qTCJe48Ls1F3635jJcd8vrrn235mLfrbnYd2su9t2ai3235DLtoXdLXPjdmgu/W3Phd2suA5eSi3235mLfrbnYd2su3kdWegbnq9VcnK/2CRd+t+Zi3y2vu85X+4TLwKXkYt+tudh3ay723ZoLv1tz4XdLLvOer7bAhd+tudh3ay723ZrLwKXkYt+tuXgfWekZ5j1fbYELv1tz4XdLLs5Xq6+7zlf7hIt9t+Zi3625DFxKLvbdmgu/W3Phd2su/G7Nhd8tuThf7RMu9t2ai3235mLfrbkMnqHyDPOer7bAhd+tufC7NRf7bn3dte+WXJyv9gkX+27Nxb5bc7Hv1lwGLiUXfrfmwu/WXPjdmot9t+Zi3y25OF/tEy723ZqL95GVnmHe89UWuAxcSi78bs3Fvltfd+27NRf7bs3Fvltycb7aJ1zsuzUXfrfmwu/WXAYuJRd+t+Zi36252HdrLvbdmot9t+Qy7/lqzz3DvOerLXDhd2su/G7NZbjultdd+27Nxb5bc7Hv1lzsuzUX+27F5TLv+WoLXPjdmgu/W3Phd2suA5eSi3235mLfrbnYd2su3kdWeYbLvOerPecy7/lqC1z43ZqLfbe87jpf7RMuA5eSi3235mLfrbnYd2su/G7Nhd8tucx7vtoCF3635mLfrbnYd2suA5eSi3235uJ9ZKVnmPd8tQUu/G7Nhd8tuThfrb7uOl/tEy723ZqLfbfmMnApudh3ay78bs2F36258Ls1F3635OJ8tU+42HdrLvbdmot9t+YyeIbKM8x7vtoCF3635sLv1lzsu/V1175bcnG+2idc7Ls1F/tuzcW+W3MZuJRc+N2aC79bc+F3ay723ZqLfbfk4ny1T7jYd2su3kdWeoZ5z1db4DJwKbnwuzUX+2593bXv1lzsuzUX+27Jxflqn3Cx79Zc+N2aC79bcxm4lFz43ZqLfbfmYt+tudh3ay723ZLLvOerPfcM856vtsCF36258Ls1l+G6W1537bs1F/tuzcW+W3Ox79Zc7Lsll3nPV1vgwu/WXPjdmgu/W3MZuJRc7Ls1F/tuzcW+W3PxPrLSM8x7vtpTLtd5z1db4MLv1lzsu9V19+p8tU+4DFxKLvbdmot9t+Zi36258Ls1F3635DLv+WoLXPjdmot9t+Zi3625DFxKLvbdmov3kZWeYd7z1Ra48Ls1F3635OJ8tfq663y1T7jYd2su9t2ay8Cl5GLfrbnwuzUXfrfmwu/WXPjdkovz1T7hYt+tudh3ay723ZrL4BkqzzDv+WoLXPjdmgu/W3Ox79bXXftuycX5ap9wse/WXOy7NRf7bs1l4FJy4XdrLvxuzYXfrbnYd2su9t2Si/PVPuFi3625eB9Z6RnmPV9tgcvApeTC79Zc7Lv1dde+W3Ox79Zc7LslF+erfcLFvltz4XdrLvxuzWXgUnLhd2su9t2ai3235mLfrbnYd0su856v9twzzHu+2gIXfrfmwu/WXIbrbnndte/WXOy7NRf7bs3Fvltzse+WXOY9X22BC79bc+F3ay78bs1l4FJyse/WXOy7NRf7bs3F+8hKzzDv+WrPucx7vtoCF3635mLfLa+7zlf7hMvApeRi36252HdrLvbdmgu/W3Phdysut3nPV1vgwu/WXOy7NRf7bs1l4FJyse/WXLyPrPIMt3nPV1vgwu/WXPjdkovz1errrvPVPuFi36252HdrLgOXkot9t+bC79Zc+N2aC79bc+F3Sy7OV/uEi3235mLfrbnYd2sug2eoPMO856stcOF3ay78bs3Fvltfd+27JRfnq33Cxb5bc7Hv1lzsuzWXgUvJhd+tufC7NRd+t+Zi36252HdLLs5X+4SLfbfm4n1kpWeY93y1BS4Dl5ILv1tzse/W1137bs3Fvltzse+WXJyv9gkX+27Nhd+tufC7NZeBS8mF36252HdrLvbdmot9t+Zi3y25zHu+2nPPMO/5agtc+N2aC79bcxmuu+V1175bc7Hv1lzsuzUX+27Nxb5bcpn3fLUFLvxuzYXfrbnwuzWXgUvJxb5bc7Hv1lzsuzUX7yMrPcO856s95zLv+WoLXPjdmot9t7zuOl/tEy4Dl5KLfbfmYt+tudh3ay78bs2F3y25zHu+2gIXfrfmYt+tudh3ay4Dl5KLfbfm4n1kpWeY93y1BS78bs2F36243J2vVl53785X+4SLfbfmYt+tuQxcSi723ZoLv1tz4XdrLvxuzYXfLbk4X+0TLvbdmot9t+Zi3625DJ6h8gzznq+2wIXfrbnwuzUX+2593bXvllycr/YJF/tuzcW+W3Ox79ZcBi4lF3635sLv1lz43ZqLfbfmYt8tuThf7RMu9t2ai/eRlZ5h3vPVFrgMXEou9t36+mLfrbnYd2su9t2ai3235OJ8tU+4eD9DeZ92vtonXOy7NZfh+lJeX+y7NRf7bs3Fvltzse/WXOy7JZd5z1d7fp+e93y1BS723ZqLfbfmMlx3y+uufbfmYt+tudh3ay723ZqLfbfkMu/5agtc/D5DzcXv79Zc/P5uzWXgUnKZdd+93d9+wh//8/yRy6z77ulye+Nyuv2Ny8cPX8bh7U++jNP4CHHW5TgKcdZNOgpx1rU7CXHaM+GiEGdd6KMQZ93+oxBnrQpRiAPE9RBnLSFRiBpLAKLGEoCosQQgaizrIU57ql8UosYSgKixBCBqLAGIA8T1EDWWAESNJQBRYwlA1FgCEDWW9RCnPZcxClFjCUDUWAIQNZYAxAHieogaSwCixhKAqLEEIGosAYgay2qIj2lP1oxC1FgCEDWWAESNJQBxgLgeosYSgKixBCBqLAGIGksAosayHuK0Z6NGIWosAYgaSwCixhKAOEBcD9Hhr9XLxh4Of/2Ei8Nfay7TvjxqgYuXR1UvMXk4/PUTLl4eVXPx8qiai5dH1VyG+1F1P5r38NcFLvbdmot9t+biZan1dde+W3Jx+OsnXOy7NRf7bs3FvltzGbiUXBwOUHNxOEDNxeEANRf7bs3FvltycfjrJ1zsuzUXh2GVnsHhr59wGbiUXPjdmot9t77u2ndrLvbdmot9t+Qy7+GvC1zsuzUXfrfmwu/WXAYuJRd+t+Zi36252HdrLvbdmot9t+Qy7+Gvzz3DvIe/LnDhd2su/G7NZbjultdd+27Nxb5bc7Hv1lzsuzUX+27JZdqDVJe48Ls1F3635sLv1lwGLiUX+27Nxb5bc7Hv1ly8n6H0DNOe2bnAZdpjOJe48Ls1F/tued2d9vzLJS4Dl5KLfbfmYt+tudh3ay78bs2F3y25THuI4xIXfrfmYt+tudh3ay4Dl5KLfbfm4n1kpWeY9iTCJS78bs2F3y24nA7THgH49Lr7g4t9t+Zi36252HdrLgOXkot9t+bC79Zc+N2aC79bc+F3Sy7THiC3xMW+W3Ox79Zc7Ls1l8EzVJ7B+WqfcOF3ay78bs3Fvltfd+27JRfnq33Cxb5bc7Hv1lzsuzWXgUvJhd+tufC7NRd+t+Zi36252HdLLs5X+4SLfbfm4n1kpWeY93y1BS4Dl5ILv1tzse/W1137bs3Fvltzse+WXJyv9gkX+27Nhd+tufC7NZeBS8mF36252HdrLvbdmot9t+Zi3y25zHu+2nPPMO/5agtc+N2aC79bcxmuu+V1175bc7Hv1lzsuzUX+27Nxb5bcpn3fLUFLvxuzYXfrbnwuzWXgUvJxb5bc7Hv1lzsuzUX7yMrPcO856s95zLv+WoLXPjdmot9t7zuOl/tEy4Dl5KLfbfmYt+tudh3ay78bs2F3y25zHu+2gIXfrfmYt+tudh3ay4Dl5KLfbfm4n1kpWeY93y1BS78bs2F3y25OF+tvu46X+0TLvbdmot9t+YycCm52HdrLvxuzYXfrbnwuzUXfrficnS+2idc7Ls1F/tuzcW+W3MZPEPhGY7znq+2wIXfrbnwuzUX+2593bXvllycr/YJF/tuzcW+W3Ox79ZcBi4lF3635sLv1lz43ZqLfbfmYt8tuThf7RMu9t2ai/eRlZ5h3vPVFrgMXEou/G7Nxb5bX3ftuzUX+27Nxb5bcnG+2idc7Ls1F3635sLv1lwGLiUXfrfmYt+tudh3ay723ZqLfbfkMu/5as89w7znqy1w4XdrLvxuzWW47pbXXftuzcW+W3Ox79Zc7Ls1F/tuyWXe89UWuPC7NRd+t+bC79ZcBi4lF/tuzcW+W3Ox79ZcvI+s9Azznq/2nMu856stcOF3ay723fK663y1T7gMXEou9t2ai3235mLfrbnwuzUXfrfkMu/5agtc+N2ai3235mLfrbkMXEou9t2ai/eRlZ5h3vPVFrjwuzUXfrfk4ny1+rrrfLVPuNh3ay723ZrLwKXkYt+tufC7NRd+t+bC79Zc+N2Si/PVPuFi36252HdrLvbdmsvgGSrPMO/5agtc+N2aC79bc7Hv1tdd+27F5eR8tU+42HdrLvbdmot9t+YycCm58Ls1F3635sLv1lzsuzUX+27Jxflqn3Cx79ZcvI+s8gynec9XW+AycCm58Ls1F/tufd2179Zc7Ls1F/tuycX5ap9wse/WXPjdmgu/W3MZuJRc+N2ai3235mLfrbnYd2su9t2Sy7znqz33DPOer7bAhd+tufC7NZfhulted+27NRf7bs3Fvltzse/WXOy7JZd5z1db4MLv1lz43ZoLv1tzGbiUXOy7NRf7bs3Fvltz8T6y0jPMe77acy7znq+2wIXfrbnYd8vrrvPVPuEycCm52HdrLvbdmot9t+bC79Zc+N2Sy7znqy1w4XdrLvbdmot9t+YycCm52HdrLt5HVnqGec9XW+DC79Zc+N2Si/PV6uuu89U+4WLfrbnYd2suA5eSi3235sLv1lz43ZoLv1tz4XdLLs5X+4SLfbfmYt+tudh3ay6DZ6g8w7znqy1w4XdrLvxuzcW+W1937bslF+erfcLFvltzse/WXOy7NZeBS8mF36258Ls1F3635mLfrbnYdysuZ+erfcLFvltz8T6yyjOc5z1fbYHLwKXkwu/WXOy79XXXvltzse/WXOy7JRfnq33Cxb5bc+F3ay78bs1l4FJy4XdrLvbdmot9t+Zi36252HdLLvOer/bcM8x7vtoCF3635sLv1lyG62553bXv1lzsuzUX+27Nxb5bc7HvllzmPV9tgQu/W3Phd2su/G7NZeBScrHv1lzsuzUX+27NxfvISs8w7/lqz7nMe77aAhd+t+Zi3y2vu85X+4TLwKXkYt+tudh3ay723ZoLv1tz4XdLLvOer7bAhd+tudh3ay723ZrLwKXkYt+tuXgfWekZ5j1fbYELv1tz4XdLLs5Xq6+7zlf7hIt9t+Zi3625DFxKLvbdmgu/W3Phd2su/G7Nhd8tuThf7RMu9t2ai3235mLfrbkMnqHyDPOer7bAhd+tufC7NRf7bn3dte+WXJyv9gkX+27Nxb5bc7Hv1lwGLiUXfrfmwu/WXPjdmot9t+Zi3y25OF/tEy723ZqL95GVnmHe89UWuAxcSi78bs3Fvltfd+27NRf7bs3FvltxGc5X+4SLfbfmwu/WXPjdmsvApeTC79Zc7Ls1F/tuzcW+W3Ox75Zc5j1f7alnGPOer7bAhd+tufC7NZfhulted+27NRf7bs3Fvltzse/WXOy7JZd5z1db4MLv1lz43ZoLv1tzGbiUXOy7NRf7bs3Fvltz8T6y0jPMe77acy7znq+2wMW+W15fnK/2CRf7bs1l4FJyse/WXOy7NRfvZ6jv0/bdmot9t+Qy7/lqz68v856vtsDFvltzse/WXAYuJRf7bs3F+8jq+7R9t+Zi36252HdLLs5Xq6+7zlf7hIt9t+Zi3625DFxKLvbdmgu/W3Px+ww1F7+/W3Px+7slF+erfcJl1n33dn/7CX/8z/NHLr333eP18MblxzOdhU/fD29f+n4+/PLZisv59N4bzz9+2r99+k8wvRfefw7M+fb24fP5cV/E+P6tz6c/BvBtvB5/URwofoHiefzy6fNHir2X6X+O4jje3r70jydRC5/+8Qzv9Hap+/H/flIc1R99u77/0ffj+dcP/4m8957+LZHfH+9T/qiQ964Au0Teu13sEnnv4rJH5M3P4Nsl8t51a5fIZ21yL0Q+a0d8IfIB+dbId9Q+H+9F+3G9LkC8nN++8+X+659bMbxcTu+f/cnieLv9L1TP5kc0fj/eS/O9o975LXjvqHR+C947apzfgXfzIzD3x3tHXfNb8N5R0fwWvHfUMr8F74H3prz1y0Xe1+PbV77+Wv5L3vfb2xe+3y8/Pztuf+FWL6O4H+8sHvfxN9yFlzld3qr/ON3+9ts4xRceh7ff87mM0/j1w38GqbfuJEiFeCdBatr7CLL5qb6C/HKQ3MBOgiQddhIkm7GTIIcg9xEk/7KTIJmdnQTJ7OwkSGZnJ0EyO7sI8tL8/HpBfjlIZmcnQTI7OwmS2dlJkEOQ+wiS2dlJkMzOToJkdnYSJLOzkyCZnX0EeWR2dhIks7OTIJmdnQTJ7OwkyCHIfQTJ7OwkSGZnJ0EyOzsJktnZSZDMzj6CPDE7OwmS2dlJkMzOToJkdnYS5BDkPoJkdnYSJLOzkyCZnZ0EyezsJEhmZx9BnpmdnQTJ7OwkSGZnJ0EyOzsJcghyH0EyOzsJktl5XZDX93O7x/V0+JgNWdM3G/6lbzaUSttsBkvywmwul/dsbkU2xEffbLiMvtnQE32zGbJpmw2J0HdP4wX6ZsML9M2GF+ibDS/Qdhe48AJ9s+EF+mbDC/TNhhfom82QTdtseIG+2fACfbPhBfpmwwv0zYYXaJvNlRfomw0v0DcbXqBvNrxA22cE1yGbttnwAn2z4QX6ZsML9N0FeIG+2fACbbO58QJ9s+EF+mbDC/TNhhfom82QTdtseIG+2fACfbPhBfpmwwv0zYYXaJvNnRfomw0v0PYZwZ0X6JsNL9A3myGbttnwAn13AV6gbza8QN9seIG+2fACbbN58AJ9s+EF+mbDC/TNhhfom82QTdtseIG+2fACfbPhBfpmwwv0zYYX6PqM4HrgBfpmwwv0zYYX6JsNL9B1F/iRnGzaZsML9M2GF+ibDS/QNxteoG82vEDbbI68QN9seIG+2fACfbPhBfpmM2TTNhteoG82vEDfbHiBts8IjrxA32x4gbbZnHiBvtnwAm13gRMv0DcbXqBvNkM2bbPhBfpmwwv0zYYX6JsNL9A3G16gbTZnXqBvNrxA32x4gb7Z8AJ9sxmyaZsNL9D2GcGZF+ibDS/QNxteoG82vEDbXWDwAn2z4QX6ZsML9M2GF+ibzZBN22x4gb7Z8AJ9s+EF+mbDC/TNhhdom82FF+ibDS/QNxteoG82vEDbZwSXIZu22fACfbPhBfpmwwv03QV4gb7Z8AJts7nyAn2z4QX6ZsML9M2GF+ibzZBN22x4gb7Z8AJ9s+EF+mbDC/TNhhdom82NF+ibDS/Q9hnBjRfomw0v0DebIZu22fACfXcBXqBvNrxA32x4gb7Z8AJts7nzAn2z4QX6ZsML9M2GF+ibzZBN22x4gb7Z8AJ9s+EF+mbDC/TNhhdo+4zgwQv0zYYX6JsNL9A3G16g7S7wGLJpmw0v0DcbXqBvNrxA32x4gb7Z8AJds7kdeIG+2fACfbPhBfpmwwv0zWbIpm02vEDfbHiBvtnwAl2fEdwOvEDfbHiBttkceYG+2fACbXeBIy/QNxteoG82QzZts+EF+mbDC/TNhhfomw0v0DcbXqBtNideoG82vEDfbHiBvtnwAn2zGbJpmw0v0PYZwYkX6JsNL9A3G16gbza8QNtd4MwL9M2GF+ibDS/QNxteoG82QzZts+EF+mbDC/TNhhfomw0v0DcbXqBtNoMX6JsNL9A3G16gbza8QNtnBGPIpm02vEDfbHiBvtnwAn13AV6gbza8QNtsLrxA32x4gb7Z8AJ9s+EF+mYzZNM2G16gbza8QN9seIG+2fACfbPhBdpmc+UF+mbDC7R9RnDlBfpmwwv0zWbIpm02vEDfXYAX6JsNL9A3G16gbza8QNtsbrxA32x4gb7Z8AJ9s+EF+mYzZNM2G16gbza8QN9seIG+2fACfbPhBdo+I7jzAn2z4QX6ZsML9M2GF2i7C9yHbNpmwwv0zYYX6JsNL9A3G16gbza8QNtsHrxA32x4gb7Z8AJ9s+EF+mYzZNM2G16gbza8QN9seIG2zwgevEDfbHiBrtncD7xA32x4ga67wP3AC/TNhhfom82QTdtseIG+2fACfbPhBfpmwwv0zYYXaJvNkRfomw0v0DcbXqBvNrxA32yGbNpmwwu0fUZw5AX6ZsML9M2GF+ibDS/Qdhc48QJ9s+EF+mbDC/TNhhfom82QTdtseIG+2fACfbPhBfpmwwv0zYYXaJvNmRfomw0v0DcbXqBvNrxA22cE5yGbttnwAn2z4QX6ZsML9N0FeIG+2fACbbMZvEDfbHiBvtnwAn2z4QX6ZjNk0zYbXqBvNrxA32x4gb7Z8AJ9s+EF2mZz4QX6ZsMLtH1GcOEF+mbDC/TNZsimbTa8QN9dgBfomw0v0DcbXqBvNrxA22yuvEDfbHiBvtnwAn2z4QX6ZjNk0zYbXqBvNrxA32x4gb7Z8AJ9s+EF2j4juPECfbPhBfpmwwv0zYYXaLsL3IZs2mbDC/TNhhfomw0v0DcbXqBvNrxA22zuvEDfbHiBvtnwAn2z4QX6ZjNk0zYbXqBvNrxA32x4gbbPCO68QN9seIG22Tx4gb7Z8AJtd4EHL9A3G16gbzZDNm2z4QX6ZsML9M2GF+ibDS/QNxteoGs2jwMv0DcbXqBvNrxA32x4gb7ZDNm0zYYX6PqM4HHgBfpmwwv0zYYX6JsNL9B2FzjyAn2z4QX6ZsML9M2GF+ibzZBN22x4gb7Z8AJ9s+EF+mbDC/TNhhdom82JF+ibDS/QNxteoG82vEDbZwSnIZu22fACfbPhBfpmwwv03QV4gb7Z8AJtsznzAn2z4QX6ZsML9M2GF+ibzZBN22x4gb7Z8AJ9s+EF+mbDC/TNhhdom83gBfpmwwu0fUYweIG+2fACfbMZsmmbDS/QdxfgBfpmwwv0zYYX6JsNL9A2mwsv0DcbXqBvNrxA32x4gb7ZDNm0zYYX6JsNL9A3G16gbza8QN9seIG2zwiuvEDfbHiBvtnwAn2z4QXa7gLXIZu22fACfbPhBfpmwwv0zYYX6JsNL9A2mxsv0DcbXqBvNrxA32x4gb7ZDNm0zYYX6JsNL9A3G16g7TOCGy/QNxteoG02d16gbza8QNtd4M4L9M2GF+ibzZBN22x4gb7Z8AJ9s+EF+mbDC/TNhhdom82DF+ibDS/QNxteoG82vEDfbIZs2mbDC7R9RvDgBfpmwwv0zYYX6JsNL9B0FzgfDrxA32x4gb7Z8AJ9s+EF+mYzZNM2G16gbza8QN9seIG+2fACfbPhBdpmc+QF+mbDC/TNhhfomw0v0PQZwY9shmzaZsML9M2GF+ibDS/QdxfgBfpmwwu0zebEC/TNhhfomw0v0DcbXqBvNkM2bbPhBfpmwwv0zYYX6JsNL9A3G16gbTZnXqBvNrxA22cEZ16gbza8QN9shmzaZsML9N0FeIG+2fACfbPhBfpmwwu0zWbwAn2z4QX6ZsML9M2GF+ibzZBN22x4gb7Z8AJ9s+EF+mbDC/TNhhdo+4zgwgv0zYYX6JsNL9D2fnPhBfpmM2TTNhteoG82vEDfbHiBvtnwAn13aF6gbTZXXqBvNrxA2/vNlRfomw0v0DebIZu22fACfbPhBfpmwwv03aF5gb7Z8AJts7nxAn2z4QXa7gI3XqBvNrxA32yGbNpmwwv0zYYX6JsNL9A3G16gbza8QNts7rxA32x4gb7Z8AKvy+Z2f/vCP/7n+WM2vEA0m+M4v/23cPzhMhfSuV4Ob1/jejkff02nwHy/v6nR8/3x84ucKhbny/v3OF/G8dcP/5n7kPuUufMZc+bOlcyZOw+zz9yvl/dQrrfxMXeOZ87c+aOd5v44v4dyuC98+PT+SxTn0/H6/MOn6/U9wet94cM/+v1bm3x8LJMPgszwvWz4GEDD93vDdzs83hK8nU+rho/iNHwvGz4O1/D93vA9Lqe3BB+P48KHT++ZnE7XsWpSh0k1qd9iUnlyk/pPTur9Pe7zYV3vYfZN6veYVM8iTOr5RxTvk3pZ+JNPl8d410PHj0+3Hp5ymKjfm6igcPSoxfC9aPiOB49aDN/Lhs+jFsP3e8MXs93Hg0cthu9lw+dRi+H7veG7/5yN+7j9zxX2eBgmykRFJ8qjCxOVnSiPGExUdqI8CjBRvzdRv/XQ6vB4//DxeP44fp4bGL8Xjp8nB8bvHxy/2K9BHY8eM5jU7zGpnkmY1O8xqR5gmNR/clJTv7D3Y3U1qSb1W0zqMKkm9Xx8T/B8WdnRj56imKjsRHmKYqJ+b6KCpcMDF8P3suHzuMXwvWz4PGwxfL85fLFeevL8xPC9bPg8Etnn8N2uj/dQ7mNJ3/3Ovwx//u9tjyePLkzUi17wdzx5GmH4XjZ8w/AZvlcNn2cRhu9Fb5c8njy2MHwvGz6PLQzf7w3fwr88OnkWYaKyE+UBg4mKTtTZUwMTlZ0ojwJM1D/4ktiFX307e25g/F44fp4cGL/vcOzA8TxMqkn9FpPqmYRJ/R6T6gGGSf0OB2Qcz552mNTvMameopjUV71+/uyBi+F71fANz2YM36tePz88xjF8Lxs+D3EM37d4w9rwvMekfo9JHSbVpH6HN6wNz3tM6veYVM97TGr0zW3DcxkTlZ0oz09M1KveiDU8PzF8rxq+i+cnhu9lw+f5ieF71evYLp6fGL6XDZ9HItnhu78/Vz3e/8jjl+H7E/gAfFvgBPXGwHnWjYHTkP8c8OO9AM7SbQycmdoW+JWN2Rg4A7ExcK172y3lqmluDHwAvi1wTXNj4JrmxsA1zY2Ba5obA9c0twV+0zQ3Bq5pbgxc09wYuKa52QP1P4EPwLcFrmluDFzT3Bi4prkxcE1zEfjt8varVH/bO0rg1/H+a2XXX37t6j7+wq1nbon7rmVuilvH3BS3hrkpbv1yU9wD7i1x65ab4tYsN8WtV26KW6vcFLdWuSXuh1a5KW6tclPcWuWmuLXKTXEPuLfErVVuilur3BS3Vrkpbq1yU9xa5Ya4TwetclPcWuWmuLXKTXFrlZviHnBviVur3BS3Vrkpbq1yU9xa5aa4tcotcR+1yk1xa5Wb4tYqN8WtVW6Ke8C9JW6tclPcWuWmuLXKTXFrlZvi1iq3xH3SKjfFrVVuilur3BS3Vrkp7gH3lri1yk1xa5Wb4tYqN8WtVW6KW6vcEvdZq9wUt1a5KW6tclPcWuWmuAfcW+LWKjfFrVVuilur3BS3VrmI+/F+XPjjcljAfTxcr2/f+PALjXP54/081Pt4Ptyff/h8PJzeMP/7ueY/P/xnkgrrTpIcuvBeklSz95KkBr+XJMmBvSQ5JLmTJCmNvSTJluwlSSJmL0lyPHtJkuPZSZIXjmcvSXI8e0mS49lLkhzPXpIcktxJkhzPXpLkePaSJMezlyQ5nr0kyfHsJMkrx7OXJDmevSTJ8ewlSY5nL0kOSe4kSY5nL0lyPHtJkuPZS5Icz16S5Hh2kuSN49lLkhzPXpLkeL5Lkuf3r3E+//HzP/vw9Xp//PXh6+10+Bg7ITRl7EPsM8ZONU0ZOy81Zewk1pSxM15Txk6PzRj7nUubMnbibcrYWbopY2fppox9iH3G2Fm6KWNn6aaMnaWbMnaWbsrYWboZY3+wdFPGztJNGTtLN2XsLN2UsQ+xzxg7Szdl7CzdlLGzdFPGztJNGTtLN2Hs5wNLN2XsLN2UsbN0U8bO0k0Z+xD7jLGzdN8l9nEbb5gvp/PzD9/GuP314dv4+4z8GTtLN2XsLN2UsbN0U8bO0s0Y+5GlmzJ2lm7K2Fm6KWNn6aaMfYh9xthZuiljZ+mmjJ2lmzJ2lm7K2Fm6GWM/sXRTxs7STRk7Szdl7CzdlLEPsc8YO0s3Zews3ZSxs3RTxs7STRk7Szdj7GeWbsrYWbopY2fppoydpZsy9iH2GWNn6aaMnaX7JrGPy+Xtw+N6LJIk3vaSJJe2lyTpsZ0kORivvSRJYu0lSV5qL0lSTXtJckhyJ0kSQntJkuPZS5Icz16S5Hj2kiTHs5MkLxzPXpLkePaSJMezlyQ5nr0kOSS5kyQ5nr0kyfHsJUmOZy9Jcjx7SZLj2UmSV45nL0lyPHtJkuPZS5Icz16SHJLcSZIcz16S5Hj2kiTHs5ckOZ69JMnx7CTJG8ezlyQ5nr0kyfHsJUmOZy9JDknuJEmOZy9Jcjx7SZLj+S5JXm/vSd7OCx++X89vb9+6X6/Hj7ETQlPGzh7NGPudapoydl5qythJrCljZ7ymjH2IfcbYubQpYyfepoydpZsydpZuythZuhljf7B0U8bO0k0ZO0s3Zews3ZSxD7HPGDtLN2XsLN2UsbN0U8bO0k0ZO0s3YezjwNJNGTtLN2XsLN2UsbN0U8Y+xD5j7CzdlLGzdFPGztJNGTtLN2XsLN2MsR9ZuiljZ+mmjJ2lmzJ2lm7K2IfYZ4ydpZsydpZuythZuiljZ+mmjJ2lmzH2E0s3Zews3ZSxs3RTxs7STRn7EPuMsbN0U8bO0k0ZO0s3Zews3ZSxs3Qzxn5m6aaMnaWbMnaWbsrYWbpdxv64vX/nw+HxMfYh9hljZ+mmjJ2l+y6x3y7H99jvx+cffpzut7fvfD4ufPhy/AnjeBkfZ4TSMyNLM8L/mZGlGSELzcjCjAxm0YwszQgNaUaWZoSzNCNLM0JwmpGlGRlmxIwszAh1akaWZoRnNSNLM8KzmpGlGeFZzcjSjPCsZmRhRi48qxlZmhGe1YwszQjPakaWZoRnNSNLMzLMiBlZmBGe1YwszQjPakaWZoRnNSNLM8KzmpGlGeFZzcjCjFx5VjOyNCM8qxlZmhGe1YwszQjPakaWZmSYETOyMCM8qxlZmhGe1YwszQjPakaWZoRnNSNLM8KzmpGFGbnxrGZkaUZ4VjOyNCM8qxlZmhGe1YwszcgwI2ZkYUZ4VjOyNCM8qxlZmhGe1YwszQjPakaWZoRnNSMLM3LnWc3I0ozwrGZkaUZ4VjOyNCM8qxlZmpFhRszIwozwrGZkaUZ4VjOyNCM8qxlZmhGe1YwszQjPakYWZuTBs5qRpRnhWc3I0ozwrGZkaUZ4VjOyNCPDjJiRhRnhWc3I0ozwrGZkaUZ4VjOyNCM8qxlZmhGe1Yw8n5HLgWc1I0szwrOakaUZ4VnNyNKM8KxmZGlGhhkxIwszwrOakaUZ4VnNyNKM8KxmZGlGeFYzsjQjPKsZWZiRI89qRpZmhGc1I0szwrOakaUZ4VnNyNKMDDNiRhZmhGc1I0szwrOakaUZ4VnNyNKM8KxmZGlGeFYzsjAjJ57VjCzNCM9qRpZmhGc1I0szwrOakaUZGWbEjCzMCM9qRpZmhGc1I0szwrOakaUZ4VnNyNKM8KxmZGFGzjyrGVmaEZ7VjCzNCM9qRpZmhGc1I0szMsyIGVmYEZ7VjCzNCM9qRpZmhGc1I0szwrOakaUZ4VnNyMKMDJ7VjCzNCM9qRpZmhGc1I0szwrOakaUZGWbEjCzMCM+6zxl5z+THjDw+xk6dThk7Gzpl7ATnlLFzljPGfqEhp4ydWZwydrJwytj5vyljH2KfMXaWbpexj+Pp7TuPcXv+4dPjfHnL5HH5+SefSnCH+9vXuBwej18//OdA8X8GKjpQzKKBig4UZ2mgogPFhhqo5EBdeVYDFR0oBtdARQeKGzZQ0YFinQ1UdKCGgTJQyYFiyg1UdKCYcgMVHSim3EBFB4opN1DRgWLKDVRyoG5MuYGKDhRTbqCiA8WUG6joQDHlBio6UMNAGajkQDHlBio6UEy5gYoOFFNuoKIDxZQbqOhAMeUGKjlQd6bcQEUHiik3UNGBYsoNVHSgmHIDFR2oYaAMVHKgmHIDFR0optxARQeKKTdQ0YFiyg1UdKCYcgOVHKgHU26gogPFlBuo6EAx5QYqOlBMuYGKDtQwUAYqOVBMuYGKDhRTbqCiA8WUG6joQDHlBio6UEy5gQoO1PXAlBuo6EAx5QYqOlBMuYGKDhRTbqCiAzUMlIFKDhRTbqCiA8WUG6joQDHlBio6UEy5gYoOFFNuoJIDdWTKDVR0oCY15bfH29e4n+4LAzVOl9tblKfbeQH4OLxN1GWcxkfgk5rk1wGf1LS+DvgAfFvgk5q61wGf1GS9Dvikpud1wCc1Ia8DPqkpeBnw06RN+nXANc2NgWuaGwPXNDcGPgDfFrimuTFwTXNj4JrmxsA1zY2Ba5rbAj9rmhsD1zQ3Bq5pbgxc09wY+AB8W+Ca5sbANc2NgWuaGwPXNDcGrmluC3xomhsD1zQ3Bq5pbgxc09wY+AB8W+Ca5sbANc2NgWuaGwPXNDcGrmluC/yiaW4MXNPcGLimuTFwTXNj4APwbYFrmhsD1zQ3Bq5pbgxc09wYuKa5LfCrprkM/HoYb8Cvp8NHhsrjeob64HqGKt56hgPDZYaXyzvDW8FQEVvPULdaz1BdWs9QA1rPUKlZfV++6SnrGeop6xnqKesZ6imr7ym3geFqhnrKeoZ6ynqGesp6hnrKeoZ6ymqGdz1lPUM9ZT1DPWU9Qz1lPcOB4WqGesp6hnrKeoZ6ymr3dddT1jPUU1YzfOgp6xnqKavvKQ89ZT1DPWU9w4HhaoZ6ynqGesp6hnrKeoZ6ynqGespahreDnrKeoZ6ynqGesp6hnrKe4cBwNUM9Za37uh30lPUM9ZT1DPWU9Qz1lNX3lKOesp6hnrKeoZ6ynqGesp7hwHA1Qz1lPUM9ZT1DPWU9Qz1lPUM9ZTXDk56ynqGesp6hnrKeoZ6y2n2dBoarGeop6xnqKesZ6inr7yl6ynqGespqhmc9ZT1DPWU9Qz1lPUM9ZT3DgeFqhnrKeoZ6ynqGesp6hnrKeoZ6ymqGQ09Zz1BPWe2+hp6ynqGesp7hwHA1Qz1l/T1FT1nPUE9Zz1BPWc9QT1nN8KKnrGeop6xnqKesZ6inrGc4MFzNUE9Zz1BPWc9QT1nPUE9Zz1BPWe2+nEcfYKinrGeop6xnqKesvqc4jz7AUE9Zz1BPWc9QT1nPUE9Zz1BPWc3QefQBhnrKeoZ6ynqGesp6hgPD1Qz1lPUM9ZT1DPWU1e7LefQBhnrKaobOow8w1FNW31OcRx9gqKesZzgwXM1QT1nPUE9Zz1BPWc9QT1nPUE9ZzdB59AGGesp6hnrKeoZ6ynqGA8PVDPWU1e7LefQBhnrKeoZ6ynqGesrae8rdefQBhnrKeoZ6ynqGesp6hgPD1Qz1lPUM9ZT1DPWU9Qz1lPUM9ZTVDJ1HH2Cop6xnqKesZ6inrHVfd+fRBxjqKesZ6inrGeop6+8pesp6hnrKaobOow8w1FPWM9RT1jPUU9YzHBiuZqinrGeop6xnqKesZ6inrGeop6xm6Dz6AEM9ZbX7ch59gKGesp7hwHA1Qz1l/T1FT1nPUE9Zz1BPWc9QT1nN0Hn0AYZ6ynqGesp6hnrKeoYDw9UM9ZT1DPWU9Qz1lPUM9ZT1DPWU1e7LefQBhnrKeoZ6ynqGesrqe4rz6AMM9ZT1DPWU9Qz1lPUM9ZT1DPWU1QydRx9gqKesZ6inrGeop6xnODBczVBPWc9QT1nPUE9Z7b6cRx9gqKesZug8+gBDPWX1PcV59AGGesp6hgPD1Qz1lPUM9ZT1DPWU9Qz1lPUM9ZTVDJ1HH2Cop6xnqKesZ6inrGc4MFzNUE9Z7b6cRx9gqKesZ6inrGeop6y+pziPPsBQT1nPUE9Zz1BPWc9wYLiaoZ6ynqGesp6hnrKeoZ6ynqGespbhw3n0AYZ6ynqGesp6hnrKWvf1OAwMVzPUU9Yz1FPWM9RT1t9T9JT1DPWU1QydRx9gqKesZ6inrGeop6xnODBczVBPWc9QT1nPUE9Zz1BPWc9QT1nN0Hn0AYZ6ymr35Tz6AEM9ZT3DgeFqhnrK+nuKnrKeoZ6ynqGesp6hnrKaofPoAwz1lPUM9ZT1DPWU9QwHhqsZ6inrGeop6xnqKesZ6inrGeopq92X8+gDDPWU9Qz1lPUM9ZTV9xTn0QcY6inrGeop6xnqKesZ6inrGeopqxk6jz7AUE9Zz1BPWc9QT1nPcGC4mqGesp6hnrKeoZ6y2n05jz7AUE9ZzdB59AGGesrqe4rz6AMM9ZT1DAeGqxnqKesZ6inrGeop6xnqKesZ6imrGTqPPsBQT1nPUE9Zz1BPWc9wYLiaoZ6y2n05jz7AUE9Zz1BPWc9QT1l9T3EefYChnrKeoZ6ynqGesp7hwHA1Qz1lPUM9ZT1DPWU9Qz1lPUM9ZTVD59EHGOop6xnqKesZ6imr3Zfz6AMM9ZT1DPWU9Qz1lPX3FD1lPUM9ZSXDcXAefYChnrKeoZ6ynqGesp7hwHA1Qz1lPUM9ZT1DPWU9Qz1lPUM9ZTVD59EHGOopK93XD4Z6ynqGesp6hgPD1Qz1lPX3FD1lPUM9ZT1DPWU9Qz1lNUPn0QcY6inrGeop6xnqKesZDgxXM9RT1jPUU9Yz1FPWM9RT1jPUU1a7L+fRBxjqKesZ6inrGeopq+8pzqMPMNRT1jPUU9Yz1FPWM9RT1jPUU1YzdB59gKGesp6hnrKeoZ6ynuHAcDVDPWU9Qz1lPUM9ZbX7ch59gKGespqh8+gDDPWU1fcU59EHGOop6xkODFcz1FPWM9RT1jPUU9Yz1FPWM9RTVjN0Hn2AoZ6ynqGesp6hnrKe4cBwNUM9ZbX7ch59gKGesp6hnrKeoZ6y+p7iPPoAQz1lPUM9ZT1DPWU9w4HhaoZ6ynqGesp6hnrKeoZ6ynqGespqhs6jDzDUU9Yz1FPWM9RTVrsv59EHGOop6xnqKesZ6inr7yl6ynqGespqhs6jDzDUU9Yz1FPWM9RT1jMcGK5mqKesZ6inrGeop6xnqKesZ6inrGV4dB59gKGestZ9HZ1HH2Cop6xnODBczVBPWX9P0VPWM9RT1jPUU9Yz1FNWM3QefYChnrKeoZ6ynqGesp7hwHA1Qz1lPUM9ZT1DPWU9Qz1lPUM9ZbX7ch59gKGesp6hnrKeoZ6y+p7iPPoAQz1lPUM9ZT1DPWU9Qz1lPUM9ZTVD59EHGOop6xnqKesZ6inrGQ4MVzPUU9Yz1FPWM9RTVrsv59EHGOopqxk6jz7AUE9ZfU9xHn2AoZ6ynuHAcDVDPWU9Qz1lPUM9ZT1DPWU9Qz1lNUPn0QcY6inrGeop6xnqKesZDgxXM9RTVrsv59EHGOop6xnqKesZ6imr7ynOow8w1FPWM9RT1jPUU9YzHBiuZqinrGeop6xnqKesZ6inrGeop6xm6Dz6AEM9ZT1DPWU9Qz1ltftyHn2AoZ6ynqGesv56qKesZ6inrGeop6xm6Dz6AEM9ZT1DPWX1buM8+gDDgeFqhnrK+uuhnrKeoZ6ynqGesp6hnrKaofPoAwz1lNW7jfPoAwz1lPUMB4arGeop6+8pesp6hnrKeoZ6ynqGespahifn0QcY6inrGeop6xnqKesZDgxXM9RT1jPUU5YZ3u5vf/CP/3n+yHDSnnIfb3/w/Tb+xvBPLDuqHsfD6fH26cNlLIC5nN++9eV+Xhiuy+X0/tmfNI63W0Xjdr294bgffxnEN+I7KipNiN8fb+zOj4L4no6v/ybEd1SCvgnxHVWmb0J8RwXrmxAfiG9MfEfl7ZsQ31HV+ybEd1QMvwlxnfMLxK/Hty99HacF4vfbe8m/X35+dtz+Aq5yhoE/3mk87uNvwAszdbq8CYFxuv3NTBVfeByub994nMYHjXXSZXcTpZK8myi1791EqdbvJsohyr1ESUTsJkqGYzdRUie7iZKT2U2UbM9eojyzPbuJku3ZTZRsz26iZHt2E+UQ5V6iZHt2EyXbs5so2Z7dRMn27CZKtmcvUQ62ZzdRsj27iZLt2U2UbM9uohyi3EuUbM9uomR7dhMl27ObKNme3UTJ9uwlygvbs5so2Z7dRMn27CZKtmc3UQ5R7iVKtmc3UbI9u4mS7dlNlGzPbqJke/YS5ZXt2U2UbM9uomR7dhMl27ObKIco9xIl27ObKNme3UTJ9uwmSrZnN1GyPa+M8vl526cbgdM5HU6mczo0S+d0mJOXpvP87M/bkE7jdPiNzulQFp3TYSE6p0MsdN7ZuILG6dy5gs7pcAWd0+EKGm8Fd66gczpDOo3T4Qo6p8MVdE6HK+icDlfQOR2uoHE6D66gczpcQed0uILO6XAFndMZ0mmcDlfQOR2uoPEThAdX0DkdrqBzOlxB33TOB66g71ZwPnAFndPhCjqnwxV0TmdIp3E6XEHndLiCzulwBZ3T4Qo6p8MVNE7nyBV0Tocr6JwOV9A5Ha6gczpDOn2fIBy5gs7pcAWd0+EKOqfDFXTeCriCxumcuILO6XAFndPhCjqnwxV0TmdIp3E6XEHndLiCzulwBZ3T4Qo6p8MVNE7nzBV0Tocr6JwOV9D4CcKZK+iczpBO43S4gs7pcAWdtwKuoHM6XEHndLiCxukMrqBzOlxB53S4gs7pcAWd0xnSaZwOV9A5Ha6gczpcQed0uILO6XAFjdO5cAWNnyBcuILO6XAFndPhCjqnM6TTeCvgCjqnwxV0Tocr6JwOV9A5Ha6gcTpXrqBzOlxB53S4gs7pcAWd0xnSaZwOV9A5Ha6gczpcQed0uILGTxCuXEHjdG5cQed0uILO6XAFjbeCG1fQOZ0hncbpcAWd0+EKOqfDFXROhyvonA5X0DidO1fQOR2uoHM6XEHndLiCzukM6TROhyvonA5X0PgJwp0r6JwOV9A5Ha6gcToPrqDxVvDgCjqnwxV0Tocr6JzOkE7jdLiCzulwBZ3T4Qo6p8MVdE6HK+ibzjhwBZ3T4Qo6p8MVdE6HK+iczpBO2ycI48AVdE6HK+icDlfQOR2uoPNWwBU0TufIFXROhyvonA5X0DkdrqBzOkM6jdPhCjqnwxV0Tocr6JwOV9A5Ha6gcTonrqBzOlxB53S4gsZPEE5cQed0hnQap8MVdE6HK+i8FXAFndPhCjqnwxU0TufMFXROhyvonA5X0DkdrqBzOkM6jdPhCjqnwxV0Tocr6JwOV9A5Ha6gcTqDK2j8BGFwBZ3T4Qo6p8MVdE5nSKfxVsAVdE6HK+icDlfQOR2uoHM6XEHjdC5cQed0uILO6XAFndPhCjqnM6TTOB2uoHM6XEHndLiCzulwBY2fIFy4gsbpXLmCzulwBZ3T4QoabwVXrqBzOkM6jdPhCjqnwxV0Tocr6JwOV9A5Ha6gcTo3rqBzOlxB53S4gs7pcAWd0xnSaZwOV9A5Ha6g8ROEG1fQOR2uoHM6XEHjdO5cQeOt4M4VdE6HK+icDlfQOZ0hncbpcAWd0+EKOqfDFXROhyvonA5X0DidB1fQOR2uoHM6XEHndLiCzukM6fR9gvDgCjqnwxV0Tocr6JwOV9B5K+AK+qZzOXAFndPhCjqnwxV0Tocr6JzOkE7jdLiCzulwBZ3T4Qo6p8MVdE6HK2iczpEr6JwOV9A5Ha6g7xOEy5Er6JzOkE7jdLiCzulwBZ23Aq6gczpcQed0uILG6Zy4gs7pcAWd0+EKOqfDFXROZ0incTpcQed0uILO6XAFndPhCjqnwxU0TufMFTR+gnDmCjqnwxV0Tocr6JzOkE7jrYAr6JwOV9A5Ha6gczpcQed0uILG6QyuoHM6XEHndLiCzulwBZ3TGdJpnA5X0DkdrqBzOlxB53S4gsZPEAZX0DidC1fQOR2uoHM6XEHjreDCFXROZ0incTpcQed0uILO6XAFndPhCjqnwxU0TufKFXROhyvonA5X0DkdrqBzOkM6jdPhCjqnwxU0foJw5Qo6p8MVdE6HK2iczo0raLwV3LiCzulwBZ3T4Qo6pzOk0zgdrqBzOlxB53S4gs7pcAWd0+EKGqdz5wo6p8MVdE6HK+icDlfQOZ0hnb5PEO5cQed0uILO6XAFndPhCjpvBVxB43QeXEHndLiCzulwBZ3T4Qo6pzOk0zgdrqBzOlxB53S4gs7pcAWd0+EK+qZzPXAFndPhCjqnwxX0fYJwPXAFndMZ0mmcDlfQOR2uoPNWwBV0Tocr6JwOV9A4nSNX0DkdrqBzOlxB53S4gs7pDOk0Tocr6JwOV9A5Ha6gczpcQed0uILG6Zy4gsZPEE5cQed0uILO6XAFndMZ0mm8FXAFndPhCjqnwxV0Tocr6JwOV9A4nTNX0DkdrqBzOlxB53S4gs7pDOk0Tocr6JwOV9A5Ha6gczpcQeMnCGeuoHE6gyvonA5X0DkdrqDxVjC4gs7pDOk0Tocr6JwOV9A5Ha6gczpcQed0uILG6Vy4gs7pcAWd0+EKOqfDFXROZ0incTpcQed0uILGTxAuXEHndLiCzulwBY3TuXIFjbeCK1fQOR2uoHM6XEHndIZ0GqfDFXROhyvonA5X0DkdrqBzOlxB43RuXEHndLiCzulwBZ3T4Qo6pzOk0/cJwo0r6JwOV9A5Ha6gczpcQeetgCtonM6dK+icDlfQOR2uoHM6XEHndIZ0GqfDFXROhyvonA5X0DkdrqBzOlxB43QeXEHndLiCzulwBY2fIDy4gs7pDOk0Tocr6JwOV9B5K+AKOqfDFXROhyvom87twBV0Tocr6JwOV9A5Ha6gczpDOo3T4Qo6p8MVdE6HK+icDlfQOR2uoHE6R66g7xOE25Er6JwOV9A5Ha6gczpDOo23Aq6gczpcQed0uILO6XAFndPhChqnc+IKOqfDFXROhyvonA5X0DmdIZ3G6XAFndPhCjqnwxV0TocraPwE4cQVNE7nzBV0Tocr6JwOV9B4KzhzBZ3TGdJpnA5X0DkdrqBzOlxB53S4gs7pcAWN0xlcQed0uILO6XAFndPhCjqnM6TTOB2uoHM6XEHjJwiDK/i3xulwBZ3T4Qoap3PhCv6t71Zw4Qo6p8MVdE6HK+iczpBO43S4gs7pcAWd0+EKOqfDFXROhytonM6VK+icDlfQOR2uoHM6XEHndIZ0+j5BuHIFndPhCjqnwxV0Tocr6LwVcAWN07lxBZ3T4Qo6p8MVdE6HK+iczpBO43S4gs7pcAWd0+EKOqfDFXROhytonM6dK+icDlfQOR2uoPEThDtX0DmdIZ3G6XAFne87XEHndLiCzulwBZ3T4Qoap/PgCjqnwxU03qgfXEHndLiCzukM6TS+73AFndPhCjqnwxV0Tocr6JwOV9A3nfuBK+i7Ud8PXEHndLiCzulwBZ3TGdJpvBVwBZ3T4Qo6p8MVdE6HK+icDlfQOJ0jV9A5Ha6gczpcQed0uILO6QzpNE6HK3hlOrf7G+c//inVx3S4gnA6x3F+++/h+MNyLuRzvRzevsb1cj7+mk8B+n5/k6bn++PnFzlVNM6X9+9xvozjrx/+M3keYtbkOY5Zk+dPJk3+xM3sNfnr5T2W6218TJ73mTV5Tmm3yT/O77Ec7gsfPr3/qsX5dLw+//Dpen3P8Hpf+PCPvv/WLR8fq+WJNDN+Lxy/YfyM32+O3+3wxvl0O59WjR/tafxeOH68rvH73fF7XE5vGT4ex4UPn8b7KJ2uY9WsMtFm9bvMKnduVv/ZWb2/B34+rGtAbL9Z/SazevZ8wqz+MaDj8D6rl4U/+XR5jHdZdPz4zOvsyYeZ+t2ZygnIs8cvxu+F4+fxi/F74fgN42f8fnP8cv777PGL8Xvh+Hn8Yvx+d/zuP6fjPm4f66zHJGYqPVMeZ5ip9Ex57GCmwjM1PB4wU787U7/1KOvweP/w8Xj+OICeJRjAlw6gpwkG8B8dwNwvSQ2PHszqd5nVYVbN6jeZVQ81zOo/O6uxX+gbnoCY1e8yq56smNUfnzgf3zM8X9b2dU9WzFR6pjxZMVO/O1O5+nHxEMb4vXD8PIIxfi8cPw9gjN9vj1+so148UzF+Lxy/Yfx2On636+M9lvtY0nm/82/JF/597sXjDDP1uzOV+xdqF08ojN8Lx89DB+P3wvHzfML4/e745f6B5MWjDOP3uvG7epRh/H53/Bb+jdLV8wkzlZ4pDx3MVHqmPEkwU+mZGmbKTP2Tr5pd+NW4q2cJBvClA+hpggH8Rwcw96tMV48ezOp3mVXPKczqd5lVDzXM6j87q7Ff6Lt5AmJWv8userJiVv/1slfZ3zyEMX4vHD/Pa4zf745f7ldlbsP4Gb/XjZ8HO8bvd8fvRf7n5hmQWf0us+oZkFn9Z2c15388AzKr32VWPQMyq//Kvvft7lmNmUrPlGcqZupfL3ub1t0zFeP3wvHzTMX4vXD8hvEzfi97mdvdMxXj98Lx85gkPX739+etx/sfifwyfn8iZ/s3R05ab46ce90a+YOa/CeRH+8FcuZuc+Rs1ebIGZrNkQ/It0auiW++sWifmyPXPjdHrn1ujlz73Bj546B9bo5c+9wcufa5OXLtc3PkA/KtkWufmyPXPjd89P4ncu1zc+Ta5+bItc+tkR+1z82Ra59fQH67vP361d92kBL5dbz/Ktr1l1/Vuo+/gOueGwPXPDcGPgDfFrjWuTFwnXNj4BrnxsD1zY2Ba5vbAj/pmhsD1zQ3Bq5pbgxc09wY+AB8W+Ca5sbANc2NgWuaGwPXNDcGrmluC/ysaW4MXNPcGLimuTFwTXNj4APwbYFrmhsD1zQ3Bq5pbgxc09wYuKa5LfChaW4MXNPcGLim+QXgj/e3YT4uhwXgx8P1+v4tfuFxLr/yz3dWHs+H+/MPn3/8gG+g//21nT8//GeWSux+shyy3E2Wqvd+stTq95MlYbCfLLmI/WRJc+wmywuDsp8syZn9ZMn77CdL3mc/WQ5Z7iZL3mc/WfI++8mS99lPlrzPfrLkfXaT5ZX32U+WvM9+suR99pMl77OfLIcsd5Ml77OfLHmf/WTJ++wnS95nP1nyPrvJ8sb77CdL3mc/WfI++8mS99lPlkOWu8mS99lPlrzP98ny/P41zuc/CDz78PV6f4NxvZ0OH4MniSYNnlGaNHj6ac7g71zVpMETW5MGz4JNGjxlNmnwQ/BzBk/GTRo8czdp8MzdpMEzd5MGz9zNGfyDuZs0eOZu0uCZu0mDZ+4mDX4Ifs7gmbtJg2fuJg2euZs0eOZu0uCZuxmDvxwOzN2kwTN3kwbP3E0aPHM3afBD8HMGz9xNGjxzN2nwzN2kwTN3kwbP3H2f4MdtvIG+nM7PP3wb4/bXh2/j71Py78EfmbtJg2fuJg2euZs0eOZu0uCH4OcMnrmbNHjmbtLgmbtJg2fuJg2euZsz+BNzN2nwzN2kwTN3kwbP3E0a/BD8nMEzd5MGz9xNGjxzN2nwzN2kwTN3cwZ/Zu4mDZ65mzR45m7S4Jm7SYMfgp8zeOZu0uCZu0mDZ+4mDZ65mzR45m7O4Adz922CH5fL24fH9VhkScbtJ0t+bT9ZUmb7yXLIcjdZElv7yZKr2k+W9NN+smSU9pMlSbSbLC+8z36y5H32kyXvs58seZ/9ZDlkuZsseZ/9ZMn77CdL3mc/WfI++8mS99lNllfeZz9Z8j77yZL32U+WvM9+shyy3E2WvM9+suR99pMl77OfLHmf/WTJ++wmyxvvs58seZ/9ZMn77CdL3mc/WQ5Z7iZL3mc/WfI++8mS99lPlrzPfrLkfXaT5Z332U+WvM/3yfJ6e8/ydl748P16fnuj1/16PX4MniSaNHhGadLgh+DnDJ6rmjR4YmvS4FmwSYOnzCYNnl+bM/gHGTdp8MzdpMEzd5MGz9xNGvwQ/JzBM3eTBs/cTRo8czdp8MzdpMEzd1MGfzwwd5MGz9xNGjxzN2nwzN2kwQ/Bzxk8czdp8MzdpMEzd5MGz9xNGjxzN2fwR+Zu0uCZu0mDZ+4mDZ65mzT4Ifg5g2fuJg2euZs0eOZu0uCZu0mDZ+7mDP7E3E0aPHM3afDM3aTBM3eTBj8EP2fwzN2kwTN3kwbP3E0aPHM3afDM3ZzBn5m7SYNn7iYNnrmbNHjmbtLgh+DnDJ65mzR45m7S4Jm7nQb/uL1/58Ph8TF45m7S4Jm7OYMfzN33Cf52Ob4Hfz8+//DjdL+9fefzceHDf1z532AcfyH3PiU0nylZnhJO0JQsTwmBaEqWp2SYElOyOCXUpClZnhIe05QsTwnpaUqWp4QhNSXLU0KnmpLFKblwr6ZkeUq4V1OyPCXcqylZnhLu1ZQsT8kwJaZkcUq4V1OyPCXcqylZnhLu1ZQsTwn3akqWp4R7NSWLU3LlXk3J8pRwr6ZkeUq4V1OyPCXcqylZnpJhSkzJ4pRwr6ZkeUq4V1OyPCXcqylZnhLu1ZQsTwn3akoWp+TGvZqS5SnhXk3J8pRwr6ZkeUq4V1OyPCXDlJiSxSnhXk3J8pRwr6ZkeUq4V1OyPCXcqylZnhLu1ZQsTsmdezUly1PCvZqS5SnhXk3J8pRwr6ZkeUqGKTEli1PCvZqS5SnhXk3J8pRwr6ZkeUq4V1OyPCXcqylZnJIH92pKlqeEezUly1PCvZqS5SnhXk3J8pQMU2JKFqeEezUly1PCvZqS5SnhXk3J8pRwr6ZkeUq4V1OyNCWnA/dqSpanhHs1JctTwr2akuUp4V5NyfKUDFNiShanhHs1JctTwr2akuUp4V5NyfKUcK+mZHlKuFdTsjglR+7VlCxPCfdqSpanhHs1JctTwr2akuUpGabElCxOCfdqSpanhHs1JctTwr2akuUp4V5NyfKUcK+mZHFKTtyrKVmeEu7VlCxPCfdqSpanhHs1JctTMkyJKVmcEu7VlCxPCfdqSpanhHs1JctTwr2akuUp4V5NyeKUnLlXU7I8JdyrKVmeEu7VlCxPCfdqSpanZJgSU7I4JdyrKVmeEu7VlCxPCfdqSpanhHs1JctTwr2aksUpGdyrKVmeEu7VlCxPCfdqSpanhHs1JctTMkyJKVmcEu7VlCxPCfdqSpanhHs1JctTwr2akuUp4V73OiXvqfyYkseH4C906k6DH8fT23ce4/b8w6fH+fKWyuPy808+leAO97evcTk8Hr9++M+R4l6NVHikiFojFR4pVtdIhUdqGCkjlR0pvthIhUeKXDZS4ZFioo1UeKRoayMVHimO20hlR+rKnhup8Eix50YqPFLsuZEKjxR7bqTCIzWMlJHKjhR7bqTCI8WeG6nwSLHnRio8Uuy5kQqPFHtupLIjdWPPjVR4pNhzIxUeKfbcSIVHij03UuGRGkbKSGVHij03UuGRYs+NVHik2HMjFR4p9txIhUeKPTdS2ZG6s+dGKjxS7LmRCo8Ue26kwiPFnhup8EgNI2WksiPFnhup8Eix50YqPFLsuZEKjxR7bqTCI8WeG6nsSD3YcyMVHin23EiFR4o9N1LhkWLPjVR4pIaRMlLZkWLPjVR4pNhzIxUeKfbcSIVHij03UuGRYs+NVHSkzgf23EiFR4o9N1LhkWLPjVR4pNhzIxUeqWGkjFR2pNhzIxUeqWnt+e3x9kXup/vCSI3T5fYW5ul2XkA+Dm8zdRmn8RH5tHb5dcinta+vQz6tnXwZ8uO09u51yKe1W69DPq39eR3yae3I65APyLdGPm27fh1y7XNz5Nrn5si1z82Ra59bIz9pn5sj1z43R659bo5c+9wc+YB8a+Ta5+bItc/NkWufmyPXPjdHrn1ujfysfW6OXPvcHLn2uTly7XNz5APyrZFrn5sj1z43R659bo5c+9wcufa5NfKhfW6OXPvcHLn2uTly7XNz5APyrZFrn5sj1z43R659bo5c+9wcufa5NfKL9rk5cu1zc+Ta5+bItc/NkQ/It0aufX4F+fUw3pBfT4ePFBXKBEUdMUFR7UtQ1OS+RPFyead4+0jxqpwlKOpbCYoqVIKiVpSgOFBcf4++6i4JirpLgqLukqCouyTuLrpLgOJNd0lQ1F0SFHWXBEXdJUFxoBigqLskKOouCYq6S4Ki7pKgqLsEKN51lwRF3SVBUXcJmLG77pKgOFAMUNRdEhR1l8TdRXdJUNRdEhR1lwDFh+6SoKi7JCjqLgmKukuC4kAxQFF3SVDUXRIUdZcERd0lQVF3WU9xHHSX9WZsHHSXBEXdJUFRd0lQHCgG7i66S4Ki7pKgqLskKOouCYq6S4DiUXdJUNRdEhR1lwRF3SVBcaAYoKi7JCjqLgmKukuCou4SMGNH3SVA8aS7JCjqLgmKukvg7nLSXRIUB4oBirpLgqLukqCouyQo6i4JirpLgOJZd0lQ1F0SFHWXBEXdJUFxoBigqLskKOouATN21l0SFHWXBEXdJUBx6C6Bu8vQXRIUdZcERd0lQXGgGKCouyQo6i4JirpLgqLukqCouwQoXnSXBEXdJUFRd0lQ1F0SFAeK683YRXdJUNRdEhR1lwRF3SVxd9FdAhSvukuCou6SoKi7JCjqLgmKA8UARd0lQVF3SVDUXRIUdZcERd0lQPGmuyQo6i4JirpLwIzddJcExYFigKLukqCouyTuLrpLgqLukqCouwQo3nWXBEXdJUFRd0lQ1F0SFAeKAYq6S4Ki7pKgqLskKOouCYq6S4DiQ3cJmLGH7pKgqLskKOouCYoDxcDdRXdJUNRdEhR1lwRF3SVBUXdZT/Fy0F0SFHWXBEXdJUFRd0lQHCgGKOouCYq6S4Ki7pKgqLusN2OXg+4SoHjUXRIUdZcERd0lcHc56i4JigPFAEXdJUFRd0lQ1F0SFHWXBEXdJUDxpLskKOouCYq6S4Ki7pKgOFAMUNRdEhR1l4AZO+kuCYq6S4Ki7hKgeNZdAneXs+6SoKi7JCjqLgmKA8UARd0lQVF3SVDUXRIUdZcERd0lQHHoLgmKukuCou6SoKi7JCgOFNebsaG7JCjqLgmKukuCou6SuLvoLgGKF90lQVF3SVDUXRIUdZcExYFigKLukqCouyQo6i4JirpLgqLuEqB41V0SFHWXBEXdJWDGrrpLguJAMUBRd0lQ1F0SdxfdJUFRd0lQ1F0CFG+6S4Ki7pKgqLskKOouCYoDxQBF3SVBUXdJUNRdEhR1lwRF3SVA8a67BMzYXXdJUNRdEhR1lwTFgWLg7qK7JCjqLgmKukuCou6SoKi7BCg+dJcERd0lQVF3SVDUXRIUB4oBirpLgqLukqCouyQo6i4BM/bQXdZTvB50lwRF3SVBUXdZf3e5HnSXBMWBYoCi7pKgqLskKOouCYq6S4Ki7hKgeNRdEhR1lwRF3SVBUXdJUBwoBijqLgmKukvAjB11lwRF3SVBUXcJUDzpLoG7y0l3SVDUXRIUdZcExYFigKLukqCouyQo6i4JirpLgqLuEqB41l0SFHWXBEXdJUFRd0lQHCiuN2Nn3SVBUXdJUNRdEhR1l8TdRXcJUBy6S4Ki7pKgqLskKOouCYoDxQBF3SVBUXdJUNRdEhR1lwRF3SVA8aK7JCjqLgmKukvAjF10lwTFgWKAou6SoKi7JO4uukuCou6SoKi7BChedZcERd0lQVF3SVDUXRIUB4oBirpLgqLukqCouyQo6i4JirpLgOJNdwmYsZvukqCouyQo6i4JigPFwN1Fd0lQ1F0SFHWXBEXdJUFRdwlQvOsuCYq6S4Ki7pKgqLskKA4UAxR1lwRF3SVBUXdJUNRdAmbsrrsEKD50lwRF3SVBUXcJ3F0eukuC4kAxQFF3SVDUXRIUdZcERd0lQVF3WU/xdtBdEhR1lwRF3SVBUXdJUBwoBijqLgmKust6M3Y76C4JirpLgqLuEqB41F0Cd5ej7pKgqLskKOouCYoDxQBF3SVBUXdJUNRdEhR1lwRF3SVA8aS7JCjqLgmKukuCou6SoDhQXG/GTrpLgqLukqCouyQo6i6Ju4vuEqB41l0SFHWXBEXdJUFRd0lQHCgGKOouCYq6S4Ki7pKgqLskKOouAYpDd0lQ1F0SFHWXgBkbukuC4kAxQFF3SVDUXRJ3F90lQVF3SVDUXQIUL7pLgqLukqCouyQo6i4JigPFAEXdJUFRd0lQ1F0SFHWXBEXdJUDxqrsEzNhVd0lQ1F0SFHWXBMWBYuDuorskKOouCYq6S4Ki7pKgqLsEKN50lwRF3SVBUXdJUNRdEhQHigGKukuCou6SoKi7JCjqLgEzdtNdAhTvukuCou6SoKi7BO4ud90lQXGgGKCouyQo6i4JirpLgqLukqCouwQoPnSXBEXdJUFRd0lQ1F0SFAeKAYq6S4Ki7hIwYw/dJUFRd0lQ1F3WU7wfdJf1d5f7QXdJUNRdEhR1lwTFgWKAou6SoKi7JCjqLgmKukuCou4SoHjUXRIUdZcERd0lQVF3SVAcKK43Y0fdJUFRd0lQ1F0SFHWXxN1FdwlQPOkuCYq6S4Ki7pKgqLskKA4UAxR1lwRF3SVBUXdJUNRdEhR1lwDFs+6SoKi7JCjqLgEzdtZdEhQHigGKukuCou6SuLvoLgmKukuCou4SoDh0lwRF3SVBUXdJUNRdEhQHigGKukuCou6SoKi7JCjqLgmKukuA4kV3CZixi+6SoKi7JCjqLgmKA8XA3UV3SVDUXRIUdZcERd0lQVF3CVC86i4JirpLgqLukqCouyQoDhQDFHWXBEXdJUFRd0lQ1F0CZuyquwQo3nSXBEXdJXBdvOkuCYq6S4LiQDFAUXdJUNRdEhR1l8Smo7skKOouAYp33SVwXbzrLgmKukuCou6SoDhQDFDUXRIUdZfEpqO7JCjqLgmKukuA4kN3CdxdHrpLgqLukqCouyQoDhQDFHWXBEXdJUFRd0lQ1F0SFHWX9RQfB90lQVF3+QrF2/2Nx4//ef5Icdruch9vf/T9Nv5G8U8we6ojP3C8ffp4PS2AOV+Pb+rlfL0eFz59uZz++vDlFx7H2636k2/X29uffD/+MoxvzAfmceY/JM/bn/yomO+p6nwX5nsqRt+F+Z5q1HdhvqfS9V2Y76mifRPmxz0Vuu/CfE/177sw31NZ/C7M9dAvMb8e3772dZwWmN9v79X/fvn52XH7C/mAPI388c7jcR9/Q144q9PlTROM0+1vzqr4b20crm//sY3T+CC4jvrtjsJUnHcUpka+ozBV/R2FySHsJ8wTObGjMFmPHYVJp+woTJ5mR2EOYe4nTAZoR2EyQDsKkwHaUZgM0I7CZID2E+aZAdpRmAzQjsJkgHYUJgO0ozCHMPcTJgO0ozAZoB2FyQDtKEwGaEdhMkD7CXMwQDsKkwHaUZgM0I7CZIB2FOYQ5n7CZIB2FCYDtKMwGaAdhckA7ShMBmg/YV4YoB2FyQDtKEwGaEdhMkA7CnMIcz9hMkA7CpMB2lGYDNCOwmSAdhQmA7SfMK8M0I7CZIB2FCYDtKMwGaAdhTmE+dIwn58C/riSOr3z4Wl650O99M6HTXlxPs/PIL0SJK3zuXEevfOhMXrnw0z0zodsaL2/3YZ8WufDH/TOhz/onQ9/0Hs/4A9658MftM7nzh/0zoc/6J0Pf9A7H/6gdz5DPq3z4Q9658Mf9M6HP+idD3/QOx/+oHU+D/6gdz78QevnCw/+oHc+/EHvfIZ8WufDH/TeD/iD3vnwB73z4Q9658MfNM7nejjwB73z4Q9658Mf9M6HP+idz5BP63z4g9758Ae98+EPeufDH/TOhz9o/HzhejjyB73z4Q9658Mf9M6HP2i9HxyHfFrnwx/0zoc/6J0Pf9A7H/6gdz78Qet8TvxB73z4g9758Ae98+EPeucz5NM6H/6gdz78Qe98+IPWzxdO/EHvfPiD1vmc+YPe+fAHrfeDM3/QOx/+oHc+Qz6t8+EPeufDH/TOhz/onQ9/0Dsf/qB1PoM/6J0Pf9A7H/6gdz78Qe98hnxa58MftH6+MPiD3vnwB73z4Q9658MftN4PLvxB73z4g9758Ae98+EPeucz5NM6H/6gdz78Qe98+IPe+fAHvfPhD1rnc+UPeufDH/TOhz/onQ9/0Pr5wnXIp3U+/EHvfPiD3vnwB733A/6gdz78Qet8bvxB73z4g9758Ae98+EPeucz5NM6H/6gdz78Qe98+IPe+fAHvfPhD1rnc+cPeufDH7R+vnDnD3rnwx/0zmfIp3U+/EHv/YA/6J0Pf9A7H/6gdz78Qet8HvxB73z4g9758Ae98+EPeucz5NM6H/6gdz78Qe98+IPe+fAHvfPhDzo/Xzge+IPe+fAHvfPhD3rnwx903g+OhyGf1vnwB73z4Q9658Mf9M6HP+idD3/QOp8jf9A7H/6gdz78Qe98+IPe+Qz5tM6HP+idD3/QOx/+oPXzhSN/0Dsf/qB1Pif+oHc+/EHr/eDEH/TOhz/onc+QT+t8+IPe+fAHvfPhD3rnwx/0zoc/aJ3PmT/onQ9/0Dsf/qB3PvxB73yGfFrnwx+0fr5w5g9658Mf9M6HP+idD3/Qej8Y/EHvfPiD3vnwB73z4Q965zPk0zof/qB3PvxB73z4g9758Ae98+EPWudz4Q9658Mf9M6HP+idD3/Q+vnCZcindT78Qe98+IPe+fAHvfcD/qB3PvxB63yu/EHvfPiD3vnwB73z4Q965zPk0zof/qB3PvxB73z4g9758Ae98+EPWudz4w9658MftH6+cOMPeufDH/TOZ8indT78Qe/9gD/onQ9/0Dsf/qB3PvxB63zu/EHvfPiD3vnwB73z4Q965zPk0zof/qB3PvxB73z4g9758Ae98+EPWj9fePAHvfPhD3rnwx/0zoc/aL0fPIZ8WufDH/TOhz/onQ9/0Dsf/qB3PvxB53xOB/6gdz78Qe98+IPe+fAHvfMZ8mmdD3/QOx/+oHc+/EHn5wunA3/QOx/+oHU+R/6gdz78Qev94Mgf9M6HP+idz5BP63z4g9758Ae98+EPeufDH/TOhz9onc+JP+idD3/QOx/+oHc+/EHvfIZ8WufDH7R+vnDiD3rnwx/0zoc/6J0Pf9B6PzjzB73z4Q9658Mf9M6HP+idz5BP63z4g9758Ae98+EPeufDH/TOhz9onc/gD3rnwx/0zoc/6J0Pf9D6+cIY8mmdD3/QOx/+oHc+/EHv/YA/6J0Pf9A6nwt/0Dsf/qB3PvxB73z4g975DPm0zoc/6J0Pf9A7H/6gdz78Qe98+IPW+Vz5g9758Aetny9c+YPe+fAHvfMZ8mmdD3/Qez/gD3rnwx/0zoc/6J0Pf9A6nxt/0Dsf/qB3PvxB73z4g975DPm0zoc/6J0Pf9A7H/6gdz78Qe98+IPWzxfu/EHvfPiD3vnwB73z4Q9a7wf3IZ/W+fAHvfPhD3rnwx/0zoc/6J0Pf9A6nwd/0Dsf/qB3PvxB73z4g975DPm0zoc/6J0Pf9A7H/6g9fOFB3/QOx/+oHM+5wN/0Dsf/qDzfnA+8Ae98+EPeucz5NM6H/6gdz78Qe98+IPe+fAHvfPhD1rnc+QPeufDH/TOhz/onQ9/0DufIZ/W+fAHrZ8vHPmD3vnwB73z4Q9658MftN4PTvxB73z4g9758Ae98+EPeucz5NM6H/6gdz78Qe98+IPe+fAHvfPhD1rnc+YPeufDH/TOhz/onQ9/0Pr5wnnIp3U+/EHvfPiD3vnwB733A/6gdz78Qet8Bn/QOx/+oHc+/EHvfPiD3vkM+bTOhz/onQ9/0Dsf/qB3PvxB73z4g9b5XPiD3vnwB62fL1z4g9758Ae98xnyaZ0Pf9B7P+APeufDH/TOhz/onQ9/0DqfK3/QOx/+oHc+/EHvfPiD3vkM+bTOhz/onQ9/0Dsf/qB3PvxB73z4g9bPF278Qe98+IPe+fAHvfPhD1rvB7chn9b58Ae98+EPeufDH/TOhz/onQ9/0DqfO3/QOx/+oHc+/EHvfPiD3vkM+bTOhz/onQ9/0Dsf/qD184U7f9A7H/6gdT4P/qB3PvxB6/3gwR/0zoc/6J3PkE/rfPiD3vnwB73z4Q9658Mf9M6HP+iczzjwB73z4Q9658Mf9M6HP+idz5BP63z4g87PF8aBP+idD3/QOx/+oHc+/EHr/eDIH/TOhz/onQ9/0Dsf/qB3PkM+rfPhD3rnwx/0zoc/6J0Pf9A7H/6gdT4n/qB3PvxB73z4g9758Aetny+chnxa58Mf9M6HP+idD3/Qez/gD3rnwx+0zufMH/TOhz/onQ9/0Dsf/qB3PkM+rfPhD3rnwx/0zoc/6J0Pf9A7H/6gdT6DP+idD3/Q+vnC4A9658Mf9M5nyKd1PvxB7/2AP+idD3/QOx/+oHc+/EHrfC78Qe98+IPe+fAHvfPhD3rnM+TTOh/+oHc+/EHvfPiD3vnwB73z4Q9aP1+48ge98+EPeufDH/TOhz9ovR9ch3xa58Mf9M6HP+idD3/QOx/+oHc+/EHrfG78Qe98+IPe+fAHvfPhD3rnM+TTOh/+oHc+/EHvfPiD1s8XbvxB73z4g9b53PmD1vefO3/QOx/+oHc+/EHvfIZ8WufDH/TOhz/ovV/zB73z4Q9658MftL7/PPiD3vnwB73z4Q9658Mf9M5nyKd1PvxB6/36wR/0zoc/6J0Pf9A7H/6g835wOfAHvfPhD3rnwx/0zoc/6J3PkE/rfPiD3vnwB73z4Q9658Mf9M6HP2idz5E/eG0+t/sb6R//8/wxH/4gns9xnN+/xw//uZDQH/eYtz/6cj7+mlDxpe/39y99f/z8IqeKx/ny/j3Ol3H89cN/Zs9NzJs97zFv9kP202bP1+w3++vlPZjrbXzMnguaN3ueacfZP87vwRzuCx8+vf9Cxvl0vD7/8Ol6fU/xel/48I/+/9Y0H0XRJNIM4EsHkCk0gL8/gLfD4y3F2/m0ZgBPVKgBfOkAcr0G8PcH8HE5vaX4eBwXPnwa78N0uo5V08pOm9bvM618umn9p6f1/h75+bCqC52GaTWt32ZaPbMwrX9O6zi8T+tl4U8+XR7jXR0dPz4JO3kaYqp+f6pyQvLkkYwBfOkAeiRjAF86gB7JGMDfH8CcET97JGMAXzqAHskYwN8fwPvP+biP24dqe/boxFTlp8ojDlOVn6phqkxVfKo8MjBVvz9Vv/WA6/B4//DxeP44gp4vGMEXj6AnDEbwHx7B3K9QnT2OMK3fZ1o9uzCt32ZahwcdpvWfntbYL/wNT0VM6/eZVk9bTOu/f/h8fE/xfFnZ3YenLaYqP1XDVJmq356qYBHxYMYAvnQAPZYxgC8dQA9lDOD/wgDm+qrnLAbwpQPo0cl+B/B2fbwHcx9Leu93/vX5wr/nvXjEYap+f6py/5rt4qmFAXzpAHoQYQBfOoCeWRjA3x/A3D+nvAwDaABfOYAebxjA3x/AhX/NdPHMwlTlp8qDCFOVnypPF0xVfqo8MjBVvz9VyX9MefV8wQi+eAQ9YTCC//AI5n7R6epxhGn9PtPq2YVp/T7TOkyraf2HpzX2C39XT0VM6/eZVk9bTOuf0/qa1+JfPZgxgC8dQM9wDODvD2Du12iuHvcYwFcO4M3DHgP4+wP4Iht081zItH6fafVcyLT+09Mas0E3z4VM6/eZ1mFaTesfH06+Ne7m+Y2pyk+V5yym6venKlhEPGcxgC8dQM9ZDOBLB9BzFgP4vzCAsb5695zFAL50AD06yQ/g/f057PH+Rya/DOCf0D0BeAF0IvsF0Afo20OnK/9Z6Md7AZ3NewF0BusF0FmbF0BnKraH/tDOt99eHhrpC6BrpC+ArpG+APoAfXvoGukLoGukL4Cukb4Aukb6Auga6ebQrweN9AXQNdJNH9L/CV0jfQF0jfQF0Afo20PXSF8AXSP9EvTb5e1Xtv62j5TQr+P919euv/x61338hVwf3Ry5Nro5cl10a+RHTXRz5Hro5si10M2R66CbIx+Qb41c/9wcufa5OXLtc3Pk2ufmyLXPrZGftM/NkWufmyPXPjdHrn1ujnxAvjVy7XNz5Nrn5si1z82Ra5+bI9c+t0Z+1j43R659bo5c+9wcufa5OfIB+dbItc/NkWufmyPXPr+E/PH+/s3H5bCA/Hi4Xt++x+EXIufyS/98S+bxfLg///D5eHh7Wf/5318U+vPDf6ap2O4pTZ15R2kOdXxPaWr6e0qTRNhTmvzEntIc0txRmqzKntIkbPaUJhe0pzS5oD2lyQXtKM0LF7SnNLmgPaXJBe0pTS5oT2kOae4oTS5oT2lyQXtKkwvaU5pc0J7S5IJ2lOaVC9pTmlzQntLkgvaUJhe0pzSHNHeUJhe0pzS5oD2lyQXtKU0uaE9pckE7SvPGBe0pTS7oO6V5fv8a5/MfDJ59+Mdd9O00zuvtdPgYPXE0bfQs07TRD9HPGj1/NW30ZNe00TNj00ZPo00bPec2a/R3gm7a6Nm8aaNn86aNns2bNvoh+lmjZ/OmjZ7NmzZ6Nm/a6Nm8aaNn82aN/sHmTRs9mzdt9GzetNGzedNGP0Q/a/Rs3rTRs3nTRs/mTRs9mzdt9GzepNHfDmzetNGzedNGz+ZNGz2bN230Q/TfKPpxe//Ol9P5+YdvY9z++vBt/H1O/oyezZs2ejZv2ujZvGmjZ/OmjZ7NmzX6I5s3bfRs3rTRs3nTRs/mTRv9EP2s0bN500bP5k0bPZs3bfRs3rTRs3mzRn9i86aNns2bNno2b9ro2bxpox+inzV6Nm/a6Nm8aaNn86aNns2bNno2b9boz2zetNGzedNGz+ZNGz2bN230Q/SzRs/mfaPox+Xy9uFxPRZpEnR7SpNz21OaNNqe0mTGdpTmILv2lCZ/tac0Kak9pcky7SnNIc0dpckF7SlNLmhPaXJBe0qTC9pTmlzQjtK8cEF7SpML2lOaXNCe0uSC9pTmkOaO0uSC9pQmF7SnNLmgPaXJBe0pTS5oR2leuaA9pckF7SlNLmhPaXJBe0pzSHNHaXJBe0qTC9pTmlzQntLkgvaUJhe0ozRvXNCe0uSC9pQmF7SnNLmgPaU5pLmjNLmgPaXJBX2nNK+39zRv54UP36/ntx/w/usP+B49cTRt9CzTtNFTUrNGf+evpo2e7Jo2emZs2uhptGmjH6KfNXqCbtro2bxpo2fzpo2ezZs2ejZv1ugfbN600bN500bP5k0bPZs3bfRD9LNGz+ZNGz2bN230bN600bN500bP5k0a/f3A5k0bPZs3bfRs3rTRs3nTRj9EP2v0bN600bN500bP5k0bPZs3bfRs3qzRH9m8aaNn86aNns2bNno2b9roh+hnjZ7NmzZ6Nm/a6Nm8aaNn86aNns2bNfoTmzdt9GzetNGzedNGz+ZNG/0Q/azRs3nTRs/mTRs9mzdt9GzetNGzebNGf2bzpo2ezZs2ejZvt9E/bu/f+XB4fIyezZs2+iH6WaNn875T9LfL8T36+/H5hx+n++3tO5+PCx++HM9vP+DleBkf54T6MydfmROe0Jx8ZU5IRXPylTlhIM3JF+Zk0JXm5Ctzwm2ak6/MCRFqTr4yJ6ypOfnKnAxzYk6+MCd8rDn5ypzwsebkK3PCx5qTr8wJH2tOvjInfKw5+cKcXPhYc/KVOeFjzclX5oSPNSdfmRM+1px8ZU6GOTEnX5gTPtacfGVO+Fhz8pU54WPNyVfmhI81J1+ZEz7WnHxhTq58rDn5ypzwsebkK3PCx5qTr8wJH2tOvjInw5yYky/MCR9rTr4yJ3ysOfnKnPCx5uQrc8LHmpOvzAkfa06+MCc3PtacfGVO+Fhz8pU54WPNyVfmhI81J1+Zk2FOzMkX5oSPNSdfmRM+1px8ZU74WHPylTnhY83JV+aEjzUnX5iTOx9rTr4yJ3ysOfnKnPCx5uQrc8LHmpOvzMkwJ+bkC3PCx5qTr8wJH2tOvjInfKw5+cqc8LHm5Ctzwseaky/MyYOPNSdfmRM+1px8ZU74WHPylTnhY83JV+ZkmBNz8oU54WPNyVfmhI81J1+ZEz7WnHxlTvhYc/KVOeFjzcnynDwOfKw5+cqc8LHm5Ctzwseak6/MCR9rTr4yJ8OcmJMvzAkfa06+Mid8rDn5ypzwsebkK3PCx5qTr8wJH2tOvjAnRz7WnHxlTvhYc/KVOeFjzclX5oSPNSdfmZNhTszJF+aEjzUnX5kTPtacfGVO+Fhz8pU54WPNyVfmhI81J1+YkxMfa06+Mid8rDn5ypzwsebkK3PCx5qTr8zJMCfm5Atzwseak6/MCR9rTr4yJ3ysOfnKnPCx5uQrc8LHmpMvzMmZjzUnX5kTPvZf5uQLc8LHmpOvzAkfa06+MifDnJiTL8wJH2tOvjInfKw5+cqc8LHm5Ctzwseak6/MCR9rTr4wJ4OPNSdfmRM+1px8ZU74WHPylTnhY83JV+ZkmJPdzsl7Lj/m5PExeop1t9GP4+ntO49xe/7h0w/Z/pbL4/LzTz5VMC6H+9vXuBwej18//OdQ8bGGKj5U5K2hig8V02uo4kNFCxuq9FBdOGRDFR8qwtlQxYeKnTZU8aGisg1VfKiGoTJU6aFi1A1VfKgYdUMVHypG3VDFh4pRN1TxoWLUDVV6qK6MuqGKDxWjbqjiQ8WoG6r4UDHqhio+VMNQGar0UDHqhio+VIy6oYoPFaNuqOJDxagbqvhQMeqGKj1UN0bdUMWHilE3VPGhYtQNVXyoGHVDFR+qYagMVXqoGHVDFR8qRt1QxYeKUTdU8aFi1A1VfKgYdUOVHqo7o26o4kPFqBuq+FAx6oYqPlSMuqGKD9UwVIYqPVSMuqGKDxWjbqjiQ8WoG6r4UDHqhio+VIy6oUoP1YNRN1TxoWLUDVV8qBh1QxUfKkbdUMWHahgqQ5UeKkbdUMWHilE3VPGhYtQNVXyoGHVDFR8qRt1QZYfqdjgw6oYqPlTzGvX76e3PPt8v9799+k80e/LCp/cv8mOKrwtoTtfD2599uh6XQJ4uj/Hz07/M4+UvjntSof8kx+v1/Xtff/mzT+Xl5Xp7u7o8zh//qx6Qfwn57fB4+/TtfFqFfE8a7Z9Efv9J5P7Lre79arEnc/RPcnxcTu9bwOP4fHRPh8f7h4/H80foezIr3wb6nsxDG+in8Y7vdB2rruh7KvE7zOe4pz7cJ5/3jns6H1Ytocc9Vcs95rOrfnu8/1Qz5wXiY7x/7THuj6VPny7vGH+0hAXfMg5vQukyTuMj9F2V4e8CfYC+PfRdFeLvAn1X7fm7QN9Ve/4u0HfVnr8L9F1V4m8C/bSrnvtdoO+qvH4X6BrpC6BrpC+APkDfHrpG+gLoGukLoGukL4Cukb4Auka6PfSzRvoC6BrpC6BrpC+ArpG+APoAfXvoGukLoGukL4Cukb4Aukb6Auga6fbQh0b6Auga6Quga6QvgK6RvgD6AH176BrpC6BrpC+ArpG+ALpG+gLoGun20C8a6Quga6QvgK6RvgC6RvoC6AP07aFrpC+ArpG+ALpG+gLoGukLoGuk20O/aqQvgK6Rfg369fD2EtlxPR0+clQyMxz1xgzHgWOEo3b3RY6XyzvHW8FRYctw1MEyHNWqDEdNKcLxpvxE7tc3fSbDUZ/JcNRnMhwHjpH7jD6T4ajPZDjqMxmO+kyGoz4T4XjXZzIc9ZkMR30mw1GfyXAcOEY46jMZjvpMhqM+k+Goz0S82V2fiXB86DMZjvpMhqM+E7nPPPSZDMeBY4SjPpPhqM9kOOozGY76TIajPpPgeDzoMxmO+kyGoz6T4ajPZDgOHCMc9ZkMR30m4c2OB30mw1GfyXDUZyIcj/pM5D5z1GcyHPWZDEd9JsNx4BjhqM9kOOozGY76TIajPpPhqM9EOJ70mQxHfSbDUZ/JcNRnMhwHjglvdtJnMhz1mQxHfSbDUZ/J3Gf0mQjHsz6T4ajPZDjqMxmO+kyG48AxwlGfyXDUZzIc9ZkMR30mw1GfiXAc+kyGoz6T4ajPRLzZ0GcyHAeOEY76TIajPpO5z+gzGY76TIajPhPheNFnMhz1mQxHfSbDUZ/JcBw4RjjqMxmO+kyGoz6T4ajPZDjqMxGOV30m4s2u+kyGoz6T4ajPZDgOHCP3GX0mw1GfyXDUZzIc9ZkMR30mwvGmz2Q46jMZjvpMhqM+k+E4cIxw1GcyHPWZDEd9JsNRn4l4s5s+E+F412cyHPWZDEd9JnKfueszGY4DxwhHfSbDUZ/JcNRnMhz1mQxHfSbC8aHPZDjqMxmO+kyGoz6T4ThwjHDUZzIc9ZmIN3voMxmO+kyGoz6T4Hg66DOJ+8zpoM9kOOozGY76TIbjwDHCUZ/JcNRnMhz1mQxHfSbDUZ+JcDzqMxmO+kyGoz6T4ajPZDgOHBPe7KjPZDjqMxmO+kyGoz6Tuc/oMxGOJ30mw1GfyXDUZzIc9ZkMx4FjhKM+k+Goz2Q46jMZjvpMhqM+E+F41mcyHPWZDEd9JuLNzvpMhuPAMcJRn8lw1Gcy9xl9JsNRn8lw1GciHIc+k+Goz2Q46jMZjvpMhuPAMcJRn8lw1GcyHPWZDEd9JsNRn4lwvOgzEW920WcyHPWZDEd9JsNx4Bi5z+gzGY76TIajPpPhqM9kOOozEY5XfSbDUZ/JcNRnMhz1mQzHgWOEoz6T4ajPZDjqMxmO+kzEm131mQjHmz6T4ajPZDjqM5H7zE2fyXAcOEY46jMZjvpMhqM+k+Goz2Q46jMRjnd9JsNRn8lw1GcyHPWZDMeBY4SjPpPhqM9EvNldn8lw1GcyHPWZCMeHPhO5zzz0mQxHfSbDUZ/JcBw4RjjqMxmO+kyGoz6T4ajPZDjqMwmO54M+k+Goz2Q46jMZjvpMhuPAMeDNzgd9JsNRn8lw1GcyHPWZzH1Gn4lwPOozGY76TIajPpPhqM9kOA4cIxz1mQxHfSbDUZ/JcNRnMhz1mQjHkz6T4ajPZDjqMxFvdtJnMhwHjhGO+kyGoz6Tuc/oMxmO+kyGoz4T4XjWZzIc9ZkMR30mw1GfyXAcOEY46jMZjvpMhqM+k+Goz2Q46jMRjkOfiXizoc9kOOozGY76TIbjwDFyn9FnMhz1mQxHfSbDUZ/JcNRnIhwv+kyGoz6T4ajPZDjqMxmOA8cIR30mw1GfyXDUZzIc9ZmIN7voMxGOV30mw1GfyXDUZyL3mas+k+E4cIxw1GcyHPWZDEd9JsNRn8lw1GciHG/6TIajPpPhqM9kOOozGY4DxwhHfSbDUZ+JeLObPpPhqM9kOOozEY53fSZyn7nrMxmO+kyGoz6T4ThwjHDUZzIc9ZkMR30mw1GfyXDUZyIcH/pMhqM+k+Goz2Q46jMZjgPHhDd76DMZjvpMhqM+k+Goz2TuM/pMguM46DMZjvpMhqM+k+Goz2Q4DhwjHPWZDEd9JsNRn8lw1GcyHPWZCMejPpPhqM9kOOozCW82jvpMhuPAMcJRn8lw1Gcy9xl9JsNRn8lw1GciHE/6TIajPpPhqM9kOOozGY4DxwhHfSbDUZ/JcNRnMhz1mQxHfSbC8azPRLzZWZ/JcNRnMhz1mQzHgWPkPqPPZDjqMxmO+kyGoz6T4ajPRDgOfSbDUZ/JcNRnMhz1mQzHgWOEoz6T4ajPZDjqMxmO+kzEmw19JsLxos9kOOozGY76TOQ+c9FnMhwHjhGO+kyGoz6T4ajPZDjqMxmO+kyE41WfyXDUZzIc9ZkMR30mw3HgGOGoz2Q46jMRb3bVZzIc9ZkMR30mwvGmz0TuMzd9JsNRn8lw1GcyHAeOEY76TIajPpPhqM9kOOozGY76TITjXZ/JcNRnMhz1mQxHfSbDceCY8GZ3fSbDUZ/JcNRnMhz1mcx9Rp+JcHzoMxmO+kyGoz6T4ajPZDgOHCMc9ZkMR30mw1GfyXDUZzIc9ZkEx8tBn8lw1GcyHPWZhDe7HPSZDMeBY4SjPpPhqM9k7jP6TIajPpPhqM9EOB71mQxHfSbDUZ/JcNRnMhwHjhGO+kyGoz6T4ajPZDjqMxmO+kyE40mfiXizkz6T4ajPZDjqMxmOA8fIfUafyXDUZzIc9ZkMR30mw1GfiXA86zMZjvpMhqM+k+Goz2Q4DhwjHPWZDEd9JsNRn8lw1Gci3uysz0Q4Dn0mw1GfyXDUZyL3maHPZDgOHCMc9ZkMR30mw1GfyXDUZzIc9ZkIx4s+k+Goz2Q46jMZjvpMhuPAMcJRn8lw1Gci3uyiz2Q46jMZjvpMhONVn4ncZ676TIajPpPhqM9kOA4cIxz1mQxHfSbDUZ/JcNRnMhz1mQjHmz6T4ajPZDjqMxmO+kyG48Ax4c1u+kyGoz6T4ajPZK6P+kyGoz4T4XjXZzIc9ZkMR30mw1Gfiew994FjhKM+k+Goz2Suj/pMhqM+k+Goz0Q4PvSZDEd9JsNRn4nsPQ99JsNx4BjhqM9kOOozmfuMPpPhqM9kOOozCY7Xgz6T4ajPZDjqMxmO+kyG48AxwlGfyXDUZzIc9Zmvcbzd34j8+J/njxzn7TOX8/uEXS7XpU+fLre3T59uf+P48cOXcbj+9eHLOI2P0OctP6+Dfpy3Kb0Q+ry16oXQ5+1gL4Q+b2F7IfQB+vbQ562CL4Q+b298IfR5S+YLoWukL4CukW4P/aSRvgC6RvoC6BrpC6BrpC+APkDfHrpG+gLoGukLoGukL4Cukb4Auka6PfSzRvoC6BrpC6BrpC+ArpG+APoAfXvoGukLoGukL4Cukb4Aukb6Auga6fbQh0b6Auga6Quga6QvgK6RvgD6AH176BrpC6BrpC+ArpG+ALpG+gLoGun20C8a6Quga6QvgK6RvgC6RvoC6AP07aFrpC+ArpG+ALpG+jXoz18GfL0omRmOemOE41UVzHDU7r7I8flL8a4KW4ajDpbhOHCMcNSUMhyVn8z9Wp/JcNRnMhz1mQjHmz4Tuc/c9JkMR30mw1GfyXAcOEY46jMZjvpMhqM+k+Goz2Q46jMRjnd9JsNRn8lw1GcyHPWZDMeBY8Kb3fWZDEd9JsNRn8lw1Gcy9xl9JsLxoc9kOOozGY76TIajPpPhOHCMcNRnMhz1mQxHfSbDUZ/JcNRnEhxvB30mw1GfyXDUZxLe7HbQZzIcB44RjvpMhqM+k7nP6DMZjvpMhqM+E+F41GcyHPWZDEd9JsNRn8lwHDhGOOozGY76TIajPpPhqM9kOOozEY4nfSbizU76TIajPpPhqM9kOA4cI/cZfSbDUZ/JcNRnMhz1mQxHfSbC8azPZDjqMxmO+kyGoz6T4ThwjHDUZzIc9ZkMR30mw1GfiXizsz4T4Tj0mQxHfSbDUZ+J3GeGPpPhOHCMcNRnMhz1mQxHfSbDUZ/JcNRnIhwv+kyGoz6T4ajPZDjqMxmOA8cIR30mw1GfiXiziz6T4ajPZDjqMxGOV30mcp+56jMZjvpMhqM+k+E4cIxw1GcyHPWZDEd9JsNRn8lw1GciHG/6TIajPpPhqM9kOOozGY4Dx4Q3u+kzGY76TIajPpPhqM9k7jP6TITjXZ/JcNRnMhz1mQxHfSbDceAY4ajPZDjqMxmO+kyGoz6T4ajPRDg+9JkMR30mw1GfiXizhz6T4ThwjHDUZzIc9ZnMfUafyXDUZzIc9ZkEx/tBn8lw1GcyHPWZDEd9JsNx4BjhqM9kOOozGY76TIajPpPhqM9EOB71mYQ3ux/1mQxHfSbDUZ/JcBw4Ru4z+kyGoz6T4ajPZDjqMxmO+kyE40mfyXDUZzIc9ZkMR30mw3HgGOGoz2Q46jMZjvpMhqM+E/FmJ30mwvGsz2Q46jMZjvpM5D5z1mcyHAeOEY76TIajPpPhqM9kOOozGY76TITj0GcyHPWZDEd9JsNRn8lwHDhGOOozGY76TMSbDX0mw1GfyXDUZyIcL/pM5D5z0WcyHPWZDEd9JsNx4BjhqM9kOOozGY76TIajPpPhqM9EOF71mQxHfSbDUZ/JcNRnMhwHjglvdtVnMhz1mQxHfSbDUZ/J3Gf0mQjHmz6T4ajPZDjqMxmO+kyG48AxwlGfyXDUZzIc9ZkMR30mw1GfiXC86zMZjvpMhqM+E/Fmd30mw3HgGOGoz2Q46jOZ+4w+k+Goz2Q46jMRjg99JsNRn8lw1GcyHPWZDMeBY4SjPpPhqM9kOOozGY76TIajPpPg+DjoMwlv9jjoMxmO+kyGoz6T4ThwjNxn9JkMR30mw1GfyXDUZzIc9ZkIx6M+k+Goz2Q46jMZjvpMhuPAMcJRn8lw1GcyHPWZDEd9JuLNjvpMhONJn8lw1GcyHPWZyH3mpM9kOA4cIxz1mQxHfSbDUZ/JcNRnMhz1mQjHsz6T4ajPZDjqMxmO+kyG48AxwlGfyXDUZyLe7KzPZDjqMxmO+kyE49BnIveZoc9kOOozGY76TIbjwDHCUZ/JcNRnMhz1mQxHfSbDUZ+JcLzoMxmO+kyGoz6T4ajPZDgOHBPe7KLPZDjqMxmO+kyGoz6Tuc/oMxGOV30mw1GfyXDUZzIc9ZkMx4FjhKM+k+Goz2Q46jMZjvpMhqM+E+F402cyHPWZDEd9JuLNbvpMhuPAMcJRn8lw1Gcy9xl9JsNRn8lw1GciHO/6TIajPpPhqM9kOOozGY4DxwhHfSbDUZ/JcNRnMhz1mQxHfSbC8aHPRLzZQ5/JcNRnMhz1mQzHgWPkPqPPZDjqMxmO+kyGoz6T4ajPBDjeDwd9JsNRn8lw1GcyHPWZDMeBY4SjPpPhqM9kOOozGY76TMCb/eCoz0Q4HvWZDEd9JsNRn4ncZ476TIbjwDHCUZ/JcNRnMhz1mQxHfSbDUZ+JcDzpMxmO+kyGoz6T4ajPZDgOHCMc9ZkMR30m4s1O+kyGoz6T4ajPRDie9ZnIfeasz2Q46jMZjvpMhuPAMcJRn8lw1GcyHPWZDEd9JsNRn4lwHPpMhqM+k+Goz2Q46jMZjgPHhDcb+kyGoz6T4ajPZDjqM5n7jD4T4XjRZzIc9ZkMR30mw1GfyXAcOEY46jMZjvpMhqM+k+Goz2Q46jMRjld9JsNRn8lw1Gci3uyqz2Q4DhwjHPWZDEd9JnOf0WcyHPWZDEd9JsLxps9kOOozGY76TIajPpPhOHCMcNRnMhz1mQxHfSbDUZ/JcNRnIhzv+kzEm931mQxHfSbDUZ/JcBw4Ru4z+kyGoz6T4ajPZDjqMxmO+kyE40OfyXDUZzIc9ZkMR30mw3HgGOGoz2Q46jMZjvpMhqM+E/FmD30mwfF40GcyHPWZDEd9JnGfOR70mQzHgWOEoz6T4ajPZDjqMxmO+kyGoz4T4XjUZzIc9ZkMR30mw1GfyXAcOEY46jMZjvpMxJsd9ZkMR30mw1GfiXA86TOR+8xJn8lw1GcyHPWZDMeBY4SjPpPhqM9kOOozGY76TIajPhPheNZnMhz1mQxHfSbDUZ/JcBw4JrzZWZ/JcNRnMhz1mQxHfSZzn9FnIhyHPpPhqM9kOOozGY76TIbjwDHCUZ/JcNRnMhz1mQxHfSbDUZ+JcLzoMxmO+kyGoz4T8WYXfSbDceAY4ajPZDjqM5n7jD6T4ajPZDjqMxGOV30mw1GfyXDUZzIc9ZkMx4FjhKM+k+Goz2Q46jMZjvpMhqM+E+F402ci3uymz2Q46jMZjvpM5vo4cIxw1GcyHPWZDEd9JsNRn8lw1Gcie89dn8lw1GcyHPWZyPXxrs9kOA4cIxz1mQxHfSbDUZ/JcNRnMnuPPhPh+NBnMhz1mQxHfSZyn3noMxmOA8cIR30mw1GfyXDUZzIc9ZkMR30mwfF00GcyHPWZDEd9JsNRn/kax9v9jciP/3n+yHHMy/Hxc8JOt6VPny63t0+fbn/j+PHDl3G4/vXhyziNj9AnLj+vgz5xU3od9Ilr1eugT9zBXgd94sL2MujHidvd66BPXAVfB33i3vg66BOXzNdBH6BvD10jfQF0jfQF0DXSF0DXSF8AXSPdHvpJI30BdI30BdA10hdA10hfAH2Avj10jfQF0DXSF0DXSF8AXSN9AXSNdHvoZ430BdA10hdA10hfAF0jfQH0Afr20DXSF0DXSF8AXSN9AXSN9AXQNdLtoQ+N9AXQNdIXQNdIXwBdI30B9AH69tA10hdA10hfAF0jfQF0jfQF0DXS7aFfNNIXQNdIXwBdI30BdI30a9Cfvwz4dBk4RjjqjRmOqmCGo3b3RY7PX4p3UdgyHHWwCMerWpXhqCllOCo/kfv1VZ/JcBw4RjjqMxmO+kzmPqPPZDjqMxmO+kyE402fyXDUZzIc9ZkMR30mw3HgGOGoz2Q46jMZjvpMhqM+k+Goz0Q43vWZiDe76zMZjvpMhqM+k+E4cIzcZ/SZDEd9JsNRn8lw1GcyHPWZCMeHPpPhqM9kOOozGY76TIbjwDHCUZ/JcNRnMhz1mQxHfSbizR76TILj+aDPZDjqMxmO+kziPvPjr8MxwnHgGOGoz2Q46jMZjvpMhqM+k+Goz0Q4HvWZDEd9JsNRn8lw1GcyHAeOEY76TIajPhPxZkd9JsNRn8lw1GciHE/6TOQ+c9JnMhz1mQxHfSbDceAY4ajPZDjqMxmO+kyGoz6T4ajPRDie9ZkMR30mw1GfyXDUZzIcB44Jb3bWZzIc9ZkMR30mw1Gfydxn9JkIx6HPZDjqMxmO+kyGoz6T4ThwjHDUZzIc9ZkMR30mw1GfyXDUZyIcL/pMhqM+k+Goz0S82UWfyXAcOEY46jMZjvpM5j6jz2Q46jMZjvpMhONVn8lw1GcyHPWZDEd9JsNx4BjhqM9kOOozGY76TIajPpPhqM9EON70mYg3u+kzGY76TIajPpPhOHCM3Gf0mQxHfSbDUZ/JcNRnMhz1mQjHuz6T4ajPZDjqMxmO+kyG48AxwlGfyXDUZzIc9ZkMR30m4s3u+kyE40OfyXDUZzIc9ZnIfeahz2Q4DhwjHPWZDEd9JsNRn8lw1GcyHPWZBMdx0GcyHPWZDEd9JsNRn8lwHDhGOOozGY76TMKbjYM+k+Goz2Q46jMRjkd9JnKfOeozGY76TIajPpPhOHCMcNRnMhz1mQxHfSbDUZ/JcNRnIhxP+kyGoz6T4ajPZDjqMxmOA8eENzvpMxmO+kyGoz6T4ajPZO4z+kyE41mfyXDUZzIc9ZkMR30mw3HgGOGoz2Q46jMZjvpMhqM+k+Goz0Q4Dn0mw1GfyXDUZyLebOgzGY4DxwhHfSbDUZ/J3Gf0mQxHfSbDUZ+JcLzoMxmO+kyGoz6T4ajPZDgOHCMc9ZkMR30mw1GfyXDUZzIc9ZkIx6s+E/FmV30mw1GfyXDUZzIcB46R+4w+k+Goz2Q46jMZjvpMhqM+E+F402cyHPWZDEd9JsNRn8lwHDhGOOozGY76TIajPpPhqM9EvNlNn4lwvOszGY76TIajPhO5z9z1mQzHgWOEoz6T4ajPZDjqMxmO+kyGoz4T4fjQZzIc9ZkMR30mw1GfyXAcOEY46jMZjvpMxJs99JkMR30mw1GfSXC8HPSZxH3mctBnMhz1mQxHfSbDceAY4ajPZDjqMxmO+kyGoz6T4ajPRDge9ZkMR30mw1GfyXDUZzIcB44Jb3bUZzIc9ZkMR30mw1Gfydxn9JkIx5M+k+Goz2Q46jMZjvpMhuPAMcJRn8lw1GcyHPWZDEd9JsNRn4lwPOszGY76TIajPhPxZmd9JsNx4BjhqM9kOOozmfuMPpPhqM9kOOozEY5Dn8lw1GcyHPWZDEd9JsNx4BjhqM9kOOozGY76TIajPpPhqM9EOF70mYg3u+gzGY76TIajPpPhOHCM3Gf0mQxHfSbDUZ/JcNRnMhz1mQjHqz6T4ajPZDjqMxmO+kyG48AxwlGfyXDUZzIc9ZkMR30m4s2u+kyE402fyXDUZzIc9ZnIfeamz2Q4DhwjHPWZDEd9JsNRn8lw1GcyHPWZCMe7PpPhqM9kOOozGY76TIbjwDHCUZ/JcNRnIt7srs9kOOozGY76TITjQ5+J3Gce+kyGoz6T4ajPZDgOHCMc9ZkMR30mw1GfyXDUZzIc9ZkEx+tBn8lw1GcyHPWZDEd9JsNx4BjwZteDPpPhqM9kOOozGY76TOY+o89EOB71mQxHfSbDUZ/JcNRnMhwHjhGO+kyGoz6T4ajPZDjqMxmO+kyE40mfyXDUZzIc9ZmINzvpMxmOA8cIR30mw1Gfydxn9JkMR30mw1GfiXA86zMZjvpMhqM+k+Goz2Q4DhwjHPWZDEd9JsNRn8lw1GcyHPWZCMehz0S82dBnMhz1mQxHfSbDceAYuc/oMxmO+kyGoz6T4ajPZDjqMxGOF30mw1GfyXDUZzIc9ZkMx4FjhKM+k+Goz2Q46jMZjvpMxJtd9JkIx6s+k+Goz2Q46jOR+8xVn8lwHDhGOOozGY76TIajPpPhqM9kOOozEY43fSbDUZ/JcNRnMhz1mQzHgWOEoz6T4ajPRLzZTZ/JcNRnMhz1mQjHuz4Tuc/c9ZkMR30mw1GfyXAcOEY46jMZjvpMhqM+k+Goz2Q46jMRjg99JsNRn8lw1GcyHPWZDMeBY8KbPfSZDEd9JsNRn8lw1Gcy9xl9JsHxdtBnMhz1mQxHfSbDUZ/JcBw4RjjqMxmO+kyGoz6T4ajPZDjqMxGOR30mw1GfyXDUZxLe7HbUZzIcB44RjvpMhqM+k7nP6DMZjvpMhqM+E+F40mcyHPWZDEd9JsNRn8lwHDhGOOozGY76TIajPpPhqM9kOOozEY5nfSbizc76TIajPpPhqM9kOA4cI/cZfSbDUZ/JcNRnMhz1mQxHfSbCcegzGY76TIajPpPhqM9kOA4cIxz1mQxHfSbDUZ/JcNRnIt5s6DMRjhd9JsNRn8lw1Gci95mLPpPhOHCMcNRnMhz1mQxHfSbDUZ/JcNRnIhyv+kyGoz6T4ajPZDjqMxmOA8cIR30mw1GfiXizqz6T4ajPZDjqM5Hr402fyXDUZzIc9ZkMR30mw3HgGOGoz0T2nps+k+Goz2Q46jOZ66M+E+F412cyHPWZDEd9JsNRn8lwHDgm9p67PpPhqM9kOOozGY76TOY+o89EOD70mQxHfSbDUZ/JcNRnMhwHjhGO+kyGoz6T4ajPZDjqMxmO+szXOP54cvD26R/S9n/meD/M22eu19s7mcN94dP329sXud8vPz87bn9hnLfO/BbGx/vP+LiPv2Es/uTT5f1PPt3+NrofP3wZh+tfH76M0/g45/P2pG8S0LwF7JsENATUO6B5K+M3CWjeLvpNApq35H6TgOZtz98koHlr+fcI6KjvNw+ISWgeEJPQPCAmoXlAQ0C9A2ISmgfEJDQPiEloHhCT0DwgJqF3QCcmoXlATELzgJiE5gExCc0DGgLqHRCT0DwgJqF5QExC84CYhOYBMQm9AzozCc0DYhKaB8QkNA+ISWge0BBQ74CYhOYBMQnNA2ISmgfEJDQPiEnoHdBgEpoHxCQ0D4hJaB4Qk9A8oCGg3gExCc0DYhKaB8QkNA+ISWgeEJPQO6ALk9A8ICYhH9DzwzjuF3Jge+b6/vbMB+abM9fK/wHmT1+ifb8o2tsz1523Z64Ob89cw92c+VVp3Xxvueqh2zPXQ7dnroduz3xgvvk9VA/dnrkeuj1zPXR75nro9sz10M2Z3/TQ7Znrodsz10O3Z66Hbs98YL45cz10e+Z66PbM9dDtmeuhm7vcmx66OfO7Hro9cz10e+Z66Ob30Lseuj3zgfnmzPXQ7Znrodsz10O3Z66Hbs9cD92c+UMP3Z65Hro9cz10e+Z66PbMB+abM9dDt2euh27uch966PbM9dDtmeuhWzN/HPTQre+hj4Meuj1zPXR75nro9swH5psz10O3Z66Hbs9cD92euR66PXM9dHPmRz10e+Z66PbM9dDtmeuh2zMfmG/tco966PbM9dDtmeuh2zPXQ7e/h+qhmzM/6aHbM9dDt2euh27PXA/dnvnAfHPmeuj2zPXQ7Znrodsz10O3Z66Hbs78rIduz1wP3Z65Hrq5yz3rodszH5hvzlwP3Z65Hrr9PVQP3Z65Hro9cz10c+ZDD92euR66PXM9dHvmeuj2zAfmmzPXQ7dnroduz1wP3Z65Hro9cz10c+YXPXRzl3vRQ7dnroduz1wP3Z75wHzze6geuj1zPXR75nro9sz10O2Z66GbM7/qodsz10O3Z66Hbs9cD92e+cB8c+Z66PbM9dDtmeuh2zPXQzd3uVc9dHPmNz10e+Z66PbM9dDN76E3PXR75gPzzZnrodsz10O3Z66Hbs9cD92euR66OfO7Hro9cz10e+Z66PbM9dDtmQ/MN2euh27PXA/d3OXe9dDtmeuh2zPXQzdn/tBDN7+HPvTQ7Znrodsz10O3Zz4w35y5Hro9cz10e+Z66PbM9dDtmeuhGzN/HA566PbM9dDtmeuh2zPXQ7dnPjDf1uX+YK6Hbs9cD92euR66PXM9dPt7qB66OfOjHro9cz10e+Z66PbM9dDtmQ/MN2euh27PXA/dnrkeuj1zPXR75nro5sxPeuj2zPXQ7ZnroZu73JMeuj3zgfnmzPXQ7ZnrodvfQ/XQ7Znrodsz10M3Z37WQ7dnroduz1wP3Z65Hro984H55sz10O2Z66HbM9dDt2euh27PXA/dnPnQQzd3uUMP3Z65Hro9cz10e+YD883voXro9sz10O2Z66HbM9dDt2euh27O/KKHbs9cD92euR66PXM9dHvmA/PNmeuh2zPXQ7dnroduz1wP3dzlXvTQzZlf9dDtmeuh2zPXQze/h1710O2ZD8w3Z66Hbs9cD92euR66PXM9dHvmeujmzG966PbM9dDtmeuh2zPXQ7dnPjDfnLkeuj1zPXRzl3vTQ7dnroduz1wP3Zz5XQ/d/B5610O3Z66Hbs9cD92e+cB8c+Z66PbM9dDtmeuh2zPXQ7dnroduzvyhh27PXA/dnrkeuj1zPXR75gPzrV3uQw/dnrkeuj1zPXR75nro9vdQPXRr5seDHro9cz10e+Z66PbM9dDtmQ/MN2euh27PXA/dnrkeuj1zPXR75nro5syPeuj2zPXQ7ZnroVu73ONRD92e+cB8c+Z66PbM9dDt76F66PbM9dDtmeuhmzM/6aHbM9dDt2euh27PXA/dnvnAfHPmeuj2zPXQ7Znrodsz10O3Z66Hbs78rIdu7nLPeuj2zPXQ7ZnrodszH5hvfg/VQ7dnroduz1wP3Z65Hro9cz10c+ZDD92euR66PXM9dHvmeuj2zAfmmzPXQ7dnroduz1wP3Z65Hrq5yx166ObML3ro9sz10O2Z/9/tvdtuW2ubHnsv63gdjM07dhcTLHSChaCBRhJkB+Sg7z3y70lav02K0piPX5XF6gBBTzQ/bao+i3xKsuwObX8OXdyh/cxL5u3M3aH9zN2h/czdof3M3aH9zN2h7cxXd2g/c3doP3N3aD9zd2g/85J5O3N3aD9zd2h7y13dof3M3aH9zN2h7cw3d2j7c+jmDu1n7g7tZ+4O7WdeMm9n7g7tZ+4O7WfuDu1n7g7tZ+4ObWe+u0P7mbtD+5m7Q/uZu0P7mZfMu1vu7g7tZ+4O7WfuDu1n7g7tfw51h7YzP9yh/czdof3M3aH9zN2h/cxL5u3M3aH9zN2h/czdof3M3aH9zN2h3cynwR3az9wd2s/cHdrdcqfBHdrPvGTeztwd2s/cHdr/HOoO7WfuDu1n7g5tZz66Q/uZu0P7mbtD+5m7Q/uZl8zbmbtD+5m7Q/uZu0P7mbtD+5m7Q9uZT+7Q9pY7uUP7mbtD+5m7Q/uZl8zbn0Pdof3M3aH9zN2h/czdof3M3aHtzGd3aD9zd2g/c3doP3N3aD/zknk7c3doP3N3aD9zd2g/c3doe8ud3aHtzMsd2s/cHdrP3B3a/hxa7tB+5iXzdubu0H7m7tB+5u7Qfubu0H7m7tB25os7tJ+5O7SfuTu0n7k7tJ95ybyduTu0n7k7tL3lLu7Qfubu0H7m7tB25qs7tP05dHWH9jN3h/Yzd4f2My+ZtzN3h/Yzd4f2M3eH9jN3h/Yzd4e2M9/cof3M3aH9zN2h/czdof3MS+bdLXdzh/Yzd4f2M3eH9jN3h/Y/h7pD25nv7tB+5u7Qfubu0H7m7tB+5iXzdubu0H7m7tB+5u7Qfubu0H7m7tB25oc7tJ+5O7SfuTu0veUe7tB+5iXzdubu0H7m7tD+51B3aD9zd2g/c3doN/N5cIf2M3eH9jN3h/Yzd4f2My+ZtzN3h/Yzd4f2M3eH9jN3h/Yzd4e2Mx/dod0tdx7dof3M3aH9zN2h/cxL5u3Poe7Qfubu0H7m7tB+5u7Qfubu0Hbmkzu0n7k7tJ+5O7SfuTu0n3nJvJ25O7SfuTu0n7k7tJ+5O7S95U7u0Hbmszu0n7k7tJ+5O7T9OXR2h/YzL5m3M3eH9jN3h/Yzd4f2M3eH9jN3h7YzL3doP3N3aD9zd2g/c3doP/OSeTtzd2g/c3doe8std2g/c3doP3N3aDvzxR3a/hy6uEP7mbtD+5m7Q/uZl8zbmbtD+5m7Q/uZu0P7mbtD+5m7Q9uZr+7Qfubu0H7m7tB+5u7QfuYl8+6Wu7pD+5m7Q/uZu0P7v567Q/uZu0PbmW/u0H7m7tB+5u7Qfubu0PbXilvJvJ25O7SfuTu0/+u5O7SfuTu0n7k7tJ357g7tZ+4O7WfuDm1/rbi7Q/uZl8zbmbtD+5m7Q/ufQ92h/czdof3M3aHtzA93aD9zd2g/c3doP3N3aD/zknk7c3doP3N3aD9zd2ie+baP17e8z78yd4e+i/lY8+Xuji8N6wH1dRkuH8m6zONr6jfw7fslib1M1OnHg299jvNy/TjmpcbXD/7u0437lXzW4H7+Wj7d5l/Lp7v/z/K5LlfY61a/+rQpfC2fpc8/y+cxX2G/+qhvP3i6fjN5nsb17QdP63o1s+4PHlw/2B2/jKYaDDJeqvilsjh5qb6b2YbjYmabp791qUxqXqr4pbIZeqm+mzmW6WLmOMYHD57qekGmtf7WDbRyegM/9QaOdllv4JkbuF81zsPf2gujJdkb+Lk30Pb9lW9gDdcbuDx4y9Ny1DWDjL9+l2S0qntT0sFsLC+Vlyp9qUz7Xqr4pTLte6nSFXY07Xup4pfKtO+l+m5m/+F8r+3XSWeC96a866ZMpnJvyvtuiknbm/K+m2J69qZ8N/Ohb34Mx/XB4zj/eq3s1F6r33Ctymvltfr4tcr9uMpk1vYGfu4NtIF7Az/3BhrMvYFnbmDsB6Ym67o38HNvoNX+C9/A+Qpknpe/uVlnq7035X03xWrvTUm/WJ8N/F6q+KUy73up4peqvFReqvBOm+31Xqr4pTLB/1mXaluPK+y9HuWnj/yN0Qd/X282lXtTvpvJ/S2Y2frtpYpfKoO2lyp9qcr27aX6bib3V6vKTO6lil8qM7mX6ruZB39jomzf3pT33ZTypnhT3nVTrNTelPfdFNOzN+W7meRfrCo7tdfqN1wrS7XX6sS1yv1QSZm1vYGfegMXG7g38HNvoMHcG3jmBsZ+YGqxrnsDP/cGWu2/8g38nF9HvJSXykuVvlR+L8BL9d1M7scbFr9t4KWKXyq/aeCl+tyy4fcXvIGfewP9/oI38FPLxur3F7yBn3sD/f7CF76Byd9wtPp9AG/K+26Kvd6bkn6xvpaXykuVvlT2ei9V/FLZ671U8Z1mr/dSxS+VCf59l2q/ft9t3L9xfnWpvoO0JGdAbgbREEi7Xgik2evjIMf9BkirUAhkCTID0vUfAuniDYF05YWetV02IZAumwzI3WUTAumyCYF02YRAumxCIEuQGZAumxBIl00IpMsmBNJl87e/EfgdpMsmA/Jw2YRAumxCIF02IZDPu2yO6YKmjuWfH/0dTYnmHprnXR8P0TzvnniI5nkXwkM0z/ua/yGa530V/wDNMjzv6/KHaJ73lfZDNM/72vkhGl8N30VTormHxlfDd9H4avguGl8N30Xjq+G7aHw1fA/N6Kvhu2h8NXwXja+G76Lx1fBdNCWae2h8NXwXja+G76Lx1fBdNL4avovGV8P30Ey+Gr6LxlfDd9H4avguGl8N30VTz4rmJYtfPpKX5+l68OhxWKfrhzKs84+3Pt/83R5jTZdfwzdW/fitIXPd/DSn68+Vjtv++sHfJT3t6/I/SdLTLoQ/SdLTbpUPS1q2H5K28ZGkfV8vDz+G5W9KetrV9CdJetr99gdJmp92Sb6WNL3CeOdl8nR1VNP2423f/FVzSw0XQ0tN9frB36E/7Ub9TOhPu34/E/rT7urPhF5C74fuAv8E6C7qT4DuQv4E6C7eT4Dugu2HXi7ST4DuIv0E6C7ST4DuIv0E6CX0fugu0k+A7iL9BOgu0k+A7iL9BOgu0n7oi4v0E6C7SD8Buov0E6C7SD8Begm9H7qL9BOgu0g/AbqL9BOgu0g/AbqLtB/66iL9BOgu0k+A7iL9BOgu0k+AXkLvh+4i/QToLtJPgO4i/QToLtJPgO4i7Ye+uUg/AbqL9BOgu0g/AbqL9BOgl9D7obtIPwG6i/QToLtIPwG6i/QToLtI3wd9HeoCff32mf3EcXdkZji6GzMcnYIZjq67d3Jcrr+rd91ucCw5Rji6wTIcnVUZji6lDEfHT+b52j0T4Xi4ZzIc3TMZju6ZyPPM4Z7JcCw5Rji6ZzIc3TMZju6ZDEf3TIajeybBcR3cMxmO7pkMR/dMhqN7JsOx5Bjh6J7JcHTPJLrZOrhnMhzdMxmO7pkIx9E9E3meGd0zGY7umQxH90yGY8kxwtE9k+HonslwdM9kOLpnMhzdMxGOk3smw9E9k+HonslwdM9kOJYcE91scs9kOLpnMhzdMxmO7pnM84x7JsJxds9kOLpnMhzdMxmO7pkMx5JjhKN7JsPRPZPh6J7JcHTPZDi6ZyIcyz2T4eieyXB0z0S6WblnMhxLjhGO7pkMR/dM5nnGPZPh6J7JcHTPRDgu7pkMR/dMhqN7JsPRPZPhWHKMcHTPZDi6ZzIc3TMZju6ZDEf3TITj6p6JdLPVPZPh6J7JcHTPZDiWHCPPM+6ZDEf3TIajeybD0T2T4eieiXDc3DMZju6ZDEf3TIajeybDseQY4eieyXB0z2Q4umcyHN0zkW62uWciHHf3TIajeybD0T0TeZ7Z3TMZjiXHCEf3TIajeybD0T2T4eieyXB0z0Q4Hu6ZDEf3TIajeybD0T2T4VhyjHB0z2Q4umci3exwz2Q4umcyHN0zCY7b4J5JPM9sg3smw9E9k+HonslwLDlGOLpnMhzdMxmO7pkMR/dMhqN7JsJxdM9kOLpnMhzdMxmO7pkMx5JjopuN7pkMR/dMhqN7JsPRPZN5nnHPRDhO7pkMR/dMhqN7JsPRPZPhWHKMcHTPZDi6ZzIc3TMZju6ZDEf3TITj7J7JcHTPZDi6ZyLdbHbPZDiWHCMc3TMZju6ZzPOMeybD0T2T4eieiXAs90yGo3smw9E9k+HonslwLDlGOLpnMhzdMxmO7pkMR/dMhqN7JsJxcc9EutninslwdM9kOLpnMhxLjpHnGfdMhqN7JsPRPZPh6J7JcHTPRDiu7pkMR/dMhqN7JsPRPZPhWHKMcHTPZDi6ZzIc3TMZju6ZSDdb3TMRjpt7JsPRPZPh6J6JPM9s7pkMx5JjhKN7JsPRPZPh6J7JcHTPZDi6ZyIcd/dMhqN7JsPRPZPh6J7JcCw5Rji6ZzIc3TORbra7ZzIc3TMZju6ZCMfDPRN5njncMxmO7pkMR/dMhmPJMcLRPZPh6J7JcHTPZDi6ZzIc3TMJjvvgnslwdM9kOLpnMhzdMxmOJcdAN9sH90yGo3smw9E9k+Honsk8z7hnIhxH90yGo3smw9E9k+HonslwLDlGOLpnMhzdMxmO7pkMR/dMhqN7JsJxcs9kOLpnMhzdM5FuNrlnMhxLjhGO7pkMR/dM5nnGPZPh6J7JcHTPRDjO7pkMR/dMhqN7JsPRPZPhWHKMcHTPZDi6ZzIc3TMZju6ZDEf3TIRjuWci3azcMxmO7pkMR/dMhmPJMfI8457JcHTPZDi6ZzIc3TMZju6ZCMfFPZPh6J7JcHTPZDi6ZzIcS44Rju6ZDEf3TIajeybD0T0T6WaLeybCcXXPZDi6ZzIc3TOR55nVPZPhWHKMcHTPZDi6ZzIc3TMZju6ZDEf3TITj5p7JcHTPZDi6ZzIc3TMZjiXHCEf3TIajeybSzTb3TIajeybD0T0T4bi7ZyLPM7t7JsPRPZPh6J7JcCw5Rji6ZzIc3TMZju6ZDEf3TIajeybC8XDPZDi6ZzIc3TMZju6ZDMeSY6KbHe6ZDEf3TIajeybD0T2TeZ5xzyQ4HoN7JsPRPZPh6J7JcHTPZDiWHCMc3TMZju6ZDEf3TIajeybD0T0T4Ti6ZzIc3TMZju6ZRDc7RvdMhmPJMcLRPZPh6J7JPM+4ZzIc3TMZju6ZCMfJPZPh6J7JcHTPZDi6ZzIcS44Rju6ZDEf3TIajeybD0T2T4eieiXCc3TORbja7ZzIc3TMZju6ZDMeSY+R5xj2T4eieyXB0z2Q4umcyHN0zEY7lnslwdM9kOLpnMhzdMxmOJccIR/dMhqN7JsPRPZPh6J6JdLNyz0Q4Lu6ZDEf3TIajeybyPLO4ZzIcS44Rju6ZDEf3TIajeybD0T2T4eieiXBc3TMZju6ZDEf3TIajeybDseQY4eieyXB0z0S62eqeyXB0z2Q4umciHDf3TOR5ZnPPZDi6ZzIc3TMZjiXHCEf3TIajeybD0T2T4eieyXB0z0Q47u6ZDEf3TIajeybD0T2T4VhyTHSz3T2T4eieyXB0z2Q4umcyzzPumQjHwz2T4eieyXB0z2Q4umcyHEuOEY7umQxH90yGo3smw9E9k+HonglwHIeX/xFkBqSLJgTSSRNIZ99AumlCIEuQGZCumhBIZ03oycZdEwLpsAmBdNlkQI4umxBIl00IpMsmBNJlEwJZgsyAdNmEQLpsQiBdNiGQLpsQSJdNBuTksslktMllEwLpsgmBdNmEQJYgM082LpsQSJdNCKTLJgTSZRMC6bLJgJxdNiGQLpsQSJdNCKTLJgSyBJkB6bIJgXTZhEC6bEIgXTaZjDa7bDIgy2UTAumyCYF02WSebMplEwJZgsyAdNmEQLpsQiBdNiGQLpsQSJdNBuTisgmBdNmEQLpsQiBdNiGQJcgMSJdNCKTLJpPRFpdNCKTLJgTSZZMBubpsMk82q8smBNJlEwLpsgmBLEFmQLpsQiBdNiGQLpsQSJdNCKTLJgNyc9mEQLpsQiBdNiGQLpsQyBJkJKNtLpsQSJdNCKTLJgTSZRN6snHZZEDuLpsQSJdNCKTLJgTSZRMCWYLMgHTZhEC6bEIgXTYhkC6bEEiXTQbk4bIJgXTZhEC6bDIZ7XDZhECWIDMgXTahr5EumxBIl00IpMsmBNJlEwH5glKQGZAum8jLn3Fw2YRAumxCIEuQma+RLpsQSJdNCKTLJgTSZRMC6bLJgBxdNpmXP6PLJgTSZRMC6bIJgSxBZp5sXDYhkC6bEEiXTQikyyYE0mWTATm5bEIgXTYhkC6bEEiXTQhkCTID0mXzPpDbfiHy8r/ON0A+77KZ1+0Csobpnx79F5vnHSuP2Xyl/VHjenl0zfsDNvt2edP7/uqPX20XMl9pUHyIzHH9qI+9/onMjS9M03K5YTVt//SF6cZ1rGG9Xsepfv0qNn+l7fGnMP9KM+VPYf6VFs2fwvwrjZ8/hXnJvJ35V5pUfwrzr7S+/hTmX2nV/SnMn3YtfiJzd2g783KH9jN3h/Yzd4f2M3eH9jMvmbczd4f2M3eH9jN3h/Yzd4f2M3eHtjNf3KH9zN2h/czdof3M3aH9zEvm7czdof3M3aH9zN2h/czdof3M3aHtzFd3aD9zd2g/c3doP3N3aD/zknk7c3doP3N3aD9zd2g/c3doP3N3aDvzzR3az9wd2s/cHdrP3B3az7xk3s7cHdrP3B3az9wd2s/cHdrP3B36HuaPfln57rSMYHQtRjA6ACMY3XTvwvjgt3TuJcYERpdXBKNjKoLRfRTB6OSJPFO7YhIYD1dMBKMrJoLRFZN4ijlcMRGMJcYERldMBKMrJoLRFRPB6IqJYHTFBDBOgysmgtEVE8HoiolgdMVEMJYYExhdMRGMrphAKJsGV0wEoysmgtEVk8A4umISTzGjKyaC0RUTweiKiWAsMSYwumIiGF0xEYyumAhGV0wEoysmgXFyxUQwumIiGF0xEYyumAjGEmMglE2umAhGV0wEoysmgtEVE3mKccUkMM6umAhGV0wEoysmgtEVE8FYYkxgdMVEMLpiIhhdMRGMrpgIRldMAmO5YiIYXTERjK6YRCgrV0wEY4kxgdEVE8Hoiok8xbhiIhhdMRGMrpgExsUVE8HoiolgdMVEMLpiIhhLjAmMrpgIRldMBKMrJoLRFRPB6IpJYFxdMYlQtrpiIhhdMRGMrpgIxhJj4inGFRPB6IqJYHTFRDC6YiIYXTEJjJsrJoLRFRPB6IqJYHTFRDCWGBMYXTERjK6YCEZXTASjKyYRyjZXTALj7oqJYHTFRDC6YhJPMbsrJoKxxJjA6IqJYHTFRDC6YiIYXTERjK6YBMbDFRPB6IqJYHTFRDC6YiIYS4wJjK6YCEZXTCKUHa6YCEZXTASjKyaAcR5cMYGnmHlwxUQwumIiGF0xEYwlxgRGV0wEoysmgtEVE8HoiolgdMUkMI6umAhGV0wEoysmgtEVE8FYYgyEstEVE8HoiolgdMVEMLpiIk8xrpgExskVE8HoiolgdMVEMLpiIhhLjAmMrpgIRldMBKMrJoLRFRPB6IpJYJxdMRGMrpgIRldMIpTNrpgIxhJjAqMrJoLRFRN5inHFRDC6YiIYXTEJjOWKiWB0xUQwumIiGF0xEYwlxgRGV0wEoysmgtEVE8HoiolgdMUkMC6umEQoW1wxEYyumAhGV0wEY4kx8RTjiolgdMVEMLpiIhhdMRGMrpgExtUVE8HoiolgdMVEMLpiIhhLjAmMrpgIRldMBKMrJoLRFZMIZasrJoFxc8VEMLpiIhhdMYmnmM0VE8FYYkxgdMVEMLpiIhhdMRGMrpgIRldMAuPuiolgdMVEMLpiIhhdMRGMJcYERldMBKMrJhHKdldMBKMrJoLRFZPAeLhiEk8xhysmgtEVE8HoiolgLDEmMLpiIhhdMRGMrpgIRldMBKMrJoCxBldMBKMrJoLRFRPB6IqJYCwx/v1QVoMrJoLRFRPB6IqJYHTFRJ5iXDEJjKMrJoLRFRPB6IqJYHTFRDCWGBMYXTERjK6YCEZXTASjKyaC0RWTwDi5YiIYXTERjK6YRCibXDERjCXGBEZXTASjKybyFOOKiWB0xUQwumISGGdXTASjKyaC0RUTweiKiWAsMSYwumIiGF0xEYyumAhGV0wEoysmgbFcMYlQVq6YCEZXTASjKyaCscSYeIpxxUQwumIiGF0xEYyumAhGV0wC4+KKiWB0xUQwumIiGF0xEYwlxgRGV0wEoysmgtEVE8HoikmEssUVk8C4umIiGF0xEYyumMRTzOqKiWAsMSYwumIiGF0xEYyumAhGV0wEoysmgXFzxUQwumIiGF0xEYyumAjGEmMCoysmgtEVkwhlmysmgtEVE8Hoiklg3F0xiaeY3RUTweiKiWB0xUQwlhgTGF0xEYyumAhGV0wEoysmgtEVk8B4uGIiGF0xEYyumAhGV0wEY4kxEMoOV0wEoysmgtEVE8Hoiok8xbhiAhiXwRUTweiKiWB0xUQwumIiGEuMCYyumAhGV0wEoysmgtEVE8HoiklgHF0xEYyumAhGV0wglC2jKyaCscSYwOiKiWB0xUSeYlwxEYyumAhGV0wC4+SKiWB0xUQwumIiGF0xEYwlxgRGV0wEoysmgtEVE8HoiolgdMUkMM6umEQom10xEYyumAhGV0wEY4kx8RTjiolgdMVEMLpiIhhdMRGMrpgExnLFRDC6YiIYXTERjK6YCMYSYwKjKyaC0RUTweiKiWB0xSRCWbliEhgXV0wEoysmgtEVk3iKWVwxEYwlxgRGV0wEoysmgtEVE8HoiolgdMUkMK6umAhGV0wEoysmgtEVE8FYYkxgdMVEMLpiEqFsdcVEMLpiIhhdMQmMmysm8RSzuWIiGF0xEYyumAjGEmMCoysmgtEVE8HoiolgdMVEMLpiEhh3V0wEoysmgtEVE8HoiolgLDEGQtnuiolgdMVEMLpiIhhdMZGnGFdMAuPhiolgdMVEMLpiIhhdMRGMJcYERldMBKMrJoLRFRPB6IqJYHTFBDCugysmgtEVE8HoigmEsnVwxUQwlhgTGF0xEYyumMhTjCsmgtEVE8HoiklgHF0xEYyumAhGV0wEoysmgrHEmMDoiolgdMVEMLpiIhhdMRGMrpgExskVkwhlkysmgtEVE8HoiolgLDEmnmJcMRGMrpgIRldMBKMrJoLRFZPAOLtiIhhdMRGMrpgIRldMBGOJMYHRFRPB6IqJYHTFRDC6YhKhbHbFJDCWKyaC0RUTweiKSTzFlCsmgrHEmMDoiolgdMVEMLpiIhhdMRGMrpgExsUVE8HoiolgdMVEMLpiIhhLjAmMrpgIRldMIpQtrpgIRldMBKMrJoFxdcUknmJWV0wEoysmgtEVE8FYYkxgdMVEMLpiIhhdMRGMrpgIRldMAuPmiolgdMVEMLpiIhhdMRGMJcZAKNtcMRGMrpgIRldMBKMrJvIU44pJYNxdMRGMrpgIRldMBKMrJoKxxJjA6IqJYHTFRDC6YiIYXTERjK6YBMbDFRPB6IqJYHTFJELZ4YqJYCwxJjC6YiJfG10xEYyumAhGV0wEoysmgHEbXDERjK6YwAuebXDFRDC6YiIYS4yJr42umAhGV0wEoysmgtEVE8HoiklgHF0xiRc8oysmgtEVE8HoiolgLDEmnmJcMRGMrpgIRldMBKMrJoLRFZPAOLliIhhdMRGMrpgIRldMBGOJMYHRFfMejNt+4fHyv843MD7tinl5yHJ99Do8ALkuw+WTXJd5fA3yBpB9v5SMeT+mHw++9VHPy/XjmJcaXz/4L0VPu5D+HEVPu77+HEVPu+z+GEXz065GjKJ1ueJbt7qh6GkX6Z+j6GnXLkfRMV/xDfuDB0/X73rN07i+/eBpXa+s1/3Bg1920+Wl/3Hjlf/8tHPee/Khe1Leky97T7bhuLB+eeL4e/fkaYOM9+RD98Ti9HXvybFMF9bHMT548FRX5dNaf+9S2ci8VPFLZdXzUn2/VPtVzDz8zZfTdkgvVfpSleX0z7pUNVwv1fLgLU/LUdctP97I5mWT/brygyGnDMPek/fcE8Ow9+Q996S8J1/2ngSDXxmGvSfvuSeG4a97T/YfFvfabowYA+4Tyze0PrF8g+jzyl8Ml19X/odq+HBcHzyO842bYuX0przvptg5vSn/eHDwZwEWo6iXKn6pykvlpUpfKnOrl+r7pcr9gMlim/VSxS+VzfePulTzeGU9L397pdl8n1i+zffryg++ll3Nw96T99wT47D35D33xDT8he9Jbpms1l7vyXvuSXlPPvmebOtxxbfXoyzykb/M9ejv3ayG1q8rP/hz8qvt1HvynntiDvWevOeeWE6/7j0J/n2K1cjqPXnHPdmMrF/3njz6AezNcvrE8s2hTyzfxvnE8kv5X1Z+9G9TbFZOb8r7boqd05vyjwcHv2O/GUW9VPFLZUH1UsUvlbnVS/X9UuV+wGS3zXqp4pfK5vtnXapP+gWPu3nYe/Kee2JJ/rr3JPiN5r28J96Td9wTk/PXvSefNc9367SXKn6prNNeqvg8t057qeKXyjr9R12q6K/bOKzITyzf2vt15Qdfyx7WXu/Je+6Jtdd78p57Ut6Tr3tPcsvksPZ6T95zT5434O7X762M+zd0r+7JX2yet0M+ZvO8Oe0xm+etQo/Y7MPzRpPXbMb9FpvnbQqP2Tzvjn7M5nm342M2JZu7bJ53Izx+nvJ18X02vi6+z8bXxffZ+Lr4LpvR18X32fi6+D4bXxffZ+Pr4vtsSjZ32fi6+D4bf+D3//n1+wp/sfHnVu+z8ccv77Pxpwjvspn8Ibv7bL7U6+Lj+tku4/BPbP76bL/UK92Hn+2Xeu368LOtp/psv9Try4ef7Zd6xfjws/1SrwEffrZf6lXdw8/2S71Oe/TZzl/qldfDz/apXkvNT/Vaan6q11JzPdVn+1Svpeanei01P9VrqfmpXkvNT/Vaqp7qtVQ91WupeqrXUvVUr6WqnuqzfarXUvVUr6XqqV5L1VO9lqqnei21PNVrqeWpXkst7NdS01rXz/Z49Ojj+g+dj8P04y9pzjf/luY4rNdvDQ+vPuz59sdx/fuf4zzsDx581PVHeo5XH/S8XJizX9F9TeYl8zDzabr+uMQ0vfq72TcfvK77RdC6TcMNQeyXwgpa2K/eFbSwB4eCFvZGUtDCnnUKWtlLVEErezwraHXvwwUZB+CCSkFsQZYEuCBLAlyQJQEuyJIAF2RJYAvaLAlwQZYEuCBLAlyQJQEuqBTEFmRJgAuyJMAFWRLggiwJcEGWBLag3ZIAF2RJgAuyJMAFWRLggkpBbEGWBLggSwJckCUBLsiSABdkSWALOiwJcEGWBLggSwJckCUBLqgUxBZkSYALsiTABVkS4IIsCXBBlgS0oGOwJMAFWRLggiwJcEGWBLigUhBbkCUBLsiSABdkSYALsiTABVkS2IJGSwJckCUBLsiSABdkSYALKgWxBVkS4IIsCXBBlgS4IEtCXNB6XD/FrW4xNw6kmT/6d7KOyb3fz9wJ38/cVd7P3KHdz7xk3s7cOdzP3IXbz9zR2s/cHdrP3B3aznx2h/Yzd4f2M3eH9jN3h/YzL5m3M3eH9jN3h/Yzd4f2M3eH9jN3h7YzL3doP3N3aD9zd2g/c3doP/OSeTtzd2g/c3doP3N3aD9zd2g/c3doO/PFHdrP3B3az9wd2s/cHdrPvGTeztwd2s/cHdrP3B3az9wd2s/cHdrOfHWH9jN3h/Yzd4f2M3eH9jMvmbczd4f2M3eH9jN3h/Yzd4f2M3eHtjPf3KH9zN2h/czdof3M3aH9zEvm7czdof3M3aH9zN2h/czdof3M3aHtzHd3aD9zd2g/c3doP3N3aD/zknk7c3domnn2H7/YHa1wQS5cuCDnMFyQ25kt6HBowwW5yuGCnPBwQe59uKBSEFuQJQEuyJIAF2RJgAuyJMAFWRLIgsZhsCTABVkS4IIsCXBBlgS4oFIQW5AlAS7IkgAXZEmAC7IkwAVZEtiCRksCXJAlAS7IkgAXZEmACyoFsQVZEuCCLAlwQZYEuCBLAlyQJYEtaLIkwAVZEuCCLAlwQZYEuKBSEFuQJQEuyJIAF2RJgAuyJMAFWRLYgmZLAlyQJQEuyJIAF2RJgAsqBbEFWRLggiwJcEGWBLggSwJckCWBLagsCXBBlgS4IEsCXJAlAS6oFMQWZEmAC7IkwAVZEuCCLAlwQZaEuKBtnC6f4javbz94GecLvGVc6ldBiyUBLsiSABdkSYALsiTABZWC2IIsCXBBlgS4IEsCXJAlAS7IksAWtFoS4IIsCXBBlgS4IEsCXFApiC3IkgAXZEmAC7IkwAVZEuCCLAlsQZslAS7IkgAXZEmAC7IkwAWVgtiCLAlwQZYEuCBLAlyQJQEuyJLAFrRbEuCCLAlwQZYEuCBLAlxQKYgtyJIAF2RJgAuyJMAFWRLggiwJbEGHJQEuyJIAF2RJgAuyJMAFlYLYgiwJcEGWBLggSwJckCUBLsiSgBY0DpYEuCBLAlyQJQEuyJIAF1QKYguyJMAFWRLggiwJcEGWBLggSwJb0GhJgAuyJMAFWRLggiwJcEGlILYgSwJckCUBLsiSABdkSYALsiSwBU2WBLggSwJckCUBLsiSABdUCmILsiTABVkS4IIsCXBBlgS4IEsCW9BsSYALsiTABVkS4IIsCXBBpSC2IEsCXJAlAS7IkgAXZEmAC7IksAWVJQEuyJIAF2RJgAuyJMAFlYLYgiwJcEGWBLggSwJckCUBLsiSwBa0WBLggiwJcEGWBLggSwJcUCmILciSABdkSYALsiTABVkS4IIsCWxBqyUBLsiSABdkSYALsiTABZWC2IIsCXBBlgS4IEsCXJAlAS7IksAWtFkS4IIsCXBBlgS4IEsCXFApiC3IkgAXZEmAC7IkwAVZEuCCLAlsQbslAS7IkgAXZEmAC7IkwAWVgtiCLAlwQZYEuCBLAlyQJQEuyJLAFnRYEuCCLAlwQZYEuCBLAlxQKYgtyJIAF2RJgAuyJMAFWRLggiwJaEHTYEmAC7IkwAVZEuCCLAlwQaUgtiBLAlyQJQEuyJIAF2RJgAuyJLAFjZYEuCBLAlyQJQEuyJIAF1QKYguyJMAFWRLggiwJcEGWBLggSwJb0GRJgAuyJMAFWRLggiwJcEGlILYgS0Jc0HpcP8WthhvMjQNp5uNRx+XBx3Hrnrv3+5k74fuZu8rbmc8O7X7mbud+5s7hfuYu3H7mJfN25u7Qfubu0H7m7tB+5u7Qfubu0Hbm5Q7tZ+4O7WfuDu1n7g7tZ14yb2fuDu1n7g7tZ+4O7WfuDu1n7g5tZ764Q/uZu0P7mbtD+5m7Q/uZl8zbmbtD+5m7Q/uZu0P7mbtD+5m7Q9uZr+7Qfubu0H7m7tB+5u7QfuYl83bm7tB+5u7Qfubu0H7m7tB+5u7QduabO7SfuTu0n7k7tJ+5O7Sfecm8nbk7tJ+5O7SfuTu0n7k7tJ+5O7Sd+e4O7WfuDu1n7g7tZ+4O7WdeMm9n7g7tZ+4O7WfuDu1n7g7tZ+4ObWd+uEP7mbtD+5m7Q9PMp2leLp/iC9+3H7yu+0XQun0j9osgRytcUCmILcg5DBfkdoYLcmjDBbnK4YKc8GhB8+DehwsyDsAFWRLggiwJcEGlILYgSwJckCUBLsiSABdkSYALsiSwBY2WBLggSwJckCUBLsiSABdUCmILsiTABVkS4IIsCXBBlgS4IEsCW9BkSYALsiTABVkS4IIsCXBBpSC2IEsCXJAlAS7IkgAXZEmAC7IksAXNlgS4IEsCXJAlAS7IkgAXVApiC7IkwAVZEuCCLAlwQZYEuCBLAltQWRLggiwJcEGWBLggSwJcUCmILciSABdkSYALsiTABVkS4IIsCWxBiyUBLsiSABdkSYALsiTABZWC2IIsCXBBloS4oG2cLp/iNq9vP3gZ5wu8ZVzqhiBLAlyQJQEuyJLAFrRaEuCCLAlwQZYEuCBLAlxQKYgtyJIAF2RJgAuyJMAFWRLggiwJbEGbJQEuyJIAF2RJgAuyJMAFlYLYgiwJcEGWBLggSwJckCUBLsiSwBa0WxLggiwJcEGWBLggSwJcUCmILciSABdkSYALsiTABVkS4IIsCWxBhyUBLsiSABdkSYALsiTABZWC2IIsCXBBlgS4IEsCXJAlAS7IkoAWVIMlAS7IkgAXZEmAC7IkwAWVgtiCLAlwQZYEuCBLAlyQJQEuyJLAFjRaEuCCLAlwQZYEuCBLAlxQKYgtyJIAF2RJgAuyJMAFWRLggiwJbEGTJQEuyJIAF2RJgAuyJMAFlYLYgiwJcEGWBLggSwJckCUBLsiSwBY0WxLggiwJcEGWBLggSwJcUCmILciSABdkSYALsiTABVkS4IIsCWxBZUmAC7IkwAVZEuCCLAlwQaUgtiBLAlyQJQEuyJIAF2RJgAuyJLAFLZYEuCBLAlyQJQEuyJIAF1QKYguyJMAFWRLggiwJcEGWBLggSwJb0GpJgAuyJMAFWRLggiwJcEGlILYgSwJckCUBLsiSABdkSYALsiSwBW2WBLggSwJckCUBLsiSABdUCmILsiTABVkS4IIsCXBBlgS4IEsCW9BuSYALsiTABVkS4IIsCXBBpSC2IEsCXJAlAS7IkgAXZEmAC7IksAUdlgS4IEsCXJAlAS7IkgAXVApiC7IkwAVZEuCCLAlwQZYEuCBLAlrQMlgS4IIsCXBBlgS4IEsCXFApiC3IkgAXZEmAC7IkwAVZEuCCLAlsQaMlAS7IkgAXZEmAC7IkwAWVgtiCLAlwQZYEuCBLAlyQJQEuyJLAFjRZEuCCLAlwQZYEuCBLAlxQKYgtyJIAF2RJgAuyJMAFWRLggiwJbEGzJQEuyJIAF2RJiAtaj+unuNVwg7lxIM18POq4PPg4bt3zknk7cyd8P3NXeT9zh3Y/c7dzP3PncDvzcuH2M3e09jN3h/Yzd4f2My+ZtzN3h/Yzd4f2M3eH9jN3h/Yzd4e2M1/cof3M3aH9zN2h/czdof3MS+btzN2h/czdof3M3aH9zN2h/czdoe3MV3doP3N3aD9zd2g/c3doP/OSeTtzd2g/c3doP3N3aD9zd2g/c3doO/PNHdrP3B3az9wd2s/cHdrPvGTeztwd2s/cHdrP3B3az9wd2s/cHdrOfHeH9jN3h/Yzd4f2M3eH9jMvmbczd4f2M3eH9jN3h/Yzd4f2M3eHtjM/3KH9zN2h/czdof3M3aH9zEvm7czdof3M3aH9zN2h/czdof3M3aFp5tM0L5dPcTqmtx+8rvtF0Lp9I/aToHVwtMIFuXDhgpzDcEFuZ7igUhBbkKscLsgJDxfk3ocLMg7ABVkS2IJGSwJckCUBLsiSABdkSYALKgWxBVkS4IIsCXBBlgS4IEsCXJAlgS1osiTABVkS4IIsCXBBlgS4oFIQW5AlAS7IkgAXZEmAC7IkwAVZEtiCZksCXJAlAS7IkgAXZEmACyoFsQVZEuCCLAlwQZYEuCBLAlyQJYEtqCwJcEGWBLggSwJckCUBLqgUxBZkSYALsiTABVkS4IIsCXBBlgS2oMWSABdkSYALsiTABVkS4IJKQWxBlgS4IEsCXJAlAS7IkgAXZElgC1otCXBBlgS4IEsCXJAlIS5oG6fLp7jN69sPXsb5Am8Zl7ohqBTEFmRJgAuyJMAFWRLggiwJcEGWBLagzZIAF2RJgAuyJMAFWRLggkpBbEGWBLggSwJckCUBLsiSABdkSWAL2i0JcEGWBLggSwJckCUBLqgUxBZkSYALsiTABVkS4IIsCXBBlgS2oMOSABdkSYALsiTABVkS4IJKQWxBlgS4IEsCXJAlAS7IkgAXZElAC9oGSwJckCUBLsiSABdkSYALKgWxBVkS4IIsCXBBlgS4IEsCXJAlgS1otCTABVkS4IIsCXBBlgS4oFIQW5AlAS7IkgAXZEmAC7IkwAVZEtiCJksCXJAlAS7IkgAXZEmACyoFsQVZEuCCLAlwQZYEuCBLAlyQJYEtaLYkwAVZEuCCLAlwQZYEuKBSEFuQJQEuyJIAF2RJgAuyJMAFWRLYgsqSABdkSYALsiTABVkS4IJKQWxBlgS4IEsCXJAlAS7IkgAXZElgC1osCXBBlgS4IEsCXJAlAS6oFMQWZEmAC7IkwAVZEuCCLAlwQZYEtqDVkgAXZEmAC7IkwAVZEuCCSkFsQZYEuCBLAlyQJQEuyJIAF2RJYAvaLAlwQZYEuCBLAlyQJQEuqBTEFmRJgAuyJMAFWRLggiwJcEGWBLag3ZIAF2RJgAuyJMAFWRLggkpBbEGWBLggSwJckCUBLsiSABdkSWALOiwJcEGWBLggSwJckCUBLqgUxBZkSYALsiTABVkS4IIsCXBBlgS0oH2wJMAFWRLggiwJcEGWBLigUhBbkCUBLsiSABdkSYALsiTABVkS2IJGSwJckCUBLsiSABdkSYALKgWxBVkS4IIsCXBBlgS4IEsCXJAlgS1osiTABVkS4IIsCXBBlgS4oFIQW5AlAS7IkgAXZEmAC7IkwAVZEtiCZksCXJAlAS7IkgAXZEmACyoFsQVZEuCCLAlwQZYEuCBLAlyQJSEuaD2un+JWw6/MyziQZj4edVwefBw37nm59/uZO+H7mbvK+5mXzNuZu537mTuH+5m7cPuZO1r7mbtD25kv7tB+5u7Qfubu0H7m7tB+5iXzdubu0H7m7tB+5u7Qfubu0H7m7tB25qs7tJ+5O7SfuTu0n7k7tJ95ybyduTu0n7k7tJ+5O7SfuTu0n7k7tJ355g7tZ+4O7WfuDu1n7g7tZ14yb2fuDu1n7g7tZ+4O7WfuDu1n7g5tZ767Q/uZu0P7mbtD+5m7Q/uZl8zbmbtD+5m7Q/uZu0P7mbtD+5m7Q9uZH+7Qfubu0H7m7tB+5u7QfuYl83bm7tB+5u7Qfubu0H7m7tB+5u7QbubH4A7tZ+4O7WfuDu1n7g7tZ14yb2fuDu1n7g5NM5+mebl8itMxvf3gdd0vgtbtG7FfBDla4YJcuHBBzmG2oNHtDBfk0IYLcpXDBTnh4YJKQWxBxgG4IEsCXJAlAS7IkgAXZElgC5osCXBBlgS4IEsCXJAlAS6oFMQWZEmAC7IkwAVZEuCCLAlwQZYEtqDZkgAXZEmAC7IkwAVZEuCCSkFsQZYEuCBLAlyQJQEuyJIAF2RJYAsqSwJckCUBLsiSABdkSYALKgWxBVkS4IIsCXBBlgS4IEsCXJAlgS1osSTABVkS4IIsCXBBlgS4oFIQW5AlAS7IkgAXZEmAC7IkwAVZEtiCVksCXJAlAS7IkgAXZEmACyoFsQVZEuCCLAlwQZYEuCBLAlyQJYEtaLMkxAVt43T5FLd5ffvByzhf4C3jUjcEWRLggiwJcEGWBLigUhBbkCUBLsiSABdkSYALsiTABVkS2IJ2SwJckCUBLsiSABdkSYALKgWxBVkS4IIsCXBBlgS4IEsCXJAlgS3osCTABVkS4IIsCXBBlgS4oFIQW5AlAS7IkgAXZEmAC7IkwAVZEsiCpmGwJMAFWRLggiwJcEGWBLigUhBbkCUBLsiSABdkSYALsiTABVkS2IJGSwJckCUBLsiSABdkSYALKgWxBVkS4IIsCXBBlgS4IEsCXJAlgS1osiTABVkS4IIsCXBBlgS4oFIQW5AlAS7IkgAXZEmAC7IkwAVZEtiCZksCXJAlAS7IkgAXZEmACyoFsQVZEuCCLAlwQZYEuCBLAlyQJYEtqCwJcEGWBLggSwJckCUBLqgUxBZkSYALsiTABVkS4IIsCXBBlgS2oMWSABdkSYALsiTABVkS4IJKQWxBlgS4IEsCXJAlAS7IkgAXZElgC1otCXBBlgS4IEsCXJAlAS6oFMQWZEmAC7IkwAVZEuCCLAlwQZYEtqDNkgAXZEmAC7IkwAVZEuCCSkFsQZYEuCBLAlyQJQEuyJIAF2RJYAvaLQlwQZYEuCBLAlyQJQEuqBTEFmRJgAuyJMAFWRLggiwJcEGWBLagw5IAF2RJgAuyJMAFWRLggkpBbEGWBLggSwJckCUBLsiSABdkSUALGgdLAlyQJQEuyJIAF2RJgAsqBbEFWRLggiwJcEGWBLggSwJckCWBLWi0JMAFWRLggiwJcEGWBLigUhBbkCUBLsiSABdkSYALsiTABVkS2IImSwJckCUBLsiSABdkSYALKgWxBVkS4IIsCXBBlgS4IEsCXJAlgS1otiTABVkS4IIsCXBBlgS4oFIQW5AlAS7IkgAXZEmAC7IkwAVZEtiCypIAF2RJgAuyJMAFWRLggkpBbEGWBLggS0Jc0HpcP8WthhvMjQNp5uNRx+XBx3Hrnrv3+5k74duZL67yfuYO7X7mbud+5s7hfuYl83bmjtZ+5u7Qfubu0H7m7tB+5u7QduarO7SfuTu0n7k7tJ+5O7Sfecm8nbk7tJ+5O7SfuTu0n7k7tJ+5O7Sd+eYO7WfuDu1n7g7tZ+4O7WdeMm9n7g7tZ+4O7WfuDu1n7g7tZ+4ObWe+u0P7mbtD+5m7Q/uZu0P7mZfM25m7Q/uZu0P7mbtD+5m7Q/uZu0PbmR/u0H7m7tB+5u7Qfubu0H7mJfN25u7Qfubu0H7m7tB+5u7Qfubu0G7m0+AO7WfuDu1n7g7tZ+4O7WdeMm9n7g7tZ+4O7WfuDu1n7g7tZ+4ObWc+ukP7mbtD+5m7Q/uZu0PTzKdpXi6f4nRMbz94XfeLoHX7RuwXQaUgtiAXLlyQcxguyO0MF+TQhgtylbMFTU54uCD3PlyQcQAuyJIAF1QKYguyJMAFWRLggiwJcEGWBLggSwJb0GxJgAuyJMAFWRLggiwJcEGlILYgSwJckCUBLsiSABdkSYALsiSwBZUlAS7IkgAXZEmAC7IkwAWVgtiCLAlwQZYEuCBLAlyQJQEuyJLAFrRYEuCCLAlwQZYEuCBLAlxQKYgtyJIAF2RJgAuyJMAFWRLggiwJbEGrJQEuyJIAF2RJgAuyJMAFlYLYgiwJcEGWBLggSwJckCUBLsiSwBa0WRLggiwJcEGWBLggSwJcUCmILciSABdkSYALsiTEBW3jdPkUt3l9+8HLOF/gLeNSNwRZEuCCLAlsQbslAS7IkgAXZEmAC7IkwAWVgtiCLAlwQZYEuCBLAlyQJQEuyJLAFnRYEuCCLAlwQZYEuCBLAlxQKYgtyJIAF2RJgAuyJMAFWRLggiwJaEHzYEmAC7IkwAVZEuCCLAlwQaUgtiBLAlyQJQEuyJIAF2RJgAuyJLAFjZYEuCBLAlyQJQEuyJIAF1QKYguyJMAFWRLggiwJcEGWBLggSwJb0GRJgAuyJMAFWRLggiwJcEGlILYgSwJckCUBLsiSABdkSYALsiSwBc2WBLggSwJckCUBLsiSABdUCmILsiTABVkS4IIsCXBBlgS4IEsCW1BZEuCCLAlwQZYEuCBLAlxQKYgtyJIAF2RJgAuyJMAFWRLggiwJbEGLJQEuyJIAF2RJgAuyJMAFlYLYgiwJcEGWBLggSwJckCUBLsiSwBa0WhLggiwJcEGWBLggSwJcUCmILciSABdkSYALsiTABVkS4IIsCWxBmyUBLsiSABdkSYALsiTABZWC2IIsCXBBlgS4IEsCXJAlAS7IksAWtFsS4IIsCXBBlgS4IEsCXFApiC3IkgAXZEmAC7IkwAVZEuCCLAlsQYclAS7IkgAXZEmAC7IkwAWVgtiCLAlwQZYEuCBLAlyQJQEuyJKAFlSDJQEuyJIAF2RJgAuyJMAFlYLYgiwJcEGWBLggSwJckCUBLsiSwBY0WhLggiwJcEGWBLggSwJcUCmILciSABdkSYALsiTABVkS4IIsCWxBkyUBLsiSABdkSYALsiTABZWC2IIsCXBBlgS4IEsCXJAlAS7IksAWNFsS4IIsCXBBlgS4IEsCXFApiC3IkgAXZEmAC7IkwAVZEuCCLAlsQWVJgAuyJMAFWRLggiwJcEGlILYgSwJckCUBLsiSABdkSYALsiSwBS2WBLggSwJckCUBLsiSEBe0HtdPcavhBvOSeZj5eNRxefBx3Lrn7v1+5k74fuau8n7mDu1+5m7nduarc7ifuQu3n7mjtZ+5O7Sfecm8nbk7tJ+5O7SfuTu0n7k7tJ+5O7Sd+eYO7WfuDu1n7g7tZ+4O7WdeMm9n7g7tZ+4O7WfuDu1n7g7tZ+4ObWe+u0P7mbtD+5m7Q/uZu0P7mZfM25m7Q/uZu0P7mbtD+5m7Q/uZu0PbmR/u0H7m7tB+5u7Qfubu0H7mJfN25u7Qfubu0H7m7tB+5u7Qfubu0G7my+AO7WfuDu1n7g7tZ+4O7WdeMm9n7g7tZ+4O7WfuDu1n7g7tZ+4ObWc+ukP7mbtD+5m7Q/uZu0P7mZfM25m7Q/uZu0P7mbtD+5m7Q/uZu0PbmU/u0DTzaZqXy6c4HdPbD17X/SJo3b4R+0WQoxUuyIULF+QchgsqBbEFObThglzlcEFOeLgg9z5ckHGALWi2JMAFWRLggiwJcEGWBLigUhBbkCUBLsiSABdkSYALsiTABVkS2ILKkgAXZEmAC7IkwAVZEuCCSkFsQZYEuCBLAlyQJQEuyJIAF2RJYAtaLAlwQZYEuCBLAlyQJQEuqBTEFmRJgAuyJMAFWRLggiwJcEGWBLag1ZIAF2RJgAuyJMAFWRLggkpBbEGWBLggSwJckCUBLsiSABdkSWAL2iwJcEGWBLggSwJckCUBLqgUxBZkSYALsiTABVkS4IIsCXBBlgS2oN2SABdkSYALsiTABVkS4IJKQWlB2zhdPsVtXt9+8DLOF3jLuNQNQZYEuCBLAlyQJQEuyJIAF2RJYAs6LAlwQZYEuCBLAlyQJQEuqBTEFmRJgAuyJMAFWRLggiwJcEGWBLSgdbAkwAVZEuCCLAlwQZYEuKBSEFuQJQEuyJIAF2RJgAuyJMAFWRLYgkZLAlyQJQEuyJIAF2RJgAsqBbEFWRLggiwJcEGWBLggSwJckCWBLWiyJMAFWRLggiwJcEGWBLigUhBbkCUBLsiSABdkSYALsiTABVkS2IJmSwJckCUBLsiSABdkSYALKgWxBVkS4IIsCXBBlgS4IEsCXJAlgS2oLAlwQZYEuCBLAlyQJQEuqBTEFmRJgAuyJMAFWRLggiwJcEGWBLagxZIAF2RJgAuyJMAFWRLggkpBbEGWBLggSwJckCUBLsiSABdkSWALWi0JcEGWBLggSwJckCUBLqgUxBZkSYALsiTABVkS4IIsCXBBlgS2oM2SABdkSYALsiTABVkS4IJKQWxBlgS4IEsCXJAlAS7IkgAXZElgC9otCXBBlgS4IEsCXJAlAS6oFMQWZEmAC7IkwAVZEuCCLAlwQZYEtqDDkgAXZEmAC7IkwAVZEuCCSkFsQZYEuCBLAlyQJQEuyJIAF2RJQAvaBksCXJAlAS7IkgAXZEmACyoFsQVZEuCCLAlwQZYEuCBLAlyQJYEtaLQkwAVZEuCCLAlwQZYEuKBSEFuQJQEuyJIAF2RJgAuyJMAFWRLYgiZLAlyQJQEuyJIAF2RJgAsqBbEFWRLggiwJcEGWBLggSwJckCWBLWi2JMAFWRLggiwJcEGWBLigUhBbkCUBLsiSABdkSYALsiTABVkS2ILKkgAXZEmAC7IkwAVZEuCCSkFsQZYEuCBLAlyQJQEuyJIAF2RJYAtaLAlwQZYEuCBLAlyQJQEuqBTEFmRJgAuyJMAFWRLggiwJcEGWBLag1ZIQF7Qe109xq+EGc+NAmvl41HF58HHcuufu/X7mTvh+5iXzduYO7X7mbud+5s7hfuYu3H7mjtZ25ps7tJ+5O7SfuTu0n7k7tJ95ybyduTu0n7k7tJ+5O7SfuTu0n7k7tJ357g7tZ+4O7WfuDu1n7g7tZ14yb2fuDu1n7g7tZ+4O7WfuDu1n7g5tZ364Q/uZu0P7mbtD+5m7Q/uZl8zbmbtD+5m7Q/uZu0P7mbtD+5m7Q7uZ74M7tJ+5O7SfuTu0n7k7tJ95ybyduTu0n7k7tJ+5O7SfuTu0n7k7tJ356A7tZ+4O7WfuDu1n7g7tZ14yb2fuDu1n7g7tZ+4O7WfuDu1n7g5tZz65Q/uZu0P7mbtD+5m7Q/uZl8zbmbtD+5m7Q/uZu0PTzKdpXi6f4nRMbz94XfeLoHX7RuwXQY5WuCAXLlvQ7ByGC3I7wwU5tOGCXOVwQaUgtiD3PlyQcQAuyJIAF2RJgAuyJLAFlSUBLsiSABdkSYALsiTABZWC2IIsCXBBlgS4IEsCXJAlAS7IksAWtFgS4IIsCXBBlgS4IEsCXFApiC3IkgAXZEmAC7IkwAVZEuCCLAlsQaslAS7IkgAXZEmAC7IkwAWVgtiCLAlwQZYEuCBLAlyQJQEuyJLAFrRZEuCCLAlwQZYEuCBLAlxQKYgtyJIAF2RJgAuyJMAFWRLggiwJbEG7JQEuyJIAF2RJgAuyJMAFlYLYgiwJcEGWBLggSwJckCUBLsiSwBZ0WBLggiwJcUHbOF0+xW1e337wMs4XeMu41A1BlgS4IEsCXFApiC3IkgAXZEmAC7IkwAVZEuCCLAloQcdgSYALsiTABVkS4IIsCXBBpSC2IEsCXJAlAS7IkgAXZEmAC7IksAWNlgS4IEsCXJAlAS7IkgAXVApiC7IkwAVZEuCCLAlwQZYEuCBLAlvQZEmAC7IkwAVZEuCCLAlwQaUgtiBLAlyQJQEuyJIAF2RJgAuyJLAFzZYEuCBLAlyQJQEuyJIAF1QKYguyJMAFWRLggiwJcEGWBLggSwJbUFkS4IIsCXBBlgS4IEsCXFApiC3IkgAXZEmAC7IkwAVZEuCCLAlsQYslAS7IkgAXZEmAC7IkwAWVgtiCLAlwQZYEuCBLAlyQJQEuyJLAFrRaEuCCLAlwQZYEuCBLAlxQKYgtyJIAF2RJgAuyJMAFWRLggiwJbEGbJQEuyJIAF2RJgAuyJMAFlYLYgiwJcEGWBLggSwJckCUBLsiSwBa0WxLggiwJcEGWBLggSwJcUCmILciSABdkSYALsiTABVkS4IIsCWxBhyUBLsiSABdkSYALsiTABZWC2IIsCXBBlgS4IEsCXJAlAS7IkkAWNA+DJQEuyJIAF2RJgAuyJMAFlYLYgiwJcEGWBLggSwJckCUBLsiSwBY0WhLggiwJcEGWBLggSwJcUCmILciSABdkSYALsiTABVkS4IIsCWxBkyUBLsiSABdkSYALsiTABZWC2IIsCXBBlgS4IEsCXJAlAS7IksAWNFsS4IIsCXBBlgS4IEsCXFApiC3IkgAXZEmAC7IkwAVZEuCCLAlsQWVJgAuyJMAFWRLggiwJcEGlILYgSwJckCUBLsiSABdkSYALsiSwBS2WBLggSwJckCUBLsiSABdUCmILsiTABVkS4IIsCXBBlgS4IEsCW9BqSYALsiTABVkS4IIsCXBBpSC2IEsCXJAlAS7IkhAXtB7XT3Gr4QZz40CaeS3L5cG1jssN5u79duabE76fuau8n7lDu5+527mfecm8nbkLt5+5o7WfuTs0znzdrsy3+cGD93W+fND7uo43BDla4YJcuGxBu3MYLsjtDBfk0IYLcpXDBZWC2ILc+3BBxgG4IEsCXJAlAS7IksAWdFgS4IIsCXBBlgS4IEsCXFApiC3IkgAXZEmAC7IkwAVZEuCCLAloQeNgSYALsiTABVkS4IIsCXBBpSC2IEsCXJAlAS7IkgAXZEmAC7IksAWNlgS4IEsCXJAlAS7IkgAXVApiC7IkwAVZEuCCLAlwQZYEuCBLAlvQZEmAC7IkwAVZEuCCLAlwQaUgtiBLAlyQJQEuyJIAF2RJgAuyJLAFzZYEuCBLAlyQJQEuyJLwuYKO7QLvGIbjhqBSEFuQJQEuyJIQF7Qt41XQPr794GPat4ugl2+fvv3gR//g4DibHb6STRvFV7Jp0PhCNsv68ZVsmkq+kk27yleyaYT5SjZLm1/IpnnnK9m0BX0lm7agr2TTFvSVbNqCvpDNxRb0lWzagr6STVvQV7JpC/pKNkubX8imLegr2bQFfSWbtqBPtnmF92Lzxo/hLeYduCCLzecKqnG6CKra3n7wdMzLBd6x/HjL3z7ZX794Dvvlw1iG43j94O/qV/PO06q3BT2tesPR06q3Mj2t+lL9s6q3Xz2temPX06q3jD2tepvb06q35j2r+s2a97TqrXlPq96a97TqrXlPq75U/6zqrXlPq96a97TqrXlPq96a97TqrXnPqn635j2temve06q35j2temve06ov1T+remve06q35j2temve06q35j2temves6o/rHlPq96a97TqrXlPq96a97TqS/XPqt6a97TqrXlPq96a97TqrXlPq96a96Tqp8Ga97TqrXlPq96a97TqrXlPq75U/6zqrXlPq96a97TqrXlPq96a97TqrXnPqn605j2temve06q35j2temve06ov1T+r+u6aV2Nd1c/HI/Xzy/+7Mh/rB/Rxv/Xpvnywy/TjA3/F/dvj//qM16f7jDf2Zzyv0/UzrvHRZ1x1eePLqz/fx375ZG/WinE9hsv72IbhwSe7rvvx16PXbaoHH9ByXNCs86vHDtvlIzoCH9G2zNePaJseXYrt+o/JTvvwWsB4S239cLvU+ODR4zhcP9/x5X+mR19i9/36JfYYlh+PrptvfDqub3vbXz/4P7z8x3/87//6b//2r//5//u3//qf/uV//ut//S//49vR4dv/N9188VLzBXG9+oNx/OPPxVQfPrF8+MT64RPbh0/sHz5x8z4u1y8jy/rziXn48InxwyemD5+46Xy5PqMv2/LzifrwieXDJ9YPn7jpfLl+eVhePW//dWL/8Injoydq+PCJ8e0T67D9fGL68In5wyduOl/X7frldP35xPLhE+uHT2wfPnHT+Xp9effydPLzieOjJ5bhwyfGD5+46XwbLq9pt7F+PjF/+ER9+MTy4RPrgxPT9POJ7cMn9g+fuOl8Oy4+9uFnH7f/teM3T4wfPjF9+MRN5/v1M99/8XH7X3J888Ty4RPrh0/cdL5fX+Xs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","brillig_names":["get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block","attach_len_to_msg_block","build_msg_block","emit_encrypted_note_log_oracle_wrapper","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"value_internal","is_unconstrained":false,"custom_attributes":["private","internal"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"input","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZbbioMwEIbfJddeZCaHSXyVZSna2hIQLWoXFum7b3Q99KAUaXtT9EIy5puZf34jWLNdEp8OG5ft85KFXzVL821UuTzzUc1AtM/KY5Q1YVlFRcVC0JYHLMl2fkmcnwO2d2nCQmH8+o5GMtTRaLgdaNAwQQupTUcLJeEBDcBtj4O/cNSCaoo3Rve45Wqk5WRxtENtMpfwd8BArtbMWaNWa+as0as1c9bQ89YIK6Ef1hKNwxrdtjDvb2GXtvBJyJ/XpbXpzdWE8krXPa2Gt6zFBcuplQMvkENKDHIIH8j50CONuBr5AiN9EBcuTd1hc/V3wpubmPymCbGrRorfnm9hF6dIvjwFFqacffgTFS6K06SZr9k9Zdt+XB9Wv8f/HQ//AQ==","brillig_names":["pack_returns_oracle_wrapper"]},{"name":"private_get_value","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"16137133351287663689":{"error_kind":"fmtstring","item_types":[],"length":17}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"","brillig_names":["get_notes_internal","get_collapse_hints","lt_32_hint","decompose_hint","lte_16_hint","pack_returns_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"3469988399892582431":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"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","debug_symbols":"7Z3dbhw3EoXfRde+4G+RzKssFoGTOIEAww5iZ4FFkHffsazpmVV3q6Sa4swppW4CO+5qH38i6/Bwptl/3f3y4ac/f/vx/tOvn7/c/fCvv+4+fv75/df7z58Ov/vr73d3P/1x//Hj/W8/nv/vu/DtP6U+XP/l9/efvv32y9f3f3y9+yGG8u7uw6dfvv1qHOp/vf/44e6H3MPf/353V+jVJTW9ruTd6tqWHi9tbbmyjod754n3LhPvXSfemybeu028d5947zHv3hQm3jtOvPfEeUkT5yVNnJc0cV7SxHlJE+clTZyXNHFetonzsk2cl23ivGwT52WbOC/bxHnZJs7LNnFetonzsk2cl33ivOwT52WfOC/7xHnZJ87LPnFe9onzsk+cl33ivOwT5+WYOC/HxHk5Js7LMXFejonzckycl2PivBwT5+WYOC/HxHkZQ5h58zjz5mnmzfPMm5eZN68zb04zb95m3rzPvPnMGRpnztA4c4bGmTM0zpyhceYMjTNnaJw5Q+PMGRpnztA4c4ammTM0zZyhaeYMTTNnaJo5Q9PMGZpmztA0c4ammTO0XPwDpdDH48UUc1yufqhcXZ37iI9X5xHzcnUq3+VULDmEJadhyelYcgaUnBqw5EQsOQlLTsaSg9WVK1ZXrlhduWJ15YrVlStWVyasrkxXnlkU6Xhx6icx/VHNlYcO5eXiUtdqBpKaFqDURCg1CUpNhlJToNQo9Bs6U5MYNS0f+00r4XTnRt/VEJSaBqWmQ6kZSGp6gFITodQkKDUZSk2BUnN5L44nZ0gxXqaGoNQ0KDUdSs1AUnP5V4xU1UQoNQlKTYZSU6DUQPXiAdWLB1QvHlC9eCD14hSQenEKSL04BaRenAJSL04BqRengNSLU0DqxSkg9eIUkHpxClC9OEL14gjViyNUL45QvThC9eII1YsjVC+OML1442PHRu3x4txXHzumCNO4Xy8dpsu/WnqCsYTXS4fxj9dLhzGb10uHcabXS4exsddLh/G810uHMcjXS7frpsmumya7bprtumm266bZrptmu26a7bpptuum2a6bZrtumu26abbrpsWumxa7blrsummx66YKzzzeTLpdNy123bTYddNi102LXTetdt202nXTatdNq103VXhW9WbS7bppteum1a6bVrtuWu26Kdl1U7LrpmTXTcmum15+Ev7tpNt1U7Lr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","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]},{"name":"public_dispatch","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{"14336010898202591232":{"error_kind":"fmtstring","item_types":[],"length":16}},"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"JAAEAQIlAASARAABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAk4AIBEAAAiAcImAgCloN9hAAIKOAECAyQCAAQCJAIEAQQkAgQABSECABEAAyAAQCoIAQMkAgQCBgAQAQYBJAMEAQMAKAMCBh88AAQABAAGKg0DBgAoBgIGKg4GAyoIAQYAAAECASoOAwYqCAEDAAABAgEqDgUDJAIECQgqCAAJKgwGCioMAwsqDAIMABAACAAiAccqBAAAKgwKBx4CBAADADgHAwYeAgUAAwA4BgMHHgIGAAMAOAcDBh4CBwADHAwAAwcAOAYHAyoIAQYkAgQCBwAQAQcBJAMEAQYAKAYCByoMBwgqDgMIJAIECAcqCAAIKgwGCQAQAAcAIgIOKgQAACAAQCYCAOseM0IAAwo4AQMGJAIAAAMkAgABByQCAQAIIQIARwAGIACRKggBBiQCBAIJABABCQEkAwQBBgAoBgIJHzwABAAEAAkqDQYJACgJAgkqDgkGKggBCQAAAQIBKg4GCSoIAQYAAAECASoOBQYkAgQMCyoIAAwqDAkNKgwGDioMAg8AEAALACIBxyoEAAAqDA0KKggBBgAAAQIBKg4IBioIAQkAAAECASoOAwkqCAELAAABAgEkAgBMDCoODAskAgQNDCoIAA0qDAYOKgwJDyoMCxAqDAcRKgwKEgAQAAwAIgISKgQAACQCBAEJJAIEAgwAOAkMCyoIAQYAEAELASQDBAEGACgGAgsqDgkLJAIEAgsAOAYLCSoMCQsqDgoLACgGAgwqDQwLACgMAgk0DQAJAAsqCAEGJAIEAgkAEAEJASQDBAEGACgGAgkqDAkLKg4KCyQCBAsJKggACyoMBgwAEAAJACICDioEAAAgAJEmAgAiU433AAYKOAEGCSECAJUACSAA6ioIAQYkAgQCCQAQAQkBJAMEAQYAKAYCCR88AAQABAAJKg0GCQAoCQIJKg4JBioIAQkAAAECASoOBgkqCAEGAAABAgEqDgUGJAIEDAsqCAAMKgwJDSoMBg4qDAIPABAACwAiAccqBAAAKgwNCioIAQYAAAECASoOCAYqCAEJAAABAgEqDgMJKggBCwAAAQIBJAIASwwqDgwLJAIEDg0qCAAOKgwGDyoMCRAqDAsRKgwHEgAQAA0AIgIyKgQAACoMDwwAOAwKDSQCBA4MKggADioMBg8qDAkQKgwLESoMBxIqDA0TABAADAAiAhIqBAAAJAIEAQkkAgQCDAA4CQwLKggBBgAQAQsBJAMEAQYAKAYCCyoOCQskAgQCCwA4BgsJKgwJCyoOCgsAKAYCDCoNDAsAKAwCCTQNAAkACyoIAQYkAgQCCQAQAQkBJAMEAQYAKAYCCSoMCQsqDgoLJAIECwkqCAALKgwGDAAQAAkAIgIOKgQAACAA6iYCABL5GkkABgo4AQYJIQIA7gAJIAFIKggBBiQCBAIJABABCQEkAwQBBgAoBgIJHzwABAAEAAkqDQYJACgJAgkqDgkGKggBCQAAAQIBKg4GCSoIAQYAAAECASoOBQYkAgQMCyoIAAwqDAkNKgwGDioMAg8AEAALACIBxyoEAAAqDA0KKggBAgAAAQIBKg4IAioIAQYAAAECASoOAwYqCAEDAAABAgEkAgBACSoOCQMeAgEACR4CAAALCjgJCwwhAgEVAAw5AQAAJAIEDAsqCAAMKgwCDSoMBg4qDAMPKgwHEAAQAAsAIgIyKgQAACoMDQkAOAkKCyQCBAwJKggADCoMAg0qDAYOKgwDDyoMBxAqDAsRABAACQAiAhIqBAAAJAIEAQMkAgQCBwA4AwcGKggBAgAQAQYBJAMEAQIAKAICBioOAwYkAgQCBgA4AgYDKgwDBioOCgYAKAICByoNBwYAKAcCAzQNAAMABioIAQIkAgQCAwAQAQMBJAMEAQIAKAICAyoMAwQqDgoEJAIECwMqCAALKgwCDAAQAAMAIgIOKgQAACABSCYCAPCjT18AAgo4AQIDKggBAgAAAQIBJAMEAQIAKAICBCECAVAAAyABXCQCBAkDKggACQAQAAMAIgJkKgQAACQCBAkDKggACSoMAgoAEAADACIC1ioEAAAgAVwmAgCl+R9pAAMKOAEDBCECAWAABCABbCQCBAkDKggACQAQAAMAIgLaKgQAACQCBAkDKggACSoMAgoAEAADACIC1ioEAAAgAWwmAgCK7JSWAAMKOAEDBCECAXAABCABfCQCBAkBKggACQAQAAEAIgNMKgQAACQCBAkBKggACSoMAgoAEAABACIC1ioEAAAgAXwkAgJ0ASQCAmUCJAICdwMkAgJuBCQCAnIGJAICbAckAgIgCSQCAmsKJAIBAQsqCAEMJAIEEQ0AEAENASQDBAEMACgMAg0qDA0OJAICVQ8qDg8OACgOAg4qDgQOACgOAg4qDgoOACgOAg4qDgQOACgOAg4kAgJvECoOEA4AKA4CDioOAw4AKA4CDioOBA4AKA4CDioOCQ4AKA4CDiQCAnMRKg4RDgAoDgIOKg4CDgAoDgIOKg4HDgAoDgIOKg4CDgAoDgIOJAICYxIqDhIOACgOAg4qDgEOACgOAg4qDhAOACgOAg4qDgYOCjgICw0hAgHBAA0qCAEOJAIEEhMAEAETASoMDhMnAwXG8730236AAAATACgTAhMAKAwCFCQCBBAVKwQAFIADKwQAE4AEKwQAFYAFIgPxJAIEEBQAOBMUEyoOBRMAKBMCEzkDDhIjJQAEeACABA0AAACABIADIQABxoADOQEAACMiAcIqCAEFAAABAgEkAgAABioIAQckAgQCCAAQAQgBJAMEAQcAKAcCCCoMCAkqDgYJKg4HBSoNBwgAKAgCCCoOCAckAgQBCCQCBAAJKgwJBCAB2go4BAkDIQIB7gADIAHdKg0BAyoNAgQAOAQICg44BAoLIQIB4wALOQEAACoOAwEqDgoCKg0FASoNBwICKAICAioOAgcAKAECAwA4AwkEKg0EAioMAgEjKg0FAyoNAQoqDQILADgLBAwOOAsMDSECAfUADTkBAAAkAgQBDQw4DA0OIQIB+QAOOQEAAAAoCgINADgNDA4qDQ4LJAIEAQwMOAQMDSECAgAADTkBAAArBAADgAMlAAQAAoAEIgP8KwiABQAKACgKAgwAOAwEDSoOCw0AOAQIAw44BAMLIQICCwALOQEAACoOCgUqDAMEIAHaIgHCACgBAgI4AwACAAEjIgHCJAIEAQckAgQACCoMCAYgAhcKOAYIASECAhsAASACGiMcDAAGAQA4BAECKggBASQCBAIDABABAwEkAwQBAQAoAQIDKgwDCSoOBQkkAgQBCQw4BgkKIQICKAAKOQEAAAAoAQIJADgJBgoqDQoDLQwAAwACADgGBwEOOAYBAiECAjAAAjkBAAAqDAEGIAIXIgHCKggBBiQCBAIHABABBwEkAwQBBgAoBgIHKgwHCCQCAAAJKg4JCCoNBgcAKAcCByoOBwYqCAEHAAABAgEqDgYHJAIEAQYkAgQACCoMCAUgAkUKOAUIASECAk4AASACSCoNBwEAKAECAwA4AwgEKg0EAioMAgEjKg0HARwMAAUCADgEAgMsDAADAAIkAgQBCQw4BQkKIQICVgAKOQEAACsEAAGAAyUABAACgAQiA/wrCIAFAAMAKAMCCQA4CQUKKg4CCgA4BQYBDjgFAQIhAgJhAAI5AQAAKg4DByoMAQUgAkUiAcIqCAEBAAABAgEkAgEAAioOAgEqCAECAAABAgEkAgAAAyoOAwIqCAEDAAABAgEkAgA/BCoOBAMeAgAABCYCAOseM0IABSQCBAgHKggACCoMBQkAEAAHACIEESoEAAAqDAkGHAwABgUkAgAKBiQCBAEIJAIEAgoAOAgKCSoIAQcAEAEJASQDBAEHACgHAgkqDggJJAIEAgkAOAcJCCoMCAkqDgUJJAIEAQgkAgQBCiQCBAIMADgKDAsqCAEJABABCwEkAwQBCQAoCQILKg4KCyQCBAILADgJCwoqDAoLKg4GCyQCBA0MKggADSoMCA4qDAcPKgwIECoMCREAEAAMACIEFioEAAAqDA4KKgwPCyYCANVEGw0ABSoIAQYkAgQDBwAQAQcBJAMEAQYAKAYCByoMBwkpAgAwZE5y4TGgKbhQRbaBgVhdKDPoSHm5cJFD4fWT8AAAAAAMKg4MCQAoCQIJKg4MCQAoBgIHACgLAg4qDQ4NACgOAgkqCAEOJAIEAg8AEAEPASQDBAEOACgOAhA2P5UABwAEAAkADQAQAAEADwAFJAICAQQKOA8EBSECArkABTkBAAAkAgAUBCQCAAEFJAIEDwYqCAAPKgwBECoMAhEqDAMSKgwFEyoMBBQAEAAGACICEioEAAAkAgQBAiQCBAIFADgCBQMqCAEBABABAwEkAwQBAQAoAQIDKg4CAyQCBAIDADgBAwIqDAIDKg4EAwAoAQIFKg0FAwAoBQICNA0AAgADIyIBwgAoAQICOAMAAgAAIyIBwioIAQEAAAECASQCAQACKg4CASoIAQIAAAECASQCAAADKg4DAioIAQMAAAECASQCADcEKg4EAyQCABQEJAIAAQUkAgQHBioIAAcqDAEIKgwCCSoMAwoqDAULKgwEDAAQAAYAIgISKgQAACQCBAEBJAIEAQMkAgQCBgA4AwYFKggBAgAQAQUBJAMEAQIAKAICBSoOAwUkAgQCBQA4AgUDKgwDBSoOBAUAKAICBioNBgUAKAYCAzQNAAMABR4CAAACJgIA6x4zQgADJAIEBgUqCAAGKgwDBwAQAAUAIgQRKgQAACoMBwQcDAAEAyQCBAEFJAIEAgcAOAUHBioIAQQAEAEGASQDBAEEACgEAgYqDgUGJAIEAgYAOAQGBSoMBQYqDgMGJAIEAQYkAgQCCAA4BggHKggBBQAQAQcBJAMEAQUAKAUCByoOBgckAgQCBwA4BQcGKgwGByQCAAoIKg4IByQCBAoJKggACioMAQsqDAQMKgwBDSoMBQ4AEAAJACIEFioEAAAqDAsGKgwMByYCANVEGw0AASoIAQMkAgQDBAAQAQQBJAMEAQMAKAMCBCoMBAUpAgAwZE5y4TGgKbhQRbaBgVhdKDPoSHm5cJFD4fWT8AAAAAAIKg4IBQAoBQIFKg4IBQAoAwIEACgHAgoqDQoJACgKAgUqCAEKJAIEAgsAEAELASQDBAEKACgKAgw2P5UABAACAAUACQAMAAEACwABJAICAQEKOAsBAiECA0sAAjkBAAAjIgHCKggBAQAAAQIBJAIBAAIqDgIBKggBAgAAAQIBJAIAAAMqDgMCKggBAwAAAQIBJAIAEQQqDgQDHgIAAAQmAgDwo09fAAUkAgQIByoIAAgqDAUJABAABwAiBBEqBAAAKgwJBhwMAAYFJAIEAAYkAgQBCCQCBAIKADgICgkqCAEHABABCQEkAwQBBwAoBwIJKg4ICSQCBAIJADgHCQgqDAgJKg4FCSQCBAAJJAIEAgsAOAkLCioIAQgAEAEKASQDBAEIACgIAgoqDgkKJAIEAgoAOAgKCSQCBAEJJAIEDQwqCAANKgwJDioMBw8qDAYQKgwIEQAQAAwAIgQWKgQAACoMDgoqDA8LKggBBSQCBAMHABABBwEkAwQBBQAoBQIHKgwHDCkCADBkTnLhMaApuFBFtoGBWF0oM+hIeblwkUPh9ZPwAAAAAA0qDg0MACgMAgwqDg0MJgIA1UQbDQAHACgFAgwAKAsCECoNEA8AKBACDioIARAAAAECASQDBAEQACgQAhI2P5UADAAEAA4ADwASAAAAEQAHJAICAQQKOBEEBSECA54ABTkBAAAeAgAABSYCAKX5H2kACiQCBBEMKggAESoMChIAEAAMACIEESoEAAAqDBILHAwACwokAgQBDCQCBAIPADgMDw4qCAELABABDgEkAwQBCwAoCwIOKg4MDiQCBAIOADgLDgwqDAwOKg4KDiQCBBEPKggAESoMCRIqDAsTKgwGFCoMCBUAEAAPACIEFioEAAAqDBIMKgwTDioIAQYkAgQDCAAQAQgBJAMEAQYAKAYCCCoMCAoqDg0KACgKAgoqDg0KACgGAggAKA4CDyoNDwsAKA8CCioIAQ8AAAECASQDBAEPACgPAhI2P5UACAAFAAoACwASAAAAEQAHCjgRBAUhAgPUAAU5AQAAJAIAFAQkAgABBSQCBBEGKggAESoMARIqDAITKgwDFCoMBRUqDAQWABAABgAiAhIqBAAAJAIEAQIkAgQCBQA4AgUDKggBAQAQAQMBJAMEAQEAKAECAyoOAgMkAgQCAwA4AQMCKgwCAyoOBAMAKAECBSoNBQMAKAUCAjQNAAIAAyMlAAQAAIAHDQCAB4AFgAgXAIAIgAghAAP7gAgBAIADgAeACSsBgAmABgEAgASAB4AJKwKABoAJAQCABwACgAcgA/IjKwGAA4AGCwCABgACgAchAAQAgAcgBAIrAIADgAUgBBArAAABgAUBAAABgAQAASUABAAAgAkNAIAJgASAChcAgAqACiEABA6ACgEAgAOACYALKwGAC4AIAQCABYAJgAsrAoAIgAsBAIAJAAKACSAEBSUBBAABgAUgBBAjIgHCHAwEAQMcDAADAhwMBAIBIyIBwioIAQYAAAECASoOAQYqCAEBAAABAgEqDgIBJAIEAQIkAgEBByQCBAAIKgwIBSAEIgw4BQMIIQIEKgAIIAQlKg0GAioNAQMqDAIBKgwDAiMMOAUDCCECBC0ACDkBAAAAKAQCCSoNCQkMOAUJCiECBDIACjkBAAAkAgQCCgA4BAoJADgJBQoqDQoIKg0GCSoNAQoAKAkCCysEAAqAAyUABAABgAQiBEorCIAFAAwrCIAGAA0qDggNKg0MCAAoCAIIKg4IDCoOCwYqDgwBADgFAggOOAUICSECBEgACTkBAAAqDAgFIAQiAQCAAwACgAcrAYAHgAcBAIAHgASACCUABAACgAoBAIAIgAqACSsAAAGABQEAAAGACQABJQEEAAGABQEAgAUAAoAJKwKACIAJJQAEAAKACgEAgAOACoAJJQAEAAKACwEAgAWAC4AKJQAEAACADA0AgAyAB4ANFwCADYANIQAEYoANAQCACYAMgA4rAYAOgAsBAIAKgAyADisCgAuADgEAgAwAAoAMIARZAQCACoAHgAYjKwAYyhjK","debug_symbols":"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","brillig_names":["public_dispatch"],"assert_messages":{"608":"attempt to add with overflow","925":"Nested call failed!","276":"Function pub_inc_value_internal can only be called internally","500":"attempt to add with overflow","1073":"Array index out of bounds","453":"Stack too deep","482":"attempt to add with overflow","511":"Array index out of bounds","979":"Nested call failed!","522":"attempt to add with overflow","551":"Array index out of bounds","842":"Nested call failed!","1095":"attempt to add with overflow","504":"Array index out of bounds","597":"Array index out of bounds","696":"Nested call failed!","559":"attempt to add with overflow","1068":"Index out of bounds"}},{"name":"set_value_with_two_nested_calls","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"JAAEAQIlAASAQwABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAg4AIBDAAAiAHYqCAECAAABAgEkAgEAAyoOAwIqCAEEAAABAgEkAgAABSoOBQQqCAEGAAABAgEkAgACByoOBwYeAgAAByYCBPCjT18ACCQCBAAJJAIEAAskAgQCDQA4Cw0MKggBCgAQAQwBJAMEAQoAKAoCDCoOCwwkAgQCDAA4CgwLJAIEDQwqCAANKgwCDioMBA8qDAYQKgwHESoMCBIqDAkTKgwKFCoMAxUqDAUWKgwDFyoMBRgAEAAMACIAeyoEAAAqDA4LHgIAAAcmAgSl+R9pAAgkAgQODSoIAA4qDAIPKgwEECoMBhEqDAcSKgwIEyoMCRQqDAoVKgwDFioMBRcqDAMYKgwFGQAQAA0AIgB7KgQAACoMDwwkAgAUAiQCBAEDKggBBCQCBAIFABABBQEkAwQBBAAoBAIFKgwFBioOAgYkAgABBSoMCQEgAFIKOAEJBiECAGYABiAAVSQCBAEEJAIEAgYAOAQGBSoIAQEAEAEFASQDBAEBACgBAgUqDgQFJAIEAgUAOAEFBCoMBAUqDgIFACgBAgYqDQYFACgGAgQ0DQAEAAUjHAwAAQYAOAUGByQCBAEIDDgBCAohAgBsAAo5AQAAACgEAggAOAgBCioNCgYtDAAGAAcAOAEDBg44AQYHIQIAdAAHOQEAACoMBgEgAFIlAAR4AIAEDQAAAIAEgAMhAAB6gAM5AQAAIyIAdhwMAAUNKggBBQAAAQIBJAIEAQ4qDg4FKggBDwAAAQIBJAIEAREkAgQCEwA4ERMSKggBEAAQARIBJAMEARAAKBACEioOERIkAgQCEgA4EBIRKgwREioODRIqDhAPJAIBAQ0kAgQAECoMEAwgAJQMOAwGASECAL8AASAAlyoNBQIqDQ8DKQIAMGROcuExoCm4UEW2gYFYXSgz6Eh5uXCRQ+H1k/AAAAAABSECAJ4ACCAAnCoMBQEgAKAqDAkBIACgIQIApAAKIACiKgwFBiAApioMCwYgAKYqCAEFJAIEAwcAEAEHASQDBAEFACgFAgcqDAcIKg4BCAAoCAIIKg4GCCYCANVEGw0ABwAoBQIIACgDAgsqDQsKACgLAgkqCAELAAABAgEkAwQBCwAoCwINNj+VAAgABAAJAAoADQAAAAwAByQCAgEBCjgMAQIhAgC9AAI5AQAAKgwLASMMOAwGASECAMIAATkBAAAAKAcCAioNAgIMOAwCAyECAMcAAzkBAAAkAgQCAwA4BwMCADgCDAMqDQMBKg0FAioNDwMAKAICECsEAAOAAyUABAABgAQiAN8rCIAFABErCIAGABIqDgESKg0RAQAoAQIBKg4BESoOEAUqDhEPADgMDgEOOAwBAiECAN0AAjkBAAAqDAEMIACUAQCAAwACgAcrAYAHgAcBAIAHgASACCUABAACgAoBAIAIgAqACSsAAAGABQEAAAGACQABJQEEAAGABQEAgAUAAoAJKwKACIAJJQAEAAKACgEAgAOACoAJJQAEAAKACwEAgAWAC4AKJQAEAACADA0AgAyAB4ANFwCADYANIQAA94ANAQCACYAMgA4rAYAOgAsBAIAKgAyADisCgAuADgEAgAwAAoAMIADuAQCACoAHgAYjKwAYyhjK","debug_symbols":"1ZzdSisxFIXfZa57kf2TnWxf5XCQqlUKpYrWAwfx3a3amVY6OhC7Qnojjmb7rcp8yW4y9KW7WVw9310u17f3T93Fn5dudX893yzv19url9dZd/W4XK2Wd5eHP+7C+xf/GP70MF+/Xz1t5o+b7oLMw6xbrG+236YQtn/gdrladBeSw+vfWUehpIhKirikSEqKtKQolhRZSVEqKcolRSV3BJfcETx6R4ir7orETb8UzUZGWxxGp/1oynFktGmm3WhTT19Gvwfi8UDSB9IQ8kQgi9oHsphkj3D6QAgeoXhExCMMj0h4RMYjHI6QgEcQHoG3W/B2C95uwdsteLsFb7fg7Ra83Yq3W/F2K95uxduteLsVb7fi7Va83Yq3W/F2R7zdcdRuDcoDwrhmHx95PJAMgSjEX75mwSMUj4h4hOERCY/IeITDERbwCMIj8HYb3m7D2214uw1vt+HtNrzdhrc7j3tB7AMi2gSC2HK/Y8d+sAwLjQUKIfWBAvvEoh2T90liPtgN3C3aefxu3W4cDvF9qlFJqSdkSRNxkksfPvnhf3MXx9qKk9qKk9uK403F8dBWHGorDrcVR9qKo23FaWtW9rZmZW9rVva2ZmVva1am0Na0TKH1hi0PJ7ExRz3OL63nZ/8xv7aeP9qQ3+Jx/njm+e3M86czz5/PPL+fd34KZ56fWs9PcZ/fJkY7iexGO6Xj1YKaX62/f7Uf+ZtfrSfyN79aT+RvfrX+Of/4Y2Vsw0Eim4WpjjgP3fPBoSOzfhLiNwQeCOmXBIMTEpyQ4QRHE8YfKDspgeAEhhMETlA4Ae60wJ0WuNMCd1rgTivcaYU7rXCnFe60nuBeIqMeQcb7PsM+W4FIp0CoDYiDxqFHMBwxfnbNKfTbgTy9xZeV+weRsiY6aprGD69PzMgVGI5npFCBQRUYXIEhFRhagRErMCp4nip4nip4nip4nit4nit4nit4nit4nit4Pv5wD3vstxzYLR1XWVFVKqrKJVVO8GbLGY8QPELxiIhHGB6R8Aj8OwR3NIJDwCMIj2A8QvAIxSNOYvdPbwg5GB6R8IiMRzgcQQGPIDyC8QjBIxSPwNtNeLsJbzfh7Sa83Qy2+3V79W/+uJxfrRa7T8C5fV5fH3wgzub/w+dvtoPfAA==","brillig_names":["set_value_with_two_nested_calls"],"assert_messages":{"121":"Stack too deep","193":"Index out of bounds","115":"attempt to add with overflow","220":"attempt to add with overflow","188":"Nested call failed!","198":"Array index out of bounds","107":"Array index out of bounds"}},{"name":"value","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"input","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"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","debug_symbols":"7ZbdioMwEIXfJddeZCY/k/gqy1K0tSUgWtQuLNJ339g12m6VIu3eFL2QjPlm5swxgi3bZenpsHHFvqxZ/NGyvNwmjSsLH7UMxOVZfUyKLqybpGpYDNryiGXFzi+J83PE9i7PWCyMX9/RSIZ6Gg23Aw0aJmghtelpoSQ8oAG4DTj4C0ctqKZ4Y3TALVcjLSeLox1qk7mGPyMGcrVmzhq1WjNnjV6tmbOGnrdGWAlhWEs0Dmv0pYX5/xb2+RZam+CTJpQ3Le5pNbwwLa5YTp0c5C+QQ0oMcggfyHnT04mwGvkCI32QVi7P3WFz86PBu5uY/DwJsa9Giv8938IuTpF8eQosTDn78CupXJLmWTdft3sqtmFcHzbfx98dD/8A","brillig_names":["pack_returns_oracle_wrapper"]},{"name":"pub_inc_value","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"new_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAorBAABgEQ4AIBEAAEiAHQqCAEDAAABAgEkAgEABCoOBAMqCAEDAAABAgEkAgAABCoOBAMqCAEDAAABAgEkAgACBSoOBQMqCAEDJAIEAgUAEAEFASQDBAEDACgDAgUqDAUGKg4EBioNAwUAKAUCBSoOBQMqCAEFAAABAgEqDgMFJAIEAAMkAgQBBCQCAAEGKgwDAiAAKQo4AgMHIQIAXgAHIAAsKg0FBwAoBwIIADgIAwkqDQkFADgFAQcqDAMCIAAzCjgCAwUhAgBHAAUgADYkAgQBAyQCBAIGADgDBgUqCAECABABBQEkAwQBAgAoAgIFKg4DBSQCBAIFADgCBQMqDAMFKg4BBQAoAgIGKg0GBQAoBgIDNA0AAwAFIxwMAAIFADgGBQgqCAEFJAIEAgkAEAEJASQDBAEFACgFAgkqDAkKKg4HCiQCBAEKDDgCCgshAgBUAAs5AQAAACgFAgoAOAoCCyoNCwktDAAJAAgAOAIEBQ44AgUIIQIAXAAIOQEAACoMBQIgADMqDQUHHAwAAggAOAYICSwMAAkACCQCBAEKDDgCCgshAgBmAAs5AQAAKwQAB4ADJQAEAAKABCIAeSsIgAUACQAoCQIKADgKAgsqDggLADgCBAcOOAIHCCECAHEACDkBAAAqDgkFKgwHAiAAKSUABHgAgAQNAAAAgASAAyEAAHiAAzkBAAAjKwGAA4AGCwCABgACgAchAAB9gAcgAH8rAIADgAUgAI0rAAABgAUBAAABgAQAASUABAAAgAkNAIAJgASAChcAgAqACiEAAIuACgEAgAOACYALKwGAC4AIAQCABYAJgAsrAoAIgAsBAIAJAAKACSAAgiUBBAABgAUgAI0jKwAYyhjK","debug_symbols":"1dvbbuIwEAbgd8k1Fx4f5sCrrFYVtFBFQlABXWmFePdNtjjQJo0l33TmpiLFE38Bx3+imEvzslm/vz61++3h1Cx/XZrd4Xl1bg/7butyXTTrY7vbta9Pj/9uXP8H4H/709tq32+ezqvjuVkCils0m/1L95Kc6/awbXebZhnYXX8vGvA1RaGmKNYUpZoirCmimiKuKZKKIu9qimpGhK8ZEX5yRHhO/lbkmfhT0WLcheOYuwAnQ2sIMNE6Ycz7Tojh3prTVOvAlFsH5k+te360zU+2+WibT7b5bJsvpvnB2eaDbb63zbedusF26gbbqRu1n7oR8r67l2nE1z54YnADP+CI/wODxw/DAYkLfB9hkEQPQ2vf9dPz0TafbPOnL9kEOBdJkK+3aOmb8324r+vqqXTMHnMX4CUWjhmdy8eMzkvphCGR/Anxwx3m7YRJ0+e7pDu/+JUR5R44UIFDEjKehMKIk3RxUBeHdHFYF0dUcdDp4oAujtfFCbo4umZl1DUro65ZGXXNyqhrVkZdszJpv1zjONyecYojvtfO9zLHD9r5CQc+jm6OKdrmJ9t8tM0n23y2zRfTfHa2+epTd56vPnXn+bZTl22nLttOXbaduqw+dSHd+VhoLRDCrXXHHl1es/qM/v5ge776jJ7li/qMnuerz+h5fjT93FW0P/WOODxoi0Qjvva1ZnGQTPK1rzWLQe780mNOcT5LxKXxwWpfmTb/iF+0r0yb54PTvjSt5Fe/wKXg1744reTXvjqt5Fcf1AW/+qQu+NVHdcGvP6vn/bbjt+vOth+M5y8Yz18wnr9gOX+v3eaf1bFdrXeb2y8ft+/754cfQp7/vn280zX+Bw==","brillig_names":["pub_inc_value"],"assert_messages":{"112":"attempt to add with overflow","101":"Array index out of bounds","91":"attempt to add with overflow","119":"Stack too deep","83":"Array index out of bounds"}},{"name":"pub_get_value","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"base_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAorBAABgEQ4AIBEAAEiABUeAgQAAgA4AQIDHgIFAAEAOAMBAh4CBgABADgCAQMeAgcAARwMAAECADgDAgEjJQAEeACABA0AAACABIADIQAAGYADOQEAACMrABjKGMo=","debug_symbols":"hdNRjoMgEAbgu/DsAwgzDF5ls2mw1YaEYKN2k43x7qvbUttAwotx9B8yn8LCLl17v55c6IeJNV8L88PZzm4IW7WsFWtH5727nt4fM75fhPjPTzcb9nKa7TizRgDXFevCZb+t5bZC73zHGkl8rZK0Qi2faYV0pAVBJo0EcW0krT7S3xUTdXYgRfUxEHwMtDfJvELxVxNASaFlnEtphSWFESYqjIREoYoK0IkC8gp9NJm6pCAOUUHCFBUU05pzTBRYVBiVKHS2CXn8XgJrLCqOHUWkCgrNQbwUaBIFFQeS6b8wJXrStG7ljx2dbX33PHf9PZzfjuH8e3u82cJ/","brillig_names":["pub_get_value"],"assert_messages":{"24":"Stack too deep"}},{"name":"set_value_twice_with_nested_first","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"JAAEAQIlAASAQwABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAg4AIBDAAAiAI4qCAECAAABAgEkAgEAAyoOAwIqCAECAAABAgEkAgAAAyoOAwIqCAECAAABAgEkAgACAyoOAwIeAgAAAioIAQMAAAECASQCBAEEKg4EAyoIAQUAAAECASQCBAEHJAIEAgkAOAcJCCoIAQYAEAEIASQDBAEGACgGAggqDgcIJAIEAggAOAYIByoMBwgmAgDrHjNCAAkqDgkIKg4GBSQCAAoGJAIEAAcqDAcBIAAuCjgBBwghAgB7AAggADEqDQMGKg0FAykCADBkTnLhMaApuFBFtoGBWF0oM+hIeblwkUPh9ZPwAAAAAAUmAgDVRBsNAAgqCAEJJAIEAwoAEAEKASQDBAEJACgJAgoqDAoLKg4FCwAoCwILKg4FCwAoCQIKACgDAg0qDQ0MACgNAgsqCAENJAIEAg4AEAEOASQDBAENACgNAg82P5UACgACAAsADAAPAAEADgAIJAICAQIKOA4CAyECAEwAAzkBAAAqCAECJAIEAgMAEAEDASQDBAECACgCAgMqDAMFJAIAFAYqDgYFJAIAAQMqDAcBIABXCjgBBwUhAgBrAAUgAFokAgQBAiQCBAIFADgCBQMqCAEBABABAwEkAwQBAQAoAQIDKg4CAyQCBAIDADgBAwIqDAIDKg4GAwAoAQIFKg0FAwAoBQICNA0AAgADIxwMAAEFADgDBQgkAgQBCQw4AQkKIQIAcQAKOQEAAAAoAgIJADgJAQoqDQoFLQwABQAIADgBBAUOOAEFCCECAHkACDkBAAAqDAUBIABXCjgBBwghAgB+AAg5AQAAKg0DCCoNBQkAKAgCCisEAAmAAyUABAABgAQiAJMrCIAFAAsrCIAGAAwqDgYMKg0LCAAoCAIIKg4ICyoOCgMqDgsFKgwEASAALiUABHgAgAQNAAAAgASAAyEAAJKAAzkBAAAjAQCAAwACgAcrAYAHgAcBAIAHgASACCUABAACgAoBAIAIgAqACSsAAAGABQEAAAGACQABJQEEAAGABQEAgAUAAoAJKwKACIAJJQAEAAKACgEAgAOACoAJJQAEAAKACwEAgAWAC4AKJQAEAACADA0AgAyAB4ANFwCADYANIQAAq4ANAQCACYAMgA4rAYAOgAsBAIAKgAyADisCgAuADgEAgAwAAoAMIACiAQCACoAHgAYjKwAYyhjK","debug_symbols":"1dzBbuJADAbgd8mZgz322DO8ympVQQsVEoIK6EorxLtvYJMATZqRcqjsS9WAnXxIw/wQzXCu3lbLz/eXzW69P1bzX+dqu39dnDb7XX10vsyq5WGz3W7eXx4fruD6J9/Kjx+L3fXoeFocTtUcJcOsWu3e6n8VoD7BerNdVXNKcPk9qxCmNOGUpjCliaY08ZSmOKVJpjTplKY0pWnKiAhTRkQYHBHEGpsm4hyfmmb96ixddVbuqjHFgWrhhE21cNan6isoDIPul4gBCyBO0F6CU8j3S2QcqA5CoakOolDga8pNcYLU1YbANzx5xrNnfPSMF8949YxPnvHZMZ7AMx494z0nLHlOWPKcsOQ5YclzwpLnhCXPCUueE5Y9Jyx7Tlg2PtugYKtHCfcv7HL7Bs7GBz0KS6cX+KKPxkd9Qf/zw76+KdTqE2lBnzi0506s+FR95QfffPLNZ9/86Jsvvvnqm59887NrvoBvvu/UFd+pK75TV3ynrvhOXfGduuI7dcV36orv1FXfqau+U1d/PnVzbM8dsvRWTihZA7E1UDQGSsPTf+Q7SEMBhEFSe0Mp5IfVNzQEEgBtqgUe+YNvgai5vVEYE8BXfh6egGJq73CRIBf4qt2N1OI7UjO1eM1KPQ7a4gRbHLLFYVucaIsjtjhqi5NscbIpDoKtaRnB1ryMYGtiRrA1MyPYmpoRbM3NCNY/tSXm7lNb5L4/WfeHPOrP1v1ROr/Enh/BuR+d+4NzPzn3s3N/dO4X636Md78UqjMSNdUZtZ8WaD6tv3+1N7/5tC74zaf1uD+YT+uC3/iK+fHFiGh9V1qJb3zVfInveiUrWt+bVuIbXzs/vpYVre9PK/Ct71Ar8Y2voC/xje9SK/HNp+4433zqjvPNp+4433zqjvPNp+4433fqWt+zNsa/1Ed/FofNYrldNb+as/7cvT78iM7p78f/Z+rifw==","brillig_names":["set_value_twice_with_nested_first"],"assert_messages":{"112":"Array index out of bounds","120":"attempt to add with overflow","125":"Index out of bounds","145":"Stack too deep","75":"Nested call failed!"}},{"name":"pub_inc_value_internal","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"error_types":{},"parameters":[{"name":"new_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAorBAABgEQ4AIBEAAEiAHkqCAEDAAABAgEkAgEABCoOBAMqCAEDAAABAgEkAgAABCoOBAMqCAEDAAABAgEkAgACBSoOBQMeAgEAAx4CAAAFCjgDBQYhAgAcAAY5AQAAKggBAyQCBAIFABABBQEkAwQBAwAoAwIFKgwFBioOBAYqDQMFACgFAgUqDgUDKggBBQAAAQIBKg4DBSQCAAEDJAIEAAQkAgQBBioMBAIgAC4KOAIEByECAGMAByAAMSoNBQcAKAcCCAA4CAQJKg0JBQA4BQEHKgwEAiAAOAo4AgQFIQIATAAFIAA7JAIEAQMkAgQCBQA4AwUEKggBAgAQAQQBJAMEAQIAKAICBCoOAwQkAgQCBAA4AgQDKgwDBCoOAQQAKAICBSoNBQQAKAUCAzQNAAMABCMcDAACBQA4AwUIKggBBSQCBAIJABABCQEkAwQBBQAoBQIJKgwJCioOBwokAgQBCgw4AgoLIQIAWQALOQEAAAAoBQIKADgKAgsqDQsJLQwACQAIADgCBgUOOAIFCCECAGEACDkBAAAqDAUCIAA4Kg0FBxwMAAIIADgDCAksDAAJAAgkAgQBCgw4AgoLIQIAawALOQEAACsEAAeAAyUABAACgAQiAH4rCIAFAAkAKAkCCgA4CgILKg4ICwA4AgYHDjgCBwghAgB2AAg5AQAAKg4JBSoMBwIgAC4lAAR4AIAEDQAAAIAEgAMhAAB9gAM5AQAAIysBgAOABgsAgAYAAoAHIQAAgoAHIACEKwCAA4AFIACSKwAAAYAFAQAAAYAEAAElAAQAAIAJDQCACYAEgAoXAIAKgAohAACQgAoBAIADgAmACysBgAuACAEAgAWACYALKwKACIALAQCACQACgAkgAIclAQQAAYAFIACSIysAGMoYyg==","debug_symbols":"1ZvNjtowEMffJWcOng97bF6lqlawC6tICFbAVqoQ797Q4kBJiFX3sDMXlMCM/bMz9t/Gk1Pztlp+vr+02/Xu0My/nZrN7nVxbHfb7u50njXLfbvZtO8v91837vIB8Nv+8LHYXm4Px8X+2MwhJDdrVtu37lKc60pYt5tVM6fozt9nDWCNE9U4cY2Tr3EKNU5S4xRrnFKFE7oap5qIwJqIwH+OiNnAmh3FqzU7Dr01RD9iHTxn6+AD/WV9AeL/B6IU/NWaknAJiCNkIE4yAKqJZKyJZKyJZByNZEJIuQeQfaG/wEXOVYBLtx4gGLH2gfFq7cPDAxyxpijZmmIc9G4yjU/ONj7Yxkfb+GQbn23je9v4wTa+2Ma3rbpkW3XZtuqy9qHLkMvuLv0AX3vwMLken8Ijvv+C4ME+HILEAj4y5MYiI/TW2NVzwQfb+Ggb/8mSLfb7TXLhcYvmn4x3L32bI5fajCHvmgETF9ocnMtlB4epNGAk5d738W6HmQfM+Hgn6PGp+MhEcg2RpIAjiXLJkmTwB0FwunBAFw7qwiFdOKwLx+vCCbpwRBdO1IWja1YWXbOy6JqVRdesLLpmZdE1K4v25VrkfnsWPQ/wRTs+pin8qB3fhx4/DDbHkkzjR2cbH2zjo218so3PtvG9bXz1qjuNr151p/Ftq260rbrJtuom26qb1Ksu+Bt+Kb0qAdHVOoEMltdJvUY/b+wFX71GT+Or1+hpfPUaPY2v/uBy8twVnPZjbw79SRuLDPm1Z5uxx0l+7elmTOnGXzrpTA4zSXJ+pLXas9Omj/nBsXF+7flpJX71WS4Ffu0ZaiV+7SlqJX7baUZdfcb51at1gV+/Wk/zG9dfMK6/YFx/wbj+gnH9Bcv6e+5ufyz27WK5WV3fX11/bl/vXmc9/vz480tn/As=","brillig_names":["pub_inc_value_internal"],"assert_messages":{"88":"Array index out of bounds","96":"attempt to add with overflow","106":"Array index out of bounds","117":"attempt to add with overflow","124":"Stack too deep","27":"Function pub_inc_value_internal can only be called internally"}},{"name":"pub_set_value","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[{"name":"new_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"JAAEAQIlAASARQABJAAEAwAkAgQBAiQCBAADHxgAAwACgEMrCIBDAAEiAAorBAABgEQ4AIBEAAEiADskAgABAyQCBAAEJAIEAQUqDAQCIAAQCjgCBAYhAgAkAAYgABMkAgQBAyQCBAIGADgDBgQqCAECABABBAEkAwQBAgAoAgIEKg4DBCQCBAIEADgCBAMqDAMEKg4BBAAoAgIGKg0GBAAoBgIDNA0AAwAEIxwMAAIGADgDBgcqCAEGJAIEAggAEAEIASQDBAEGACgGAggqDAgJKg4BCSQCBAEJDDgCCQohAgAxAAo5AQAAACgGAgkAOAkCCioNCggtDAAIAAcAOAIFBg44AgYHIQIAOQAHOQEAACoMBgIgABAlAAR4AIAEDQAAAIAEgAMhAAA/gAM5AQAAIysAGMoYyg==","debug_symbols":"1dnNaoNAFAXgd5l1FjNz585PXqWUYBITBNGgplAk715t1aTV6vbMRhw96OfmngFbcU6P9+shKy5lLfZvrcjLU9JkZdGt2sdOHKssz7Pr4fWykP1B2e98fUuKflk3SdWIvXKediItzt2pV7J7wiXLU7En353P09r6Ma2DmdKK1ELaSumGtJU6PNOeF9LsQhjS7KX8lX7fCRUW+Z7UxOewwXdufIMnt8FxgUa8C47+crTE4igsjsbiEBbHYHEYi2OxOA6L47E4WFOZsKYyYU1lwprKhDWVCWsqE/p2zRszbdfYzPgOna/DGt+j89lOfMszfoiab2TcfBU3X8fNp7j5Jm4+x82Hb911PnzrrvPjbl0Td+ty3K3Lcbcuw7eu4iffbqSDotEdlJttrxm+o///2J4P39HrfPiOXufDd/QK/9EtP5IqS455OvyyudyL08sfnObz9nOnC38B","brillig_names":["pub_set_value"],"assert_messages":{"48":"Array index out of bounds","56":"attempt to add with overflow","62":"Stack too deep"}},{"name":"set_value_twice_with_nested_last","is_unconstrained":true,"custom_attributes":["public"],"abi":{"error_types":{},"parameters":[],"return_type":null},"bytecode":"JAAEAQIlAASAQwABJAAEAwAkAgQAASQCBAACHxgAAgABgEMiAAg4AIBDAAAiAI4qCAECAAABAgEkAgEAAyoOAwIqCAECAAABAgEkAgAAAyoOAwIqCAECAAABAgEkAgACAyoOAwIkAgQBAioIAQMkAgQCBAAQAQQBJAMEAQMAKAMCBCoMBAUkAgAUBioOBgUkAgABBCQCBAAFKgwFASAAIgo4AQUHIQIAfgAHIAAlJAIEAQQkAgQCCAA4BAgHKggBAwAQAQcBJAMEAQMAKAMCByoOBAckAgQCBwA4AwcEKgwEByoOBgcAKAMCCCoNCAcAKAgCBDQNAAQABx4CAAADKggBBAAAAQIBKg4CBCoIAQYAAAECASYCAOseM0IAByQCBAEJJAIEAgsAOAkLCioIAQgAEAEKASQDBAEIACgIAgoqDgkKJAIEAgoAOAgKCSoMCQoqDgcKKg4IBiQCAAoHKgwFASAATAo4AQUIIQIAawAIIABPKg0EASoNBgIpAgAwZE5y4TGgKbhQRbaBgVhdKDPoSHm5cJFD4fWT8AAAAAAEJgIA1UQbDQAFKggBBiQCBAMHABABBwEkAwQBBgAoBgIHKgwHCCoOBAgAKAgCCCoOBAgAKAYCBwAoAgIKKg0KCQAoCgIIKggBCiQCBAILABABCwEkAwQBCgAoCgIMNj+VAAcAAwAIAAkADAABAAsABSQCAgEBCjgLAQIhAgBqAAI5AQAAIwo4AQUIIQIAbgAIOQEAACoNBAgqDQYJACgIAgorBAAJgAMlAAQAAYAEIgCTKwiABQALKwiABgAMKg4HDCoNCwgAKAgCCCoOCAsqDgoEKg4LBioMAgEgAEwcDAABBwA4BAcIJAIEAQkMOAEJCiECAIQACjkBAAAAKAMCCQA4CQEKKg0KBy0MAAcACAA4AQIHDjgBBwghAgCMAAg5AQAAKgwHASAAIiUABHgAgAQNAAAAgASAAyEAAJKAAzkBAAAjAQCAAwACgAcrAYAHgAcBAIAHgASACCUABAACgAoBAIAIgAqACSsAAAGABQEAAAGACQABJQEEAAGABQEAgAUAAoAJKwKACIAJJQAEAAKACgEAgAOACoAJJQAEAAKACwEAgAWAC4AKJQAEAACADA0AgAyAB4ANFwCADYANIQAAq4ANAQCACYAMgA4rAYAOgAsBAIAKgAyADisCgAuADgEAgAwAAoAMIACiAQCACoAHgAYjKwAYyhjK","debug_symbols":"1dzBbuIwEAbgd8mZg2dsz3j6KqtVRVtaISGogK60Qrz7BpYE2tBYyqGa/1I17Zh8TRP/jh04NC+Lp4+3x+X6dbNrHn4dmtXmeb5fbtbt1uE4a562y9Vq+fZ4++MmnL7YuXz3Pl+ftnb7+XbfPJBYmDWL9Uv7rYbQvsDrcrVoHmIJx9+zhsKURjSlEU9pFKc0SlMa5SmNZEojndKoTGk05YzgKWdEvHvIo1i8NIrKnxvNhrtgKd0u2FJfTZHuVEsIeqmWwHatLvlOdVazS3UuN/xT9Yl/918SNaaeL1zhq3Z7KFErHLXY4dU0DjjFF8dccVLwxSFfHPbFib44yRcn++KIL46vXjn56pWTr145++qVs69eOfvqlfP9XrkdGXWcUh2uRZPcVZumCkhSoW64lkwHoG/6ZbuCklRAqYRuF6ncjgjt3viRJfKlmkVD7XiW/tiH0tcypzM+I+MFGa/I+IKMN2C8BGQ8IeMZGR+R8cgJK8gJK8gJK8gJK8gJK8gJq8gJq8gJq8gJq867ShLq9CR8veeV802sOr9iSZL0eglf9MX5JVvR//w1q/1sCdcnZEri7rVLUvpUfeIzNj9i8xM2P2PzBZuv2PyCzTdovgVsPnbqGnbqGnbqGnbqGnbqGnbqGnbqGnbqGnbqUsCOXQrYuUvh54PXcve0ApvoUBTdiZI7UXYncr46MT5fSMH5+kSN736+c5RP7ic8x/nOVylqfOfrFOPTzUTOnwWo8RM23/nzADW++2Wucb771B3nu0/dcT70KiMx9DIjsfvUHedjpy5jpy6L83dJltS9HyGXnAa3W6ze/Wyj/uLdn6X3t+fMwG/Y/hjA/QTuZ3B/BPcncH/27qd89Uul2trz6VJtpMO0iO7T+vu/9ux3n9YVv/u0rvjdp/WI/9hu/plvl/On1eLywTOvH+vnm8+h2f99//+btvgf","brillig_names":["set_value_twice_with_nested_last"],"assert_messages":{"131":"Array index out of bounds","109":"Index out of bounds","105":"Nested call failed!","145":"Stack too deep","139":"attempt to add with overflow"}}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003de78269"},{"kind":"string","value":"ValueNote"},{"fields":[{"name":"value","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Child"}},{"name":"fields","value":{"fields":[{"name":"current_value","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"a_map_with_private_values","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"new_value","type":{"kind":"field"}}],"kind":"struct","path":"Child::pub_inc_value_internal_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Child::pub_inc_value_internal_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"Child::set_value_twice_with_nested_last_parameters"}}],"kind":"struct","path":"Child::set_value_twice_with_nested_last_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"base_value","type":{"kind":"field"}}],"kind":"struct","path":"Child::pub_get_value_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Child::pub_get_value_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"input","type":{"kind":"field"}}],"kind":"struct","path":"Child::value_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Child::value_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Child::private_get_value_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Child::private_get_value_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"Child::set_value_twice_with_nested_first_parameters"}}],"kind":"struct","path":"Child::set_value_twice_with_nested_first_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"new_value","type":{"kind":"field"}},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Child::private_set_value_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Child::private_set_value_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"new_value","type":{"kind":"field"}}],"kind":"struct","path":"Child::pub_inc_value_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Child::pub_inc_value_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"input","type":{"kind":"field"}}],"kind":"struct","path":"Child::value_internal_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Child::value_internal_abi"},{"fields":[{"name":"parameters","type":{"fields":[],"kind":"struct","path":"Child::set_value_with_two_nested_calls_parameters"}}],"kind":"struct","path":"Child::set_value_with_two_nested_calls_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"new_value","type":{"kind":"field"}}],"kind":"struct","path":"Child::pub_set_value_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Child::pub_set_value_abi"}]}},"file_map":{"101":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"103":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            serialized_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"107":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"/// Notifies the simulator that `returns` will be later fetched once the function return is processed, referenced by\n/// their hash. This allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of return values.\npub fn pack_returns(returns: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_returns_oracle_wrapper(returns) };\n}\n\npub unconstrained fn pack_returns_oracle_wrapper(returns: [Field]) {\n    let _ = pack_returns_oracle(returns);\n}\n\npub unconstrained fn unpack_returns<let N: u32>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n\n#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle(_returns: [Field]) -> Field {}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<let N: u32>(_return_hash: Field) -> [Field; N] {}\n"},"109":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}},\n};\n\nuse dep::protocol_types::{\n    hash::{\n        compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n        compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    }, utils::arr_copy_slice,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash =\n                compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"114":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note = unsafe { get_note_internal(storage_slot) };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"},"116":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"120":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"129":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"131":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, &mut PublicContext>\nwhere\n    T: Serialize<T_SERIALIZED_LEN> + Deserialize<T_SERIALIZED_LEN>,\n{\n    // docs:start:public_mutable_struct_read\n    pub fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write(self, value: T) {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T, let T_SERIALIZED_LEN: u32> PublicMutable<T, UnconstrainedContext>\nwhere\n    T: Deserialize<T_SERIALIZED_LEN>,\n{\n    pub unconstrained fn read(self) -> T {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"141":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{\n    constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest,\n};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note_unsafe},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission,\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PublicContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:insert_from_public\n    pub fn insert_from_public(self, note: &mut Note) {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // docs:start:insert\n    pub fn insert(self, note: &mut Note) -> NoteEmission<Note> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        let (notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, note, note_hash);\n            }\n        }\n\n        notes\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, note: Note) {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note, let N: u32> PrivateSet<Note, UnconstrainedContext>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"144":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/utils/comparison.nr","source":"struct ComparatorEnum {\n    EQ: u8,\n    NEQ: u8,\n    LT: u8,\n    LTE: u8,\n    GT: u8,\n    GTE: u8,\n}\n\nglobal Comparator = ComparatorEnum { EQ: 1, NEQ: 2, LT: 3, LTE: 4, GT: 5, GTE: 6 };\n\npub fn compare(lhs: Field, operation: u8, rhs: Field) -> bool {\n    // Values are computed ahead of time because circuits evaluate all branches\n    let is_equal = lhs == rhs;\n    let is_lt = lhs.lt(rhs);\n\n    if (operation == Comparator.EQ) {\n        is_equal\n    } else if (operation == Comparator.NEQ) {\n        !is_equal\n    } else if (operation == Comparator.LT) {\n        is_lt\n    } else if (operation == Comparator.LTE) {\n        is_lt | is_equal\n    } else if (operation == Comparator.GT) {\n        !is_lt & !is_equal\n    } else if (operation == Comparator.GTE) {\n        !is_lt\n    } else {\n        panic(f\"Invalid operation\")\n    }\n}\n\nmod test {\n    use super::compare;\n    use super::Comparator;\n\n    #[test]\n    unconstrained fn test_compare() {\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(compare(lhs, Comparator.LT, rhs), \"Expected lhs to be less than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.LTE, rhs), \"Expected lhs to be less than or equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(compare(lhs, Comparator.GT, rhs), \"Expected lhs to be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(!compare(lhs, Comparator.EQ, rhs), \"Expected lhs to be not equal to rhs\");\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.NEQ, rhs), \"Expected lhs to not be not equal to rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.LT, rhs), \"Expected lhs to not be less than rhs\");\n\n        let lhs = 11;\n        let rhs = 10;\n        assert(\n            !compare(lhs, Comparator.LTE, rhs),\n            \"Expected lhs to not be less than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 10;\n        assert(!compare(lhs, Comparator.GT, rhs), \"Expected lhs to not be greater than rhs\");\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n\n        let lhs = 10;\n        let rhs = 11;\n        assert(\n            !compare(lhs, Comparator.GTE, rhs),\n            \"Expected lhs to not be greater than or equal to rhs\",\n        );\n    }\n}\n"},"147":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"},"149":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/utils/collapse_array.nr","source":"// Collapses an array of Options with sparse Some values into a BoundedVec, essentially unwrapping the Options and\n// removing the None values. For example, given:\n//   input: [some(3), none(), some(1)]\n// this returns\n//   collapsed: [3, 1]\npub fn collapse_array<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collpased BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\npub(crate) fn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n"},"161":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n    }, point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice},\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER,\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"164":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, public_keys::{PublicKeys, IvpkM, ToPoint}, scalar::Scalar, point::Point,\n};\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48]\n    where\n        T: ToPoint,\n    {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false,\n        },\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131,\n        160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171,\n        176, 218, 48, 209, 73, 89, 200, 209,\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"165":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::getters::get_ovsk_app, encrypted_logs::payload::compute_encrypted_log,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, public_keys::{PublicKeys, OvpkM, IvpkM}, hash::sha256_to_field,\n    abis::note_hash::NoteHash,\n};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 416 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] =\n        compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 416 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let ovsk_app: Field = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) =\n            compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) =\n            unsafe { compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient) };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress,\n) {\n    let ovsk_app: Field = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext,\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"166":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, public_keys::{OvpkM, IvpkM},\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, hash::poseidon2_hash_with_separator,\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose,\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes,\n    encrypted_logs::header::EncryptedLogHeader,\n    keys::point_to_symmetric_key::point_to_symmetric_key,\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] =\n        compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(\n    plaintext: [u8; P],\n    eph_sk: Scalar,\n    ivpk: IvpkM,\n) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point,\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field,\n    )\n        .to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::encrypted_logs::payload::{\n        compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext,\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{\n        address::AztecAddress, public_keys::{OvpkM, IvpkM}, point::Point, scalar::Scalar,\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false,\n            },\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false,\n            },\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41,\n            2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239,\n            247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118,\n            183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183,\n            12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78,\n            101, 153, 0, 0, 16, 39,\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(\n            0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2,\n        );\n\n        let log: [u8; 448] = compute_encrypted_log(\n            contract_address,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            plaintext,\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235,\n            86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79,\n            51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171,\n            62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203,\n            98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211,\n            49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205,\n            104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248,\n            193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110,\n            249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173,\n            151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4,\n            235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194,\n            90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219,\n            22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18,\n            204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167,\n            110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239,\n            95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25,\n            244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91,\n            68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76,\n            26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178,\n            143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189,\n            117, 147, 101, 230, 132,\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false,\n            },\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160,\n            190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157,\n            131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93,\n            46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130,\n            37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95,\n            115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234,\n            245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162,\n            25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185,\n            212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236,\n            23, 206, 229, 108,\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb,\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31,\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b,\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(\n            recipient,\n            recipient_ivpk,\n            sender_ovsk_app,\n            eph_sk,\n            eph_pk,\n        );\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238,\n            50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248,\n            43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31,\n            211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151,\n            152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58,\n            120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25,\n            173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224,\n            30, 168, 177, 26, 144, 5, 124, 128, 6,\n        ];\n\n        assert_eq(outgoing_body_ciphertext_from_typescript, ciphertext);\n    }\n}\n"},"177":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice,\n};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator =\n        arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158,\n        236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159,\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"178":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\nuse crate::{\n    oracle::{\n        keys::get_public_keys_and_partial_address,\n        key_validation_request::get_key_validation_request,\n    }, keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) =\n        unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    hinted_canonical_public_keys\n}\n"},"185":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::{MAX_FIELD_VALUE, PUBLIC_DISPATCH_SELECTOR};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::gas::GasOpts;\n\npub struct PublicContext {\n    args_hash: Option<Field>,\n    compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_unencrypted_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<let RETURNS_COUNT: u32>(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let args = &[function_selector.to_field()].append(args);\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            PUBLIC_DISPATCH_SELECTOR,\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(_self: Self) -> AztecAddress {\n        address()\n    }\n    fn msg_sender(_self: Self) -> AztecAddress {\n        sender()\n    }\n    fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        let raw_selector: [Field; 1] = calldata_copy(0, 1);\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    fn transaction_fee(_self: Self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(_self: Self) -> Field {\n        chain_id()\n    }\n    fn version(_self: Self) -> Field {\n        version()\n    }\n    fn block_number(_self: Self) -> Field {\n        block_number()\n    }\n    fn timestamp(_self: Self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(_self: Self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(_self: Self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(_self: Self) -> Field {\n        da_gas_left()\n    }\n    fn is_static_call(_self: Self) -> bool {\n        is_static_call() == 1\n    }\n\n    fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            out[i] = storage_read(storage_slot + i as Field);\n        }\n        out\n    }\n\n    fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Deserialize<N>,\n    {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            storage_write(storage_slot + i as Field, values[i]);\n        }\n    }\n\n    fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Serialize<N>,\n    {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    [user_gas.l2_gas.unwrap_or(MAX_FIELD_VALUE), user_gas.da_gas.unwrap_or(MAX_FIELD_VALUE)]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\n// UNUSED: Remove.\n// unconstrained fn function_selector() -> u32 {\n//     function_selector_opcode()\n// }\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<let RET_SIZE: u32>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\nunconstrained fn avm_return<let N: u32>(returndata: [Field; N]) {\n    return_opcode(returndata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n// UNUSED: Remove.\n// #[oracle(avmOpcodeFunctionSelector)]\n// unconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode<let N: u32>(returndata: [Field; N]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<let RET_SIZE: u32>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field,\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n\npub struct FunctionReturns<let N: u32> {\n    values: [Field; N],\n}\n\nimpl<let N: u32> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        Deserialize::deserialize(self.raw())\n    }\n}\n\nimpl FunctionReturns<0> {\n    pub fn assert_empty(self) {\n        assert(self.values.len() == 0);\n    }\n}\n"},"186":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n        key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n        call_private_function::call_private_function_internal, header::get_header_at,\n        logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext, function_selector::FunctionSelector,\n        max_block_number::MaxBlockNumber,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n        nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash},\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL,\n        MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR,\n    }, header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests: BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator {\n                request,\n                sk_app_generator: sk_generators[key_index],\n            };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(\n        &mut self,\n        note_hash_counter: u32,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context,\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        let call_request = PublicCallRequest { call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.public_teardown_call_request = PublicCallRequest { call_context, args_hash, counter };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"},"191":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs,\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {}\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n"},"209":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self.to_integer()]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\n#[test]\nfn test_u16_serialization() {\n    let a: u16 = 10;\n    assert_eq(a, u16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i8_serialization() {\n    let a: i8 = -10;\n    assert_eq(a, i8::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i16_serialization() {\n    let a: i16 = -10;\n    assert_eq(a, i16::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i32_serialization() {\n    let a: i32 = -10;\n    assert_eq(a, i32::deserialize(a.serialize()));\n}\n\n#[test]\nfn test_i64_serialization() {\n    let a: i64 = -10;\n    assert_eq(a, i64::deserialize(a.serialize()));\n}\n"},"224":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n"},"234":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{\n        decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI,\n    };\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"284":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: u32,\n) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n"},"305":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"312":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, public_keys_hash::PublicKeysHash,\n        salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils,\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [pub_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        ))\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        functino_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys_hash: PublicKeysHash,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            functino_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys_hash, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"315":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n"},"317":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"325":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash}, note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n        MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX,\n    }, merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), unique_note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256(\n            [log_hash.contract_address.to_field(), log_hash.log_hash.value],\n        )\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n            0,\n        ))\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk<let N: u32>(\n    _vk: VerificationKey<N>,\n) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"327":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr","source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        GENERATOR_INDEX__PUBLIC_KEYS_HASH, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_IVPK_M_X,\n        DEFAULT_IVPK_M_Y, DEFAULT_OVPK_M_X, DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y,\n    }, hash::poseidon2_hash_with_separator, point::POINT_LENGTH,\n    traits::{Deserialize, Serialize, Hash},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse dep::std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE = 16;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeroes.\ntype MSG_BLOCK = [u8; BLOCK_SIZE];\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !crate::runtime::is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: MSG_BLOCK) -> INT_BLOCK {\n    let mut msg32: INT_BLOCK = [0; INT_BLOCK_SIZE];\n\n    for i in 0..INT_BLOCK_SIZE {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4 * (i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeroes.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeroes by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    for i in 0..BLOCK_SIZE {\n        if i >= msg_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n    for i in msg_byte_ptr..MSG_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[MSG_SIZE_PTR + i] = len_bytes[i];\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    for i in 0..MSG_SIZE_PTR {\n        let predicate = (i < msg_byte_ptr) as u8;\n        let expected_byte = predicate * last_block[i];\n        assert_eq(msg_block[i], expected_byte);\n    }\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let len = 8 * message_size;\n    let mut reconstructed_len: Field = 0;\n    for i in MSG_SIZE_PTR..BLOCK_SIZE {\n        reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n    }\n    assert_eq(reconstructed_len, len as Field);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4 * j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"376":{"path":"/usr/src/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n        traits::Serialize, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n    }, macros::notes::note,\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    }, oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n};\n\nglobal VALUE_NOTE_LEN: u32 = 3; // 3 plus a header.\n\n// docs:start:value-note-def\n// ValueNote is used as fn parameter in the Claim contract, so it has to implement the Serialize trait.\n// It is important that the order of these annotations is preserved so that derive(Serialize) runs AFTER the note macro, which injects the note header.\n#[note]\n#[derive(Serialize)]\npub struct ValueNote {\n    value: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NullifiableNote for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Eq for ValueNote {\n    fn eq(self, other: Self) -> bool {\n        (self.value == other.value)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n"},"380":{"path":"/usr/src/noir-projects/noir-contracts/contracts/child_contract/src/main.nr","source":"// A contract used along with `Parent` contract to test nested calls.\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract Child {\n    use dep::aztec::prelude::{AztecAddress, PublicMutable, PrivateSet, Map};\n\n    use dep::aztec::{\n        note::note_getter_options::NoteGetterOptions,\n        encrypted_logs::encrypted_note_emission::encode_and_encrypt_note,\n        keys::getters::get_public_keys, utils::comparison::Comparator,\n        macros::{storage::storage, functions::{private, public, internal}},\n    };\n    use dep::value_note::value_note::ValueNote;\n\n    #[storage]\n    struct Storage<Context> {\n        current_value: PublicMutable<Field, Context>,\n        a_map_with_private_values: Map<AztecAddress, PrivateSet<ValueNote, Context>, Context>,\n    }\n\n    // Returns a sum of the input and the chain id and version of the contract in private circuit public input's return_values.\n    #[private]\n    fn value(input: Field) -> Field {\n        input + context.chain_id() + context.version()\n    }\n    // Returns a sum of the input and the chain id and version of the contract in private circuit public input's return_values.\n    // Can only be called from this contract.\n    #[private]\n    #[internal]\n    fn value_internal(input: Field) -> Field {\n        input + context.chain_id() + context.version()\n    }\n\n    // Returns base_value + chain_id + version + block_number + timestamp\n    #[public]\n    fn pub_get_value(base_value: Field) -> Field {\n        let return_value = base_value\n            + context.chain_id()\n            + context.version()\n            + context.block_number()\n            + context.timestamp() as Field;\n\n        return_value\n    }\n\n    // Sets `current_value` to `new_value`\n    #[public]\n    fn pub_set_value(new_value: Field) -> Field {\n        storage.current_value.write(new_value);\n        context.emit_unencrypted_log(new_value);\n\n        new_value\n    }\n\n    #[private]\n    fn private_set_value(new_value: Field, owner: AztecAddress) -> Field {\n        let owner_keys = get_public_keys(owner);\n\n        let mut note = ValueNote::new(new_value, owner_keys.npk_m.hash());\n        storage.a_map_with_private_values.at(owner).insert(&mut note).emit(encode_and_encrypt_note(\n            &mut context,\n            owner_keys.ovpk_m,\n            owner_keys.ivpk_m,\n            owner,\n        ));\n        new_value\n    }\n\n    #[private]\n    fn private_get_value(amount: Field, owner: AztecAddress) -> Field {\n        let mut options = NoteGetterOptions::new();\n        options = options.select(ValueNote::properties().value, Comparator.EQ, amount).set_limit(1);\n        let notes = storage.a_map_with_private_values.at(owner).get_notes(options);\n        notes.get(0).value\n    }\n\n    // Increments `current_value` by `new_value`\n    #[public]\n    fn pub_inc_value(new_value: Field) -> Field {\n        let old_value = storage.current_value.read();\n        storage.current_value.write(old_value + new_value);\n        context.emit_unencrypted_log(new_value);\n\n        new_value\n    }\n\n    // Increments `current_value` by `new_value`. Can only be called from this contract.\n    #[public]\n    #[internal]\n    fn pub_inc_value_internal(new_value: Field) -> Field {\n        let old_value = storage.current_value.read();\n        storage.current_value.write(old_value + new_value);\n        context.emit_unencrypted_log(new_value);\n\n        new_value\n    }\n\n    #[public]\n    fn set_value_twice_with_nested_first() {\n        let _result = Child::at(context.this_address()).pub_set_value(10).call(&mut context);\n        storage.current_value.write(20);\n        context.emit_unencrypted_log(20);\n    }\n\n    #[public]\n    fn set_value_twice_with_nested_last() {\n        storage.current_value.write(20);\n        context.emit_unencrypted_log(20);\n        let _result = Child::at(context.this_address()).pub_set_value(10).call(&mut context);\n    }\n\n    #[public]\n    fn set_value_with_two_nested_calls() {\n        Child::at(context.this_address()).set_value_twice_with_nested_first().call(&mut context);\n        Child::at(context.this_address()).set_value_twice_with_nested_last().call(&mut context);\n        storage.current_value.write(20);\n        context.emit_unencrypted_log(20);\n    }\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"65":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"7":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n}\n"},"93":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{\n    KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"96":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress}, public_keys::{PublicKeys, NpkM, IvpkM, OvpkM, TpkM},\n    point::Point,\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"98":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(\n            contract_address,\n            randomness,\n            encrypted_event,\n            counter,\n        )\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32,\n) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\npub unconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {}\n"}}}