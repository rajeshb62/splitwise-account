{"transpiled":true,"noir_version":"0.36.0+1094f036be7b102252a3a5c0d4b8c621779cf4bd-x8664","name":"Escrow","functions":[{"name":"constructor","is_unconstrained":false,"custom_attributes":["private","initializer"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"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uSWWAUuFxZZbfuXackssttwSiy23xGLLrbA4+6zGosstsehySyy63BLLgKXCYsstsdhySyy23BKLLbfE4kliVbGw37PPPseiyy2x6HJLLLbc6ivX2Wc1FltuicWWW2Kx5ZZYbLklFl1ugWXs9+yzz7HockssutwSiy23xDJgqbDYckssttwSiyeJFcXC2O/ZZ59j0eVWWPZ79tnnWGy51Veus89qLLbcEsuApcJiyy2x2HJLLLrcEosut8Siy62w7Pfss8+x2HJLLLbcEostt8QyYKmweJJYVSzs9+yzz7HockssutwSiy23+sp19lmNxZZbYrHlllhsuSWWAUuFRZdbYtHlllh0uSUWXW6JxZZbYXH2WY3FlltiseWWWDxJrCoW9nv22edYdLklFl1uicWWW37l2nJLLLbcCouzz2osttwSiy23xKLLLbEMWCosutwSiy63xGLLLbHYckssttwKi7PPaiyeJFYVC/s9++xzLLrcEsuApcJiyy2/cm25JRZbbonFlltiseVWWJx9VmPR5ZZYdLklFl1uiWXAUmGx5ZZYbLklFltuicWWW2LxJLGqWNjv2WefY9Hlllh0uSUWW271levssxqLLbfEYsstsdhySyy23BKLLrfCst+zzz7HosstsehySyy23BLLgKXCYsstsdhySyyeJFYVC/s9++xzLLrcAstlv2effY7Fllt85V6cfVZjseWWWAYsFRZbbonFllti0eWWWHS5JRZdboVlv2effY7FlltiseWWWGy5JZYBS4XFk8SqYmG/Z599jkWXW2LR5ZZYbLnVV66zz2osttwSiy23xGLLLbEMWCosutwSiy63xKLLLbHockssttwKi7PPaiy23BKLLbfE4kliVbGw37PPPseiyy2x6HJLLLbc8ivXlltiseVWWJx9VmOx5ZZYbLklFl1uiWXAUmHR5ZZYdLklFltuicWWW2Kx5VZYnH1WY/EksapY2O/ZZ59j0eWWWAYsFRZbbvmVa8stsdhySyy23BKLLbfC4uyzGosut8Siyy2x6HJLLAOWCostt8Riyy2x2HJLLLbcEosniVXFwn7PPvsciy63xKLLLbHYcquvXGef1VhsuSUWW26JxZZbYrHlllh0uRWW/Z599jkWXW6JRZdbYrHlllgGLBUWW26JxZZbYvEksapY2O/ZZ59j0eVWWPZ79tnnWGy5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8pToXk3J8pToXk3J8pToXk3J8pQMU2JKFqdE92pKlqdE92pKlqdE92pKlqdE92pKlqdE92pKFqfkoXs1JctTons1JctTons1JctTons1JctTMkyJKVmcEt2rKVmeEt2rKVmeEt2rKVmeEt2rKVmeEt2rKVmakttB92pKlqdE92pKlqdE92pKlqdE92pKlqdkmBJTsjgluldTsjwluldTsjwluldTsjwluldTsjwluldTsjglR92rKVmeEt2rKVmeEt2rKVmeEt2rKVmekmFKTMnilOheTcnylOheTcnylOheTcnylOheTcnylOheTcnilJx0r6ZkeUp0r6ZkeUp0r6ZkeUp0r6ZkeUqGKTEli1OiezUly1OiezUly1OiezUly1OiezUly1OiezUli1Ny1r2akuUp0b2akuUp0b2akuUp0b2akuUpGabElCxOie7VlCxPie7VlCxPie7VlCxPie7VlCxPie7VlCxOydC9mpLlKdG9mpLlKdG9mpLlKdG9bnVKnqn8mJLH++CH4LcZ/Die3t7zGLfPX3x6nC9vqTwuv37yqQR3uL+9jcvh8fj9xT9HSvdqpMIjpag1UuGR0uoaqfBIqYCNVHik9MVGKjtSF+WykQqPlCbaSIVHSm1tpMIjpeM2UuGRGkbKSGVHSntupMIjpT03UuGR0p4bqfBIac+NVHiktOdGKjtSV+25kQqPlPbcSIVHSntupMIjpT03UuGRGkbKSGVHSntupMIjpT03UuGR0p4bqfBIac+NVHiktOdGKjtSN+25kQqPlPbcSIVHSntupMIjpT03UuGRGkbKSGVHSntupMIjpT03UuGR0p4bqfBIac+NVHiktOdGKjtSd+25kQqPlPbcSIVHSntupMIjpT03UuGRGkbKSGVHSntupMIjpT03UuGR0p4bqfBIac+NVHiktOdGKjtSD+25kQqPlPbcSIVHSntupMIjpT03UuGRGkbKSGVHSntupMIjpT03UuGR0p4bqfBIac+NVHiktOdGKjpS98Nu2/Mf/cm/X3w/3RdGapwubzzG6XZeQD4ObzN1GafxHvlu2+XXId9t+/o65LttJ1+HfEA+G/lu263XId9t+/M65LttR16HfLftweuQ79auX4b8yD6nI2ef05Gzz+nI2ed05APy2cjZ53Tk7HM6cvY5HTn7nI6cfc5GfmKf05Gzz+nI2ed0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","brillig_names":["get_contract_instance_internal","get_public_keys_and_partial_address","random","decompose_hint","notify_created_note_oracle_wrapper","get_key_validation_request","lt_32_hint","lte_16_hint","build_msg_block","attach_len_to_msg_block","build_msg_block","emit_encrypted_note_log_oracle_wrapper","directive_integer_quotient","directive_invert"]},{"name":"withdraw","is_unconstrained":false,"custom_attributes":["private"],"abi":{"error_types":{"3469988399892582431":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}}},{"name":"public_teardown_call_request","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::public_call_request::PublicCallRequest"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"address_note::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"address_note::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"address_note::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"address_note::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"databus"}},"bytecode":"","debug_symbols":"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","brillig_names":["get_note_internal","decompose_hint","pack_arguments_oracle_wrapper","call_private_function_internal","directive_invert"]},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{"3469988399892582431":{"error_kind":"fmtstring","item_types":[],"length":20}},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":9,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"","brillig_names":["compute_note_hash_and_optionally_a_nullifier"]}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000850bb34d"},{"kind":"string","value":"AddressNote"},{"fields":[{"name":"address","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000be5b3a47"},{"kind":"string","value":"TransparentNote"},{"fields":[{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"secret_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000008c1acdbf"},{"kind":"string","value":"TokenNote"},{"fields":[{"name":"npk_m_hash","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"randomness","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}},{"name":"nullable","value":{"kind":"boolean","value":false}}],"kind":"struct"}},{"name":"amount","value":{"fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":true}}],"kind":"struct"}}],"kind":"struct"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Token"}},{"name":"fields","value":{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"contract_name","value":{"kind":"string","value":"Escrow"}},{"name":"fields","value":{"fields":[{"name":"owner","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Escrow::withdraw_parameters"}}],"kind":"struct","path":"Escrow::withdraw_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"address_note::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Escrow::constructor_parameters"}}],"kind":"struct","path":"Escrow::constructor_abi"}]}},"file_map":{"101":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/random.nr","source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n"},"103":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            serialized_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        note_hash,\n        counter,\n    );\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    let _ = notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(\n    _nullifier: Field,\n    _note_hash: Field,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let N: u32, let S: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S],\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<let N: u32, let S: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S],\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields,\n    )\n}\n\npub unconstrained fn get_notes<Note, let N: u32, let M: u32, let S: u32, let NS: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N], // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S]\nwhere\n    Note: NoteInterface<N>,\n{\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields,\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n"},"106":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n"},"109":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{\n    context::PrivateContext,\n    note::{note_header::NoteHeader, note_interface::{NullifiableNote, NoteInterface}},\n};\n\nuse dep::protocol_types::{\n    hash::{\n        compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n        compute_siloed_nullifier as compute_siloed_nullifier_from_preimage,\n    }, utils::arr_copy_slice,\n};\n\npub fn compute_siloed_nullifier<Note, let N: u32>(\n    note_with_header: Note,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note_with_header.get_header();\n    let note_hash_for_nullify = compute_note_hash_for_nullify(note_with_header);\n    let inner_nullifier = note_with_header.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_read_request<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash = note.compute_note_hash();\n    let nonce = note.get_header().nonce;\n    let counter = note.get_header().note_hash_counter;\n\n    if counter != 0 {\n        note_hash\n    } else {\n        compute_unique_note_hash(nonce, note_hash)\n    }\n}\n\n// TODO(#7775): make this not impossible to understand\npub fn compute_note_hash_for_nullify_internal<Note, let N: u32>(\n    note: Note,\n    note_hash_for_read_request: Field,\n) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let header = note.get_header();\n\n    if header.note_hash_counter != 0 {\n        if header.nonce == 0 {\n            // Case 1: Transient note\n            note_hash_for_read_request\n        } else {\n            // Case 2: Non-revertible note, nullified by a revertible nullifier\n            let unique_note_hash =\n                compute_unique_note_hash(header.nonce, note_hash_for_read_request);\n            compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        }\n    } else {\n        // Case 3: Note from a previous transaction\n        // note_hash_for_read_request is already the unique_note_hash in this case\n        compute_siloed_note_hash(header.contract_address, note_hash_for_read_request)\n    }\n}\n\n// TODO(#7775): nuke this commented out code - kept it around as it contains comments which might be helpful when tackling #7775\n// pub fn compute_note_hash_for_nullify<Note, let N: u32, let M: u32>(note: Note) -> Field where Note: NoteInterface<N> {\n//     let header = note.get_header();\n//     // There are 3 cases for reading a note intended for consumption:\n//     // 1. The note was inserted in this transaction, is revertible, or is not nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce == 0)\n//     // 2. The note was inserted in this transaction, is non-revertible, and is nullified by a revertible nullifier in\n//     //    the same transaction: (note_hash_counter != 0) & (nonce != 0)\n//     // 3. The note was inserted in a previous transaction: (note_hash_counter == 0) & (nonce != 0)\n\n//     let note_hash = note.compute_note_hiding_point().x;\n\n//     if header.nonce == 0 {\n//         // Case 1.\n//         // If a note is transient, we just read the note_hash (kernel will hash it with nonce and silo by contract address).\n//         note_hash\n//     } else {\n//         // Case 2: If a note is non-revertible, and is nullified by a revertible nullifier, we cannot squash them in the\n//         // private reset circuit. Because if the tx reverts, we will have to keep the note hash and throw away the\n//         // nullifier.\n//         // And if the tx does not revert, both will be emitted. In which case, the nullifier must be created in the app\n//         // from the siloed note hash.\n//         // The kernel circuit will check that a nullifier with non-zero note_nonce is linked to a note hash, whose\n//         // siloed note hash matches the note hash specified in the nullifier.\n\n//         // Case 3: If a note is not from the current transaction, that means we are reading a settled note (from\n//         // tree) created in a previous TX. So we need the siloed_note_hash which has already been hashed with\n//         // nonce and then contract address. This hash will match the existing leaf in the note hash\n//         // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n//         let unique_note_hash = compute_unique_note_hash(header.nonce, note_hash);\n//         compute_siloed_note_hash(header.contract_address, unique_note_hash)\n//         // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n//         // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n//         // nullification, it is not strictly necessary to silo the note hash before computing\n//         // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n//         // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n//         // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n//         // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n//         // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n//     }\n// }\n\npub fn compute_note_hash_for_nullify<Note, let N: u32>(note: Note) -> Field\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    compute_note_hash_for_nullify_internal(note, note_hash_for_read_request)\n}\n\npub unconstrained fn compute_note_hash_and_optionally_a_nullifier<T, let N: u32, let S: u32>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S],\n) -> [Field; 4]\nwhere\n    T: NoteInterface<N> + NullifiableNote,\n{\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let note_hash = note.compute_note_hash();\n    let unique_note_hash = compute_unique_note_hash(note_header.nonce, note_hash);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        note.compute_nullifier_without_context()\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"114":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH,\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, NoteStatus, PropertySelector},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::oracle;\nuse crate::utils::comparison::compare;\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    serialized_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note.\n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = serialized_note[selector.index].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, let N: u32>(context: PrivateContext, storage_slot: Field, note: Note)\nwhere\n    Note: NoteInterface<N>,\n{\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<let N: u32>(\n    serialized_note: [Field; N],\n    selects: BoundedVec<Option<Select>, N>,\n) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (Note, Field)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note = unsafe { get_note_internal(storage_slot) };\n\n    // Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do is check that\n    // the metadata is correct, and that the note exists.\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (note, note_hash_for_read_request)\n}\n\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteInterface<N> + NullifiableNote + Eq,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = crate::utils::collapse_array(filtered_notes);\n    let mut note_hashes: BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> =\n        BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let note = notes.get_unchecked(i);\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> Note\nwhere\n    Note: NoteInterface<N>,\n{\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length,\n    )[0]\n        .expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteInterface<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteInterface<N>,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length,\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n"},"116":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::{NoteInterface, NullifiableNote},\n    utils::{compute_note_hash_for_read_request, compute_note_hash_for_nullify_internal},\n    note_emission::NoteEmission,\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    let serialized_note = Note::serialize_content(*note);\n    notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, let N: u32>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let note_hash = note.compute_note_hash();\n\n    context.push_note_hash(note_hash);\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note, let N: u32>(context: &mut PrivateContext, note: Note)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    destroy_note_unsafe(context, note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note, let N: u32>(\n    context: &mut PrivateContext,\n    note: Note,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteInterface<N> + NullifiableNote,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_internal(note, note_hash_for_read_request);\n    let nullifier = note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let notification_note_hash = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    notify_nullified_note(nullifier, notification_note_hash, nullifier_counter);\n\n    context.push_nullifier_for_note_hash(nullifier, notification_note_hash)\n}\n"},"120":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    note: Note,\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n"},"132":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator,\n};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes},\n    note_interface::{NoteInterface, NullifiableNote}, note_viewer_options::NoteViewerOptions,\n    note_emission::NoteEmission,\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\npub struct PrivateImmutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateImmutable<T, Context> {}\n\nimpl<Note, Context> PrivateImmutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor.\n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\nimpl<Note> PrivateImmutable<Note, &mut PrivateContext> {\n    // docs:start:initialize\n    pub fn initialize<let N: u32>(self, note: &mut Note) -> NoteEmission<Note>\n    where\n        Note: NoteInterface<N> + NullifiableNote,\n    {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<let N: u32>(self) -> Note\n    where\n        Note: NoteInterface<N> + NullifiableNote,\n    {\n        let storage_slot = self.storage_slot;\n        get_note(self.context, storage_slot).0\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateImmutable<Note, UnconstrainedContext> {\n    // docs:start:is_initialized\n    pub unconstrained fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // view_note does not actually use the context, but it calls oracles that are only available in private\n    // docs:start:view_note\n    pub unconstrained fn view_note<let N: u32>(self) -> Note\n    where\n        Note: NoteInterface<N> + NullifiableNote,\n    {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n"},"147":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/utils/point.nr","source":"use dep::protocol_types::point::Point;\n\n// I am storing the modulus divided by 2 plus 1 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(pk: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!pk.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = pk.x.to_be_bytes();\n\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    if !BN254_FR_MODULUS_DIV_2.lt(pk.y) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\nmod test {\n    use dep::protocol_types::point::Point;\n    use crate::utils::point::point_to_bytes;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n}\n"},"161":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__FUNCTION_ARGS,\n    }, point::Point, traits::Hash,\n    hash::{sha256_to_field, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice},\n};\nuse crate::utils::to_bytes::{arr_to_be_bytes_arr, str_to_be_bytes_arr};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<let N: u32>(\n    contract_address: AztecAddress,\n    log: [u8; N],\n) -> Field {\n    let mut hash_bytes = [0; N + 36];\n    // Address is converted to 32 bytes in ts\n    let address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes: [u8; 4] = (N as Field).to_be_bytes();\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..N {\n        hash_bytes[36 + i] = log[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER,\n    )\n}\n\npub struct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd,\n    ];\n    let serialized_log = arr_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(\n        0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6,\n    );\n    let log = AztecAddress::from_field(\n        0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303,\n    );\n    let serialized_log: [u8; 32] = log.to_field().to_be_bytes();\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"dummy\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nunconstrained fn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(\n        0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8,\n    );\n    let log = \"Hello this is a string\";\n    let serialized_log = str_to_be_bytes_arr(log);\n    let hash = compute_unencrypted_log_hash(contract_address, serialized_log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"164":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, public_keys::{PublicKeys, IvpkM, ToPoint}, scalar::Scalar, point::Point,\n};\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nuse std::aes128::aes128_encrypt;\n\npub struct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext<T>(self, secret: Scalar, pk: T) -> [u8; 48]\n    where\n        T: ToPoint,\n    {\n        let full_key = point_to_symmetric_key(secret, pk.to_point());\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nunconstrained fn test_encrypted_log_header_matches_noir() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = IvpkM {\n        inner: Point {\n            x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            is_infinite: false,\n        },\n    };\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    // The following value was generated by `encrypted_log_header.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_header_ciphertext_from_typescript = [\n        226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 194, 44, 7, 131,\n        160, 83, 64, 181, 98, 38, 153, 214, 62, 171, 253, 161, 111, 191, 28, 247, 216, 26, 222, 171,\n        176, 218, 48, 209, 73, 89, 200, 209,\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext_from_typescript);\n}\n"},"165":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    keys::getters::get_ovsk_app, encrypted_logs::payload::compute_encrypted_log,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, public_keys::{PublicKeys, OvpkM, IvpkM}, hash::sha256_to_field,\n    abis::note_hash::NoteHash,\n};\n\nfn compute_raw_note_log<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 416 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists = context.note_hashes.storage.any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n\n    let contract_address: AztecAddress = context.this_address();\n\n    let plaintext = note.to_be_bytes(storage_slot);\n    let encrypted_log: [u8; 416 + N * 32] =\n        compute_encrypted_log(contract_address, ovsk_app, ovpk, ivpk, recipient, plaintext);\n    let log_hash = sha256_to_field(encrypted_log);\n\n    (note_hash_counter, encrypted_log, log_hash)\n}\n\nunconstrained fn compute_raw_note_log_unconstrained<Note, let N: u32>(\n    context: PrivateContext,\n    note: Note,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> (u32, [u8; 416 + N * 32], Field)\nwhere\n    Note: NoteInterface<N>,\n{\n    let ovsk_app = get_ovsk_app(ovpk.hash());\n    compute_raw_note_log(context, note, ovsk_app, ovpk, ivpk, recipient)\n}\n\n// This function seems to be affected by the following Noir bug:\n// https://github.com/noir-lang/noir/issues/5771\n// If you get weird behavior it might be because of it.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        let ovsk_app: Field = context.request_ovsk_app(ovpk.hash());\n\n        let (note_hash_counter, encrypted_log, log_hash) =\n            compute_raw_note_log(*context, e.note, ovsk_app, ovpk, ivpk, recipient);\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n) -> fn[(&mut PrivateContext, OvpkM, IvpkM, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteInterface<N>,\n{\n    |e: NoteEmission<Note>| {\n        //   Having the log hash be unconstrained here is fine because the way this works is we send the log hash\n        // to the kernel, and it gets included as part of its public inputs. Then we send the tx to the sequencer,\n        // which includes the kernel proof and the log preimages. The sequencer computes the hashes of the logs\n        // and checks that they are the ones in the public inputs of the kernel, and drops the tx otherwise (proposing\n        // the block on L1 would later fail if it didn't because of txs effects hash mismatch).\n        //   So if we don't constrain the log hash, then a malicious sender can compute the correct log, submit a bad\n        // log hash to the kernel, and then submit the bad log preimage to the sequencer. All checks will pass, but\n        // the submitted log will not be the one that was computed by the app.\n        //   In the unconstrained case, we don't care about the log at all because we don't do anything with it,\n        // and because it's unconstrained: it could be anything. So if a sender chooses to broadcast the tx with a log\n        // that is different from the one that was used in the circuit, then they'll be able to, but they were already\n        // able to change the log before anyway, so the end result is the same. It's important here that we do not\n        // return the log from this function to the app, otherwise it could try to do stuff with it and then that might\n        // be wrong.\n        //   Regarding the note hash counter, this is used for squashing. The kernel assumes that a given note can have\n        // more than one log and removes all of the matching ones, so all a malicious sender could do is either: cause\n        // for the log to be deleted when it shouldn't have (which is fine - they can already make the content be\n        // whatever), or cause for the log to not be deleted when it should have (which is also fine - it'll be a log\n        // for a note that doesn't exist).\n        let (note_hash_counter, encrypted_log, log_hash) =\n            unsafe { compute_raw_note_log_unconstrained(*context, e.note, ovpk, ivpk, recipient) };\n        context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n    }\n}\n\n/// Encrypts a partial log and emits it. Takes recipient keys on the input and encrypts both the outgoing and incoming\n/// logs for the recipient. This is necessary because in the partial notes flow the outgoing always has to be the same\n/// as the incoming to not leak any information (typically the `from` party finalizing the partial note in public does\n/// not know who the recipient is).\npub fn encrypt_and_emit_partial_log<let M: u32>(\n    context: &mut PrivateContext,\n    log_plaintext: [u8; M],\n    recipient_keys: PublicKeys,\n    recipient: AztecAddress,\n) {\n    let ovsk_app: Field = context.request_ovsk_app(recipient_keys.ovpk_m.hash());\n\n    let encrypted_log: [u8; 352 + M] = compute_encrypted_log(\n        context.this_address(),\n        ovsk_app,\n        recipient_keys.ovpk_m,\n        recipient_keys.ivpk_m,\n        recipient,\n        log_plaintext,\n    );\n    let log_hash = sha256_to_field(encrypted_log);\n\n    // Unfortunately we need to push a dummy note hash to the context here because a note log requires having\n    // a counter that corresponds to a note hash in the same call.\n    let note_hash_counter = context.side_effect_counter;\n    context.push_note_hash(5);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n"},"166":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, public_keys::{OvpkM, IvpkM},\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, hash::poseidon2_hash_with_separator,\n};\nuse std::{\n    aes128::aes128_encrypt, embedded_curve_ops::fixed_base_scalar_mul as derive_public_key,\n    hash::from_field_unsafe as fr_to_fq_unsafe, field::bn254::decompose,\n};\n\nuse crate::{\n    oracle::random::random, utils::point::point_to_bytes,\n    encrypted_logs::header::EncryptedLogHeader,\n    keys::point_to_symmetric_key::point_to_symmetric_key,\n};\n\npub fn compute_encrypted_log<let P: u32, let M: u32>(\n    contract_address: AztecAddress,\n    ovsk_app: Field,\n    ovpk: OvpkM,\n    ivpk: IvpkM,\n    recipient: AztecAddress,\n    plaintext: [u8; P],\n) -> [u8; M] {\n    let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n    let outgoing_body_ciphertext: [u8; 144] =\n        compute_outgoing_body_ciphertext(recipient, ivpk, fr_to_fq(ovsk_app), eph_sk, eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now\n    let eph_pk_bytes = point_to_bytes(eph_pk);\n    for i in 0..32 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[96 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[144 + i] = outgoing_header_ciphertext[i];\n    }\n    for i in 0..144 {\n        encrypted_bytes[192 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 336;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[336 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (32 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (144 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (P + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field element to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let (lo, hi) = decompose(r);\n\n    Scalar { lo, hi }\n}\n\nfn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    // We use the randomness to preserve the privacy of both the sender and recipient via encryption, so a malicious\n    // sender could use non-random values to reveal the plaintext. But they already know it themselves anyway, and so\n    // the recipient already trusts them to not disclose this information. We can therefore assume that the sender will\n    // cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // We use the unsafe version of `fr_to_fq` because multi_scalar_mul (called by derive_public_key) will constrain\n    // the scalars.\n    let eph_sk = fr_to_fq_unsafe(randomness);\n    let eph_pk = derive_public_key(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n\npub fn compute_incoming_body_ciphertext<let P: u32>(\n    plaintext: [u8; P],\n    eph_sk: Scalar,\n    ivpk: IvpkM,\n) -> [u8] {\n    let full_key = point_to_symmetric_key(eph_sk, ivpk.to_point());\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(plaintext, iv, sym_key)\n}\n\n/// Encrypts ephemeral secret key and recipient's ivpk --> with this information the recipient of outgoing will\n/// be able to derive the key with which the incoming log can be decrypted.\npub fn compute_outgoing_body_ciphertext(\n    recipient: AztecAddress,\n    recipient_ivpk: IvpkM,\n    ovsk_app: Scalar,\n    eph_sk: Scalar,\n    eph_pk: Point,\n) -> [u8; 144] {\n    // Again, we could compute `eph_pk` here, but we keep the interface more similar\n    // and also make it easier to optimise it later as we just pass it along\n    let mut buffer = [0 as u8; 128];\n\n    let serialized_eph_sk_high: [u8; 32] = eph_sk.hi.to_be_bytes();\n    let serialized_eph_sk_low: [u8; 32] = eph_sk.lo.to_be_bytes();\n\n    let address_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let serialized_recipient_ivpk = point_to_bytes(recipient_ivpk.to_point());\n\n    for i in 0..32 {\n        buffer[i] = serialized_eph_sk_high[i];\n        buffer[i + 32] = serialized_eph_sk_low[i];\n        buffer[i + 64] = address_bytes[i];\n    }\n    for i in 0..32 {\n        buffer[i + 96] = serialized_recipient_ivpk[i];\n    }\n\n    // We compute the symmetric key using poseidon.\n    let full_key: [u8; 32] = poseidon2_hash_with_separator(\n        [ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY as Field,\n    )\n        .to_be_bytes();\n\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n\n    for i in 0..16 {\n        sym_key[i] = full_key[i];\n        iv[i] = full_key[i + 16];\n    }\n    aes128_encrypt(buffer, iv, sym_key).as_array()\n}\n\nmod test {\n    use crate::encrypted_logs::payload::{\n        compute_encrypted_log, compute_incoming_body_ciphertext, compute_outgoing_body_ciphertext,\n    };\n    use std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\n    use dep::protocol_types::{\n        address::AztecAddress, public_keys::{OvpkM, IvpkM}, point::Point, scalar::Scalar,\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn test_encrypted_log_matches_typescript() {\n        // All the values in this test were copied over from `tagged_log.test.ts`\n        let contract_address = AztecAddress::from_field(\n            0x10f48cd9eff7ae5b209c557c70de2e657ee79166868676b787e9417e19260e04,\n        );\n        let ovsk_app = 0x03a6513d6def49f41d20373d2cec894c23e7492794b08fc50c0e8a1bd2512612;\n        let ovpk_m = OvpkM {\n            inner: Point {\n                x: 0x1961448682803198631f299340e4206bb12809d4bebbf012b30f59af73ba1a15,\n                y: 0x133674060c3925142aceb4f1dcd9f9137d0217d37ff8729ee5ceaa6e2790353d,\n                is_infinite: false,\n            },\n        };\n        let ivpk_m = IvpkM {\n            inner: Point {\n                x: 0x260cd3904f6df16e974c29944fdc839e40fb5cf293f03df2eb370851d3a527bc,\n                y: 0x0eef2964fe6640e84c82b5d2915892409b38e9e25d39f68dd79edb725c55387f,\n                is_infinite: false,\n            },\n        };\n\n        let plaintext = [\n            0, 0, 0, 1, 48, 22, 64, 206, 234, 117, 131, 145, 178, 225, 97, 201, 44, 5, 19, 241, 41,\n            2, 15, 65, 37, 37, 106, 253, 174, 38, 70, 206, 49, 9, 159, 92, 16, 244, 140, 217, 239,\n            247, 174, 91, 32, 156, 85, 124, 112, 222, 46, 101, 126, 231, 145, 102, 134, 134, 118,\n            183, 135, 233, 65, 126, 25, 38, 14, 4, 15, 228, 107, 229, 131, 183, 31, 74, 181, 183,\n            12, 38, 87, 255, 29, 5, 204, 207, 29, 41, 42, 147, 105, 98, 141, 26, 25, 79, 148, 78,\n            101, 153, 0, 0, 16, 39,\n        ];\n\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk);\n\n        let recipient = AztecAddress::from_field(\n            0x10ee41ee4b62703b16f61e03cb0d88c4b306a9eb4a6ceeb2aff13428541689a2,\n        );\n\n        let log: [u8; 448] = compute_encrypted_log(\n            contract_address,\n            ovsk_app,\n            ovpk_m,\n            ivpk_m,\n            recipient,\n            plaintext,\n        );\n\n        // The following value was generated by `tagged_log.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let encrypted_log_from_typescript = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 141, 70, 12, 14, 67, 77, 132, 110, 193, 234, 40, 110, 64, 144, 235,\n            86, 55, 111, 242, 123, 221, 193, 170, 202, 225, 216, 86, 84, 159, 112, 31, 167, 126, 79,\n            51, 186, 47, 71, 253, 172, 99, 112, 241, 59, 197, 241, 107, 186, 232, 87, 187, 230, 171,\n            62, 228, 234, 42, 51, 145, 146, 238, 242, 42, 71, 206, 13, 244, 66, 111, 195, 20, 203,\n            98, 148, 204, 242, 145, 183, 156, 29, 141, 54, 44, 220, 194, 35, 229, 16, 32, 204, 211,\n            49, 142, 112, 82, 202, 116, 241, 254, 146, 42, 217, 20, 189, 70, 228, 182, 171, 205,\n            104, 27, 99, 171, 28, 91, 244, 21, 30, 130, 240, 5, 72, 174, 124, 97, 197, 157, 248,\n            193, 23, 193, 76, 46, 141, 144, 70, 211, 45, 67, 167, 218, 129, 140, 104, 190, 41, 110,\n            249, 209, 68, 106, 135, 164, 80, 235, 63, 101, 80, 32, 13, 38, 99, 145, 91, 11, 173,\n            151, 231, 247, 65, 153, 117, 229, 167, 64, 239, 182, 126, 235, 83, 4, 169, 8, 8, 160, 4,\n            235, 252, 21, 96, 84, 161, 69, 145, 145, 215, 254, 161, 117, 246, 198, 65, 89, 179, 194,\n            90, 19, 121, 12, 202, 114, 80, 195, 14, 60, 128, 105, 142, 100, 86, 90, 108, 157, 219,\n            22, 172, 20, 121, 195, 25, 159, 236, 2, 70, 75, 42, 37, 34, 2, 17, 149, 20, 176, 32, 18,\n            204, 56, 117, 121, 34, 15, 3, 88, 123, 64, 68, 74, 233, 63, 59, 131, 222, 194, 192, 167,\n            110, 217, 10, 128, 73, 129, 172, 61, 43, 12, 98, 165, 203, 191, 154, 161, 150, 4, 239,\n            95, 48, 60, 159, 33, 222, 142, 102, 73, 193, 236, 145, 197, 160, 216, 254, 113, 243, 25,\n            244, 251, 192, 222, 35, 7, 114, 101, 35, 152, 151, 112, 24, 32, 94, 138, 71, 160, 91,\n            68, 131, 217, 117, 140, 19, 147, 37, 197, 192, 21, 43, 172, 239, 239, 205, 15, 110, 76,\n            26, 211, 42, 117, 4, 15, 135, 145, 247, 37, 73, 84, 164, 149, 250, 35, 0, 205, 105, 178,\n            143, 104, 98, 100, 250, 193, 154, 136, 175, 177, 109, 225, 207, 252, 147, 250, 250, 189,\n            117, 147, 101, 230, 132,\n        ];\n        assert_eq(encrypted_log_from_typescript, log);\n    }\n\n    #[test]\n    fn test_incoming_body_ciphertext_matches_typescript() {\n        // All the values in this test were copied over from `encrypted_note_log_incoming_body.test.ts`\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n        };\n        let ivpk = IvpkM {\n            inner: Point {\n                x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n                y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n                is_infinite: false,\n            },\n        };\n        let plaintext = [\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,\n        ];\n\n        // `compute_incoming_body_ciphertext(...)` function then derives symmetric key from `eph_sk` and `ivpk` and encrypts\n        // the note plaintext using AES-128.\n        let ciphertext = compute_incoming_body_ciphertext(plaintext, eph_sk, ivpk);\n\n        // The following value was generated by `encrypted_note_log_incoming_body.test.ts`.\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let note_body_ciphertext_from_typescript = [\n            226, 240, 253, 6, 28, 52, 19, 131, 33, 132, 178, 212, 245, 62, 14, 190, 147, 228, 160,\n            190, 146, 61, 95, 203, 124, 153, 68, 168, 17, 150, 92, 0, 99, 214, 85, 64, 191, 78, 157,\n            131, 149, 96, 236, 253, 96, 172, 157, 30, 27, 176, 228, 74, 242, 190, 138, 48, 33, 93,\n            46, 37, 223, 130, 25, 245, 188, 163, 159, 223, 187, 24, 139, 206, 131, 154, 159, 130,\n            37, 17, 158, 114, 242, 141, 124, 193, 232, 54, 146, 96, 145, 100, 125, 234, 57, 43, 95,\n            115, 183, 39, 121, 232, 134, 229, 148, 25, 46, 77, 87, 127, 95, 7, 77, 188, 37, 234,\n            245, 142, 232, 87, 252, 28, 67, 67, 90, 214, 254, 89, 47, 68, 66, 187, 227, 8, 59, 162,\n            25, 141, 97, 141, 217, 197, 115, 15, 212, 202, 157, 41, 150, 62, 219, 57, 224, 92, 185,\n            212, 142, 94, 146, 41, 178, 145, 68, 169, 23, 185, 206, 138, 70, 47, 176, 210, 165, 236,\n            23, 206, 229, 108,\n        ];\n\n        assert_eq(note_body_ciphertext_from_typescript.len(), ciphertext.len());\n\n        for i in 0..note_body_ciphertext_from_typescript.len() {\n            assert_eq(ciphertext[i], note_body_ciphertext_from_typescript[i]);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_outgoing_body_matches_typescript() {\n        let eph_sk = Scalar {\n            lo: 0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            hi: 0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb,\n        };\n        let recipient_ivsk = Scalar {\n            lo: 0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            hi: 0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31,\n        };\n        let sender_ovsk_app = Scalar {\n            lo: 0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            hi: 0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b,\n        };\n\n        let eph_pk = derive_public_key(eph_sk);\n        let recipient_ivpk = IvpkM { inner: derive_public_key(recipient_ivsk) };\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let ciphertext = compute_outgoing_body_ciphertext(\n            recipient,\n            recipient_ivpk,\n            sender_ovsk_app,\n            eph_sk,\n            eph_pk,\n        );\n\n        // The following value was generated by `encrypted_log_outgoing_body.test.ts`\n        // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n        let outgoing_body_ciphertext_from_typescript = [\n            127, 182, 227, 75, 192, 197, 54, 47, 168, 134, 233, 148, 251, 46, 86, 12, 73, 50, 238,\n            50, 31, 174, 27, 202, 110, 77, 161, 197, 244, 124, 17, 100, 143, 150, 232, 14, 156, 248,\n            43, 177, 16, 82, 244, 103, 88, 74, 84, 200, 15, 65, 187, 14, 163, 60, 91, 22, 104, 31,\n            211, 190, 124, 121, 79, 92, 239, 65, 185, 106, 51, 178, 168, 137, 84, 43, 79, 158, 151,\n            152, 83, 42, 170, 13, 106, 209, 254, 74, 39, 145, 73, 215, 17, 234, 196, 89, 30, 58,\n            120, 127, 88, 69, 121, 61, 18, 206, 89, 118, 243, 238, 177, 71, 73, 47, 147, 4, 155, 25,\n            173, 248, 206, 52, 17, 180, 122, 186, 106, 191, 252, 102, 197, 91, 16, 39, 94, 91, 224,\n            30, 168, 177, 26, 144, 5, 124, 128, 6,\n        ];\n\n        assert_eq(outgoing_body_ciphertext_from_typescript, ciphertext);\n    }\n}\n"},"177":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::Point, utils::arr_copy_slice,\n};\nuse crate::utils::point::point_to_bytes;\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret: Point = multi_scalar_mul([point], [secret]);\n    let shared_secret = point_to_bytes(shared_secret);\n    let mut shared_secret_bytes_with_separator = [0 as u8; 33];\n    shared_secret_bytes_with_separator =\n        arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nunconstrained fn test_point_to_symmetric_key_matches_noir() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let key = point_to_symmetric_key(secret, point);\n\n    // The following value was generated by `encrypt_buffer.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let key_from_typescript = [\n        251, 232, 177, 34, 2, 174, 35, 92, 165, 118, 168, 3, 153, 140, 46, 210, 203, 154, 184, 158,\n        236, 33, 95, 77, 93, 120, 72, 88, 190, 209, 64, 159,\n    ];\n    assert_eq(key, key_from_typescript);\n}\n"},"178":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr","source":"use dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\nuse crate::{\n    oracle::{\n        keys::get_public_keys_and_partial_address,\n        key_validation_request::get_key_validation_request,\n    }, keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    let (hinted_canonical_public_keys, partial_address) =\n        unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(hinted_canonical_public_keys.hash(), partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    hinted_canonical_public_keys\n}\n"},"181":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::poseidon2_hash_with_separator,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm,\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n"},"186":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n        key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n        call_private_function::call_private_function_internal, header::get_header_at,\n        logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n        enqueue_public_function_call::{\n            enqueue_public_function_call_internal, notify_set_min_revertible_side_effect_counter,\n            set_public_teardown_function_call_internal,\n        },\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext, function_selector::FunctionSelector,\n        max_block_number::MaxBlockNumber,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        public_call_request::PublicCallRequest, read_request::ReadRequest, note_hash::NoteHash,\n        nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash},\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL,\n        MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL, PUBLIC_DISPATCH_SELECTOR,\n    }, header::Header, messaging::l2_to_l1_message::L2ToL1Message, traits::Empty,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_requests: BoundedVec<PublicCallRequest, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_call_request: PublicCallRequest,\n    l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    fn push_nullifier(&mut self, nullifier: Field) {\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: self.next_counter(),\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_requests: self.public_call_requests.storage,\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number =\n            MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request =\n            self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator {\n                request,\n                sk_app_generator: sk_generators[key_index],\n            };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<let M: u32>(\n        &mut self,\n        randomness: Field,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<let M: u32>(\n        &mut self,\n        note_hash_counter: u32,\n        log: [u8; M],\n        log_hash: Field,\n    ) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_private_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let (end_side_effect_counter, returns_hash) = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n        );\n\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context,\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        PackedReturns::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.call_public_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        // Public calls are rerouted through the dispatch function.\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        let call_request = PublicCallRequest { call_context, args_hash, counter };\n        self.public_call_requests.push(call_request);\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let args_hash = hash_args_array(args);\n        arguments::pack_arguments_array(args);\n        self.set_public_teardown_function_with_packed_args(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn set_public_teardown_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Fix this.\n        // WARNING: This is insecure and should be temporary!\n        // The oracle repacks the arguments and returns a new args_hash.\n        // new_args = [selector, ...old_args], so as to make it suitable to call the public dispatch function.\n        // We don't validate or compute it in the circuit because a) it's harder to do with slices, and\n        // b) this is only temporary.\n        let args_hash = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            counter,\n            is_static_call,\n        );\n\n        let function_selector = comptime { FunctionSelector::from_field(PUBLIC_DISPATCH_SELECTOR) };\n        let call_context = CallContext {\n            msg_sender: self.this_address(),\n            contract_address,\n            function_selector,\n            is_static_call,\n        };\n\n        self.public_teardown_call_request = PublicCallRequest { call_context, args_hash, counter };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n"},"190":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct PackedReturns {\n    packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<let N: u32>(self) -> [Field; N] {\n        // We verify that the value returned by `unpack_returns` is the preimage of `packed_returns`, fully constraining\n        // it.\n        let unpacked: [Field; N] = unsafe { unpack_returns(self.packed_returns) };\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"191":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, traits::Deserialize,\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    inputs::PrivateContextInputs,\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\npub struct PrivateCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateCallInterface<N, T> {\n    pub fn call<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateVoidCallInterface<N> {}\n\npub struct PrivateVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateVoidCallInterface<N> {\n    pub fn call(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PrivateStaticCallInterface<N, T> {}\n\npub struct PrivateStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PrivateStaticCallInterface<N, T> {\n    pub fn view<let M: u32>(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        pack_arguments(self.args);\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.unpack_into()\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PrivateStaticVoidCallInterface<N> {}\n\npub struct PrivateStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n}\n\nimpl<let N: u32> PrivateStaticVoidCallInterface<N> {\n    pub fn view(self, context: &mut PrivateContext) {\n        pack_arguments(self.args);\n        context\n            .call_private_function_with_packed_args(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicCallInterface<N, T> {}\n\npub struct PublicCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let N: u32, T> PublicCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicVoidCallInterface<N> {}\n\npub struct PublicVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32, T> CallInterface<N> for PublicStaticCallInterface<N, T> {}\n\npub struct PublicStaticCallInterface<let N: u32, T> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32, T> PublicStaticCallInterface<N, T> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<let M: u32>(self, context: &mut PublicContext) -> T\n    where\n        T: Deserialize<M>,\n    {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let N: u32> CallInterface<N> for PublicStaticVoidCallInterface<N> {}\n\npub struct PublicStaticVoidCallInterface<let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    return_type: (),\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let N: u32> PublicStaticVoidCallInterface<N> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        pack_arguments(self.args);\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n"},"204":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::meta::{derive_deserialize, derive_serialize};\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for U128 {\n    fn empty() -> Self {\n        U128::from_integer(0)\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    fn from_field(value: Field) -> Self {\n        value as bool\n    }\n}\nimpl FromField for u1 {\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// docs:start:deserialize\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    fn deserialize(fields: [Field; N]) -> Self {\n        str<N>::from(fields.map(|value| value as u8))\n    }\n}\n"},"234":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{traits::{Empty, Serialize, Deserialize}, point::Point};\npub use crate::constants::KEY_VALIDATION_REQUEST_LENGTH;\n\npub struct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m)) & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest { pk_m: Point::empty(), sk_app: 0 }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [self.pk_m.x, self.pk_m.y, self.pk_m.is_infinite as Field, self.sk_app]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point { x: fields[0], y: fields[1], is_infinite: fields[2] as bool },\n            sk_app: fields[3],\n        }\n    }\n}\n"},"24":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    let point_array = multi_scalar_mul_array_return(points, scalars);\n    EmbeddedCurvePoint { x: point_array[0], y: point_array[1], is_infinite: point_array[2] as bool }\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [Field; 3] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint {\n        x: 1,\n        y: 17631683881184975370165255887551781615748388533673675138860,\n        is_infinite: false,\n    };\n    multi_scalar_mul([g1], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// This is a hack because returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    let x_coordinates_match = point1.x == point2.x;\n    let y_coordinates_match = point1.y == point2.y;\n    let double_predicate = (x_coordinates_match & y_coordinates_match);\n    let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n    let point1_1 = EmbeddedCurvePoint {\n        x: point1.x + (x_coordinates_match as Field),\n        y: point1.y,\n        is_infinite: x_coordinates_match,\n    };\n    // point1_1 is guaranteed to have a different abscissa than point2\n    let mut result = embedded_curve_add_unsafe(point1_1, point2);\n    result.is_infinite = x_coordinates_match;\n\n    // dbl if x_match, y_match\n    let double = embedded_curve_add_unsafe(point1, point1);\n    result = if double_predicate { double } else { result };\n\n    // infinity if x_match, !y_match\n    if point1.is_infinite {\n        result = point2;\n    }\n    if point2.is_infinite {\n        result = point1;\n    }\n    let mut result_is_infinity = infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n    result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n    result\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [Field; 3] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n\n    EmbeddedCurvePoint { x, y, is_infinite: false }\n}\n"},"25":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\nglobal TWO_POW_64: Field = 0x10000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(mut x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 64 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low_lower_64 = (x as u64) as Field;\n    x = (x - low_lower_64) / TWO_POW_64;\n    let low_upper_64 = (x as u64) as Field;\n\n    let high = (x - low_upper_64) / TWO_POW_64;\n    let low = low_upper_64 * TWO_POW_64 + low_lower_64;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    unsafe {\n        let borrow = lte_16_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else {\n        // Take a hint of the comparison and verify it\n        unsafe {\n            if lt_32_hint(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{\n        decompose, compute_lt, assert_gt, gt, TWO_POW_128, compute_lte, PLO, PHI,\n    };\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"26":{"path":"std/field/mod.nr","source":"pub mod bn254;\nuse bn254::lt as bn254_lt;\nuse crate::runtime::is_unconstrained;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        assert(BIT_SIZE < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_le_bits\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n    // docs:end:to_be_bits\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let x_bytes: [u8; 32] = x.to_le_bytes();\n    let y_bytes: [u8; 32] = y.to_le_bytes();\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..32 {\n        if (!done) {\n            let x_byte = x_bytes[32 - 1 - i] as u8;\n            let y_byte = y_bytes[32 - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nmod tests {\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_bytes();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_bytes();\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bits), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        let field = 2;\n        let bits: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bits, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bits), field);\n    }\n    // docs:end:to_le_radix_example\n}\n"},"284":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate {\n        lhs\n    } else {\n        rhs\n    }\n}\n\npub fn arr_copy_slice<T, let N: u32, let M: u32>(\n    src: [T; N],\n    mut dst: [T; M],\n    offset: u32,\n) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"29":{"path":"std/hash/mod.nr","source":"pub mod poseidon;\npub mod mimc;\npub mod poseidon2;\npub mod keccak;\npub mod sha256;\npub mod sha512;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n// Kept for backwards compatibility\npub use sha256::{digest, sha256, sha256_compression, sha256_var};\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0]\n}\n\n#[field(bn254)]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{\n    crate::hash::keccak::keccak256(input, message_size)\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: StructDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n"},"3":{"path":"std/array/mod.nr","source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a: T, b: T| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        unsafe {\n            // Safety: `sorted` array is checked to be:\n            //   a. a permutation of `input`'s elements\n            //   b. satisfying the predicate `ordering`\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n}\n"},"305":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<let K: u32>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"308":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{salted_initialization_hash::SaltedInitializationHash, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator, traits::{ToField, Serialize, Deserialize},\n};\n\nglobal PARTIAL_ADDRESS_LENGTH: u32 = 1;\n\n// Partial address\npub struct PartialAddress {\n    inner: Field,\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n        PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress,\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer),\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n    ) -> Self {\n        PartialAddress::from_field(poseidon2_hash_with_separator(\n            [contract_class_id.to_field(), salted_initialization_hash.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"309":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::aztec_address::AztecAddress, constants::GENERATOR_INDEX__PARTIAL_ADDRESS,\n    hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\npub struct SaltedInitializationHash {\n    inner: Field,\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(poseidon2_hash_with_separator(\n            [salt, initialization_hash, deployer.to_field()],\n            GENERATOR_INDEX__PARTIAL_ADDRESS,\n        ))\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"312":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    address::{\n        partial_address::PartialAddress, public_keys_hash::PublicKeysHash,\n        salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{AZTEC_ADDRESS_LENGTH, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId,\n    hash::{poseidon2_hash_with_separator, private_functions_root_from_siblings},\n    merkle_tree::membership::MembershipWitness,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils,\n};\n\n// Aztec address\npub struct AztecAddress {\n    inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [pub_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        ))\n    }\n\n    pub fn compute_from_private_function(\n        function_selector: FunctionSelector,\n        functino_vk_hash: Field,\n        function_leaf_membership_witness: MembershipWitness<FUNCTION_TREE_HEIGHT>,\n        contract_class_artifact_hash: Field,\n        contract_class_public_bytecode_commitment: Field,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys_hash: PublicKeysHash,\n    ) -> Self {\n        let private_functions_root = private_functions_root_from_siblings(\n            function_selector,\n            functino_vk_hash,\n            function_leaf_membership_witness.leaf_index,\n            function_leaf_membership_witness.sibling_path,\n        );\n\n        let contract_class_id = ContractClassId::compute(\n            contract_class_artifact_hash,\n            private_functions_root,\n            contract_class_public_bytecode_commitment,\n        );\n\n        // Compute contract address using the preimage which includes the class_id.\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys_hash, partial_address)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"317":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Deserialize, Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] as bool }\n    }\n}\n"},"325":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash}, note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n    }, address::{AztecAddress, EthAddress},\n    constants::{\n        FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n        GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n        MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX,\n    }, merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::{L2ToL1Message, ScopedL2ToL1Message},\n    recursion::verification_key::VerificationKey, traits::{is_empty, ToField},\n    utils::field::field_from_bytes_32_trunc,\n};\nuse super::utils::field::field_from_bytes;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = std::hash::sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    poseidon2_hash_with_separator(\n        [tx_hash, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, note_hash: Field) -> Field {\n    let inputs = [nonce, note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), unique_note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    // We assume contract address has already been masked\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        accumulate_sha256(\n            [log_hash.contract_address.to_field(), log_hash.log_hash.value],\n        )\n    }\n}\n\npub fn mask_encrypted_log_hash(scoped_log: ScopedEncryptedLogHash) -> AztecAddress {\n    if scoped_log.contract_address.is_zero() {\n        AztecAddress::from_field(0)\n    } else if (scoped_log.log_hash.randomness == 0) {\n        scoped_log.contract_address\n    } else {\n        AztecAddress::from_field(poseidon2_hash_with_separator(\n            [scoped_log.contract_address.to_field(), scoped_log.log_hash.randomness],\n            0,\n        ))\n    }\n}\n\nfn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk<let N: u32>(\n    _vk: VerificationKey<N>,\n) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs =\n        [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes: [u8; 32] = inputs[i].to_be_bytes();\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: ScopedL2ToL1Message,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly.\npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        // TODO: This is not checking that the decomposition is smaller than P\n        let input_as_bytes: [u8; 32] = logs[offset].value.to_be_radix(256);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn verification_key_hash<let N: u32>(key: [Field; N]) -> Field {\n    crate::hash::poseidon2_hash(key)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of N + 1\n    let in_len = N + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    // We manually hash the inputs here, since we cannot express with the type system a constant size inputs array of Math.ceil(N/31)\n    let mut in_len = N / 31;\n    let mut has_padding = false;\n    if N % 31 != 0 {\n        in_len += 1;\n        has_padding = true;\n    }\n\n    let two_pow_64 = 18446744073709551616;\n    let iv: Field = (in_len as Field) * two_pow_64;\n    let mut sponge = std::hash::poseidon2::Poseidon2::new(iv);\n\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            sponge.absorb(field_from_bytes(current_field, false));\n            current_field = [0; 31];\n        }\n    }\n    if has_padding {\n        sponge.absorb(field_from_bytes(current_field, false));\n    }\n\n    sponge.squeeze()\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = std::hash::sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        ScopedL2ToL1Message {\n            message: L2ToL1Message { recipient: EthAddress::from_field(1), content: 2, counter: 0 },\n            contract_address: AztecAddress::from_field(3),\n        },\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `l2_to_l1_message.test.ts`\n    let hash_from_typescript = 0x00c6155d69febb9d5039b374dd4f77bf57b7c881709aa524a18acaa0bd57476a;\n\n    assert_eq(hash, hash_from_typescript);\n}\n"},"326":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n        aztec_address::AztecAddress, partial_address::PartialAddress,\n        public_keys_hash::PublicKeysHash,\n    }, public_keys::PublicKeys, contract_class_id::ContractClassId,\n    constants::CONTRACT_INSTANCE_LENGTH, traits::{Deserialize, Hash, Serialize},\n};\n\npub struct ContractInstance {\n    salt: Field,\n    deployer: AztecAddress,\n    contract_class_id: ContractClassId,\n    initialization_hash: Field,\n    public_keys: PublicKeys,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys.eq(other.public_keys)\n            & self.initialization_hash.eq(other.initialization_hash)\n            & self.contract_class_id.eq(other.contract_class_id)\n            & self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        let public_keys_serialized = self.public_keys.serialize();\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            public_keys_serialized[0],\n            public_keys_serialized[1],\n            public_keys_serialized[2],\n            public_keys_serialized[3],\n            public_keys_serialized[4],\n            public_keys_serialized[5],\n            public_keys_serialized[6],\n            public_keys_serialized[7],\n            public_keys_serialized[8],\n            public_keys_serialized[9],\n            public_keys_serialized[10],\n            public_keys_serialized[11],\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys: PublicKeys::deserialize([\n                serialized[4],\n                serialized[5],\n                serialized[6],\n                serialized[7],\n                serialized[8],\n                serialized[9],\n                serialized[10],\n                serialized[11],\n                serialized[12],\n                serialized[13],\n                serialized[14],\n                serialized[15],\n            ]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys.hash(),\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer,\n            ),\n        )\n    }\n}\n"},"327":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr","source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        GENERATOR_INDEX__PUBLIC_KEYS_HASH, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_IVPK_M_X,\n        DEFAULT_IVPK_M_Y, DEFAULT_OVPK_M_X, DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y,\n    }, hash::poseidon2_hash_with_separator, point::POINT_LENGTH,\n    traits::{Deserialize, Serialize, Hash},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse dep::std::embedded_curve_ops::fixed_base_scalar_mul as derive_public_key;\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    npk_m: NpkM,\n    ivpk_m: IvpkM,\n    ovpk_m: OvpkM,\n    tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] as bool,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] as bool,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] as bool,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] as bool,\n                },\n            },\n        }\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n"},"34":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n"},"35":{"path":"std/hash/sha256.nr","source":"use crate::runtime::is_unconstrained;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// A message block is up to 64 bytes taken from the input.\nglobal BLOCK_SIZE = 64;\n\n// The first index in the block where the 8 byte message size will be written.\nglobal MSG_SIZE_PTR = 56;\n\n// Size of the message block when packed as 4-byte integer array.\nglobal INT_BLOCK_SIZE = 16;\n\n// Index of a byte in a 64 byte block; ie. 0..=63\ntype BLOCK_BYTE_PTR = u32;\n\n// The foreign function to compress blocks works on 16 pieces of 4-byte integers, instead of 64 bytes.\ntype INT_BLOCK = [u32; INT_BLOCK_SIZE];\n\n// A message block is a slice of the original message of a fixed size,\n// potentially padded with zeroes.\ntype MSG_BLOCK = [u8; BLOCK_SIZE];\n\n// The hash is 32 bytes.\ntype HASH = [u8; 32];\n\n// The state accumulates the blocks.\n// Its overall size is the same as the `HASH`.\ntype STATE = [u32; 8];\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: INT_BLOCK, _state: STATE) -> STATE {}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    let num_blocks = N / BLOCK_SIZE;\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    let mut h: STATE = [\n        1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635,\n        1541459225,\n    ]; // Intermediate hash, starting with the canonical initial value\n    let mut msg_byte_ptr = 0; // Pointer into msg_block\n    for i in 0..num_blocks {\n        let msg_start = BLOCK_SIZE * i;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n\n        // If the block is filled, compress it.\n        // An un-filled block is handled after this loop.\n        if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n            h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        }\n    }\n\n    let modulo = N % BLOCK_SIZE;\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_blocks;\n        let (new_msg_block, new_msg_byte_ptr) =\n            unsafe { build_msg_block(msg, message_size, msg_start) };\n\n        if msg_start < message_size {\n            msg_block = new_msg_block;\n        }\n\n        if !is_unconstrained() {\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        } else if msg_start < message_size {\n            msg_byte_ptr = new_msg_byte_ptr;\n        }\n    }\n\n    // If we had modulo == 0 then it means the last block was full,\n    // and we can reset the pointer to zero to overwrite it.\n    if msg_byte_ptr == BLOCK_SIZE {\n        msg_byte_ptr = 0;\n    }\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    msg_block[msg_byte_ptr] = 1 << 7;\n    let last_block = msg_block;\n    msg_byte_ptr = msg_byte_ptr + 1;\n\n    // If we don't have room to write the size, compress the block and reset it.\n    if msg_byte_ptr > MSG_SIZE_PTR {\n        h = sha256_compression(msg_u8_to_u32(msg_block), h);\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        msg_byte_ptr = 0;\n    }\n\n    msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n    if !crate::runtime::is_unconstrained() {\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n    }\n\n    hash_final_block(msg_block, h)\n}\n\n// Convert 64-byte array to array of 16 u32s\nfn msg_u8_to_u32(msg: MSG_BLOCK) -> INT_BLOCK {\n    let mut msg32: INT_BLOCK = [0; INT_BLOCK_SIZE];\n\n    for i in 0..INT_BLOCK_SIZE {\n        let mut msg_field: Field = 0;\n        for j in 0..4 {\n            msg_field = msg_field * 256 + msg[64 - 4 * (i + 1) + j] as Field;\n        }\n        msg32[15 - i] = msg_field as u32;\n    }\n\n    msg32\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeroes.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; BLOCK_SIZE];\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if msg_start + BLOCK_SIZE > message_size {\n        if message_size < msg_start {\n            // This function is sometimes called with `msg_start` past the end of the message.\n            // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n            0\n        } else {\n            message_size - msg_start\n        }\n    } else {\n        BLOCK_SIZE\n    };\n    for k in 0..block_input {\n        msg_block[k] = msg[msg_start + k];\n    }\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr: u32 = 0; // Message byte pointer\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n\n    for k in msg_start..msg_end {\n        if k < message_size {\n            assert_eq(msg_block[msg_byte_ptr], msg[k]);\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeroes by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    for i in 0..BLOCK_SIZE {\n        if i >= msg_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 (i.e. until msg_byte_ptr = 56).\n    for i in msg_byte_ptr..MSG_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..8 {\n        msg_block[MSG_SIZE_PTR + i] = len_bytes[i];\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    for i in 0..MSG_SIZE_PTR {\n        let predicate = (i < msg_byte_ptr) as u8;\n        let expected_byte = predicate * last_block[i];\n        assert_eq(msg_block[i], expected_byte);\n    }\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let len = 8 * message_size;\n    let mut reconstructed_len: Field = 0;\n    for i in MSG_SIZE_PTR..BLOCK_SIZE {\n        reconstructed_len = 256 * reconstructed_len + msg_block[i] as Field;\n    }\n    assert_eq(reconstructed_len, len as Field);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_u8_to_u32(msg_block), state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[7 - j] as Field).to_le_bytes();\n        for k in 0..4 {\n            out_h[31 - 4 * j - k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod tests {\n    use super::sha256_var;\n\n    #[test]\n    fn smoke_test() {\n        let input = [0xbd];\n        let result = [\n            0x68, 0x32, 0x57, 0x20, 0xaa, 0xbd, 0x7c, 0x82, 0xf3, 0x0f, 0x55, 0x4b, 0x31, 0x3d,\n            0x05, 0x70, 0xc9, 0x5a, 0xcc, 0xbb, 0x7d, 0xc4, 0xb5, 0xaa, 0xe1, 0x12, 0x04, 0xc0,\n            0x8f, 0xfe, 0x73, 0x2b,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116,\n        ];\n        let result = [\n            91, 122, 146, 93, 52, 109, 133, 148, 171, 61, 156, 70, 189, 238, 153, 7, 222, 184, 94,\n            24, 65, 114, 192, 244, 207, 199, 87, 232, 192, 224, 171, 207,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_multiple_over_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99,\n        ];\n        let result = [\n            116, 90, 151, 31, 78, 22, 138, 180, 211, 189, 69, 76, 227, 200, 155, 29, 59, 123, 154,\n            60, 47, 153, 203, 129, 157, 251, 48, 2, 79, 11, 65, 47,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_just_under_block() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59,\n        ];\n        let result = [\n            143, 140, 76, 173, 222, 123, 102, 68, 70, 149, 207, 43, 39, 61, 34, 79, 216, 252, 213,\n            165, 74, 16, 110, 74, 29, 64, 138, 167, 30, 1, 9, 119,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_not_block_multiple() {\n        let input = [\n            102, 114, 111, 109, 58, 114, 117, 110, 110, 105, 101, 114, 46, 108, 101, 97, 103, 117,\n            101, 115, 46, 48, 106, 64, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109, 13, 10, 99,\n            111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 58, 116, 101, 120, 116, 47, 112,\n            108, 97, 105, 110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 117, 115, 45, 97, 115,\n            99, 105, 105, 13, 10, 109, 105, 109, 101, 45, 118, 101, 114, 115, 105, 111, 110, 58, 49,\n            46, 48, 32, 40, 77, 97, 99, 32, 79, 83, 32, 88, 32, 77, 97, 105, 108, 32, 49, 54, 46,\n            48, 32, 92, 40, 51, 55, 51, 49, 46, 53, 48, 48, 46, 50, 51, 49, 92, 41, 41, 13, 10, 115,\n            117, 98, 106, 101, 99, 116, 58, 72, 101, 108, 108, 111, 13, 10, 109, 101, 115, 115, 97,\n            103, 101, 45, 105, 100, 58, 60, 56, 70, 56, 49, 57, 68, 51, 50, 45, 66, 54, 65, 67, 45,\n            52, 56, 57, 68, 45, 57, 55, 55, 70, 45, 52, 51, 56, 66, 66, 67, 52, 67, 65, 66, 50, 55,\n            64, 109, 101, 46, 99, 111, 109, 62, 13, 10, 100, 97, 116, 101, 58, 83, 97, 116, 44, 32,\n            50, 54, 32, 65, 117, 103, 32, 50, 48, 50, 51, 32, 49, 50, 58, 50, 53, 58, 50, 50, 32,\n            43, 48, 52, 48, 48, 13, 10, 116, 111, 58, 122, 107, 101, 119, 116, 101, 115, 116, 64,\n            103, 109, 97, 105, 108, 46, 99, 111, 109, 13, 10, 100, 107, 105, 109, 45, 115, 105, 103,\n            110, 97, 116, 117, 114, 101, 58, 118, 61, 49, 59, 32, 97, 61, 114, 115, 97, 45, 115,\n            104, 97, 50, 53, 54, 59, 32, 99, 61, 114, 101, 108, 97, 120, 101, 100, 47, 114, 101,\n            108, 97, 120, 101, 100, 59, 32, 100, 61, 105, 99, 108, 111, 117, 100, 46, 99, 111, 109,\n            59, 32, 115, 61, 49, 97, 49, 104, 97, 105, 59, 32, 116, 61, 49, 54, 57, 51, 48, 51, 56,\n            51, 51, 55, 59, 32, 98, 104, 61, 55, 120, 81, 77, 68, 117, 111, 86, 86, 85, 52, 109, 48,\n            87, 48, 87, 82, 86, 83, 114, 86, 88, 77, 101, 71, 83, 73, 65, 83, 115, 110, 117, 99, 75,\n            57, 100, 74, 115, 114, 99, 43, 118, 85, 61, 59, 32, 104, 61, 102, 114, 111, 109, 58, 67,\n            111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 77, 105, 109, 101, 45, 86, 101,\n            114, 115, 105, 111, 110, 58, 83, 117, 98, 106, 101, 99, 116, 58, 77, 101, 115, 115, 97,\n            103, 101, 45, 73, 100, 58, 68, 97, 116, 101, 58, 116, 111, 59, 32, 98, 61,\n        ];\n        let result = [\n            112, 144, 73, 182, 208, 98, 9, 238, 54, 229, 61, 145, 222, 17, 72, 62, 148, 222, 186,\n            55, 192, 82, 220, 35, 66, 47, 193, 200, 22, 38, 26, 186,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn msg_big_with_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        let message_size = 297;\n        assert_eq(sha256_var(input, message_size), result);\n    }\n\n    #[test]\n    fn msg_big_no_padding() {\n        let input = [\n            48, 130, 1, 37, 2, 1, 0, 48, 11, 6, 9, 96, 134, 72, 1, 101, 3, 4, 2, 1, 48, 130, 1, 17,\n            48, 37, 2, 1, 1, 4, 32, 176, 223, 31, 133, 108, 84, 158, 102, 70, 11, 165, 175, 196, 12,\n            201, 130, 25, 131, 46, 125, 156, 194, 28, 23, 55, 133, 157, 164, 135, 136, 220, 78, 48,\n            37, 2, 1, 2, 4, 32, 190, 82, 180, 235, 222, 33, 79, 50, 152, 136, 142, 35, 116, 224, 6,\n            242, 156, 141, 128, 248, 10, 61, 98, 86, 248, 45, 207, 210, 90, 232, 175, 38, 48, 37, 2,\n            1, 3, 4, 32, 0, 194, 104, 108, 237, 246, 97, 230, 116, 198, 69, 110, 26, 87, 17, 89,\n            110, 199, 108, 250, 36, 21, 39, 87, 110, 102, 250, 213, 174, 131, 171, 174, 48, 37, 2,\n            1, 11, 4, 32, 136, 155, 87, 144, 111, 15, 152, 127, 85, 25, 154, 81, 20, 58, 51, 75,\n            193, 116, 234, 0, 60, 30, 29, 30, 183, 141, 72, 247, 255, 203, 100, 124, 48, 37, 2, 1,\n            12, 4, 32, 41, 234, 106, 78, 31, 11, 114, 137, 237, 17, 92, 71, 134, 47, 62, 78, 189,\n            233, 201, 214, 53, 4, 47, 189, 201, 133, 6, 121, 34, 131, 64, 142, 48, 37, 2, 1, 13, 4,\n            32, 91, 222, 210, 193, 62, 222, 104, 82, 36, 41, 138, 253, 70, 15, 148, 208, 156, 45,\n            105, 171, 241, 195, 185, 43, 217, 162, 146, 201, 222, 89, 238, 38, 48, 37, 2, 1, 14, 4,\n            32, 76, 123, 216, 13, 51, 227, 72, 245, 59, 193, 238, 166, 103, 49, 23, 164, 171, 188,\n            194, 197, 156, 187, 249, 28, 198, 95, 69, 15, 182, 56, 54, 38,\n        ];\n        let result = [\n            32, 85, 108, 174, 127, 112, 178, 182, 8, 43, 134, 123, 192, 211, 131, 66, 184, 240, 212,\n            181, 240, 180, 106, 195, 24, 117, 54, 129, 19, 10, 250, 53,\n        ];\n        assert_eq(sha256_var(input, input.len() as u64), result);\n    }\n\n    #[test]\n    fn same_msg_len_variable_padding() {\n        let input = [\n            29, 81, 165, 84, 243, 114, 101, 37, 242, 146, 127, 99, 69, 145, 39, 72, 213, 39, 253,\n            179, 218, 37, 217, 201, 172, 93, 198, 50, 249, 70, 15, 30, 162, 112, 187, 40, 140, 9,\n            236, 53, 32, 44, 38, 163, 113, 254, 192, 197, 44, 89, 71, 130, 169, 242, 17, 211, 214,\n            72, 19, 178, 186, 168, 147, 127, 99, 101, 252, 227, 8, 147, 150, 85, 97, 158, 17, 107,\n            218, 244, 82, 113, 247, 91, 208, 214, 60, 244, 87, 137, 173, 201, 130, 18, 66, 56, 198,\n            149, 207, 189, 175, 120, 123, 224, 177, 167, 251, 159, 143, 110, 68, 183, 189, 70, 126,\n            32, 35, 164, 44, 30, 44, 12, 65, 18, 62, 239, 242, 2, 248, 104, 2, 178, 64, 28, 126, 36,\n            137, 24, 14, 116, 91, 98, 90, 159, 218, 102, 45, 11, 110, 223, 245, 184, 52, 99, 59,\n            245, 136, 175, 3, 72, 164, 146, 145, 116, 22, 66, 24, 49, 193, 121, 3, 60, 37, 41, 97,\n            3, 190, 66, 195, 225, 63, 46, 3, 118, 4, 208, 15, 1, 40, 254, 235, 151, 123, 70, 180,\n            170, 44, 172, 90, 4, 254, 53, 239, 116, 246, 67, 56, 129, 61, 22, 169, 213, 65, 27, 216,\n            116, 162, 239, 214, 207, 126, 177, 20, 100, 25, 48, 143, 84, 215, 70, 197, 53, 65, 70,\n            86, 172, 61, 62, 9, 212, 167, 169, 133, 41, 126, 213, 196, 33, 192, 238, 0, 63, 246,\n            215, 58, 128, 110, 101, 92, 3, 170, 214, 130, 149, 52, 81, 125, 118, 233, 3, 118, 193,\n            104, 207, 120, 115, 77, 253, 191, 122, 0, 107, 164, 207, 113, 81, 169, 36, 201, 228, 74,\n            134, 131, 218, 178, 35, 30, 216, 101, 2, 103, 174, 87, 95, 50, 50, 215, 157, 5, 210,\n            188, 54, 211, 78, 45, 199, 96, 121, 241, 241, 176, 226, 194, 134, 130, 89, 217, 210,\n            186, 32, 140, 39, 91, 103, 212, 26, 87, 32, 72, 144, 228, 230, 117, 99, 188, 50, 15, 69,\n            79, 179, 50, 12, 106, 86, 218, 101, 73, 142, 243, 29, 250, 122, 228, 233, 29, 255, 22,\n            121, 114, 125, 103, 41, 250, 241, 179, 126, 158, 198, 116, 209, 65, 94, 98, 228, 175,\n            169, 96, 3, 9, 233, 133, 214, 55, 161, 164, 103, 80, 85, 24, 186, 64, 167, 92, 131, 53,\n            101, 202, 47, 25, 104, 118, 155, 14, 12, 12, 25, 116, 45, 221, 249, 28, 246, 212, 200,\n            157, 167, 169, 56, 197, 181, 4, 245, 146, 1, 140, 234, 191, 212, 228, 125, 87, 81, 86,\n            119, 30, 63, 129, 143, 32, 96,\n        ];\n\n        // Prepare inputs of different lengths\n        let mut input_511 = [0; 511];\n        let mut input_512 = [0; 512]; // Next block\n        let mut input_575 = [0; 575];\n        let mut input_576 = [0; 576]; // Next block\n        for i in 0..input.len() {\n            input_511[i] = input[i];\n            input_512[i] = input[i];\n            input_575[i] = input[i];\n            input_576[i] = input[i];\n        }\n\n        // Compute hashes of all inputs (with same message length)\n        let fixed_length_hash = super::sha256(input);\n        let var_full_length_hash = sha256_var(input, input.len() as u64);\n        let var_length_hash_511 = sha256_var(input_511, input.len() as u64);\n        let var_length_hash_512 = sha256_var(input_512, input.len() as u64);\n        let var_length_hash_575 = sha256_var(input_575, input.len() as u64);\n        let var_length_hash_576 = sha256_var(input_576, input.len() as u64);\n\n        // All of the above should have produced the same hash\n        assert_eq(var_full_length_hash, fixed_length_hash);\n        assert_eq(var_length_hash_511, fixed_length_hash);\n        assert_eq(var_length_hash_512, fixed_length_hash);\n        assert_eq(var_length_hash_575, fixed_length_hash);\n        assert_eq(var_length_hash_576, fixed_length_hash);\n    }\n}\n"},"353":{"path":"/usr/src/noir-projects/noir-contracts/contracts/token_contract/src/main.nr","source":"// docs:start:token_all\n// docs:start:imports\nmod types;\nmod test;\n\nuse dep::aztec::macros::aztec;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n#[aztec]\ncontract Token {\n    // Libs\n    use std::meta::derive;\n\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::aztec::{\n        context::{PrivateContext, PrivateCallInterface}, hash::compute_secret_hash,\n        oracle::random::random,\n        prelude::{\n            NoteGetterOptions, Map, PublicMutable, SharedImmutable, PrivateSet, AztecAddress,\n            FunctionSelector,\n        },\n        encrypted_logs::{\n            encrypted_note_emission::{\n                encode_and_encrypt_note, encode_and_encrypt_note_unconstrained,\n                encrypt_and_emit_partial_log,\n            }, encrypted_event_emission::encode_and_encrypt_event_unconstrained,\n        }, keys::getters::get_public_keys,\n        macros::{\n            storage::storage, events::event,\n            functions::{initializer, private, view, public, internal},\n        }, utils::comparison::Comparator, protocol_types::{point::Point, traits::Serialize},\n    };\n\n    // docs:start:import_authwit\n    use dep::authwit::auth::{\n        assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n        compute_authwit_nullifier,\n    };\n    // docs:end:import_authwit\n\n    use crate::types::{\n        transparent_note::TransparentNote, token_note::TokenNote, balance_set::BalanceSet,\n    };\n\n    // docs:end::imports\n\n    // In the first transfer iteration we are computing a lot of additional information (validating inputs, retrieving\n    // keys, etc.), so the gate count is already relatively high. We therefore only read a few notes to keep the happy\n    // case with few constraints.\n    global INITIAL_TRANSFER_CALL_MAX_NOTES: u32 = 2;\n    // All the recursive call does is nullify notes, meaning the gate count is low, but it is all constant overhead. We\n    // therefore read more notes than in the base case to increase the efficiency of the overhead, since this results in\n    // an overall small circuit regardless.\n    global RECURSIVE_TRANSFER_CALL_MAX_NOTES: u32 = 8;\n\n    #[event]\n    #[derive(Serialize)]\n    struct Transfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n    }\n\n    // docs:start:storage_struct\n    #[storage]\n    struct Storage<Context> {\n        // docs:start:storage_admin\n        admin: PublicMutable<AztecAddress, Context>,\n        // docs:end:storage_admin\n        // docs:start:storage_minters\n        minters: Map<AztecAddress, PublicMutable<bool, Context>, Context>,\n        // docs:end:storage_minters\n        // docs:start:storage_balances\n        balances: Map<AztecAddress, BalanceSet<TokenNote, Context>, Context>,\n        // docs:end:storage_balances\n        total_supply: PublicMutable<U128, Context>,\n        // docs:start:storage_pending_shields\n        pending_shields: PrivateSet<TransparentNote, Context>,\n        // docs:end:storage_pending_shields\n        public_balances: Map<AztecAddress, PublicMutable<U128, Context>, Context>,\n        symbol: SharedImmutable<FieldCompressedString, Context>,\n        name: SharedImmutable<FieldCompressedString, Context>,\n        // docs:start:storage_decimals\n        decimals: SharedImmutable<u8, Context>,\n        // docs:end:storage_decimals\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[public]\n    #[initializer]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        // docs:start:initialize_decimals\n        storage.decimals.initialize(decimals);\n        // docs:end:initialize_decimals\n    }\n    // docs:end:constructor\n    // docs:start:set_admin\n    #[public]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:start:write_admin\n        storage.admin.write(new_admin);\n        // docs:end:write_admin\n    }\n    // docs:end:set_admin\n    #[public]\n    #[view]\n    fn public_get_name() -> FieldCompressedString {\n        storage.name.read_public()\n    }\n\n    #[private]\n    #[view]\n    fn private_get_name() -> FieldCompressedString {\n        storage.name.read_private()\n    }\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_public()\n    }\n    #[private]\n    #[view]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_private()\n    }\n    #[public]\n    #[view]\n    fn public_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_public\n        storage.decimals.read_public()\n        // docs:end:read_decimals_public\n    }\n    #[private]\n    #[view]\n    fn private_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_private\n        storage.decimals.read_private()\n        // docs:end:read_decimals_private\n    }\n    // docs:start:admin\n    #[public]\n    #[view]\n    fn get_admin() -> Field {\n        storage.admin.read().to_field()\n    }\n    // docs:end:admin\n    // docs:start:is_minter\n    #[public]\n    #[view]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n    // docs:end:is_minter\n    // docs:start:total_supply\n    #[public]\n    #[view]\n    fn total_supply() -> Field {\n        storage.total_supply.read().to_integer()\n    }\n    // docs:end:total_supply\n    // docs:start:balance_of_public\n    #[public]\n    #[view]\n    fn balance_of_public(owner: AztecAddress) -> Field {\n        storage.public_balances.at(owner).read().to_integer()\n    }\n    // docs:end:balance_of_public\n    // docs:start:set_minter\n    #[public]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        // docs:start:read_admin\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:end:read_admin\n        // docs:start:write_minter\n        storage.minters.at(minter).write(approve);\n        // docs:end:write_minter\n    }\n    // docs:end:set_minter\n    // docs:start:mint_public\n    #[public]\n    fn mint_public(to: AztecAddress, amount: Field) {\n        // docs:start:read_minter\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        // docs:end:read_minter\n        let amount = U128::from_integer(amount);\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n    // docs:end:mint_public\n    // docs:start:mint_private\n    #[public]\n    fn mint_private(amount: Field, secret_hash: Field) {\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount, secret_hash);\n        let supply = storage.total_supply.read().add(U128::from_integer(amount));\n        storage.total_supply.write(supply);\n        // docs:start:insert_from_public\n        pending_shields.insert_from_public(&mut note);\n        // docs:end:insert_from_public\n    }\n    // docs:end:mint_private\n    // TODO: Nuke this - test functions do not belong to token contract!\n    #[private]\n    fn privately_mint_private_note(amount: Field) {\n        let caller = context.msg_sender();\n        let caller_keys = get_public_keys(caller);\n        storage.balances.at(caller).add(caller_keys.npk_m, U128::from_integer(amount)).emit(\n            encode_and_encrypt_note(&mut context, caller_keys.ovpk_m, caller_keys.ivpk_m, caller),\n        );\n        Token::at(context.this_address())\n            .assert_minter_and_mint(context.msg_sender(), amount)\n            .enqueue(&mut context);\n    }\n    #[public]\n    #[internal]\n    fn assert_minter_and_mint(minter: AztecAddress, amount: Field) {\n        assert(storage.minters.at(minter).read(), \"caller is not minter\");\n        let supply = storage.total_supply.read() + U128::from_integer(amount);\n        storage.total_supply.write(supply);\n    }\n    // docs:start:shield\n    #[public]\n    fn shield(from: AztecAddress, amount: Field, secret_hash: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            // The redeem is only spendable once, so we need to ensure that you cannot insert multiple shields from the same message.\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount.to_field(), secret_hash);\n        storage.public_balances.at(from).write(from_balance);\n        pending_shields.insert_from_public(&mut note);\n    }\n    // docs:end:shield\n    // docs:start:transfer_public\n    #[public]\n    fn transfer_public(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n    // docs:end:transfer_public\n    // docs:start:burn_public\n    #[public]\n    fn burn_public(from: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit_public\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit_public\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:burn_public\n    // docs:start:redeem_shield\n    #[private]\n    fn redeem_shield(to: AztecAddress, amount: Field, secret: Field) {\n        let secret_hash = compute_secret_hash(secret);\n        // Pop 1 note (set_limit(1)) which has an amount stored in a field with index 0 (select(0, amount)) and\n        // a secret_hash stored in a field with index 1 (select(1, secret_hash)).\n        let mut options = NoteGetterOptions::new();\n        options = options\n            .select(TransparentNote::properties().amount, Comparator.EQ, amount)\n            .select(TransparentNote::properties().secret_hash, Comparator.EQ, secret_hash)\n            .set_limit(1);\n        let notes = storage.pending_shields.pop_notes(options);\n        assert(notes.len() == 1, \"note not popped\");\n        // Add the token note to user's balances set\n        // Note: Using context.msg_sender() as a sender below makes this incompatible with escrows because we send\n        // outgoing logs to that address and to send outgoing logs you need to get a hold of ovsk_m.\n        let from = context.msg_sender();\n        let from_keys = get_public_keys(from);\n        let to_keys = get_public_keys(to);\n        storage.balances.at(to).add(to_keys.npk_m, U128::from_integer(amount)).emit(\n            encode_and_encrypt_note(&mut context, from_keys.ovpk_m, to_keys.ivpk_m, to),\n        );\n    }\n    // docs:end:redeem_shield\n    // docs:start:unshield\n    #[private]\n    fn unshield(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let from_keys = get_public_keys(from);\n        storage.balances.at(from).sub(from_keys.npk_m, U128::from_integer(amount)).emit(\n            encode_and_encrypt_note(&mut context, from_keys.ovpk_m, from_keys.ivpk_m, from),\n        );\n        Token::at(context.this_address())._increase_public_balance(to, amount).enqueue(&mut context);\n    }\n    // docs:end:unshield\n    // docs:start:transfer\n    #[private]\n    fn transfer(to: AztecAddress, amount: Field) {\n        let from = context.msg_sender();\n\n        let from_keys = get_public_keys(from);\n        let to_keys = get_public_keys(to);\n\n        let amount = U128::from_integer(amount);\n        // We reduce `from`'s balance by amount by recursively removing notes over potentially multiple calls. This\n        // method keeps the gate count for each individual call low - reading too many notes at once could result in\n        // circuits in which proving is not feasible.\n        // Since the sum of the amounts in the notes we nullified was potentially larger than amount, we create a new\n        // note for `from` with the change amount, e.g. if `amount` is 10 and two notes are nullified with amounts 8 and\n        // 5, then the change will be 3 (since 8 + 5 - 10 = 3).\n        let change = subtract_balance(\n            &mut context,\n            storage,\n            from,\n            amount,\n            INITIAL_TRANSFER_CALL_MAX_NOTES,\n        );\n        storage.balances.at(from).add(from_keys.npk_m, change).emit(\n            encode_and_encrypt_note_unconstrained(\n                &mut context,\n                from_keys.ovpk_m,\n                from_keys.ivpk_m,\n                from,\n            ),\n        );\n        storage.balances.at(to).add(to_keys.npk_m, amount).emit(\n            encode_and_encrypt_note_unconstrained(\n                &mut context,\n                from_keys.ovpk_m,\n                to_keys.ivpk_m,\n                to,\n            ),\n        );\n        // We don't constrain encryption of the note log in `transfer` (unlike in `transfer_from`) because the transfer\n        // function is only designed to be used in situations where the event is not strictly necessary (e.g. payment to\n        // another person where the payment is considered to be successful when the other party successfully decrypts a\n        // note).\n        Transfer { from, to, amount: amount.to_field() }.emit(\n            encode_and_encrypt_event_unconstrained(\n                &mut context,\n                from_keys.ovpk_m,\n                to_keys.ivpk_m,\n                to,\n            ),\n        );\n    }\n    // docs:end:transfer\n    #[contract_library_method]\n    fn subtract_balance(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n        account: AztecAddress,\n        amount: U128,\n        max_notes: u32,\n    ) -> U128 {\n        let subtracted = storage.balances.at(account).try_sub(amount, max_notes);\n        // Failing to subtract any amount means that the owner was unable to produce more notes that could be nullified.\n        // We could in some cases fail early inside try_sub if we detected that fewer notes than the maximum were\n        // returned and we were still unable to reach the target amount, but that'd make the code more complicated, and\n        // optimizing for the failure scenario is not as important.\n        assert(subtracted > U128::from_integer(0), \"Balance too low\");\n        if subtracted >= amount {\n            // We have achieved our goal of nullifying notes that add up to more than amount, so we return the change\n            subtracted - amount\n        } else {\n            // try_sub failed to nullify enough notes to reach the target amount, so we compute the amount remaining\n            // and try again.\n            let remaining = amount - subtracted;\n            compute_recurse_subtract_balance_call(*context, account, remaining).call(context)\n        }\n    }\n    // TODO(#7729): apply no_predicates to the contract interface method directly instead of having to use a wrapper\n    // like we do here.\n    #[no_predicates]\n    #[contract_library_method]\n    fn compute_recurse_subtract_balance_call(\n        context: PrivateContext,\n        account: AztecAddress,\n        remaining: U128,\n    ) -> PrivateCallInterface<25, U128> {\n        Token::at(context.this_address())._recurse_subtract_balance(account, remaining.to_field())\n    }\n    // TODO(#7728): even though the amount should be a U128, we can't have that type in a contract interface due to\n    // serialization issues.\n    #[internal]\n    #[private]\n    fn _recurse_subtract_balance(account: AztecAddress, amount: Field) -> U128 {\n        subtract_balance(\n            &mut context,\n            storage,\n            account,\n            U128::from_integer(amount),\n            RECURSIVE_TRANSFER_CALL_MAX_NOTES,\n        )\n    }\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n    // docs:end:cancel_authwit\n    // docs:start:transfer_from\n    #[private]\n    fn transfer_from(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit\n        let from_keys = get_public_keys(from);\n        let to_keys = get_public_keys(to);\n\n        let amount = U128::from_integer(amount);\n        // docs:start:increase_private_balance\n        // docs:start:encrypted\n        storage.balances.at(from).sub(from_keys.npk_m, amount).emit(encode_and_encrypt_note(\n            &mut context,\n            from_keys.ovpk_m,\n            from_keys.ivpk_m,\n            from,\n        ));\n        // docs:end:encrypted\n        // docs:end:increase_private_balance\n        storage.balances.at(to).add(to_keys.npk_m, amount).emit(encode_and_encrypt_note(\n            &mut context,\n            from_keys.ovpk_m,\n            to_keys.ivpk_m,\n            to,\n        ));\n    }\n    // docs:end:transfer_from\n    // docs:start:burn\n    #[private]\n    fn burn(from: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        let from_keys = get_public_keys(from);\n        storage.balances.at(from).sub(from_keys.npk_m, U128::from_integer(amount)).emit(\n            encode_and_encrypt_note(&mut context, from_keys.ovpk_m, from_keys.ivpk_m, from),\n        );\n        Token::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n    // docs:end:burn\n    /// We need to use different randomness for the user and for the fee payer notes because if the randomness values\n    /// were the same we could fingerprint the user by doing the following:\n    ///      1) randomness_influence = fee_payer_point - G_npk * fee_payer_npk =\n    ///                              = (G_npk * fee_payer_npk + G_rnd * randomness + G_slot * fee_payer_slot)\n    ///                                - G_npk * fee_payer_npk - G_slot * fee_payer_slot =\n    ///                              = G_rnd * randomness\n    ///      2) user_fingerprint = user_point - randomness_influence =\n    ///                          = (G_npk * user_npk + G_rnd * randomness + G_slot * user_slot) - G_rnd * randomness =\n    ///                          = G_npk * user_npk + G_slot * user_slot\n    ///      3) Then the second time the user would use this fee paying contract we would recover the same fingerprint\n    ///         and link that the 2 transactions were made by the same user. Given that it's expected that only\n    ///         a limited set of fee paying contracts will be used and they will be known, searching for fingerprints\n    ///         by trying different fee payers is a feasible attack.\n    ///\n    /// Note 1: fee_payer_npk is part of the fee_payer address preimage derivation, and is assumed to be known. So\n    //          if we have a known set of fee payer contract addresses getting fee_payer_npk and fee_payer_slot is\n    //          trivial (slot is derived in a `Map<...>` as a hash of balances map slot and a fee payer address).\n    /// Note 2: fee_payer_point and user_point above are public information because they are passed as args to\n    ///         the public `complete_refund(...)` function.\n    // docs:start:setup_refund\n    #[private]\n    fn setup_refund(\n        fee_payer: AztecAddress, // Address of the entity which will receive the fee note.\n        user: AztecAddress, // A user for which we are setting up the fee refund.\n        funded_amount: Field, // The amount the user funded the fee payer with (represents fee limit).\n    ) {\n        // 1. This function is called by fee paying contract (fee_payer) when setting up a refund so we need to support\n        // the authwit flow here and check that the user really permitted fee_payer to set up a refund on their behalf.\n        assert_current_call_valid_authwit(&mut context, user);\n\n        // 2. Get all the relevant keys\n        let fee_payer_keys = get_public_keys(fee_payer);\n        let user_keys = get_public_keys(user);\n\n        let fee_payer_npk_m_hash = fee_payer_keys.npk_m.hash();\n        let user_npk_m_hash = user_keys.npk_m.hash();\n\n        // 3. Deduct the funded amount from the user's balance - this is a maximum fee a user is willing to pay\n        // (called fee limit in aztec spec). The difference between fee limit and the actual tx fee will be refunded\n        // to the user in the `complete_refund(...)` function.\n        let change = subtract_balance(\n            &mut context,\n            storage,\n            user,\n            U128::from_integer(funded_amount),\n            INITIAL_TRANSFER_CALL_MAX_NOTES,\n        );\n        storage.balances.at(user).add(user_keys.npk_m, change).emit(\n            encode_and_encrypt_note_unconstrained(\n                &mut context,\n                user_keys.ovpk_m,\n                user_keys.ivpk_m,\n                user,\n            ),\n        );\n\n        // 4. Now we get the partial payloads\n        // TODO(#7775): Manually fetching the randomness here is not great. If we decide to include randomness in all\n        // notes we could just inject it in macros.\n        let fee_payer_randomness = unsafe { random() };\n        let user_randomness = unsafe { random() };\n\n        let fee_payer_setup_payload = TokenNote::setup_payload().new(\n            fee_payer_npk_m_hash,\n            fee_payer_randomness,\n            storage.balances.at(fee_payer).set.storage_slot,\n        );\n\n        let user_setup_payload = TokenNote::setup_payload().new(\n            user_npk_m_hash,\n            user_randomness,\n            storage.balances.at(user).set.storage_slot,\n        );\n\n        // 5. We encrypt and emit the partial note log\n        encrypt_and_emit_partial_log(\n            &mut context,\n            fee_payer_setup_payload.log_plaintext,\n            fee_payer_keys,\n            fee_payer,\n        );\n        encrypt_and_emit_partial_log(\n            &mut context,\n            user_setup_payload.log_plaintext,\n            user_keys,\n            user,\n        );\n\n        // 6. We convert the hiding points to standard `Point` type as we cannot pass `TokenNoteHidingPoint` type\n        // as an argument to a function due to macro limitations (the `TokenNoteHidingPoint` type is macro generated\n        // and hence is not resolved soon enough by the compiler).\n        let fee_payer_point = fee_payer_setup_payload.hiding_point;\n        let user_point = user_setup_payload.hiding_point;\n\n        // 7. Set the public teardown function to `complete_refund(...)`. Public teardown is the only time when a public\n        // function has access to the final transaction fee, which is needed to compute the actual refund amount.\n        context.set_public_teardown_function(\n            context.this_address(),\n            comptime {\n                FunctionSelector::from_signature(\n                    \"complete_refund((Field,Field,bool),(Field,Field,bool),Field)\",\n                )\n            },\n            [\n                fee_payer_point.x,\n                fee_payer_point.y,\n                fee_payer_point.is_infinite as Field,\n                user_point.x,\n                user_point.y,\n                user_point.is_infinite as Field,\n                funded_amount,\n            ],\n        );\n    }\n    // docs:end:setup_refund\n\n    // TODO(#7728): even though the funded_amount should be a U128, we can't have that type in a contract interface due\n    // to serialization issues.\n    // docs:start:complete_refund\n    #[public]\n    #[internal]\n    fn complete_refund(fee_payer_point: Point, user_point: Point, funded_amount: Field) {\n        // TODO(#7728): Remove the next line\n        let funded_amount = U128::from_integer(funded_amount);\n        let tx_fee = U128::from_integer(context.transaction_fee());\n\n        // 1. We check that user funded the fee payer contract with at least the transaction fee.\n        // TODO(#7796): we should try to prevent reverts here\n        assert(funded_amount >= tx_fee, \"funded amount not enough to cover tx fee\");\n\n        // 2. We compute the refund amount as the difference between funded amount and tx fee.\n        let refund_amount = funded_amount - tx_fee;\n\n        // 3. We construct the note finalization payloads with the correct amounts and hiding points to get the note\n        // hashes and unencrypted logs.\n        let fee_payer_finalization_payload =\n            TokenNote::finalization_payload().new(fee_payer_point, tx_fee);\n        let user_finalization_payload =\n            TokenNote::finalization_payload().new(user_point, refund_amount);\n\n        // 4. We emit the `tx_fee` and `refund_amount` as unencrypted event such that the `NoteProcessor` can use it\n        // to reconstruct the note.\n        context.emit_unencrypted_log(fee_payer_finalization_payload.log);\n        context.emit_unencrypted_log(user_finalization_payload.log);\n\n        // 5. At last we emit the note hashes.\n        context.push_note_hash(fee_payer_finalization_payload.note_hash);\n        context.push_note_hash(user_finalization_payload.note_hash);\n        // --> Once the tx is settled user and fee recipient can add the notes to their pixies.\n    }\n    // docs:end:complete_refund\n\n    /// Internal ///\n    // docs:start:increase_public_balance\n    #[public]\n    #[internal]\n    fn _increase_public_balance(to: AztecAddress, amount: Field) {\n        let new_balance = storage.public_balances.at(to).read().add(U128::from_integer(amount));\n        storage.public_balances.at(to).write(new_balance);\n    }\n    // docs:end:increase_public_balance\n    // docs:start:reduce_total_supply\n    #[public]\n    #[internal]\n    fn _reduce_total_supply(amount: Field) {\n        // Only to be called from burn.\n        let new_supply = storage.total_supply.read().sub(U128::from_integer(amount));\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:reduce_total_supply\n    /// Unconstrained ///\n    // docs:start:balance_of_private\n    pub(crate) unconstrained fn balance_of_private(owner: AztecAddress) -> pub Field {\n        storage.balances.at(owner).balance_of().to_field()\n    }\n    // docs:end:balance_of_private\n}\n\n// docs:end:token_all\n"},"355":{"path":"/usr/src/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{\n        constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator,\n    }, note::utils::compute_note_hash_for_nullify, oracle::random::random,\n    keys::getters::get_nsk_app, macros::notes::partial_note,\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\n// docs:start:TokenNote\n#[partial_note(quote {amount})]\npub struct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n// docs:end:TokenNote\n\nimpl NullifiableNote for TokenNote {\n    // docs:start:nullifier\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n    // docs:end:nullifier\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl Eq for TokenNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount)\n            & (self.npk_m_hash == other.npk_m_hash)\n            & (self.randomness == other.randomness)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { amount, npk_m_hash: owner_npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"357":{"path":"/usr/src/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::utils::compute_note_hash_for_nullify,\n    prelude::{NoteHeader, NullifiableNote, PrivateContext},\n    protocol_types::{\n        constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash_with_separator,\n    }, macros::notes::note,\n};\n\nuse dep::std::mem::zeroed;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[note]\npub struct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nimpl NullifiableNote for TransparentNote {\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit.\n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_nullifier(\n        self,\n        _context: &mut PrivateContext,\n        _note_hash_for_nullify: Field,\n    ) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        // compute_nullifier ignores both of its parameters so we can reuse it here\n        self.compute_nullifier(zeroed(), zeroed())\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl Eq for TransparentNote {\n    fn eq(self, other: Self) -> bool {\n        (self.amount == other.amount) & (self.secret_hash == other.secret_hash)\n    }\n}\n\n// docs:end:token_types_all\n"},"403":{"path":"/usr/src/noir-projects/noir-contracts/contracts/escrow_contract/src/main.nr","source":"// Sample escrow contract that stores a balance of a private token on behalf of an owner.\nuse dep::aztec::macros::aztec;\n\n#[aztec]\ncontract Escrow {\n    use dep::aztec::prelude::{AztecAddress, PrivateImmutable};\n    use dep::aztec::{\n        encrypted_logs::encrypted_note_emission::encode_and_encrypt_note,\n        keys::getters::get_public_keys,\n        macros::{storage::storage, functions::{private, initializer}},\n    };\n\n    // docs:start:addressnote_import\n    use dep::address_note::address_note::AddressNote;\n    // docs:end:addressnote_import\n    use dep::token::Token;\n\n    #[storage]\n    struct Storage<Context> {\n        owner: PrivateImmutable<AddressNote, Context>,\n    }\n\n    // Creates a new instance\n    #[private]\n    #[initializer]\n    fn constructor(owner: AztecAddress) {\n        let owner_keys = get_public_keys(owner);\n        let msg_sender_keys = get_public_keys(context.msg_sender());\n        // docs:start:addressnote_new\n        let mut note = AddressNote::new(owner, owner_keys.npk_m.hash());\n        // docs:end:addressnote_new\n        storage.owner.initialize(&mut note).emit(encode_and_encrypt_note(\n            &mut context,\n            msg_sender_keys.ovpk_m,\n            owner_keys.ivpk_m,\n            owner,\n        ));\n    }\n\n    // Withdraws balance. Requires that msg.sender is the owner.\n    #[private]\n    fn withdraw(token: AztecAddress, amount: Field, recipient: AztecAddress) {\n        let sender = context.msg_sender();\n\n        let note = storage.owner.get_note();\n        assert(note.address == sender);\n\n        Token::at(token).transfer(recipient, amount).call(&mut context);\n    }\n}\n"},"405":{"path":"/usr/src/noir-projects/aztec-nr/address-note/src/address_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n        address::AztecAddress, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        hash::poseidon2_hash_with_separator,\n    },\n    note::{\n        note_header::NoteHeader, note_interface::NullifiableNote,\n        utils::compute_note_hash_for_nullify,\n    }, oracle::random::random, keys::getters::get_nsk_app, context::PrivateContext,\n    macros::notes::note,\n};\n\n// docs:start:address_note_def\n// docs:start:address_note_struct\n// Stores an address\n#[note]\npub struct AddressNote {\n    address: AztecAddress,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:address_note_struct\n\nimpl NullifiableNote for AddressNote {\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n\n    unconstrained fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_nullify(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        )\n    }\n}\n\nimpl AddressNote {\n    pub fn new(address: AztecAddress, npk_m_hash: Field) -> Self {\n        // We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing, so a\n        // malicious sender could use non-random values to make the note less private. But they already know the full\n        // note pre-image anyway, and so the recipient already trusts them to not disclose this information. We can\n        // therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        AddressNote { address, npk_m_hash, randomness, header: NoteHeader::empty() }\n    }\n    // docs:end:address_note_def\n}\n"},"58":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n"},"59":{"path":"std/panic.nr","source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n"},"91":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"/// Notifies the simulator that `args` will later be used at some point during execution, referenced by their hash. This\n/// allows the simulator to know how to respond to this future request.\n///\n/// This is only used during private execution, since in public it is the VM itself that keeps track of arguments.\npub fn pack_arguments(args: [Field]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_oracle_wrapper(args) };\n}\n\n/// Same as `pack_arguments`, but using arrays instead of slices.\npub fn pack_arguments_array<let N: u32>(args: [Field; N]) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call. When\n    // unpacking however the caller must check that the returned value is indeed the preimage.\n    unsafe { pack_arguments_array_oracle_wrapper(args) };\n}\n\nunconstrained fn pack_arguments_oracle_wrapper(args: [Field]) {\n    let _ = pack_arguments_oracle(args);\n}\n\nunconstrained fn pack_arguments_array_oracle_wrapper<let N: u32>(args: [Field; N]) {\n    let _ = pack_arguments_array_oracle(args);\n}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<let N: u32>(_args: [Field; N]) -> Field {}\n"},"93":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{\n    KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH,\n};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n"},"96":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress}, public_keys::{PublicKeys, NpkM, IvpkM, OvpkM, TpkM},\n    point::Point,\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] as bool } },\n        ivpk_m: IvpkM {\n            inner: Point { x: result[3], y: result[4], is_infinite: result[5] as bool },\n        },\n        ovpk_m: OvpkM {\n            inner: Point { x: result[6], y: result[7], is_infinite: result[8] as bool },\n        },\n        tpk_m: TpkM {\n            inner: Point { x: result[9], y: result[10], is_infinite: result[11] as bool },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"98":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::address::AztecAddress;\n\n/// Informs the simulator that an encrypted note log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_note_log<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_note_log_oracle_wrapper(note_hash_counter, encrypted_note, counter)\n    }\n}\n\n/// Informs the simulator that an encrypted event log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_encrypted_event_log<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_encrypted_event_log_oracle_wrapper(\n            contract_address,\n            randomness,\n            encrypted_event,\n            counter,\n        )\n    }\n}\n\n/// Informs the simulator that an unencrypted log has been emitted, helping it keep track of side-effects and easing\n/// debugging.\npub fn emit_unencrypted_log_private<T>(contract_address: AztecAddress, message: T, counter: u32) {\n    // This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to call.\n    unsafe {\n        emit_unencrypted_log_private_oracle_wrapper(contract_address, message, counter)\n    }\n}\n\nunconstrained fn emit_encrypted_note_log_oracle_wrapper<let M: u32>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\nunconstrained fn emit_encrypted_event_log_oracle_wrapper<let M: u32>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32,\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\nunconstrained fn emit_unencrypted_log_private_oracle_wrapper<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32,\n) {\n    let _ = emit_unencrypted_log_private_oracle(contract_address, message, counter);\n}\n\n/// Temporary substitute for `emit_unencrypted_log_private` that is used for handling contract class registration. This\n/// variant returns the log hash, which would be too large to compute inside a circuit.\npub unconstrained fn emit_contract_class_unencrypted_log_private<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {\n    emit_contract_class_unencrypted_log_private_oracle(contract_address, message, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<let M: u32>(\n    _note_hash_counter: u32,\n    _encrypted_note: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<let M: u32>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32,\n) {}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_private_oracle<T>(\n    _contract_address: AztecAddress,\n    _message: T,\n    _counter: u32,\n) -> Field {}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    message: [Field; N],\n    counter: u32,\n) -> Field {}\n"},"99":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, constants::CONTRACT_INSTANCE_LENGTH,\n    utils::reader::Reader,\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(\n    _address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\npub unconstrained fn get_contract_instance_internal_avm(\n    address: AztecAddress,\n) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance =\n        unsafe { ContractInstance::deserialize(get_contract_instance_internal(address)) };\n    // The to_address function combines all values in the instance object to produce an address, so by checking that we\n    // get the expected address we validate the entire struct.\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"}}}