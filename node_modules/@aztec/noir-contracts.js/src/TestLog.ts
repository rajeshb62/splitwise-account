/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  type AbiType,
  AztecAddress,
  type AztecAddressLike,
  CompleteAddress,
  Contract,
  type ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  type ContractInstanceWithAddress,
  type ContractMethod,
  type ContractNotes,
  type ContractStorageLayout,
  DeployMethod,
  EthAddress,
  type EthAddressLike,
  EventSelector,
  type FieldLike,
  Fr,
  type FunctionSelectorLike,
  L1EventPayload,
  type NoirCompiledContract,
  NoteSelector,
  Point,
  type PublicKey,
  PublicKeys,
  type UnencryptedL2Log,
  type Wallet,
  type WrappedFieldLike,
  decodeFromAbi,
  loadContractArtifact,
} from '@aztec/aztec.js';

import TestLogContractArtifactJson from '../artifacts/test_log_contract-TestLog.json' assert { type: 'json' };

export const TestLogContractArtifact = loadContractArtifact(TestLogContractArtifactJson as NoirCompiledContract);

export type ExampleEvent1 = {
  value2: AztecAddressLike;
  value3: bigint | number;
};

export type ExampleEvent0 = {
  value0: FieldLike;
  value1: FieldLike;
};

/**
 * Type-safe interface for contract TestLog;
 */
export class TestLogContract extends ContractBase {
  private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
    super(instance, TestLogContractArtifact, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, TestLogContract.artifact, wallet) as Promise<TestLogContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet) {
    return new DeployMethod<TestLogContract>(
      PublicKeys.default(),
      wallet,
      TestLogContractArtifact,
      TestLogContract.at,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
   */
  public static deployWithPublicKeys(publicKeys: PublicKeys, wallet: Wallet) {
    return new DeployMethod<TestLogContract>(
      publicKeys,
      wallet,
      TestLogContractArtifact,
      TestLogContract.at,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified constructor method.
   */
  public static deployWithOpts<M extends keyof TestLogContract['methods']>(
    opts: { publicKeys?: PublicKeys; method?: M; wallet: Wallet },
    ...args: Parameters<TestLogContract['methods'][M]>
  ) {
    return new DeployMethod<TestLogContract>(
      opts.publicKeys ?? PublicKeys.default(),
      opts.wallet,
      TestLogContractArtifact,
      TestLogContract.at,
      Array.from(arguments).slice(1),
      opts.method ?? 'constructor',
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return TestLogContractArtifact;
  }

  public static get storage(): ContractStorageLayout<'example_set'> {
    return {
      example_set: {
        slot: new Fr(1n),
      },
    } as ContractStorageLayout<'example_set'>;
  }

  public static get notes(): ContractNotes<'ValueNote'> {
    return {
      ValueNote: {
        id: new NoteSelector(1038582377),
      },
    } as ContractNotes<'ValueNote'>;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public declare methods: {
    /** compute_note_hash_and_optionally_a_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, compute_nullifier: boolean, serialized_note: array) */
    compute_note_hash_and_optionally_a_nullifier: ((
      contract_address: AztecAddressLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      note_type_id: FieldLike,
      compute_nullifier: boolean,
      serialized_note: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** emit_encrypted_events(other: struct, randomness: array, preimages: array) */
    emit_encrypted_events: ((
      other: AztecAddressLike,
      randomness: FieldLike[],
      preimages: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** emit_unencrypted_events(preimages: array) */
    emit_unencrypted_events: ((preimages: FieldLike[]) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** public_dispatch(selector: field) */
    public_dispatch: ((selector: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };

  // Partial application is chosen is to avoid the duplication of so much codegen.
  private static decodeEvent<T>(
    eventSelector: EventSelector,
    eventType: AbiType,
  ): (payload: L1EventPayload | UnencryptedL2Log | undefined) => T | undefined {
    return (payload: L1EventPayload | UnencryptedL2Log | undefined): T | undefined => {
      if (payload === undefined) {
        return undefined;
      }

      if (payload instanceof L1EventPayload) {
        if (!eventSelector.equals(payload.eventTypeId)) {
          return undefined;
        }
        return decodeFromAbi([eventType], payload.event.items) as T;
      } else {
        let items = [];
        for (let i = 0; i < payload.data.length; i += 32) {
          items.push(new Fr(payload.data.subarray(i, i + 32)));
        }

        return decodeFromAbi([eventType], items) as T;
      }
    };
  }

  public static get events(): {
    ExampleEvent1: {
      decode: (payload: L1EventPayload | UnencryptedL2Log | undefined) => ExampleEvent1 | undefined;
      eventSelector: EventSelector;
      fieldNames: string[];
    };
    ExampleEvent0: {
      decode: (payload: L1EventPayload | UnencryptedL2Log | undefined) => ExampleEvent0 | undefined;
      eventSelector: EventSelector;
      fieldNames: string[];
    };
  } {
    return {
      ExampleEvent1: {
        decode: this.decodeEvent(EventSelector.fromSignature('ExampleEvent1((Field),u8)'), {
          fields: [
            {
              name: 'value2',
              type: {
                fields: [
                  {
                    name: 'inner',
                    type: {
                      kind: 'field',
                    },
                  },
                ],
                kind: 'struct',
                path: 'aztec::protocol_types::address::aztec_address::AztecAddress',
              },
            },
            {
              name: 'value3',
              type: {
                kind: 'integer',
                sign: 'unsigned',
                width: 8,
              },
            },
          ],
          kind: 'struct',
          path: 'TestLog::ExampleEvent1',
        }),
        eventSelector: EventSelector.fromSignature('ExampleEvent1((Field),u8)'),
        fieldNames: ['value2', 'value3'],
      },
      ExampleEvent0: {
        decode: this.decodeEvent(EventSelector.fromSignature('ExampleEvent0(Field,Field)'), {
          fields: [
            {
              name: 'value0',
              type: {
                kind: 'field',
              },
            },
            {
              name: 'value1',
              type: {
                kind: 'field',
              },
            },
          ],
          kind: 'struct',
          path: 'TestLog::ExampleEvent0',
        }),
        eventSelector: EventSelector.fromSignature('ExampleEvent0(Field,Field)'),
        fieldNames: ['value0', 'value1'],
      },
    };
  }
}
