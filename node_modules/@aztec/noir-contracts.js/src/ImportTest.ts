/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  type AbiType,
  AztecAddress,
  type AztecAddressLike,
  CompleteAddress,
  Contract,
  type ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  type ContractInstanceWithAddress,
  type ContractMethod,
  type ContractNotes,
  type ContractStorageLayout,
  DeployMethod,
  EthAddress,
  type EthAddressLike,
  EventSelector,
  type FieldLike,
  Fr,
  type FunctionSelectorLike,
  L1EventPayload,
  type NoirCompiledContract,
  NoteSelector,
  Point,
  type PublicKey,
  PublicKeys,
  type UnencryptedL2Log,
  type Wallet,
  type WrappedFieldLike,
  decodeFromAbi,
  loadContractArtifact,
} from '@aztec/aztec.js';

import ImportTestContractArtifactJson from '../artifacts/import_test_contract-ImportTest.json' assert { type: 'json' };

export const ImportTestContractArtifact = loadContractArtifact(ImportTestContractArtifactJson as NoirCompiledContract);

/**
 * Type-safe interface for contract ImportTest;
 */
export class ImportTestContract extends ContractBase {
  private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
    super(instance, ImportTestContractArtifact, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, ImportTestContract.artifact, wallet) as Promise<ImportTestContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet) {
    return new DeployMethod<ImportTestContract>(
      PublicKeys.default(),
      wallet,
      ImportTestContractArtifact,
      ImportTestContract.at,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
   */
  public static deployWithPublicKeys(publicKeys: PublicKeys, wallet: Wallet) {
    return new DeployMethod<ImportTestContract>(
      publicKeys,
      wallet,
      ImportTestContractArtifact,
      ImportTestContract.at,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified constructor method.
   */
  public static deployWithOpts<M extends keyof ImportTestContract['methods']>(
    opts: { publicKeys?: PublicKeys; method?: M; wallet: Wallet },
    ...args: Parameters<ImportTestContract['methods'][M]>
  ) {
    return new DeployMethod<ImportTestContract>(
      opts.publicKeys ?? PublicKeys.default(),
      opts.wallet,
      ImportTestContractArtifact,
      ImportTestContract.at,
      Array.from(arguments).slice(1),
      opts.method ?? 'constructor',
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return ImportTestContractArtifact;
  }

  public static get notes(): ContractNotes<'TestNote' | 'ValueNote'> {
    return {
      TestNote: {
        id: new NoteSelector(1049718859),
      },
      ValueNote: {
        id: new NoteSelector(1038582377),
      },
    } as ContractNotes<'TestNote' | 'ValueNote'>;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public declare methods: {
    /** call_no_args(target: struct) */
    call_no_args: ((target: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** call_public_fn(target: struct) */
    call_public_fn: ((target: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_optionally_a_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, compute_nullifier: boolean, serialized_note: array) */
    compute_note_hash_and_optionally_a_nullifier: ((
      contract_address: AztecAddressLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      note_type_id: FieldLike,
      compute_nullifier: boolean,
      serialized_note: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** main_contract(target: struct) */
    main_contract: ((target: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** pub_call_public_fn(target: struct) */
    pub_call_public_fn: ((target: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** public_dispatch(selector: field) */
    public_dispatch: ((selector: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
  };
}
