import { AztecAddress, type AztecAddressLike, type ContractArtifact, ContractBase, ContractFunctionInteraction, type ContractMethod, type ContractNotes, type ContractStorageLayout, DeployMethod, EventSelector, type FieldLike, L1EventPayload, PublicKeys, type UnencryptedL2Log, type Wallet } from '@aztec/aztec.js';
export declare const NFTContractArtifact: ContractArtifact;
export type NFTTransfer = {
    from: AztecAddressLike;
    to: AztecAddressLike;
    token_id: FieldLike;
};
/**
 * Type-safe interface for contract NFT;
 */
export declare class NFTContract extends ContractBase {
    private constructor();
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static at(address: AztecAddress, wallet: Wallet): Promise<NFTContract>;
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet: Wallet, admin: AztecAddressLike, name: string, symbol: string): DeployMethod<NFTContract>;
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeys(publicKeys: PublicKeys, wallet: Wallet, admin: AztecAddressLike, name: string, symbol: string): DeployMethod<NFTContract>;
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts<M extends keyof NFTContract['methods']>(opts: {
        publicKeys?: PublicKeys;
        method?: M;
        wallet: Wallet;
    }, ...args: Parameters<NFTContract['methods'][M]>): DeployMethod<NFTContract>;
    /**
     * Returns this contract's artifact.
     */
    static get artifact(): ContractArtifact;
    static get storage(): ContractStorageLayout<'symbol' | 'name' | 'admin' | 'minters' | 'private_nfts' | 'nft_exists' | 'public_owners'>;
    static get notes(): ContractNotes<'NFTNote'>;
    /** Type-safe wrappers for the public methods exposed by the contract. */
    methods: {
        /** cancel_authwit(inner_hash: field) */
        cancel_authwit: ((inner_hash: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** compute_note_hash_and_optionally_a_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, compute_nullifier: boolean, serialized_note: array) */
        compute_note_hash_and_optionally_a_nullifier: ((contract_address: AztecAddressLike, nonce: FieldLike, storage_slot: FieldLike, note_type_id: FieldLike, compute_nullifier: boolean, serialized_note: FieldLike[]) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** constructor(admin: struct, name: string, symbol: string) */
        constructor: ((admin: AztecAddressLike, name: string, symbol: string) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** finalize_transfer_to_private(token_id: field, hiding_point_slot: field) */
        finalize_transfer_to_private: ((token_id: FieldLike, hiding_point_slot: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_admin() */
        get_admin: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** get_private_nfts(owner: struct, page_index: integer) */
        get_private_nfts: ((owner: AztecAddressLike, page_index: bigint | number) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** is_minter(minter: struct) */
        is_minter: ((minter: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** mint(to: struct, token_id: field) */
        mint: ((to: AztecAddressLike, token_id: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** owner_of(token_id: field) */
        owner_of: ((token_id: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** prepare_transfer_to_private(to: struct) */
        prepare_transfer_to_private: ((to: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** private_get_name() */
        private_get_name: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** private_get_symbol() */
        private_get_symbol: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** public_dispatch(selector: field) */
        public_dispatch: ((selector: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** public_get_name() */
        public_get_name: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** public_get_symbol() */
        public_get_symbol: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** set_admin(new_admin: struct) */
        set_admin: ((new_admin: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** set_minter(minter: struct, approve: boolean) */
        set_minter: ((minter: AztecAddressLike, approve: boolean) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** transfer_in_private(from: struct, to: struct, token_id: field, nonce: field) */
        transfer_in_private: ((from: AztecAddressLike, to: AztecAddressLike, token_id: FieldLike, nonce: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** transfer_in_public(from: struct, to: struct, token_id: field, nonce: field) */
        transfer_in_public: ((from: AztecAddressLike, to: AztecAddressLike, token_id: FieldLike, nonce: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** transfer_to_private(to: struct, token_id: field) */
        transfer_to_private: ((to: AztecAddressLike, token_id: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
        /** transfer_to_public(from: struct, to: struct, token_id: field, nonce: field) */
        transfer_to_public: ((from: AztecAddressLike, to: AztecAddressLike, token_id: FieldLike, nonce: FieldLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;
    };
    private static decodeEvent;
    static get events(): {
        NFTTransfer: {
            decode: (payload: L1EventPayload | UnencryptedL2Log | undefined) => NFTTransfer | undefined;
            eventSelector: EventSelector;
            fieldNames: string[];
        };
    };
}
//# sourceMappingURL=NFT.d.ts.map