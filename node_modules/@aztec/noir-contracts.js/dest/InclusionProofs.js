/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, Fr, NoteSelector, PublicKeys, loadContractArtifact, } from '@aztec/aztec.js';
import InclusionProofsContractArtifactJson from '../artifacts/inclusion_proofs_contract-InclusionProofs.json' assert { type: 'json' };
export const InclusionProofsContractArtifact = loadContractArtifact(InclusionProofsContractArtifactJson);
/**
 * Type-safe interface for contract InclusionProofs;
 */
export class InclusionProofsContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, InclusionProofsContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, InclusionProofsContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, public_value) {
        return new DeployMethod(PublicKeys.default(), wallet, InclusionProofsContractArtifact, InclusionProofsContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeys(publicKeys, wallet, public_value) {
        return new DeployMethod(publicKeys, wallet, InclusionProofsContractArtifact, InclusionProofsContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeys ?? PublicKeys.default(), opts.wallet, InclusionProofsContractArtifact, InclusionProofsContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return InclusionProofsContractArtifact;
    }
    static get storage() {
        return {
            private_values: {
                slot: new Fr(1n),
            },
            public_value: {
                slot: new Fr(2n),
            },
            public_unused_value: {
                slot: new Fr(3n),
            },
        };
    }
    static get notes() {
        return {
            ValueNote: {
                id: new NoteSelector(1038582377),
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW5jbHVzaW9uUHJvb2ZzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0luY2x1c2lvblByb29mcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFFdEMsb0JBQW9CO0FBQ3BCLE9BQU8sRUFLTCxRQUFRLEVBRVIsWUFBWSxFQU1aLFlBQVksRUFLWixFQUFFLEVBSUYsWUFBWSxFQUdaLFVBQVUsRUFLVixvQkFBb0IsR0FDckIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLG1DQUFtQyxNQUFNLDZEQUE2RCxDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBRXRJLE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUFHLG9CQUFvQixDQUNqRSxtQ0FBMkQsQ0FDNUQsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHVCQUF3QixTQUFRLFlBQVk7SUFDdkQsWUFBb0IsUUFBcUMsRUFBRSxNQUFjO1FBQ3ZFLEtBQUssQ0FBQyxRQUFRLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBcUIsRUFBRSxNQUFjO1FBQzFELE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBcUMsQ0FBQztJQUM1RyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQWMsRUFBRSxZQUF1QjtRQUMxRCxPQUFPLElBQUksWUFBWSxDQUNyQixVQUFVLENBQUMsT0FBTyxFQUFFLEVBQ3BCLE1BQU0sRUFDTiwrQkFBK0IsRUFDL0IsdUJBQXVCLENBQUMsRUFBRSxFQUMxQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDL0IsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxVQUFzQixFQUFFLE1BQWMsRUFBRSxZQUF1QjtRQUNoRyxPQUFPLElBQUksWUFBWSxDQUNyQixVQUFVLEVBQ1YsTUFBTSxFQUNOLCtCQUErQixFQUMvQix1QkFBdUIsQ0FBQyxFQUFFLEVBQzFCLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUMvQixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLGNBQWMsQ0FDMUIsSUFBNkQsRUFDN0QsR0FBRyxJQUF1RDtRQUUxRCxPQUFPLElBQUksWUFBWSxDQUNyQixJQUFJLENBQUMsVUFBVSxJQUFJLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFDdkMsSUFBSSxDQUFDLE1BQU0sRUFDWCwrQkFBK0IsRUFDL0IsdUJBQXVCLENBQUMsRUFBRSxFQUMxQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFDOUIsSUFBSSxDQUFDLE1BQU0sSUFBSSxhQUFhLENBQzdCLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLEtBQUssUUFBUTtRQUN4QixPQUFPLCtCQUErQixDQUFDO0lBQ3pDLENBQUM7SUFFTSxNQUFNLEtBQUssT0FBTztRQUN2QixPQUFPO1lBQ0wsY0FBYyxFQUFFO2dCQUNkLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDakI7WUFDRCxZQUFZLEVBQUU7Z0JBQ1osSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQzthQUNqQjtZQUNELG1CQUFtQixFQUFFO2dCQUNuQixJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO2FBQ2pCO1NBQ2tGLENBQUM7SUFDeEYsQ0FBQztJQUVNLE1BQU0sS0FBSyxLQUFLO1FBQ3JCLE9BQU87WUFDTCxTQUFTLEVBQUU7Z0JBQ1QsRUFBRSxFQUFFLElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQzthQUNqQztTQUM0QixDQUFDO0lBQ2xDLENBQUM7Q0E0R0YifQ==