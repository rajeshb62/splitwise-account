/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EventSelector, Fr, L1EventPayload, NoteSelector, PublicKeys, decodeFromAbi, loadContractArtifact, } from '@aztec/aztec.js';
import CrowdfundingContractArtifactJson from '../artifacts/crowdfunding_contract-Crowdfunding.json' assert { type: 'json' };
export const CrowdfundingContractArtifact = loadContractArtifact(CrowdfundingContractArtifactJson);
/**
 * Type-safe interface for contract Crowdfunding;
 */
export class CrowdfundingContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, CrowdfundingContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, CrowdfundingContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, donation_token, operator, deadline) {
        return new DeployMethod(PublicKeys.default(), wallet, CrowdfundingContractArtifact, CrowdfundingContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeys(publicKeys, wallet, donation_token, operator, deadline) {
        return new DeployMethod(publicKeys, wallet, CrowdfundingContractArtifact, CrowdfundingContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeys ?? PublicKeys.default(), opts.wallet, CrowdfundingContractArtifact, CrowdfundingContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return CrowdfundingContractArtifact;
    }
    static get storage() {
        return {
            donation_token: {
                slot: new Fr(1n),
            },
            operator: {
                slot: new Fr(2n),
            },
            deadline: {
                slot: new Fr(3n),
            },
            donation_receipts: {
                slot: new Fr(4n),
            },
        };
    }
    static get notes() {
        return {
            TransparentNote: {
                id: new NoteSelector(3193649735),
            },
            TokenNote: {
                id: new NoteSelector(2350566847),
            },
            ValueNote: {
                id: new NoteSelector(1038582377),
            },
        };
    }
    // Partial application is chosen is to avoid the duplication of so much codegen.
    static decodeEvent(eventSelector, eventType) {
        return (payload) => {
            if (payload === undefined) {
                return undefined;
            }
            if (payload instanceof L1EventPayload) {
                if (!eventSelector.equals(payload.eventTypeId)) {
                    return undefined;
                }
                return decodeFromAbi([eventType], payload.event.items);
            }
            else {
                let items = [];
                for (let i = 0; i < payload.data.length; i += 32) {
                    items.push(new Fr(payload.data.subarray(i, i + 32)));
                }
                return decodeFromAbi([eventType], items);
            }
        };
    }
    static get events() {
        return {
            WithdrawalProcessed: {
                decode: this.decodeEvent(EventSelector.fromSignature('WithdrawalProcessed((Field),u64)'), {
                    fields: [
                        {
                            name: 'who',
                            type: {
                                fields: [
                                    {
                                        name: 'inner',
                                        type: {
                                            kind: 'field',
                                        },
                                    },
                                ],
                                kind: 'struct',
                                path: 'aztec::protocol_types::address::aztec_address::AztecAddress',
                            },
                        },
                        {
                            name: 'amount',
                            type: {
                                kind: 'integer',
                                sign: 'unsigned',
                                width: 64,
                            },
                        },
                    ],
                    kind: 'struct',
                    path: 'Crowdfunding::WithdrawalProcessed',
                }),
                eventSelector: EventSelector.fromSignature('WithdrawalProcessed((Field),u64)'),
                fieldNames: ['who', 'amount'],
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3Jvd2RmdW5kaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0Nyb3dkZnVuZGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFFdEMsb0JBQW9CO0FBQ3BCLE9BQU8sRUFLTCxRQUFRLEVBRVIsWUFBWSxFQU1aLFlBQVksRUFHWixhQUFhLEVBRWIsRUFBRSxFQUVGLGNBQWMsRUFFZCxZQUFZLEVBR1osVUFBVSxFQUlWLGFBQWEsRUFDYixvQkFBb0IsR0FDckIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLGdDQUFnQyxNQUFNLHNEQUFzRCxDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBRTVILE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLG9CQUFvQixDQUM5RCxnQ0FBd0QsQ0FDekQsQ0FBQztBQU9GOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG9CQUFxQixTQUFRLFlBQVk7SUFDcEQsWUFBb0IsUUFBcUMsRUFBRSxNQUFjO1FBQ3ZFLEtBQUssQ0FBQyxRQUFRLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBcUIsRUFBRSxNQUFjO1FBQzFELE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsb0JBQW9CLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBa0MsQ0FBQztJQUN0RyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUNsQixNQUFjLEVBQ2QsY0FBZ0MsRUFDaEMsUUFBMEIsRUFDMUIsUUFBeUI7UUFFekIsT0FBTyxJQUFJLFlBQVksQ0FDckIsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUNwQixNQUFNLEVBQ04sNEJBQTRCLEVBQzVCLG9CQUFvQixDQUFDLEVBQUUsRUFDdkIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMs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