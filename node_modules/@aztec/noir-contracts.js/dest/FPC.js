/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, Fr, NoteSelector, PublicKeys, loadContractArtifact, } from '@aztec/aztec.js';
import FPCContractArtifactJson from '../artifacts/fpc_contract-FPC.json' assert { type: 'json' };
export const FPCContractArtifact = loadContractArtifact(FPCContractArtifactJson);
/**
 * Type-safe interface for contract FPC;
 */
export class FPCContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, FPCContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, FPCContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, other_asset) {
        return new DeployMethod(PublicKeys.default(), wallet, FPCContractArtifact, FPCContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeys(publicKeys, wallet, other_asset) {
        return new DeployMethod(publicKeys, wallet, FPCContractArtifact, FPCContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeys ?? PublicKeys.default(), opts.wallet, FPCContractArtifact, FPCContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return FPCContractArtifact;
    }
    static get storage() {
        return {
            other_asset: {
                slot: new Fr(1n),
            },
        };
    }
    static get notes() {
        return {
            TransparentNote: {
                id: new NoteSelector(3193649735),
            },
            TokenNote: {
                id: new NoteSelector(2350566847),
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRlBDLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0ZQQy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFFdEMsb0JBQW9CO0FBQ3BCLE9BQU8sRUFLTCxRQUFRLEVBRVIsWUFBWSxFQU1aLFlBQVksRUFLWixFQUFFLEVBSUYsWUFBWSxFQUdaLFVBQVUsRUFLVixvQkFBb0IsR0FDckIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLHVCQUF1QixNQUFNLG9DQUFvQyxDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBRWpHLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLG9CQUFvQixDQUFDLHVCQUErQyxDQUFDLENBQUM7QUFFekc7O0dBRUc7QUFDSCxNQUFNLE9BQU8sV0FBWSxTQUFRLFlBQVk7SUFDM0MsWUFBb0IsUUFBcUMsRUFBRSxNQUFjO1FBQ3ZFLEtBQUssQ0FBQyxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBcUIsRUFBRSxNQUFjO1FBQzFELE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQXlCLENBQUM7SUFDcEYsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFjLEVBQUUsV0FBNkI7UUFDaEUsT0FBTyxJQUFJLFlBQVksQ0FDckIsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUNwQixNQUFNLEVBQ04sbUJBQW1CLEVBQ25CLFdBQVcsQ0FBQyxFQUFFLEVBQ2QsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsb0JBQW9CLENBQUMsVUFBc0IsRUFBRSxNQUFjLEVBQUUsV0FBNkI7UUFDdEcsT0FBTyxJQUFJLFlBQVksQ0FDckIsVUFBVSxFQUNWLE1BQU0sRUFDTixtQkFBbUIsRUFDbkIsV0FBVyxDQUFDLEVBQUUsRUFDZCxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDL0IsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxjQUFjLENBQzFCLElBQTZELEVBQzdELEdBQUcsSUFBMkM7UUFFOUMsT0FBTyxJQUFJLFlBQVksQ0FDckIsSUFBSSxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQ3ZDLElBQUksQ0FBQyxNQUFNLEVBQ1gsbUJBQW1CLEVBQ25CLFdBQVcsQ0FBQyxFQUFFLEVBQ2QsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQzlCLElBQUksQ0FBQyxNQUFNLElBQUksYUFBYSxDQUM3QixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxLQUFLLFFBQVE7UUFDeEIsT0FBTyxtQkFBbUIsQ0FBQztJQUM3QixDQUFDO0lBRU0sTUFBTSxLQUFLLE9BQU87UUFDdkIsT0FBTztZQUNMLFdBQVcsRUFBRTtnQkFDWCxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO2FBQ2pCO1NBQ3NDLENBQUM7SUFDNUMsQ0FBQztJQUVNLE1BQU0sS0FBSyxLQUFLO1FBQ3JCLE9BQU87WUFDTCxlQUFlLEVBQUU7Z0JBQ2YsRUFBRSxFQUFFLElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQzthQUNqQztZQUNELFNBQVMsRUFBRTtnQkFDVCxFQUFFLEVBQUUsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDO2FBQ2pDO1NBQ2dELENBQUM7SUFDdEQsQ0FBQztDQXNDRiJ9