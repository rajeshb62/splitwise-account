/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EventSelector, Fr, L1EventPayload, NoteSelector, PublicKeys, decodeFromAbi, loadContractArtifact, } from '@aztec/aztec.js';
import TokenContractArtifactJson from '../artifacts/token_contract-Token.json' assert { type: 'json' };
export const TokenContractArtifact = loadContractArtifact(TokenContractArtifactJson);
/**
 * Type-safe interface for contract Token;
 */
export class TokenContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, TokenContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, TokenContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, admin, name, symbol, decimals) {
        return new DeployMethod(PublicKeys.default(), wallet, TokenContractArtifact, TokenContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeys(publicKeys, wallet, admin, name, symbol, decimals) {
        return new DeployMethod(publicKeys, wallet, TokenContractArtifact, TokenContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeys ?? PublicKeys.default(), opts.wallet, TokenContractArtifact, TokenContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return TokenContractArtifact;
    }
    static get storage() {
        return {
            admin: {
                slot: new Fr(1n),
            },
            minters: {
                slot: new Fr(2n),
            },
            balances: {
                slot: new Fr(3n),
            },
            total_supply: {
                slot: new Fr(4n),
            },
            pending_shields: {
                slot: new Fr(5n),
            },
            public_balances: {
                slot: new Fr(6n),
            },
            symbol: {
                slot: new Fr(7n),
            },
            name: {
                slot: new Fr(8n),
            },
            decimals: {
                slot: new Fr(9n),
            },
        };
    }
    static get notes() {
        return {
            TransparentNote: {
                id: new NoteSelector(3193649735),
            },
            TokenNote: {
                id: new NoteSelector(2350566847),
            },
        };
    }
    // Partial application is chosen is to avoid the duplication of so much codegen.
    static decodeEvent(eventSelector, eventType) {
        return (payload) => {
            if (payload === undefined) {
                return undefined;
            }
            if (payload instanceof L1EventPayload) {
                if (!eventSelector.equals(payload.eventTypeId)) {
                    return undefined;
                }
                return decodeFromAbi([eventType], payload.event.items);
            }
            else {
                let items = [];
                for (let i = 0; i < payload.data.length; i += 32) {
                    items.push(new Fr(payload.data.subarray(i, i + 32)));
                }
                return decodeFromAbi([eventType], items);
            }
        };
    }
    static get events() {
        return {
            Transfer: {
                decode: this.decodeEvent(EventSelector.fromSignature('Transfer((Field),(Field),Field)'), {
                    fields: [
                        {
                            name: 'from',
                            type: {
                                fields: [
                                    {
                                        name: 'inner',
                                        type: {
                                            kind: 'field',
                                        },
                                    },
                                ],
                                kind: 'struct',
                                path: 'authwit::aztec::protocol_types::address::aztec_address::AztecAddress',
                            },
                        },
                        {
                            name: 'to',
                            type: {
                                fields: [
                                    {
                                        name: 'inner',
                                        type: {
                                            kind: 'field',
                                        },
                                    },
                                ],
                                kind: 'struct',
                                path: 'authwit::aztec::protocol_types::address::aztec_address::AztecAddress',
                            },
                        },
                        {
                            name: 'amount',
                            type: {
                                kind: 'field',
                            },
                        },
                    ],
                    kind: 'struct',
                    path: 'Token::Transfer',
                }),
                eventSelector: EventSelector.fromSignature('Transfer((Field),(Field),Field)'),
                fieldNames: ['from', 'to', 'amount'],
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9rZW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvVG9rZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0NBQXNDO0FBRXRDLG9CQUFvQjtBQUNwQixPQUFPLEVBS0wsUUFBUSxFQUVSLFlBQVksRUFNWixZQUFZLEVBR1osYUFBYSxFQUViLEVBQUUsRUFFRixjQUFjLEVBRWQsWUFBWSxFQUdaLFVBQVUsRUFJVixhQUFhLEVBQ2Isb0JBQW9CLEdBQ3JCLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyx5QkFBeUIsTUFBTSx3Q0FBd0MsQ0FBQyxTQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUV2RyxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxvQkFBb0IsQ0FBQyx5QkFBaUQsQ0FBQyxDQUFDO0FBUTdHOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGFBQWMsU0FBUSxZQUFZO0lBQzdDLFlBQW9CLFFBQXFDLEVBQUUsTUFBYztRQUN2RSxLQUFLLENBQUMsUUFBUSxFQUFFLHFCQUFxQixFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQXFCLEVBQUUsTUFBYztRQUMxRCxPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLGFBQWEsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUEyQixDQUFDO0lBQ3hGLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQ2xCLE1BQWMsRUFDZCxLQUF1QixFQUN2QixJQUFZLEVBQ1osTUFBYyxFQUNkLFFBQXlCO1FBRXpCLE9BQU8sSUFBSSxZQUFZLENBQ3JCLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFDcEIsTUFBTSxFQUNOLHFCQUFxQixFQUNyQixhQUFhLENBQUMsRUFBRSxFQUNoQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FB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