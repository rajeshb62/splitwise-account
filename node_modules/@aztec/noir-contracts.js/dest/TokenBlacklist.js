/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, Fr, NoteSelector, PublicKeys, loadContractArtifact, } from '@aztec/aztec.js';
import TokenBlacklistContractArtifactJson from '../artifacts/token_blacklist_contract-TokenBlacklist.json' assert { type: 'json' };
export const TokenBlacklistContractArtifact = loadContractArtifact(TokenBlacklistContractArtifactJson);
/**
 * Type-safe interface for contract TokenBlacklist;
 */
export class TokenBlacklistContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, TokenBlacklistContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, TokenBlacklistContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, admin) {
        return new DeployMethod(PublicKeys.default(), wallet, TokenBlacklistContractArtifact, TokenBlacklistContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeys(publicKeys, wallet, admin) {
        return new DeployMethod(publicKeys, wallet, TokenBlacklistContractArtifact, TokenBlacklistContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeys ?? PublicKeys.default(), opts.wallet, TokenBlacklistContractArtifact, TokenBlacklistContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return TokenBlacklistContractArtifact;
    }
    static get storage() {
        return {
            balances: {
                slot: new Fr(1n),
            },
            total_supply: {
                slot: new Fr(2n),
            },
            pending_shields: {
                slot: new Fr(3n),
            },
            public_balances: {
                slot: new Fr(4n),
            },
            roles: {
                slot: new Fr(5n),
            },
        };
    }
    static get notes() {
        return {
            TransparentNote: {
                id: new NoteSelector(3193649735),
            },
            TokenNote: {
                id: new NoteSelector(2350566847),
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9rZW5CbGFja2xpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvVG9rZW5CbGFja2xpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0NBQXNDO0FBRXRDLG9CQUFvQjtBQUNwQixPQUFPLEVBS0wsUUFBUSxFQUVSLFlBQVksRUFNWixZQUFZLEVBS1osRUFBRSxFQUlGLFlBQVksRUFHWixVQUFVLEVBS1Ysb0JBQW9CLEdBQ3JCLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxrQ0FBa0MsTUFBTSwyREFBMkQsQ0FBQyxTQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUVuSSxNQUFNLENBQUMsTUFBTSw4QkFBOEIsR0FBRyxvQkFBb0IsQ0FDaEUsa0NBQTBELENBQzNELENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sT0FBTyxzQkFBdUIsU0FBUSxZQUFZO0lBQ3RELFlBQW9CLFFBQXFDLEVBQUUsTUFBYztRQUN2RSxLQUFLLENBQUMsUUFBUSxFQUFFLDhCQUE4QixFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQXFCLEVBQUUsTUFBYztRQUMxRCxPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQW9DLENBQUM7SUFDMUcsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFjLEVBQUUsS0FBdUI7UUFDMUQsT0FBTyxJQUFJLFlBQVksQ0FDckIsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUNwQixNQUFNLEVBQ04sOEJBQThCLEVBQzlCLHNCQUFzQixDQUFDLEVBQUUsRUFDekIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsb0JBQW9CLENBQUMsVUFBc0IsRUFBRSxNQUFjLEVBQUUsS0FBdUI7UUFDaEcsT0FBTyxJQUFJLFlBQVksQ0FDckIsVUFBVSxFQUNWLE1BQU0sRUFDTiw4QkFBOEIsRUFDOUIsc0JBQXNCLENBQUMsRUFBRSxFQUN6QixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDL0IsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxjQUFjLENBQzFCLElBQTZELEVBQzdELEdBQUcsSUFBc0Q7UUFFekQsT0FBTyxJQUFJLFlBQVksQ0FDckIsSUFBSSxDQUFDLFVBQVUsSUFBSSxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQ3ZDLElBQUksQ0FBQyxNQUFNLEVBQ1gsOEJBQThCLEVBQzlCLHNCQUFzQixDQUFDLEVBQUUsRUFDekIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQzlCLElBQUksQ0FBQyxNQUFNLElBQUksYUFBYSxDQUM3QixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxLQUFLLFFBQVE7UUFDeEIsT0FBTyw4QkFBOEIsQ0FBQztJQUN4QyxDQUFDO0lBRU0sTUFBTSxLQUFLLE9BQU87UUFHdkIsT0FBTztZQUNMLFFBQVEsRUFBRTtnQkFDUixJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO2FBQ2pCO1lBQ0QsWUFBWSxFQUFFO2dCQUNaLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDakI7WUFDRCxlQUFlLEVBQUU7Z0JBQ2YsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQzthQUNqQjtZQUNELGVBQWUsRUFBRTtnQkFDZixJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO2FBQ2pCO1lBQ0QsS0FBSyxFQUFFO2dCQUNMLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDakI7U0FDc0csQ0FBQztJQUM1RyxDQUFDO0lBRU0sTUFBTSxLQUFLLEtBQUs7UUFDckIsT0FBTztZQUNMLGVBQWUsRUFBRTtnQkFDZixFQUFFLEVBQUUsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDO2FBQ2pDO1lBQ0QsU0FBUyxFQUFFO2dCQUNULEVBQUUsRUFBRSxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUM7YUFDakM7U0FDZ0QsQ0FBQztJQUN0RCxDQUFDO0NBZ0dGIn0=