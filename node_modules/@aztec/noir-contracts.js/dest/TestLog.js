/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EventSelector, Fr, L1EventPayload, NoteSelector, PublicKeys, decodeFromAbi, loadContractArtifact, } from '@aztec/aztec.js';
import TestLogContractArtifactJson from '../artifacts/test_log_contract-TestLog.json' assert { type: 'json' };
export const TestLogContractArtifact = loadContractArtifact(TestLogContractArtifactJson);
/**
 * Type-safe interface for contract TestLog;
 */
export class TestLogContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, TestLogContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, TestLogContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet) {
        return new DeployMethod(PublicKeys.default(), wallet, TestLogContractArtifact, TestLogContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeys(publicKeys, wallet) {
        return new DeployMethod(publicKeys, wallet, TestLogContractArtifact, TestLogContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeys ?? PublicKeys.default(), opts.wallet, TestLogContractArtifact, TestLogContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return TestLogContractArtifact;
    }
    static get storage() {
        return {
            example_set: {
                slot: new Fr(1n),
            },
        };
    }
    static get notes() {
        return {
            ValueNote: {
                id: new NoteSelector(1038582377),
            },
        };
    }
    // Partial application is chosen is to avoid the duplication of so much codegen.
    static decodeEvent(eventSelector, eventType) {
        return (payload) => {
            if (payload === undefined) {
                return undefined;
            }
            if (payload instanceof L1EventPayload) {
                if (!eventSelector.equals(payload.eventTypeId)) {
                    return undefined;
                }
                return decodeFromAbi([eventType], payload.event.items);
            }
            else {
                let items = [];
                for (let i = 0; i < payload.data.length; i += 32) {
                    items.push(new Fr(payload.data.subarray(i, i + 32)));
                }
                return decodeFromAbi([eventType], items);
            }
        };
    }
    static get events() {
        return {
            ExampleEvent1: {
                decode: this.decodeEvent(EventSelector.fromSignature('ExampleEvent1((Field),u8)'), {
                    fields: [
                        {
                            name: 'value2',
                            type: {
                                fields: [
                                    {
                                        name: 'inner',
                                        type: {
                                            kind: 'field',
                                        },
                                    },
                                ],
                                kind: 'struct',
                                path: 'aztec::protocol_types::address::aztec_address::AztecAddress',
                            },
                        },
                        {
                            name: 'value3',
                            type: {
                                kind: 'integer',
                                sign: 'unsigned',
                                width: 8,
                            },
                        },
                    ],
                    kind: 'struct',
                    path: 'TestLog::ExampleEvent1',
                }),
                eventSelector: EventSelector.fromSignature('ExampleEvent1((Field),u8)'),
                fieldNames: ['value2', 'value3'],
            },
            ExampleEvent0: {
                decode: this.decodeEvent(EventSelector.fromSignature('ExampleEvent0(Field,Field)'), {
                    fields: [
                        {
                            name: 'value0',
                            type: {
                                kind: 'field',
                            },
                        },
                        {
                            name: 'value1',
                            type: {
                                kind: 'field',
                            },
                        },
                    ],
                    kind: 'struct',
                    path: 'TestLog::ExampleEvent0',
                }),
                eventSelector: EventSelector.fromSignature('ExampleEvent0(Field,Field)'),
                fieldNames: ['value0', 'value1'],
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdExvZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9UZXN0TG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUV0QyxvQkFBb0I7QUFDcEIsT0FBTyxFQUtMLFFBQVEsRUFFUixZQUFZLEVBTVosWUFBWSxFQUdaLGFBQWEsRUFFYixFQUFFLEVBRUYsY0FBYyxFQUVkLFlBQVksRUFHWixVQUFVLEVBSVYsYUFBYSxFQUNiLG9CQUFvQixHQUNyQixNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sMkJBQTJCLE1BQU0sNkNBQTZDLENBQUMsU0FBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFFOUcsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsb0JBQW9CLENBQUMsMkJBQW1ELENBQUMsQ0FBQztBQVlqSDs7R0FFRztBQUNILE1BQU0sT0FBTyxlQUFnQixTQUFRLFlBQVk7SUFDL0MsWUFBb0IsUUFBcUMsRUFBRSxNQUFjO1FBQ3ZFLEtBQUssQ0FBQyxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBcUIsRUFBRSxNQUFjO1FBQzFELE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsZUFBZSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQTZCLENBQUM7SUFDNUYsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFjO1FBQ2pDLE9BQU8sSUFBSSxZQUFZLENBQ3JCLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFDcEIsTUFBTSxFQUNOLHVCQUF1QixFQUN2QixlQUFlLENBQUMsRUFBRSxFQUNsQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDL0IsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxVQUFzQixFQUFFLE1BQWM7UUFDdkUsT0FBTyxJQUFJLFlBQVksQ0FDckIsVUFBVSxFQUNWLE1BQU0sRUFDTix1QkFBdUIsRUFDdkIsZUFBZSxDQUFDLEVBQUUsRUFDbEIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsY0FBYyxDQUMxQixJQUE2RCxFQUM3RCxHQUFHLElBQStDO1FBRWxELE9BQU8sSUFBSSxZQUFZLENBQ3JCLElBQUksQ0FBQyxVQUFVLElBQUksVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUN2QyxJQUFJLENBQUMsTUFBTSxFQUNYLHVCQUF1QixFQUN2QixlQUFlLENBQUMsRUFBRSxFQUNsQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFDOUIsSUFBSSxDQUFDLE1BQU0sSUFBSSxhQUFhLENBQzdCLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLEtBQUssUUFBUTtRQUN4QixPQUFPLHVCQUF1QixDQUFDO0lBQ2pDLENBQUM7SUFFTSxNQUFNLEtBQUssT0FBTztRQUN2QixPQUFPO1lBQ0wsV0FBVyxFQUFFO2dCQUNYLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDakI7U0FDc0MsQ0FBQztJQUM1QyxDQUFDO0lBRU0sTUFBTSxLQUFLLEtBQUs7UUFDckIsT0FBTztZQUNMLFNBQVMsRUFBRTtnQkFDVCxFQUFFLEVBQUUsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDO2FBQ2pDO1NBQzRCLENBQUM7SUFDbEMsQ0FBQztJQStCRCxnRkFBZ0Y7SUFDeEUsTUFBTSxDQUFDLFdBQVcsQ0FDeEIsYUFBNEIsRUFDNUIsU0FBa0I7UUFFbEIsT0FBTyxDQUFDLE9BQXNELEVBQWlCLEVBQUU7WUFDL0UsSUFBSSxPQUFPLEtBQUssU0FBUyxFQUFFLENBQUM7Z0JBQzFCLE9BQU8sU0FBUyxDQUFDO1lBQ25CLENBQUM7WUFFRCxJQUFJLE9BQU8sWUFBWSxjQUFjLEVBQUUsQ0FBQztnQkFDdEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUM7b0JBQy9DLE9BQU8sU0FBUyxDQUFDO2dCQUNuQixDQUFDO2dCQUNELE9BQU8sYUFBYSxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQU0sQ0FBQztZQUM5RCxDQUFDO2lCQUFNLENBQUM7Z0JBQ04sSUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDO2dCQUNmLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUM7b0JBQ2pELEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZELENBQUM7Z0JBRUQsT0FBTyxhQUFhLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxLQUFLLENBQU0sQ0FBQztZQUNoRCxDQUFDO1FBQ0gsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVNLE1BQU0sS0FBSyxNQUFNO1FBWXRCLE9BQU87WUFDTCxhQUFhLEVBQUU7Z0JBQ2IsTUFBTSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQywyQkFBMkIsQ0FBQyxFQUFFO29CQUNqRixNQUFNLEVBQUU7d0JBQ047NEJBQ0UsSUFBSSxFQUFFLFFBQVE7NEJBQ2QsSUFBSSxFQUFFO2dDQUNKLE1BQU0sRUFBRTtvQ0FDTjt3Q0FDRSxJQUFJLEVBQUUsT0FBTzt3Q0FDYixJQUFJLEVBQUU7NENBQ0osSUFBSSxFQUFFLE9BQU87eUNBQ2Q7cUNBQ0Y7aUNBQ0Y7Z0NBQ0QsSUFBSSxFQUFFLFFBQVE7Z0NBQ2QsSUFBSSxFQUFFLDZEQUE2RDs2QkFDcEU7eUJBQ0Y7d0JBQ0Q7NEJBQ0UsSUFBSSxFQUFFLFFBQVE7NEJBQ2QsSUFBSSxFQUFFO2dDQUNKLElBQUksRUFBRSxTQUFTO2dDQUNmLElBQUksRUFBRSxVQUFVO2dDQUNoQixLQUFLLEVBQUUsQ0FBQzs2QkFDVDt5QkFDRjtxQkFDRjtvQkFDRCxJQUFJLEVBQUUsUUFBUTtvQkFDZCxJQUFJLEVBQUUsd0JBQXdCO2lCQUMvQixDQUFDO2dCQUNGLGFBQWEsRUFBRSxhQUFhLENBQUMsYUFBYSxDQUFDLDJCQUEyQixDQUFDO2dCQUN2RSxVQUFVLEVBQUUsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDO2FBQ2pDO1lBQ0QsYUFBYSxFQUFFO2dCQUNiLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsNEJBQTRCLENBQUMsRUFBRTtvQkFDbEYsTUFBTSxFQUFFO3dCQUNOOzRCQUNFLElBQUksRUFBRSxRQUFROzRCQUNkLElBQUksRUFBRTtnQ0FDSixJQUFJLEVBQUUsT0FBTzs2QkFDZDt5QkFDRjt3QkFDRDs0QkFDRSxJQUFJLEVBQUUsUUFBUTs0QkFDZCxJQUFJLEVBQUU7Z0NBQ0osSUFBSSxFQUFFLE9BQU87NkJBQ2Q7eUJBQ0Y7cUJBQ0Y7b0JBQ0QsSUFBSSxFQUFFLFFBQVE7b0JBQ2QsSUFBSSxFQUFFLHdCQUF3QjtpQkFDL0IsQ0FBQztnQkFDRixhQUFhLEVBQUUsYUFBYSxDQUFDLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQztnQkFDeEUsVUFBVSxFQUFFLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQzthQUNqQztTQUNGLENBQUM7SUFDSixDQUFDO0NBQ0YifQ==