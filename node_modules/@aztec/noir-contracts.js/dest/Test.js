/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EventSelector, Fr, L1EventPayload, NoteSelector, PublicKeys, decodeFromAbi, loadContractArtifact, } from '@aztec/aztec.js';
import TestContractArtifactJson from '../artifacts/test_contract-Test.json' assert { type: 'json' };
export const TestContractArtifact = loadContractArtifact(TestContractArtifactJson);
/**
 * Type-safe interface for contract Test;
 */
export class TestContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, TestContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, TestContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet) {
        return new DeployMethod(PublicKeys.default(), wallet, TestContractArtifact, TestContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeys(publicKeys, wallet) {
        return new DeployMethod(publicKeys, wallet, TestContractArtifact, TestContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeys ?? PublicKeys.default(), opts.wallet, TestContractArtifact, TestContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return TestContractArtifact;
    }
    static get storage() {
        return {
            example_constant: {
                slot: new Fr(1n),
            },
            example_set: {
                slot: new Fr(2n),
            },
        };
    }
    static get notes() {
        return {
            TestNote: {
                id: new NoteSelector(1049718859),
            },
            ValueNote: {
                id: new NoteSelector(1038582377),
            },
        };
    }
    // Partial application is chosen is to avoid the duplication of so much codegen.
    static decodeEvent(eventSelector, eventType) {
        return (payload) => {
            if (payload === undefined) {
                return undefined;
            }
            if (payload instanceof L1EventPayload) {
                if (!eventSelector.equals(payload.eventTypeId)) {
                    return undefined;
                }
                return decodeFromAbi([eventType], payload.event.items);
            }
            else {
                let items = [];
                for (let i = 0; i < payload.data.length; i += 32) {
                    items.push(new Fr(payload.data.subarray(i, i + 32)));
                }
                return decodeFromAbi([eventType], items);
            }
        };
    }
    static get events() {
        return {
            ExampleEvent: {
                decode: this.decodeEvent(EventSelector.fromSignature('ExampleEvent(Field,Field,Field,Field,Field)'), {
                    fields: [
                        {
                            name: 'value0',
                            type: {
                                kind: 'field',
                            },
                        },
                        {
                            name: 'value1',
                            type: {
                                kind: 'field',
                            },
                        },
                        {
                            name: 'value2',
                            type: {
                                kind: 'field',
                            },
                        },
                        {
                            name: 'value3',
                            type: {
                                kind: 'field',
                            },
                        },
                        {
                            name: 'value4',
                            type: {
                                kind: 'field',
                            },
                        },
                    ],
                    kind: 'struct',
                    path: 'Test::ExampleEvent',
                }),
                eventSelector: EventSelector.fromSignature('ExampleEvent(Field,Field,Field,Field,Field)'),
                fieldNames: ['value0', 'value1', 'value2', 'value3', 'value4'],
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9UZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUV0QyxvQkFBb0I7QUFDcEIsT0FBTyxFQUtMLFFBQVEsRUFFUixZQUFZLEVBTVosWUFBWSxFQUdaLGFBQWEsRUFFYixFQUFFLEVBRUYsY0FBYyxFQUVkLFlBQVksRUFHWixVQUFVLEVBSVYsYUFBYSxFQUNiLG9CQUFvQixHQUNyQixNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sd0JBQXdCLE1BQU0sc0NBQXNDLENBQUMsU0FBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFFcEcsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsb0JBQW9CLENBQUMsd0JBQWdELENBQUMsQ0FBQztBQVUzRzs7R0FFRztBQUNILE1BQU0sT0FBTyxZQUFhLFNBQVEsWUFBWTtJQUM1QyxZQUFvQixRQUFxQyxFQUFFLE1BQWM7UUFDdkUsS0FBSyxDQUFDLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFxQixFQUFFLE1BQWM7UUFDMUQsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBMEIsQ0FBQztJQUN0RixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQWM7UUFDakMsT0FBTyxJQUFJLFlBQVksQ0FDckIsVUFBVSxDQUFDLE9BQU8sRUFBRSxFQUNwQixNQUFNLEVBQ04sb0JBQW9CLEVBQ3BCLFlBQVksQ0FBQyxFQUFFLEVBQ2YsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFD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