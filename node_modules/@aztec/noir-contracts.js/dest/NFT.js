/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EventSelector, Fr, L1EventPayload, NoteSelector, PublicKeys, decodeFromAbi, loadContractArtifact, } from '@aztec/aztec.js';
import NFTContractArtifactJson from '../artifacts/nft_contract-NFT.json' assert { type: 'json' };
export const NFTContractArtifact = loadContractArtifact(NFTContractArtifactJson);
/**
 * Type-safe interface for contract NFT;
 */
export class NFTContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, NFTContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, NFTContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, admin, name, symbol) {
        return new DeployMethod(PublicKeys.default(), wallet, NFTContractArtifact, NFTContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeys(publicKeys, wallet, admin, name, symbol) {
        return new DeployMethod(publicKeys, wallet, NFTContractArtifact, NFTContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeys ?? PublicKeys.default(), opts.wallet, NFTContractArtifact, NFTContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return NFTContractArtifact;
    }
    static get storage() {
        return {
            symbol: {
                slot: new Fr(1n),
            },
            name: {
                slot: new Fr(2n),
            },
            admin: {
                slot: new Fr(3n),
            },
            minters: {
                slot: new Fr(4n),
            },
            private_nfts: {
                slot: new Fr(5n),
            },
            nft_exists: {
                slot: new Fr(6n),
            },
            public_owners: {
                slot: new Fr(7n),
            },
        };
    }
    static get notes() {
        return {
            NFTNote: {
                id: new NoteSelector(3595710486),
            },
        };
    }
    // Partial application is chosen is to avoid the duplication of so much codegen.
    static decodeEvent(eventSelector, eventType) {
        return (payload) => {
            if (payload === undefined) {
                return undefined;
            }
            if (payload instanceof L1EventPayload) {
                if (!eventSelector.equals(payload.eventTypeId)) {
                    return undefined;
                }
                return decodeFromAbi([eventType], payload.event.items);
            }
            else {
                let items = [];
                for (let i = 0; i < payload.data.length; i += 32) {
                    items.push(new Fr(payload.data.subarray(i, i + 32)));
                }
                return decodeFromAbi([eventType], items);
            }
        };
    }
    static get events() {
        return {
            NFTTransfer: {
                decode: this.decodeEvent(EventSelector.fromSignature('NFTTransfer((Field),(Field),Field)'), {
                    fields: [
                        {
                            name: 'from',
                            type: {
                                fields: [
                                    {
                                        name: 'inner',
                                        type: {
                                            kind: 'field',
                                        },
                                    },
                                ],
                                kind: 'struct',
                                path: 'authwit::aztec::protocol_types::address::aztec_address::AztecAddress',
                            },
                        },
                        {
                            name: 'to',
                            type: {
                                fields: [
                                    {
                                        name: 'inner',
                                        type: {
                                            kind: 'field',
                                        },
                                    },
                                ],
                                kind: 'struct',
                                path: 'authwit::aztec::protocol_types::address::aztec_address::AztecAddress',
                            },
                        },
                        {
                            name: 'token_id',
                            type: {
                                kind: 'field',
                            },
                        },
                    ],
                    kind: 'struct',
                    path: 'NFT::NFTTransfer',
                }),
                eventSelector: EventSelector.fromSignature('NFTTransfer((Field),(Field),Field)'),
                fieldNames: ['from', 'to', 'token_id'],
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTkZULmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL05GVC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFFdEMsb0JBQW9CO0FBQ3BCLE9BQU8sRUFLTCxRQUFRLEVBRVIsWUFBWSxFQU1aLFlBQVksRUFHWixhQUFhLEVBRWIsRUFBRSxFQUVGLGNBQWMsRUFFZCxZQUFZLEVBR1osVUFBVSxFQUlWLGFBQWEsRUFDYixvQkFBb0IsR0FDckIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLHVCQUF1QixNQUFNLG9DQUFvQyxDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBRWpHLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHLG9CQUFvQixDQUFDLHVCQUErQyxDQUFDLENBQUM7QUFRekc7O0dBRUc7QUFDSCxNQUFNLE9BQU8sV0FBWSxTQUFRLFlBQVk7SUFDM0MsWUFBb0IsUUFBcUMsRUFBRSxNQUFjO1FBQ3ZFLEtBQUssQ0FBQyxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBcUIsRUFBRSxNQUFjO1FBQzFELE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQXlCLENBQUM7SUFDcEYsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFjLEVBQUUsS0FBdUIsRUFBRSxJQUFZLEVBQUUsTUFBYztRQUN4RixPQUFPLElBQUksWUFBWSxDQUNyQixVQUFVLENBQUMsT0FBTyxFQUFFLEVBQ3BCLE1BQU0sRUFDTixtQkFBbUIsRUFDbkIsV0FBVyxDQUFDLEVBQUUsRUFDZCxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDL0Is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