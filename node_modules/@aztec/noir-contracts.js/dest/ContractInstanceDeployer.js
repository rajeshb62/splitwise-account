/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EventSelector, Fr, L1EventPayload, PublicKeys, decodeFromAbi, loadContractArtifact, } from '@aztec/aztec.js';
import ContractInstanceDeployerContractArtifactJson from '../artifacts/contract_instance_deployer_contract-ContractInstanceDeployer.json' assert { type: 'json' };
export const ContractInstanceDeployerContractArtifact = loadContractArtifact(ContractInstanceDeployerContractArtifactJson);
/**
 * Type-safe interface for contract ContractInstanceDeployer;
 */
export class ContractInstanceDeployerContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, ContractInstanceDeployerContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, ContractInstanceDeployerContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet) {
        return new DeployMethod(PublicKeys.default(), wallet, ContractInstanceDeployerContractArtifact, ContractInstanceDeployerContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeys(publicKeys, wallet) {
        return new DeployMethod(publicKeys, wallet, ContractInstanceDeployerContractArtifact, ContractInstanceDeployerContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeys ?? PublicKeys.default(), opts.wallet, ContractInstanceDeployerContractArtifact, ContractInstanceDeployerContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return ContractInstanceDeployerContractArtifact;
    }
    // Partial application is chosen is to avoid the duplication of so much codegen.
    static decodeEvent(eventSelector, eventType) {
        return (payload) => {
            if (payload === undefined) {
                return undefined;
            }
            if (payload instanceof L1EventPayload) {
                if (!eventSelector.equals(payload.eventTypeId)) {
                    return undefined;
                }
                return decodeFromAbi([eventType], payload.event.items);
            }
            else {
                let items = [];
                for (let i = 0; i < payload.data.length; i += 32) {
                    items.push(new Fr(payload.data.subarray(i, i + 32)));
                }
                return decodeFromAbi([eventType], items);
            }
        };
    }
    static get events() {
        return {
            ContractInstanceDeployed: {
                decode: this.decodeEvent(EventSelector.fromSignature('ContractInstanceDeployed(Field,(Field),u8,Field,(Field),Field,(((Field,Field,bool)),((Field,Field,bool)),((Field,Field,bool)),((Field,Field,bool))),(Field))'), {
                    fields: [
                        {
                            name: 'DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE',
                            type: {
                                kind: 'field',
                            },
                        },
                        {
                            name: 'address',
                            type: {
                                fields: [
                                    {
                                        name: 'inner',
                                        type: {
                                            kind: 'field',
                                        },
                                    },
                                ],
                                kind: 'struct',
                                path: 'aztec::protocol_types::address::aztec_address::AztecAddress',
                            },
                        },
                        {
                            name: 'version',
                            type: {
                                kind: 'integer',
                                sign: 'unsigned',
                                width: 8,
                            },
                        },
                        {
                            name: 'salt',
                            type: {
                                kind: 'field',
                            },
                        },
                        {
                            name: 'contract_class_id',
                            type: {
                                fields: [
                                    {
                                        name: 'inner',
                                        type: {
                                            kind: 'field',
                                        },
                                    },
                                ],
                                kind: 'struct',
                                path: 'aztec::protocol_types::contract_class_id::ContractClassId',
                            },
                        },
                        {
                            name: 'initialization_hash',
                            type: {
                                kind: 'field',
                            },
                        },
                        {
                            name: 'public_keys',
                            type: {
                                fields: [
                                    {
                                        name: 'npk_m',
                                        type: {
                                            fields: [
                                                {
                                                    name: 'inner',
                                                    type: {
                                                        fields: [
                                                            {
                                                                name: 'x',
                                                                type: {
                                                                    kind: 'field',
                                                                },
                                                            },
                                                            {
                                                                name: 'y',
                                                                type: {
                                                                    kind: 'field',
                                                                },
                                                            },
                                                            {
                                                                name: 'is_infinite',
                                                                type: {
                                                                    kind: 'boolean',
                                                                },
                                                            },
                                                        ],
                                                        kind: 'struct',
                                                        path: 'std::embedded_curve_ops::EmbeddedCurvePoint',
                                                    },
                                                },
                                            ],
                                            kind: 'struct',
                                            path: 'aztec::protocol_types::public_keys::NpkM',
                                        },
                                    },
                                    {
                                        name: 'ivpk_m',
                                        type: {
                                            fields: [
                                                {
                                                    name: 'inner',
                                                    type: {
                                                        fields: [
                                                            {
                                                                name: 'x',
                                                                type: {
                                                                    kind: 'field',
                                                                },
                                                            },
                                                            {
                                                                name: 'y',
                                                                type: {
                                                                    kind: 'field',
                                                                },
                                                            },
                                                            {
                                                                name: 'is_infinite',
                                                                type: {
                                                                    kind: 'boolean',
                                                                },
                                                            },
                                                        ],
                                                        kind: 'struct',
                                                        path: 'std::embedded_curve_ops::EmbeddedCurvePoint',
                                                    },
                                                },
                                            ],
                                            kind: 'struct',
                                            path: 'aztec::protocol_types::public_keys::IvpkM',
                                        },
                                    },
                                    {
                                        name: 'ovpk_m',
                                        type: {
                                            fields: [
                                                {
                                                    name: 'inner',
                                                    type: {
                                                        fields: [
                                                            {
                                                                name: 'x',
                                                                type: {
                                                                    kind: 'field',
                                                                },
                                                            },
                                                            {
                                                                name: 'y',
                                                                type: {
                                                                    kind: 'field',
                                                                },
                                                            },
                                                            {
                                                                name: 'is_infinite',
                                                                type: {
                                                                    kind: 'boolean',
                                                                },
                                                            },
                                                        ],
                                                        kind: 'struct',
                                                        path: 'std::embedded_curve_ops::EmbeddedCurvePoint',
                                                    },
                                                },
                                            ],
                                            kind: 'struct',
                                            path: 'aztec::protocol_types::public_keys::OvpkM',
                                        },
                                    },
                                    {
                                        name: 'tpk_m',
                                        type: {
                                            fields: [
                                                {
                                                    name: 'inner',
                                                    type: {
                                                        fields: [
                                                            {
                                                                name: 'x',
                                                                type: {
                                                                    kind: 'field',
                                                                },
                                                            },
                                                            {
                                                                name: 'y',
                                                                type: {
                                                                    kind: 'field',
                                                                },
                                                            },
                                                            {
                                                                name: 'is_infinite',
                                                                type: {
                                                                    kind: 'boolean',
                                                                },
                                                            },
                                                        ],
                                                        kind: 'struct',
                                                        path: 'std::embedded_curve_ops::EmbeddedCurvePoint',
                                                    },
                                                },
                                            ],
                                            kind: 'struct',
                                            path: 'aztec::protocol_types::public_keys::TpkM',
                                        },
                                    },
                                ],
                                kind: 'struct',
                                path: 'aztec::protocol_types::public_keys::PublicKeys',
                            },
                        },
                        {
                            name: 'deployer',
                            type: {
                                fields: [
                                    {
                                        name: 'inner',
                                        type: {
                                            kind: 'field',
                                        },
                                    },
                                ],
                                kind: 'struct',
                                path: 'aztec::protocol_types::address::aztec_address::AztecAddress',
                            },
                        },
                    ],
                    kind: 'struct',
                    path: 'ContractInstanceDeployer::ContractInstanceDeployed',
                }),
                eventSelector: EventSelector.fromSignature('ContractInstanceDeployed(Field,(Field),u8,Field,(Field),Field,(((Field,Field,bool)),((Field,Field,bool)),((Field,Field,bool)),((Field,Field,bool))),(Field))'),
                fieldNames: [
                    'DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE',
                    'address',
                    'version',
                    'salt',
                    'contract_class_id',
                    'initialization_hash',
                    'public_keys',
                    'deployer',
                ],
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJhY3RJbnN0YW5jZURlcGxveWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0NvbnRyYWN0SW5zdGFuY2VEZXBsb3llci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFFdEMsb0JBQW9CO0FBQ3BCLE9BQU8sRUFLTCxRQUFRLEVBRVIsWUFBWSxFQU1aLFlBQVksRUFHWixhQUFhLEVBRWIsRUFBRSxFQUVGLGNBQWMsRUFLZCxVQUFVLEVBSVYsYUFBYSxFQUNiLG9CQUFvQixHQUNyQixNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sNENBQTRDLE1BQU0sZ0ZBQWdGLENBQUMsU0FBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFFbEssTUFBTSxDQUFDLE1BQU0sd0NBQXdDLEdBQUcsb0JBQW9CLENBQzFFLDRDQUFvRSxDQUNyRSxDQUFDO0FBa0JGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLGdDQUFpQyxTQUFRLFlBQVk7SUFDaEUsWUFBb0IsUUFBcUMsRUFBRSxNQUFjO1FBQ3ZFLEtBQUssQ0FBQyxRQUFRLEVBQUUsd0NBQXdDLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBcUIsRUFBRSxNQUFjO1FBQzFELE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FDaEIsT0FBTyxFQUNQLGdDQUFnQyxDQUFDLFFBQVEsRUFDekMsTUFBTSxDQUNzQyxDQUFDO0lBQ2pELENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBYztRQUNqQyxPQUFPLElBQUksWUFBWSxDQUNyQixVQUFVLENBQUMsT0FBTyxFQUFFLEVBQ3BCLE1BQU0sRUFDTix3Q0FBd0MsRUFDeEMsZ0NBQWdDLENBQUMsRUFBRSxFQUNuQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFD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