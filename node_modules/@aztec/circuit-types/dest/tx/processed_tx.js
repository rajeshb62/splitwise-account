import { EncryptedNoteTxL2Logs, EncryptedTxL2Logs, PublicDataWrite, TxEffect, TxHash, UnencryptedTxL2Logs, } from '@aztec/circuit-types';
import { ClientIvcProof, Fr, KernelCircuitPublicInputs, } from '@aztec/circuits.js';
import { siloL2ToL1Message } from '@aztec/circuits.js/hash';
export var PublicKernelPhase;
(function (PublicKernelPhase) {
    PublicKernelPhase[PublicKernelPhase["SETUP"] = 0] = "SETUP";
    PublicKernelPhase[PublicKernelPhase["APP_LOGIC"] = 1] = "APP_LOGIC";
    PublicKernelPhase[PublicKernelPhase["TEARDOWN"] = 2] = "TEARDOWN";
})(PublicKernelPhase || (PublicKernelPhase = {}));
export const AVM_REQUEST = 'AVM';
export function isRevertedTx(tx) {
    return !tx.data.revertCode.isOK();
}
export function partitionReverts(txs) {
    return txs.reduce(({ reverted, nonReverted }, tx) => {
        if (isRevertedTx(tx)) {
            reverted.push(tx);
        }
        else {
            nonReverted.push(tx);
        }
        return { reverted, nonReverted };
    }, { reverted: [], nonReverted: [] });
}
/**
 * Makes a processed tx out of source tx.
 * @param tx - Source tx.
 * @param kernelOutput - Output of the kernel circuit simulation for this tx.
 * @param proof - Proof of the kernel circuit for this tx.
 */
export function makeProcessedTx(tx, kernelOutput, publicProvingRequests, revertReason, gasUsed = {}, finalPublicDataUpdateRequests) {
    return {
        hash: tx.getTxHash(),
        data: kernelOutput,
        clientIvcProof: tx.clientIvcProof,
        // TODO(4712): deal with non-revertible logs here
        noteEncryptedLogs: tx.noteEncryptedLogs,
        encryptedLogs: tx.encryptedLogs,
        unencryptedLogs: tx.unencryptedLogs,
        isEmpty: false,
        revertReason,
        publicProvingRequests,
        gasUsed,
        finalPublicDataUpdateRequests: finalPublicDataUpdateRequests ?? kernelOutput.end.publicDataUpdateRequests,
    };
}
/**
 * Makes a padding empty tx with a valid proof.
 * @returns A valid padding processed tx.
 */
export function makePaddingProcessedTx(kernelOutput) {
    const hash = new TxHash(Fr.ZERO.toBuffer());
    return {
        hash,
        noteEncryptedLogs: EncryptedNoteTxL2Logs.empty(),
        encryptedLogs: EncryptedTxL2Logs.empty(),
        unencryptedLogs: UnencryptedTxL2Logs.empty(),
        data: kernelOutput.inputs,
        clientIvcProof: ClientIvcProof.empty(),
        isEmpty: true,
        revertReason: undefined,
        publicProvingRequests: [],
        gasUsed: {},
        finalPublicDataUpdateRequests: [],
        verificationKey: kernelOutput.verificationKey,
        recursiveProof: kernelOutput.proof,
    };
}
/**
 * Makes a padding empty tx with a valid proof.
 * @returns A valid padding processed tx.
 */
export function makePaddingProcessedTxFromTubeProof(kernelOutput) {
    const hash = new TxHash(Fr.ZERO.toBuffer());
    return {
        hash,
        noteEncryptedLogs: EncryptedNoteTxL2Logs.empty(),
        encryptedLogs: EncryptedTxL2Logs.empty(),
        unencryptedLogs: UnencryptedTxL2Logs.empty(),
        data: kernelOutput.inputs,
        clientIvcProof: ClientIvcProof.empty(),
        isEmpty: true,
        revertReason: undefined,
        publicProvingRequests: [],
        gasUsed: {},
        finalPublicDataUpdateRequests: [],
        verificationKey: kernelOutput.verificationKey,
        recursiveProof: kernelOutput.proof,
    };
}
/**
 * Makes an empty tx from an empty kernel circuit public inputs.
 * @returns A processed empty tx.
 */
export function makeEmptyProcessedTx(header, chainId, version, vkTreeRoot, protocolContractTreeRoot) {
    const emptyKernelOutput = KernelCircuitPublicInputs.empty();
    emptyKernelOutput.constants.historicalHeader = header;
    emptyKernelOutput.constants.txContext.chainId = chainId;
    emptyKernelOutput.constants.txContext.version = version;
    emptyKernelOutput.constants.vkTreeRoot = vkTreeRoot;
    emptyKernelOutput.constants.protocolContractTreeRoot = protocolContractTreeRoot;
    const hash = new TxHash(Fr.ZERO.toBuffer());
    return {
        hash,
        noteEncryptedLogs: EncryptedNoteTxL2Logs.empty(),
        encryptedLogs: EncryptedTxL2Logs.empty(),
        unencryptedLogs: UnencryptedTxL2Logs.empty(),
        data: emptyKernelOutput,
        clientIvcProof: ClientIvcProof.empty(),
        isEmpty: true,
        revertReason: undefined,
        publicProvingRequests: [],
        gasUsed: {},
        finalPublicDataUpdateRequests: [],
    };
}
export function toTxEffect(tx, gasFees) {
    return new TxEffect(tx.data.revertCode, tx.data.getTransactionFee(gasFees), tx.data.end.noteHashes.filter(h => !h.isZero()), tx.data.end.nullifiers.filter(h => !h.isZero()), tx.data.end.l2ToL1Msgs
        .map(message => siloL2ToL1Message(message, tx.data.constants.txContext.version, tx.data.constants.txContext.chainId))
        .filter(h => !h.isZero()), tx.finalPublicDataUpdateRequests.map(t => new PublicDataWrite(t.leafSlot, t.newValue)).filter(h => !h.isEmpty()), tx.data.end.noteEncryptedLogPreimagesLength, tx.data.end.encryptedLogPreimagesLength, tx.data.end.unencryptedLogPreimagesLength, tx.noteEncryptedLogs || EncryptedNoteTxL2Logs.empty(), tx.encryptedLogs || EncryptedTxL2Logs.empty(), tx.unencryptedLogs || UnencryptedTxL2Logs.empty());
}
function validateProcessedTxLogs(tx) {
    const noteEncryptedLogs = tx.noteEncryptedLogs || EncryptedNoteTxL2Logs.empty();
    let kernelHash = Fr.fromBuffer(EncryptedNoteTxL2Logs.hashNoteLogs(tx.data.end.noteEncryptedLogsHashes.filter(hash => !hash.isEmpty()).map(h => h.value.toBuffer())));
    let referenceHash = Fr.fromBuffer(noteEncryptedLogs.hash());
    if (!referenceHash.equals(kernelHash)) {
        throw new Error(`Note encrypted logs hash mismatch. Expected ${referenceHash.toString()}, got ${kernelHash.toString()}.
             Processed: ${JSON.stringify(noteEncryptedLogs.toJSON())}`);
    }
    const encryptedLogs = tx.encryptedLogs || EncryptedTxL2Logs.empty();
    kernelHash = kernelHash = Fr.fromBuffer(EncryptedTxL2Logs.hashSiloedLogs(tx.data.end.encryptedLogsHashes.filter(hash => !hash.isEmpty()).map(h => h.getSiloedHash())));
    referenceHash = Fr.fromBuffer(encryptedLogs.hash());
    if (!referenceHash.equals(kernelHash)) {
        throw new Error(`Encrypted logs hash mismatch. Expected ${referenceHash.toString()}, got ${kernelHash.toString()}.
             Processed: ${JSON.stringify(encryptedLogs.toJSON())}`);
    }
    const unencryptedLogs = tx.unencryptedLogs || UnencryptedTxL2Logs.empty();
    kernelHash = Fr.fromBuffer(UnencryptedTxL2Logs.hashSiloedLogs(tx.data.end.unencryptedLogsHashes.filter(hash => !hash.isEmpty()).map(h => h.getSiloedHash())));
    referenceHash = Fr.fromBuffer(unencryptedLogs.hash());
    if (!referenceHash.equals(kernelHash)) {
        throw new Error(`Unencrypted logs hash mismatch. Expected ${referenceHash.toString()}, got ${kernelHash.toString()}.
             Processed: ${JSON.stringify(unencryptedLogs.toJSON())}
             Kernel Length: ${tx.data.end.unencryptedLogPreimagesLength}`);
    }
    let referenceLength = new Fr(noteEncryptedLogs.getKernelLength());
    let kernelLength = tx.data.end.noteEncryptedLogPreimagesLength;
    if (!referenceLength.equals(kernelLength)) {
        throw new Error(`Note encrypted logs length mismatch. Expected ${referenceLength.toString()}, got ${kernelLength.toString()}.
             Processed: ${JSON.stringify(noteEncryptedLogs.toJSON())}`);
    }
    referenceLength = new Fr(encryptedLogs.getKernelLength());
    kernelLength = tx.data.end.encryptedLogPreimagesLength;
    if (!referenceLength.equals(kernelLength)) {
        throw new Error(`Encrypted logs length mismatch. Expected ${referenceLength.toString()}, got ${kernelLength.toString()}.
             Processed: ${JSON.stringify(encryptedLogs.toJSON())}`);
    }
    referenceLength = new Fr(unencryptedLogs.getKernelLength());
    kernelLength = tx.data.end.unencryptedLogPreimagesLength;
    if (!referenceLength.equals(kernelLength)) {
        throw new Error(`Unencrypted logs length mismatch. Expected ${referenceLength.toString()}, got ${kernelLength.toString()}.
             Processed: ${JSON.stringify(unencryptedLogs.toJSON())}`);
    }
}
export function validateProcessedTx(tx) {
    validateProcessedTxLogs(tx);
    // TODO: validate other fields
}
//# sourceMappingURL=data:application/json;base64,