import { AztecAddress, CallContext, ClientIvcProof, EthAddress, GasSettings, LogHash, MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX, MAX_NULLIFIERS_PER_TX, MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, MAX_UNENCRYPTED_LOGS_PER_TX, Nullifier, PartialPrivateTailPublicInputsForPublic, PrivateCircuitPublicInputs, PrivateKernelTailCircuitPublicInputs, PublicAccumulatedDataBuilder, ScopedLogHash, SerializableContractInstance, computeContractAddressFromInstance, computeContractClassId, getContractClassFromArtifact, } from '@aztec/circuits.js';
import { computeVarArgsHash } from '@aztec/circuits.js/hash';
import { makeCombinedAccumulatedData, makeCombinedConstantData, makePublicCallRequest, } from '@aztec/circuits.js/testing';
import { NoteSelector } from '@aztec/foundation/abi';
import { makeTuple } from '@aztec/foundation/array';
import { padArrayEnd, times } from '@aztec/foundation/collection';
import { randomBigInt, randomBytes, randomInt } from '@aztec/foundation/crypto';
import { Signature } from '@aztec/foundation/eth-signature';
import { Fr } from '@aztec/foundation/fields';
import { EncryptedNoteTxL2Logs, EncryptedTxL2Logs, Note, UnencryptedTxL2Logs } from './logs/index.js';
import { ExtendedNote, UniqueNote } from './notes/index.js';
import { CountedLog, CountedPublicExecutionRequest, PrivateExecutionResult } from './private_execution_result.js';
import { EpochProofQuote } from './prover_coordination/epoch_proof_quote.js';
import { EpochProofQuotePayload } from './prover_coordination/epoch_proof_quote_payload.js';
import { PublicExecutionRequest } from './public_execution_request.js';
import { PublicSimulationOutput, Tx, TxHash, TxSimulationResult, accumulatePrivateReturnValues } from './tx/index.js';
export const randomTxHash = () => new TxHash(randomBytes(32));
export const mockPrivateExecutionResult = (seed = 1, hasLogs = false, numberOfNonRevertiblePublicCallRequests = MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX / 2, numberOfRevertiblePublicCallRequests = MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX / 2, hasPublicTeardownCallRequest = false) => {
    const totalPublicCallRequests = numberOfNonRevertiblePublicCallRequests +
        numberOfRevertiblePublicCallRequests +
        (hasPublicTeardownCallRequest ? 1 : 0);
    const isForPublic = totalPublicCallRequests > 0;
    let enqueuedPublicFunctionCalls = [];
    let publicTeardownFunctionCall = PublicExecutionRequest.empty();
    if (isForPublic) {
        const publicCallRequests = times(totalPublicCallRequests, i => makePublicCallRequest(seed + 0x102 + i)).reverse(); // Reverse it so that they are sorted by counters in descending order.
        const publicFunctionArgs = times(totalPublicCallRequests, i => [new Fr(seed + i * 100), new Fr(seed + i * 101)]);
        publicCallRequests.forEach((r, i) => (r.argsHash = computeVarArgsHash(publicFunctionArgs[i])));
        if (hasPublicTeardownCallRequest) {
            const request = publicCallRequests.shift();
            const args = publicFunctionArgs.shift();
            publicTeardownFunctionCall = new PublicExecutionRequest(CallContext.fromFields(request.callContext.toFields()), args);
        }
        enqueuedPublicFunctionCalls = publicCallRequests.map((r, i) => new PublicExecutionRequest(CallContext.fromFields(r.callContext.toFields()), publicFunctionArgs[i]));
    }
    return new PrivateExecutionResult(Buffer.from(''), Buffer.from(''), new Map(), PrivateCircuitPublicInputs.empty(), new Map(), [], new Map(), [], [], enqueuedPublicFunctionCalls.map((call, index) => new CountedPublicExecutionRequest(call, index)), publicTeardownFunctionCall, [], hasLogs
        ? EncryptedTxL2Logs.random(2, 3)
            .unrollLogs()
            .map((log, index) => new CountedLog(log, index))
        : [], hasLogs
        ? UnencryptedTxL2Logs.random(2, 3)
            .unrollLogs()
            .map((log, index) => new CountedLog(log, index))
        : []);
};
export const mockTx = (seed = 1, { hasLogs = false, numberOfNonRevertiblePublicCallRequests = MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX / 2, numberOfRevertiblePublicCallRequests = MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX / 2, hasPublicTeardownCallRequest = false, feePayer = AztecAddress.ZERO, } = {}) => {
    const totalPublicCallRequests = numberOfNonRevertiblePublicCallRequests +
        numberOfRevertiblePublicCallRequests +
        (hasPublicTeardownCallRequest ? 1 : 0);
    const isForPublic = totalPublicCallRequests > 0;
    const data = PrivateKernelTailCircuitPublicInputs.empty();
    const firstNullifier = new Nullifier(new Fr(seed + 1), 0, Fr.ZERO);
    const noteEncryptedLogs = EncryptedNoteTxL2Logs.empty(); // Mock seems to have no new notes => no note logs
    const encryptedLogs = hasLogs ? EncryptedTxL2Logs.random(2, 3) : EncryptedTxL2Logs.empty(); // 2 priv function invocations creating 3 encrypted logs each
    const unencryptedLogs = hasLogs ? UnencryptedTxL2Logs.random(2, 1) : UnencryptedTxL2Logs.empty(); // 2 priv function invocations creating 1 unencrypted log each
    data.constants.txContext.gasSettings = GasSettings.default();
    data.feePayer = feePayer;
    let enqueuedPublicFunctionCalls = [];
    let publicTeardownFunctionCall = PublicExecutionRequest.empty();
    if (isForPublic) {
        data.forRollup = undefined;
        data.forPublic = PartialPrivateTailPublicInputsForPublic.empty();
        const revertibleBuilder = new PublicAccumulatedDataBuilder();
        const nonRevertibleBuilder = new PublicAccumulatedDataBuilder();
        const publicCallRequests = times(totalPublicCallRequests, i => makePublicCallRequest(seed + 0x102 + i)).reverse(); // Reverse it so that they are sorted by counters in descending order.
        const publicFunctionArgs = times(totalPublicCallRequests, i => [new Fr(seed + i * 100), new Fr(seed + i * 101)]);
        publicCallRequests.forEach((r, i) => (r.argsHash = computeVarArgsHash(publicFunctionArgs[i])));
        if (hasPublicTeardownCallRequest) {
            const request = publicCallRequests.shift();
            data.forPublic.publicTeardownCallRequest = request;
            const args = publicFunctionArgs.shift();
            publicTeardownFunctionCall = new PublicExecutionRequest(CallContext.fromFields(request.callContext.toFields()), args);
        }
        enqueuedPublicFunctionCalls = publicCallRequests.map((r, i) => new PublicExecutionRequest(CallContext.fromFields(r.callContext.toFields()), publicFunctionArgs[i]));
        const nonRevertibleNullifiers = makeTuple(MAX_NULLIFIERS_PER_TX, Nullifier.empty);
        nonRevertibleNullifiers[0] = firstNullifier;
        data.forPublic.endNonRevertibleData = nonRevertibleBuilder
            .withNullifiers(nonRevertibleNullifiers)
            .withPublicCallStack(publicCallRequests.slice(numberOfRevertiblePublicCallRequests))
            .build();
        data.forPublic.end = revertibleBuilder
            .withPublicCallStack(publicCallRequests.slice(0, numberOfRevertiblePublicCallRequests))
            .build();
        if (hasLogs) {
            let i = 1; // 0 used in first nullifier
            let nonRevertibleIndex = 0;
            let revertibleIndex = 0;
            let functionCount = 0;
            encryptedLogs.functionLogs.forEach(functionLog => {
                functionLog.logs.forEach(log => {
                    // ts complains if we dont check .forPublic here, even though it is defined ^
                    if (data.forPublic) {
                        const hash = new ScopedLogHash(new LogHash(Fr.fromBuffer(log.hash()), i++, 
                        // +4 for encoding the length of the buffer
                        new Fr(log.length + 4)), log.maskedContractAddress);
                        // make the first log non-revertible
                        if (functionCount === 0) {
                            data.forPublic.endNonRevertibleData.encryptedLogsHashes[nonRevertibleIndex++] = hash;
                        }
                        else {
                            data.forPublic.end.encryptedLogsHashes[revertibleIndex++] = hash;
                        }
                    }
                });
                functionCount++;
            });
            nonRevertibleIndex = 0;
            revertibleIndex = 0;
            functionCount = 0;
            unencryptedLogs.functionLogs.forEach(functionLog => {
                functionLog.logs.forEach(log => {
                    if (data.forPublic) {
                        const hash = new ScopedLogHash(new LogHash(Fr.fromBuffer(log.hash()), i++, 
                        // +4 for encoding the length of the buffer
                        new Fr(log.length + 4)), log.contractAddress);
                        // make the first log non-revertible
                        if (functionCount === 0) {
                            data.forPublic.endNonRevertibleData.unencryptedLogsHashes[nonRevertibleIndex++] = hash;
                        }
                        else {
                            data.forPublic.end.unencryptedLogsHashes[revertibleIndex++] = hash;
                        }
                    }
                });
                functionCount++;
            });
        }
    }
    else {
        data.forRollup.end.nullifiers[0] = firstNullifier.value;
        data.forRollup.end.noteEncryptedLogsHashes = padArrayEnd(noteEncryptedLogs.unrollLogs().map(log => new LogHash(Fr.fromBuffer(log.hash()), 0, new Fr(log.length))), LogHash.empty(), MAX_NOTE_ENCRYPTED_LOGS_PER_TX);
        data.forRollup.end.encryptedLogsHashes = padArrayEnd(encryptedLogs
            .unrollLogs()
            .map(log => new ScopedLogHash(new LogHash(Fr.fromBuffer(log.hash()), 0, new Fr(log.length)), log.maskedContractAddress)), ScopedLogHash.empty(), MAX_ENCRYPTED_LOGS_PER_TX);
        data.forRollup.end.unencryptedLogsHashes = makeTuple(MAX_UNENCRYPTED_LOGS_PER_TX, ScopedLogHash.empty);
        unencryptedLogs.unrollLogs().forEach((log, i) => {
            data.forRollup.end.unencryptedLogsHashes[i] = new ScopedLogHash(new LogHash(Fr.fromBuffer(log.hash()), 0, new Fr(log.length)), log.contractAddress);
        });
    }
    const tx = new Tx(data, ClientIvcProof.empty(), noteEncryptedLogs, encryptedLogs, unencryptedLogs, enqueuedPublicFunctionCalls, publicTeardownFunctionCall);
    return tx;
};
export const mockTxForRollup = (seed = 1, { hasLogs = false } = {}) => mockTx(seed, { hasLogs, numberOfNonRevertiblePublicCallRequests: 0, numberOfRevertiblePublicCallRequests: 0 });
export const mockSimulatedTx = (seed = 1, hasLogs = true) => {
    const privateExecutionResult = mockPrivateExecutionResult(seed, hasLogs);
    const tx = mockTx(seed, { hasLogs });
    const output = new PublicSimulationOutput(tx.encryptedLogs, tx.unencryptedLogs, undefined, makeCombinedConstantData(), makeCombinedAccumulatedData(), [accumulatePrivateReturnValues(privateExecutionResult)], {});
    return new TxSimulationResult(privateExecutionResult, tx.data, output);
};
export const mockEpochProofQuote = (epochToProve, validUntilSlot, bondAmount, proverAddress, basisPointFee) => {
    const quotePayload = new EpochProofQuotePayload(epochToProve, validUntilSlot ?? randomBigInt(10000n), bondAmount ?? randomBigInt(10000n) + 1000n, proverAddress ?? EthAddress.random(), basisPointFee ?? randomInt(100));
    const sig = Signature.empty();
    return new EpochProofQuote(quotePayload, sig);
};
export const randomContractArtifact = () => ({
    name: randomBytes(4).toString('hex'),
    functions: [],
    outputs: {
        structs: {},
        globals: {},
    },
    fileMap: {},
    storageLayout: {},
    notes: {},
});
export const randomContractInstanceWithAddress = (opts = {}, address) => {
    const instance = SerializableContractInstance.random(opts);
    return instance.withAddress(address ?? computeContractAddressFromInstance(instance));
};
export const randomDeployedContract = () => {
    const artifact = randomContractArtifact();
    const contractClassId = computeContractClassId(getContractClassFromArtifact(artifact));
    return { artifact, instance: randomContractInstanceWithAddress({ contractClassId }) };
};
export const randomExtendedNote = ({ note = Note.random(), owner = AztecAddress.random(), contractAddress = AztecAddress.random(), txHash = randomTxHash(), storageSlot = Fr.random(), noteTypeId = NoteSelector.random(), } = {}) => {
    return new ExtendedNote(note, owner, contractAddress, storageSlot, noteTypeId, txHash);
};
export const randomUniqueNote = ({ note = Note.random(), owner = AztecAddress.random(), contractAddress = AztecAddress.random(), txHash = randomTxHash(), storageSlot = Fr.random(), noteTypeId = NoteSelector.random(), nonce = Fr.random(), } = {}) => {
    return new UniqueNote(note, owner, contractAddress, storageSlot, noteTypeId, txHash, nonce);
};
//# sourceMappingURL=data:application/json;base64,