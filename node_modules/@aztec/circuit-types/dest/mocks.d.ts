import { AztecAddress, type ContractInstanceWithAddress, EthAddress } from '@aztec/circuits.js';
import { type ContractArtifact } from '@aztec/foundation/abi';
import { Fr } from '@aztec/foundation/fields';
import { ExtendedNote, UniqueNote } from './notes/index.js';
import { PrivateExecutionResult } from './private_execution_result.js';
import { EpochProofQuote } from './prover_coordination/epoch_proof_quote.js';
import { Tx, TxHash, TxSimulationResult } from './tx/index.js';
export declare const randomTxHash: () => TxHash;
export declare const mockPrivateExecutionResult: (seed?: number, hasLogs?: boolean, numberOfNonRevertiblePublicCallRequests?: number, numberOfRevertiblePublicCallRequests?: number, hasPublicTeardownCallRequest?: boolean) => PrivateExecutionResult;
export declare const mockTx: (seed?: number, { hasLogs, numberOfNonRevertiblePublicCallRequests, numberOfRevertiblePublicCallRequests, hasPublicTeardownCallRequest, feePayer, }?: {
    hasLogs?: boolean;
    numberOfNonRevertiblePublicCallRequests?: number;
    numberOfRevertiblePublicCallRequests?: number;
    hasPublicTeardownCallRequest?: boolean;
    feePayer?: AztecAddress;
}) => Tx;
export declare const mockTxForRollup: (seed?: number, { hasLogs }?: {
    hasLogs?: boolean;
}) => Tx;
export declare const mockSimulatedTx: (seed?: number, hasLogs?: boolean) => TxSimulationResult;
export declare const mockEpochProofQuote: (epochToProve: bigint, validUntilSlot?: bigint, bondAmount?: bigint, proverAddress?: EthAddress, basisPointFee?: number) => EpochProofQuote;
export declare const randomContractArtifact: () => ContractArtifact;
export declare const randomContractInstanceWithAddress: (opts?: {
    contractClassId?: Fr;
}, address?: AztecAddress) => ContractInstanceWithAddress;
export declare const randomDeployedContract: () => {
    artifact: ContractArtifact;
    instance: ContractInstanceWithAddress;
};
export declare const randomExtendedNote: ({ note, owner, contractAddress, txHash, storageSlot, noteTypeId, }?: Partial<ExtendedNote>) => ExtendedNote;
export declare const randomUniqueNote: ({ note, owner, contractAddress, txHash, storageSlot, noteTypeId, nonce, }?: Partial<UniqueNote>) => UniqueNote;
//# sourceMappingURL=mocks.d.ts.map