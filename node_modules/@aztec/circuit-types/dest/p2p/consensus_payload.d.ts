/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Header } from '@aztec/circuits.js';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { type FieldsOf } from '@aztec/foundation/types';
import { TxHash } from '../tx/tx_hash.js';
import { type Signable } from './signature_utils.js';
export declare class ConsensusPayload implements Signable {
    /** The block header the attestation is made over */
    readonly header: Header;
    readonly archive: Fr;
    /** The sequence of transactions in the block */
    readonly txHashes: TxHash[];
    private size;
    constructor(
    /** The block header the attestation is made over */
    header: Header, archive: Fr, 
    /** The sequence of transactions in the block */
    txHashes: TxHash[]);
    static getFields(fields: FieldsOf<ConsensusPayload>): readonly [Header, Fr, TxHash[]];
    getPayloadToSign(): Buffer;
    toBuffer(): Buffer;
    static fromBuffer(buf: Buffer | BufferReader): ConsensusPayload;
    static fromFields(fields: FieldsOf<ConsensusPayload>): ConsensusPayload;
    static empty(): ConsensusPayload;
    /**
     * Get the size of the consensus payload in bytes.
     * @returns The size of the consensus payload.
     */
    getSize(): number;
}
//# sourceMappingURL=consensus_payload.d.ts.map