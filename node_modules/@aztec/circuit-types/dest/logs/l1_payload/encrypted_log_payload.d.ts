/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { AztecAddress, Fr, GrumpkinScalar, type KeyValidationRequest, type PublicKey } from '@aztec/circuits.js';
import { BufferReader } from '@aztec/foundation/serialize';
/**
 * Encrypted log payload with a tag used for retrieval by clients.
 */
export declare class EncryptedLogPayload {
    readonly incomingTag: Fr;
    readonly outgoingTag: Fr;
    readonly contractAddress: AztecAddress;
    readonly incomingBodyPlaintext: Buffer;
    constructor(incomingTag: Fr, outgoingTag: Fr, contractAddress: AztecAddress, incomingBodyPlaintext: Buffer);
    encrypt(ephSk: GrumpkinScalar, recipient: AztecAddress, ivpk: PublicKey, ovKeys: KeyValidationRequest): Buffer;
    /**
     * Decrypts a ciphertext as an incoming log.
     *
     * This is executable by the recipient of the note, and uses the ivsk to decrypt the payload.
     * The outgoing parts of the log are ignored entirely.
     *
     * Produces the same output as `decryptAsOutgoing`.
     *
     * @param ciphertext - The ciphertext for the log
     * @param ivsk - The incoming viewing secret key, used to decrypt the logs
     * @returns The decrypted log payload
     */
    static decryptAsIncoming(ciphertext: Buffer | BufferReader, ivsk: GrumpkinScalar): EncryptedLogPayload | undefined;
    /**
     * Decrypts a ciphertext as an outgoing log.
     *
     * This is executable by the sender of the event, and uses the ovsk to decrypt the payload.
     * The outgoing parts are decrypted to retrieve information that allows the sender to
     * decrypt the incoming log, and learn about the event contents.
     *
     * Produces the same output as `decryptAsIncoming`.
     *
     * @param ciphertext - The ciphertext for the log
     * @param ovsk - The outgoing viewing secret key, used to decrypt the logs
     * @returns The decrypted log payload
     */
    static decryptAsOutgoing(ciphertext: Buffer | BufferReader, ovsk: GrumpkinScalar): EncryptedLogPayload | undefined;
    toBuffer(): Buffer;
}
//# sourceMappingURL=encrypted_log_payload.d.ts.map