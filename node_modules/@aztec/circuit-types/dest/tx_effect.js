import { EncryptedNoteTxL2Logs, EncryptedTxL2Logs, PublicDataWrite, TxHash, UnencryptedTxL2Logs, } from '@aztec/circuit-types';
import { Fr, MAX_L2_TO_L1_MSGS_PER_TX, MAX_NOTE_HASHES_PER_TX, MAX_NULLIFIERS_PER_TX, MAX_TOTAL_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, RevertCode, } from '@aztec/circuits.js';
import { makeTuple } from '@aztec/foundation/array';
import { padArrayEnd } from '@aztec/foundation/collection';
import { sha256Trunc } from '@aztec/foundation/crypto';
import { BufferReader, serializeArrayOfBufferableToVector, serializeToBuffer } from '@aztec/foundation/serialize';
import { inspect } from 'util';
export class TxEffect {
    constructor(
    /**
     * Whether the transaction reverted during public app logic.
     */
    revertCode, 
    /**
     * The transaction fee, denominated in FPA.
     */
    transactionFee, 
    /**
     * The note hashes to be inserted into the note hash tree.
     */
    noteHashes, 
    /**
     * The nullifiers to be inserted into the nullifier tree.
     */
    nullifiers, 
    /**
     * The hash of L2 to L1 messages to be inserted into the messagebox on L1.
     * TODO(just-mitch): rename to l2ToL1MsgHashes
     */
    l2ToL1Msgs, 
    /**
     * The public data writes to be inserted into the public data tree.
     */
    publicDataWrites, 
    /**
     * The logs and logs lengths of the txEffect
     */
    noteEncryptedLogsLength, encryptedLogsLength, unencryptedLogsLength, noteEncryptedLogs, encryptedLogs, unencryptedLogs) {
        this.revertCode = revertCode;
        this.transactionFee = transactionFee;
        this.noteHashes = noteHashes;
        this.nullifiers = nullifiers;
        this.l2ToL1Msgs = l2ToL1Msgs;
        this.publicDataWrites = publicDataWrites;
        this.noteEncryptedLogsLength = noteEncryptedLogsLength;
        this.encryptedLogsLength = encryptedLogsLength;
        this.unencryptedLogsLength = unencryptedLogsLength;
        this.noteEncryptedLogs = noteEncryptedLogs;
        this.encryptedLogs = encryptedLogs;
        this.unencryptedLogs = unencryptedLogs;
        // TODO(#4638): Clean this up once we have isDefault() everywhere --> then we don't have to deal with 2 different
        // functions (isZero and isEmpty)
        if (noteHashes.length > MAX_NOTE_HASHES_PER_TX) {
            throw new Error(`Too many note hashes: ${noteHashes.length}, max: ${MAX_NOTE_HASHES_PER_TX}`);
        }
        noteHashes.forEach(h => {
            if (h.isZero()) {
                throw new Error('Note hash is zero');
            }
        });
        if (nullifiers.length > MAX_NULLIFIERS_PER_TX) {
            throw new Error(`Too many nullifiers: ${nullifiers.length}, max: ${MAX_NULLIFIERS_PER_TX}`);
        }
        nullifiers.forEach(h => {
            if (h.isZero()) {
                throw new Error('Nullifier is zero');
            }
        });
        if (l2ToL1Msgs.length > MAX_L2_TO_L1_MSGS_PER_TX) {
            throw new Error(`Too many L2 to L1 messages: ${l2ToL1Msgs.length}, max: ${MAX_L2_TO_L1_MSGS_PER_TX}`);
        }
        l2ToL1Msgs.forEach(h => {
            if (h.isZero()) {
                throw new Error('L2 to L1 message is zero');
            }
        });
        if (publicDataWrites.length > MAX_TOTAL_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX) {
            throw new Error(`Too many public data writes: ${publicDataWrites.length}, max: ${MAX_TOTAL_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX}`);
        }
        publicDataWrites.forEach(h => {
            if (h.isEmpty()) {
                throw new Error('Public data write is empty');
            }
        });
    }
    toBuffer() {
        return serializeToBuffer([
            this.revertCode,
            this.transactionFee,
            serializeArrayOfBufferableToVector(this.noteHashes, 1),
            serializeArrayOfBufferableToVector(this.nullifiers, 1),
            serializeArrayOfBufferableToVector(this.l2ToL1Msgs, 1),
            serializeArrayOfBufferableToVector(this.publicDataWrites, 1),
            this.noteEncryptedLogsLength,
            this.encryptedLogsLength,
            this.unencryptedLogsLength,
            this.noteEncryptedLogs,
            this.encryptedLogs,
            this.unencryptedLogs,
        ]);
    }
    /**
     * Deserializes the TxEffect object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of TxEffect.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new TxEffect(RevertCode.fromBuffer(reader), Fr.fromBuffer(reader), reader.readVectorUint8Prefix(Fr), reader.readVectorUint8Prefix(Fr), reader.readVectorUint8Prefix(Fr), reader.readVectorUint8Prefix(PublicDataWrite), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readObject(EncryptedNoteTxL2Logs), reader.readObject(EncryptedTxL2Logs), reader.readObject(UnencryptedTxL2Logs));
    }
    /**
     * Computes the hash of the TxEffect object.
     * @returns The hash of the TxEffect object.
     * @dev This function must correspond with compute_tx_effects_hash() in Noir and TxsDecoder.sol decode().
     */
    hash() {
        const padBuffer = (buf, length) => Buffer.concat([buf, Buffer.alloc(length - buf.length)]);
        const noteHashesBuffer = padBuffer(serializeToBuffer(this.noteHashes), Fr.SIZE_IN_BYTES * MAX_NOTE_HASHES_PER_TX);
        const nullifiersBuffer = padBuffer(serializeToBuffer(this.nullifiers), Fr.SIZE_IN_BYTES * MAX_NULLIFIERS_PER_TX);
        const outHashBuffer = this.txOutHash();
        const publicDataWritesBuffer = padBuffer(serializeToBuffer(this.publicDataWrites), PublicDataWrite.SIZE_IN_BYTES * MAX_TOTAL_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX);
        const noteEncryptedLogsHashKernel0 = this.noteEncryptedLogs.hash();
        const encryptedLogsHashKernel0 = this.encryptedLogs.hash();
        const unencryptedLogsHashKernel0 = this.unencryptedLogs.hash();
        const inputValue = Buffer.concat([
            this.revertCode.toHashPreimage(),
            this.transactionFee.toBuffer(),
            noteHashesBuffer,
            nullifiersBuffer,
            outHashBuffer,
            publicDataWritesBuffer,
            this.noteEncryptedLogsLength.toBuffer(),
            this.encryptedLogsLength.toBuffer(),
            this.unencryptedLogsLength.toBuffer(),
            noteEncryptedLogsHashKernel0,
            encryptedLogsHashKernel0,
            unencryptedLogsHashKernel0,
        ]);
        return sha256Trunc(inputValue);
    }
    /**
     * Computes txOutHash of this tx effect.
     * TODO(#7218): Revert to fixed height tree for outbox
     * @dev Follows computeTxOutHash in TxsDecoder.sol and new_sha in variable_merkle_tree.nr
     */
    txOutHash() {
        const { l2ToL1Msgs } = this;
        if (l2ToL1Msgs.length == 0) {
            return Buffer.alloc(32);
        }
        const depth = l2ToL1Msgs.length == 1 ? 1 : Math.ceil(Math.log2(l2ToL1Msgs.length));
        let thisLayer = padArrayEnd(l2ToL1Msgs.map(msg => msg.toBuffer()), Buffer.alloc(32), 2 ** depth);
        let nextLayer = [];
        for (let i = 0; i < depth; i++) {
            for (let j = 0; j < thisLayer.length; j += 2) {
                // Store the hash of each pair one layer up
                nextLayer[j / 2] = sha256Trunc(Buffer.concat([thisLayer[j], thisLayer[j + 1]]));
            }
            thisLayer = nextLayer;
            nextLayer = [];
        }
        return thisLayer[0];
    }
    static random(numPrivateCallsPerTx = 2, numPublicCallsPerTx = 3, numEncryptedLogsPerCall = 2, numUnencryptedLogsPerCall = 1) {
        const noteEncryptedLogs = EncryptedNoteTxL2Logs.random(numPrivateCallsPerTx, numEncryptedLogsPerCall);
        const encryptedLogs = EncryptedTxL2Logs.random(numPrivateCallsPerTx, numEncryptedLogsPerCall);
        const unencryptedLogs = UnencryptedTxL2Logs.random(numPublicCallsPerTx, numUnencryptedLogsPerCall);
        return new TxEffect(RevertCode.random(), Fr.random(), makeTuple(MAX_NOTE_HASHES_PER_TX, Fr.random), makeTuple(MAX_NULLIFIERS_PER_TX, Fr.random), makeTuple(MAX_L2_TO_L1_MSGS_PER_TX, Fr.random), makeTuple(MAX_TOTAL_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataWrite.random), new Fr(noteEncryptedLogs.getKernelLength()), new Fr(encryptedLogs.getKernelLength()), new Fr(unencryptedLogs.getKernelLength()), noteEncryptedLogs, encryptedLogs, unencryptedLogs);
    }
    static empty() {
        return new TxEffect(RevertCode.OK, Fr.ZERO, [], [], [], [], Fr.ZERO, Fr.ZERO, Fr.ZERO, EncryptedNoteTxL2Logs.empty(), EncryptedTxL2Logs.empty(), UnencryptedTxL2Logs.empty());
    }
    isEmpty() {
        return this.nullifiers.length === 0;
    }
    /**
     * Returns a string representation of the TxEffect object.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    [inspect.custom]() {
        // print out the non-empty fields
        return `TxEffect { 
      revertCode: ${this.revertCode},
      transactionFee: ${this.transactionFee},
      note hashes: [${this.noteHashes.map(h => h.toString()).join(', ')}],
      nullifiers: [${this.nullifiers.map(h => h.toString()).join(', ')}],
      l2ToL1Msgs: [${this.l2ToL1Msgs.map(h => h.toString()).join(', ')}],
      publicDataWrites: [${this.publicDataWrites.map(h => h.toString()).join(', ')}],
      noteEncryptedLogsLength: ${this.noteEncryptedLogsLength},
      encryptedLogsLength: ${this.encryptedLogsLength},
      unencryptedLogsLength: ${this.unencryptedLogsLength},
      noteEncryptedLogs: ${JSON.stringify(this.noteEncryptedLogs.toJSON())},
      encryptedLogs: ${JSON.stringify(this.encryptedLogs.toJSON())},
      unencryptedLogs: ${JSON.stringify(this.unencryptedLogs.toJSON())}
     }`;
    }
    /**
     * Deserializes an TxEffect object from a string.
     * @param str - String to deserialize.
     * @returns An instance of TxEffect.
     */
    static fromString(str) {
        return TxEffect.fromBuffer(Buffer.from(str, 'hex'));
    }
    get txHash() {
        return new TxHash(this.nullifiers[0].toBuffer());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHhfZWZmZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3R4X2VmZmVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wscUJBQXFCLEVBQ3JCLGlCQUFpQixFQUNqQixlQUFlLEVBQ2YsTUFBTSxFQUNOLG1CQUFtQixHQUNwQixNQUFNLHNCQUFzQixDQUFDO0FBQzlCLE9BQU8sRUFDTCxFQUFFLEVBQ0Ysd0JBQXdCLEVBQ3hCLHNCQUFzQixFQUN0QixxQkFBcUIsRUFDckIsNENBQTRDLEVBQzVDLFVBQVUsR0FDWCxNQUFNLG9CQUFvQixDQUFDO0FBQzVCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDM0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxZQUFZLEVBQUUsa0NBQWtDLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVsSCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRS9CLE1BQU0sT0FBTyxRQUFRO0lBQ25CO0lBQ0U7O09BRUc7SUFDSSxVQUFzQjtJQUM3Qjs7T0FFRztJQUNJLGNBQWtCO0lBQ3pCOztPQUVHO0lBQ0ksVUFBZ0I7SUFDdkI7O09BRUc7SUFDSSxVQUFnQjtJQUN2Qjs7O09BR0c7SUFDSSxVQUFnQjtJQUN2Qjs7T0FFRztJQUNJLGdCQUFtQztJQUMxQzs7T0FFRztJQUNJLHVCQUEyQixFQUMzQixtQkFBdUIsRUFDdkIscUJBQXlCLEVBQ3pCLGlCQUF3QyxFQUN4QyxhQUFnQyxFQUNoQyxlQUFvQztRQTlCcEMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUl0QixtQkFBYyxHQUFkLGNBQWMsQ0FBSTtRQUlsQixlQUFVLEdBQVYsVUFBVSxDQUFNO1FBSWhCLGVBQVUsR0FBVixVQUFVLENBQU07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