import { type L2Block } from '../l2_block.js';
import { type L2BlockSource, type L2Tips } from '../l2_block_source.js';
/** Creates a stream of events for new blocks, chain tips updates, and reorgs, out of polling an archiver. */
export declare class L2BlockStream {
    private l2BlockSource;
    private localData;
    private handler;
    private opts;
    private readonly runningPromise;
    private readonly log;
    constructor(l2BlockSource: L2BlockSource, localData: L2BlockStreamLocalDataProvider, handler: L2BlockStreamEventHandler, opts: {
        proven?: boolean;
        pollIntervalMS?: number;
        batchSize?: number;
    });
    start(): void;
    stop(): Promise<void>;
    isRunning(): boolean;
    sync(): Promise<void>;
    protected work(): Promise<void>;
    private areBlockHashesEqual;
    private emitEvent;
}
/** Interface to the local view of the chain. Implemented by world-state. */
export interface L2BlockStreamLocalDataProvider {
    getL2BlockHash(number: number): Promise<string | undefined>;
    getL2Tips(): Promise<L2Tips>;
}
/** Interface to a handler of events emitted. */
export interface L2BlockStreamEventHandler {
    handleBlockStreamEvent(event: L2BlockStreamEvent): Promise<void>;
}
export type L2BlockStreamEvent = {
    type: 'blocks-added';
    /** New blocks added to the chain. */
    blocks: L2Block[];
} | {
    type: 'chain-pruned';
    /** Last correct block number (new tip of the unproven chain). */
    blockNumber: number;
} | {
    type: 'chain-proven';
    /** New proven block number */
    blockNumber: number;
} | {
    type: 'chain-finalized';
    /** New finalized block number */
    blockNumber: number;
};
//# sourceMappingURL=l2_block_stream.d.ts.map