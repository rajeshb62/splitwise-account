import { AbortError } from '@aztec/foundation/error';
import { createDebugLogger } from '@aztec/foundation/log';
import { RunningPromise } from '@aztec/foundation/running-promise';
/** Creates a stream of events for new blocks, chain tips updates, and reorgs, out of polling an archiver. */
export class L2BlockStream {
    constructor(l2BlockSource, localData, handler, opts) {
        this.l2BlockSource = l2BlockSource;
        this.localData = localData;
        this.handler = handler;
        this.opts = opts;
        this.log = createDebugLogger('aztec:l2_block_stream');
        this.runningPromise = new RunningPromise(() => this.work(), this.opts.pollIntervalMS ?? 1000);
    }
    start() {
        this.log.verbose(`Starting L2 block stream`, this.opts);
        this.runningPromise.start();
    }
    async stop() {
        await this.runningPromise.stop();
    }
    isRunning() {
        return this.runningPromise.isRunning();
    }
    sync() {
        return this.runningPromise.trigger();
    }
    async work() {
        try {
            const sourceTips = await this.l2BlockSource.getL2Tips();
            const localTips = await this.localData.getL2Tips();
            this.log.debug(`Running L2 block stream`, {
                sourceLatest: sourceTips.latest.number,
                localLatest: localTips.latest,
                sourceFinalized: sourceTips.finalized.number,
                localFinalized: localTips.finalized,
                sourceProven: sourceTips.proven.number,
                localProven: localTips.proven,
                sourceLatestHash: sourceTips.latest.hash,
                sourceProvenHash: sourceTips.proven.hash,
                sourceFinalizedHash: sourceTips.finalized.hash,
            });
            // Check if there was a reorg and emit a chain-pruned event if so.
            let latestBlockNumber = localTips.latest.number;
            while (!(await this.areBlockHashesEqual(latestBlockNumber, sourceTips.latest))) {
                latestBlockNumber--;
            }
            if (latestBlockNumber < localTips.latest.number) {
                this.log.verbose(`Reorg detected. Pruning blocks from ${latestBlockNumber + 1} to ${localTips.latest.number}.`);
                await this.emitEvent({ type: 'chain-pruned', blockNumber: latestBlockNumber });
            }
            // Request new blocks from the source.
            while (latestBlockNumber < sourceTips.latest.number) {
                const from = latestBlockNumber + 1;
                const limit = Math.min(this.opts.batchSize ?? 20, sourceTips.latest.number - from + 1);
                this.log.debug(`Requesting blocks from ${from} limit ${limit}`);
                const blocks = await this.l2BlockSource.getBlocks(from, limit, this.opts.proven);
                if (blocks.length === 0) {
                    break;
                }
                await this.emitEvent({ type: 'blocks-added', blocks });
                latestBlockNumber = blocks.at(-1).number;
            }
            // Update the proven and finalized tips.
            // TODO(palla/reorg): Should we emit this before passing the new blocks? This would allow world-state to skip
            // building the data structures for the pending chain if it's unneeded.
            if (localTips.proven !== undefined && sourceTips.proven.number !== localTips.proven.number) {
                await this.emitEvent({ type: 'chain-proven', blockNumber: sourceTips.proven.number });
            }
            if (localTips.finalized !== undefined && sourceTips.finalized.number !== localTips.finalized.number) {
                await this.emitEvent({ type: 'chain-finalized', blockNumber: sourceTips.finalized.number });
            }
        }
        catch (err) {
            if (err.name === 'AbortError') {
                return;
            }
            this.log.error(`Error processing block stream`, err);
        }
    }
    async areBlockHashesEqual(blockNumber, sourceLatest) {
        if (blockNumber === 0) {
            return true;
        }
        const localBlockHash = await this.localData.getL2BlockHash(blockNumber);
        const sourceBlockHash = sourceLatest.number === blockNumber && sourceLatest.hash
            ? sourceLatest.hash
            : await this.l2BlockSource.getBlockHeader(blockNumber).then(h => h?.hash().toString());
        this.log.debug(`Comparing block hashes for block ${blockNumber}`, { localBlockHash, sourceBlockHash });
        return localBlockHash === sourceBlockHash;
    }
    async emitEvent(event) {
        this.log.debug(`Emitting ${event.type} (${event.type === 'blocks-added' ? event.blocks.length : event.blockNumber})`);
        await this.handler.handleBlockStreamEvent(event);
        if (!this.isRunning()) {
            throw new AbortError();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDJfYmxvY2tfc3RyZWFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2wyX2Jsb2NrX2Rvd25sb2FkZXIvbDJfYmxvY2tfc3RyZWFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFLbkUsNkdBQTZHO0FBQzdHLE1BQU0sT0FBTyxhQUFhO0lBS3hCLFlBQ1UsYUFBNEIsRUFDNUIsU0FBeUMsRUFDekMsT0FBa0MsRUFDbEMsSUFJUDtRQVBPLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGNBQVMsR0FBVCxTQUFTLENBQWdDO1FBQ3pDLFlBQU8sR0FBUCxPQUFPLENBQTJCO1FBQ2xDLFNBQUksR0FBSixJQUFJLENBSVg7UUFWYyxRQUFHLEdBQUcsaUJBQWlCLENBQUMsdUJBQXVCLENBQUMsQ0FBQztRQVloRSxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksY0FBYyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsQ0FBQztJQUNoRyxDQUFDO0lBRU0sS0FBSztRQUNWLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLDBCQUEwQixFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSTtRQUNmLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRU0sU0FBUztRQUNkLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFT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