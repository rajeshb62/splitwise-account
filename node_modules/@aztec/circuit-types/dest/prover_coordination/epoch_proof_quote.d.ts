/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Buffer32 } from '@aztec/foundation/buffer';
import { type Secp256k1Signer } from '@aztec/foundation/crypto';
import { Signature } from '@aztec/foundation/eth-signature';
import { BufferReader } from '@aztec/foundation/serialize';
import { type FieldsOf } from '@aztec/foundation/types';
import { Gossipable } from '../p2p/gossipable.js';
import { EpochProofQuotePayload } from './epoch_proof_quote_payload.js';
export declare class EpochProofQuote extends Gossipable {
    readonly payload: EpochProofQuotePayload;
    readonly signature: Signature;
    static p2pTopic: string;
    constructor(payload: EpochProofQuotePayload, signature: Signature);
    static getFields(fields: FieldsOf<EpochProofQuote>): readonly [EpochProofQuotePayload, Signature];
    p2pMessageIdentifier(): Buffer32;
    toBuffer(): Buffer;
    static fromBuffer(buf: Buffer | BufferReader): EpochProofQuote;
    toJSON(): {
        payload: {
            epochToProve: string; /**
             * Creates a new quote with a signature.
             * The digest provided must match what the rollup contract will produce i.e. `_hashTypedDataV4(EpochProofQuoteLib.hash(quote))`
             *
             * @param digest the digest of the payload that should be signed
             * @param payload the actual quote
             * @param signer the signer
             * @returns a quote with an accompanying signature
             */
            validUntilSlot: string;
            bondAmount: string;
            prover: `0x${string}`;
            basisPointFee: number;
        };
        signature: `0x${string}`;
    };
    static fromJSON(obj: any): EpochProofQuote;
    /**
     * Creates a new quote with a signature.
     * The digest provided must match what the rollup contract will produce i.e. `_hashTypedDataV4(EpochProofQuoteLib.hash(quote))`
     *
     * @param digest the digest of the payload that should be signed
     * @param payload the actual quote
     * @param signer the signer
     * @returns a quote with an accompanying signature
     */
    static new(digest: Buffer32, payload: EpochProofQuotePayload, signer: Secp256k1Signer): EpochProofQuote;
    toViemArgs(): {
        quote: {
            epochToProve: bigint;
            validUntilSlot: bigint;
            bondAmount: bigint;
            prover: `0x${string}`;
            basisPointFee: number;
        };
        signature: import("@aztec/foundation/eth-signature").ViemSignature;
    };
    /**
     * Get the size of the epoch proof quote in bytes.
     * @returns The size of the epoch proof quote in bytes.
     */
    getSize(): number;
}
//# sourceMappingURL=epoch_proof_quote.d.ts.map