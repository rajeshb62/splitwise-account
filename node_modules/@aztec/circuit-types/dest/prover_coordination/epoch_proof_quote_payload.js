import { EthAddress } from '@aztec/circuits.js';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { inspect } from 'util';
export class EpochProofQuotePayload {
    constructor(epochToProve, validUntilSlot, bondAmount, prover, basisPointFee) {
        this.epochToProve = epochToProve;
        this.validUntilSlot = validUntilSlot;
        this.bondAmount = bondAmount;
        this.prover = prover;
        this.basisPointFee = basisPointFee;
    }
    static getFields(fields) {
        return [
            fields.epochToProve,
            fields.validUntilSlot,
            fields.bondAmount,
            fields.prover,
            fields.basisPointFee,
        ];
    }
    toBuffer() {
        // We cache the buffer to avoid recalculating it
        if (this.asBuffer) {
            return this.asBuffer;
        }
        this.asBuffer = serializeToBuffer(...EpochProofQuotePayload.getFields(this));
        this.size = this.asBuffer.length;
        return this.asBuffer;
    }
    static fromBuffer(buf) {
        const reader = BufferReader.asReader(buf);
        return new EpochProofQuotePayload(reader.readUInt256(), reader.readUInt256(), reader.readUInt256(), reader.readObject(EthAddress), reader.readNumber());
    }
    static from(fields) {
        return new EpochProofQuotePayload(fields.epochToProve, fields.validUntilSlot, fields.bondAmount, fields.prover, fields.basisPointFee);
    }
    toJSON() {
        return {
            epochToProve: this.epochToProve.toString(),
            validUntilSlot: this.validUntilSlot.toString(),
            bondAmount: this.bondAmount.toString(),
            prover: this.prover.toString(),
            basisPointFee: this.basisPointFee,
        };
    }
    static fromJSON(obj) {
        return new EpochProofQuotePayload(BigInt(obj.epochToProve), BigInt(obj.validUntilSlot), BigInt(obj.bondAmount), EthAddress.fromString(obj.prover), obj.basisPointFee);
    }
    toViemArgs() {
        return {
            epochToProve: this.epochToProve,
            validUntilSlot: this.validUntilSlot,
            bondAmount: this.bondAmount,
            prover: this.prover.toString(),
            basisPointFee: this.basisPointFee,
        };
    }
    getSize() {
        // We cache size to avoid recalculating it
        if (this.size) {
            return this.size;
        }
        // Size is cached when calling toBuffer
        this.toBuffer();
        return this.size;
    }
    [inspect.custom]() {
        return `EpochProofQuotePayload { epochToProve: ${this.epochToProve}, validUntilSlot: ${this.validUntilSlot}, bondAmount: ${this.bondAmount}, prover: ${this.prover}, basisPointFee: ${this.basisPointFee} }`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXBvY2hfcHJvb2ZfcXVvdGVfcGF5bG9hZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wcm92ZXJfY29vcmRpbmF0aW9uL2Vwb2NoX3Byb29mX3F1b3RlX3BheWxvYWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUc5RSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRS9CLE1BQU0sT0FBTyxzQkFBc0I7SUFLakMsWUFDa0IsWUFBb0IsRUFDcEIsY0FBc0IsRUFDdEIsVUFBa0IsRUFDbEIsTUFBa0IsRUFDbEIsYUFBcUI7UUFKckIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFDcEIsbUJBQWMsR0FBZCxjQUFjLENBQVE7UUFDdEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUNsQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ2xCLGtCQUFhLEdBQWIsYUFBYSxDQUFRO0lBQ3BDLENBQUM7SUFFSixNQUFNLENBQUMsU0FBUyxDQUFDLE1BQXdDO1FBQ3ZELE9BQU87WUFDTCxNQUFNLENBQUMsWUFBWTtZQUNuQixNQUFNLENBQUMsY0FBYztZQUNyQixNQUFNLENBQUMsVUFBVTtZQUNqQixNQUFNLENBQUMsTUFBTTtZQUNiLE1BQU0sQ0FBQyxhQUFhO1NBQ1osQ0FBQztJQUNiLENBQUM7SUFFRCxRQUFRO1FBQ04sZ0RBQWdEO1FBQ2hELElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2xCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN2QixDQUFDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFDakMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQTBCO1FBQzFDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUMsT0FBTyxJQUFJLHNCQUFzQixDQUMvQixNQUFNLENBQUMsV0FBVyxFQUFFLEVBQ3BCLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFDcEIsTUFBTSxDQUFDLFdBQVcsRUFBRSxFQUNwQixNQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUM3QixNQUFNLENBQUMsVUFBVSxFQUFFLENBQ3BCLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUF3QztRQUNsRCxPQUFPLElBQUksc0JBQXNCLENBQy9CLE1BQU0sQ0FBQyxZQUFZLEVBQ25CLE1BQU0sQ0FBQyxjQUFjLEVBQ3JCLE1BQU0sQ0FBQyxVQUFVLEVBQ2pCLE1BQU0sQ0FBQyxNQUFNLEVBQ2IsTUFBTSxDQUFDLGFBQWEsQ0FDckIsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTztZQUNMLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRTtZQUMxQyxjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUU7WUFDOUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFO1lBQ3RDLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUM5QixhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7U0FDbEMsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQVE7UUFDdEIsT0FBTyxJQUFJLHNCQUFzQixDQUMvQixNQUFNLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUN4QixNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUMxQixNQUFNLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxFQUN0QixVQUFVLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFDakMsR0FBRyxDQUFDLGFBQWEsQ0FDbEIsQ0FBQztJQUNKLENBQUM7SUFFRCxVQUFVO1FBT1IsT0FBTztZQUNMLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTtZQUMvQixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7WUFDbkMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUM5QixhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWE7U0FDbEMsQ0FBQztJQUNKLENBQUM7SUFFRCxPQUFPO1FBQ0wsMENBQTBDO1FBQzFDLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ25CLENBQUM7UUFDRCx1Q0FBdUM7UUFDdkMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLElBQUssQ0FBQztJQUNwQixDQUFDO0lBRUQsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQ2QsT0FBTywwQ0FBMEMsSUFBSSxDQUFDLFlBQVkscUJBQXFCLElBQUksQ0FBQyxjQUFjLGlCQUFpQixJQUFJLENBQUMsVUFBVSxhQUFhLElBQUksQ0FBQyxNQUFNLG9CQUFvQixJQUFJLENBQUMsYUFBYSxJQUFJLENBQUM7SUFDL00sQ0FBQztDQUNGIn0=