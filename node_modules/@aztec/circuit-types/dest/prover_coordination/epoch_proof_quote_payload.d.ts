/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { EthAddress } from '@aztec/circuits.js';
import { BufferReader } from '@aztec/foundation/serialize';
import { type FieldsOf } from '@aztec/foundation/types';
import { inspect } from 'util';
export declare class EpochProofQuotePayload {
    readonly epochToProve: bigint;
    readonly validUntilSlot: bigint;
    readonly bondAmount: bigint;
    readonly prover: EthAddress;
    readonly basisPointFee: number;
    private asBuffer;
    private size;
    constructor(epochToProve: bigint, validUntilSlot: bigint, bondAmount: bigint, prover: EthAddress, basisPointFee: number);
    static getFields(fields: FieldsOf<EpochProofQuotePayload>): readonly [bigint, bigint, bigint, EthAddress, number];
    toBuffer(): Buffer;
    static fromBuffer(buf: Buffer | BufferReader): EpochProofQuotePayload;
    static from(fields: FieldsOf<EpochProofQuotePayload>): EpochProofQuotePayload;
    toJSON(): {
        epochToProve: string;
        validUntilSlot: string;
        bondAmount: string;
        prover: `0x${string}`;
        basisPointFee: number;
    };
    static fromJSON(obj: any): EpochProofQuotePayload;
    toViemArgs(): {
        epochToProve: bigint;
        validUntilSlot: bigint;
        bondAmount: bigint;
        prover: `0x${string}`;
        basisPointFee: number;
    };
    getSize(): number;
    [inspect.custom](): string;
}
//# sourceMappingURL=epoch_proof_quote_payload.d.ts.map