import { Body } from '@aztec/circuit-types';
import { AppendOnlyTreeSnapshot, Header, STRING_ENCODING } from '@aztec/circuits.js';
import { sha256, sha256ToField } from '@aztec/foundation/crypto';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { makeAppendOnlyTreeSnapshot, makeHeader } from './l2_block_code_to_purge.js';
/**
 * The data that makes up the rollup proof, with encoder decoder functions.
 */
export class L2Block {
    constructor(
    /** Snapshot of archive tree after the block is applied. */
    archive, 
    /** L2 block header. */
    header, 
    /** L2 block body. */
    body) {
        this.archive = archive;
        this.header = header;
        this.body = body;
    }
    /**
     * Deserializes a block from a buffer
     * @returns A deserialized L2 block.
     */
    static fromBuffer(buf) {
        const reader = BufferReader.asReader(buf);
        const header = reader.readObject(Header);
        const archive = reader.readObject(AppendOnlyTreeSnapshot);
        const body = reader.readObject(Body);
        return new L2Block(archive, header, body);
    }
    /**
     * Serializes a block
     * @returns A serialized L2 block as a Buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.header, this.archive, this.body);
    }
    /**
     * Deserializes L2 block from a buffer.
     * @param str - A serialized L2 block.
     * @returns Deserialized L2 block.
     */
    static fromString(str) {
        return L2Block.fromBuffer(Buffer.from(str, STRING_ENCODING));
    }
    /**
     * Serializes a block to a string.
     * @returns A serialized L2 block as a string.
     */
    toString() {
        return this.toBuffer().toString(STRING_ENCODING);
    }
    /**
     * Creates an L2 block containing random data.
     * @param l2BlockNum - The number of the L2 block.
     * @param txsPerBlock - The number of transactions to include in the block.
     * @param numPrivateCallsPerTx - The number of private function calls to include in each transaction.
     * @param numPublicCallsPerTx - The number of public function calls to include in each transaction.
     * @param numEncryptedLogsPerCall - The number of encrypted logs per 1 private function invocation.
     * @param numUnencryptedLogsPerCall - The number of unencrypted logs per 1 public function invocation.
     * @param inHash - The hash of the L1 to L2 messages subtree which got inserted in this block.
     * @returns The L2 block.
     */
    static random(l2BlockNum, txsPerBlock = 4, numPrivateCallsPerTx = 2, numPublicCallsPerTx = 3, numEncryptedLogsPerCall = 2, numUnencryptedLogsPerCall = 1, inHash = undefined, slotNumber = undefined) {
        const body = Body.random(txsPerBlock, numPrivateCallsPerTx, numPublicCallsPerTx, numEncryptedLogsPerCall, numUnencryptedLogsPerCall);
        const txsEffectsHash = body.getTxsEffectsHash();
        return new L2Block(makeAppendOnlyTreeSnapshot(l2BlockNum + 1), makeHeader(0, l2BlockNum, slotNumber ?? l2BlockNum, txsEffectsHash, inHash), body);
    }
    /**
     * Creates an L2 block containing empty data.
     * @returns The L2 block.
     */
    static empty() {
        return new L2Block(AppendOnlyTreeSnapshot.zero(), Header.empty(), Body.empty());
    }
    get number() {
        return Number(this.header.globalVariables.blockNumber.toBigInt());
    }
    /**
     * Returns the block's hash (hash of block header).
     * @returns The block's hash.
     */
    hash() {
        return this.header.hash();
    }
    /**
     * Computes the public inputs hash for the L2 block.
     * The same output as the hash of RootRollupPublicInputs.
     * @returns The public input hash for the L2 block as a field element.
     */
    // TODO(#4844)
    getPublicInputsHash() {
        const preimage = [
            this.header.globalVariables,
            AppendOnlyTreeSnapshot.zero(), // this.startNoteHashTreeSnapshot / commitments,
            AppendOnlyTreeSnapshot.zero(), // this.startNullifierTreeSnapshot,
            AppendOnlyTreeSnapshot.zero(), // this.startPublicDataTreeSnapshot,
            AppendOnlyTreeSnapshot.zero(), // this.startL1ToL2MessageTreeSnapshot,
            this.header.lastArchive,
            this.header.state.partial.noteHashTree,
            this.header.state.partial.nullifierTree,
            this.header.state.partial.publicDataTree,
            this.header.state.l1ToL2MessageTree,
            this.archive,
            this.body.getTxsEffectsHash(),
        ];
        return sha256ToField(preimage);
    }
    /**
     * Computes the start state hash (should equal contract data before block).
     * @returns The start state hash for the L2 block.
     */
    // TODO(#4844)
    getStartStateHash() {
        const inputValue = serializeToBuffer(new Fr(Number(this.header.globalVariables.blockNumber.toBigInt()) - 1), AppendOnlyTreeSnapshot.zero(), // this.startNoteHashTreeSnapshot,
        AppendOnlyTreeSnapshot.zero(), // this.startNullifierTreeSnapshot,
        AppendOnlyTreeSnapshot.zero(), // this.startPublicDataTreeSnapshot,
        AppendOnlyTreeSnapshot.zero(), // this.startL1ToL2MessageTreeSnapshot,
        this.header.lastArchive);
        return sha256(inputValue);
    }
    /**
     * Computes the end state hash (should equal contract data after block).
     * @returns The end state hash for the L2 block.
     */
    // TODO(#4844)
    getEndStateHash() {
        const inputValue = serializeToBuffer(this.header.globalVariables.blockNumber, this.header.state.partial.noteHashTree, this.header.state.partial.nullifierTree, this.header.state.partial.publicDataTree, this.header.state.l1ToL2MessageTree, this.archive);
        return sha256(inputValue);
    }
    /**
     * Returns stats used for logging.
     * @returns Stats on tx count, number, and log size and count.
     */
    getStats() {
        const logsStats = {
            noteEncryptedLogLength: this.body.txEffects.reduce((logCount, txEffect) => logCount + txEffect.noteEncryptedLogs.getSerializedLength(), 0),
            noteEncryptedLogCount: this.body.txEffects.reduce((logCount, txEffect) => logCount + txEffect.noteEncryptedLogs.getTotalLogCount(), 0),
            encryptedLogLength: this.body.txEffects.reduce((logCount, txEffect) => logCount + txEffect.encryptedLogs.getSerializedLength(), 0),
            encryptedLogCount: this.body.txEffects.reduce((logCount, txEffect) => logCount + txEffect.encryptedLogs.getTotalLogCount(), 0),
            unencryptedLogCount: this.body.txEffects.reduce((logCount, txEffect) => logCount + txEffect.unencryptedLogs.getTotalLogCount(), 0),
            unencryptedLogSize: this.body.txEffects.reduce((logCount, txEffect) => logCount + txEffect.unencryptedLogs.getSerializedLength(), 0),
        };
        return {
            txCount: this.body.txEffects.length,
            blockNumber: this.number,
            blockTimestamp: this.header.globalVariables.timestamp.toNumber(),
            ...logsStats,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDJfYmxvY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbDJfYmxvY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckYsT0FBTyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTlFLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxVQUFVLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVyRjs7R0FFRztBQUNILE1BQU0sT0FBTyxPQUFPO0lBQ2xCO0lBQ0UsMkRBQTJEO0lBQ3BELE9BQStCO0lBQ3RDLHVCQUF1QjtJQUNoQixNQUFjO0lBQ3JCLHFCQUFxQjtJQUNkLElBQVU7UUFKVixZQUFPLEdBQVAsT0FBTyxDQUF3QjtRQUUvQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBRWQsU0FBSSxHQUFKLElBQUksQ0FBTTtJQUNoQixDQUFDO0lBRUo7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUEwQjtRQUMxQyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1FBQzFELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFckMsT0FBTyxJQUFJ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