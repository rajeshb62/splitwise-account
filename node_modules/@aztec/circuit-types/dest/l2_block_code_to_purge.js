import { AppendOnlyTreeSnapshot, AztecAddress, ContentCommitment, EthAddress, Fr, GasFees, GlobalVariables, Header, NUM_BYTES_PER_SHA256, PartialStateReference, StateReference, } from '@aztec/circuits.js';
import { fr } from '@aztec/circuits.js/testing';
import { toBufferBE } from '@aztec/foundation/bigint-buffer';
/**
 * Makes header.
 */
export function makeHeader(seed = 0, blockNumber = undefined, slotNumber = undefined, txsEffectsHash = undefined, inHash = undefined) {
    return new Header(makeAppendOnlyTreeSnapshot(seed + 0x100), makeContentCommitment(seed + 0x200, txsEffectsHash, inHash), makeStateReference(seed + 0x600), makeGlobalVariables((seed += 0x700), blockNumber, slotNumber ?? blockNumber), fr(seed + 0x800));
}
/**
 * Makes arbitrary append only tree snapshot.
 * @param seed - The seed to use for generating the append only tree snapshot.
 * @returns An append only tree snapshot.
 */
export function makeAppendOnlyTreeSnapshot(seed = 1) {
    return new AppendOnlyTreeSnapshot(new Fr(seed), seed);
}
/**
 * Makes content commitment
 */
function makeContentCommitment(seed = 0, txsEffectsHash = undefined, inHash = undefined) {
    return new ContentCommitment(new Fr(seed), txsEffectsHash ?? toBufferBE(BigInt(seed + 0x100), NUM_BYTES_PER_SHA256), inHash ?? toBufferBE(BigInt(seed + 0x200), NUM_BYTES_PER_SHA256), toBufferBE(BigInt(seed + 0x300), NUM_BYTES_PER_SHA256));
}
/**
 * Makes arbitrary state reference.
 * @param seed - The seed to use for generating the state reference.
 * @returns A state reference.
 */
function makeStateReference(seed = 0) {
    return new StateReference(makeAppendOnlyTreeSnapshot(seed), makePartialStateReference(seed + 1));
}
/**
 * Makes arbitrary partial state reference.
 * @param seed - The seed to use for generating the partial state reference.
 * @returns A partial state reference.
 */
function makePartialStateReference(seed = 0) {
    return new PartialStateReference(makeAppendOnlyTreeSnapshot(seed), makeAppendOnlyTreeSnapshot(seed + 1), makeAppendOnlyTreeSnapshot(seed + 2));
}
/**
 * Makes global variables.
 * @param seed - The seed to use for generating the global variables.
 * @param blockNumber - The block number to use for generating the global variables.
 * If blockNumber is undefined, it will be set to seed + 2.
 * @returns Global variables.
 */
export function makeGlobalVariables(seed = 1, blockNumber = undefined, slotNumber = undefined) {
    return new GlobalVariables(new Fr(seed), new Fr(seed + 1), new Fr(blockNumber ?? seed + 2), new Fr(slotNumber ?? seed + 3), new Fr(seed + 4), EthAddress.fromField(new Fr(seed + 5)), AztecAddress.fromField(new Fr(seed + 6)), new GasFees(new Fr(seed + 7), new Fr(seed + 8)));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDJfYmxvY2tfY29kZV90b19wdXJnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9sMl9ibG9ja19jb2RlX3RvX3B1cmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxzQkFBc0IsRUFDdEIsWUFBWSxFQUNaLGlCQUFpQixFQUNqQixVQUFVLEVBQ1YsRUFBRSxFQUNGLE9BQU8sRUFDUCxlQUFlLEVBQ2YsTUFBTSxFQUNOLG9CQUFvQixFQUNwQixxQkFBcUIsRUFDckIsY0FBYyxHQUNmLE1BQU0sb0JBQW9CLENBQUM7QUFDNUIsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ2hELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUU3RDs7R0FFRztBQUNILE1BQU0sVUFBVSxVQUFVLENBQ3hCLElBQUksR0FBRyxDQUFDLEVBQ1IsY0FBa0MsU0FBUyxFQUMzQyxhQUFpQyxTQUFTLEVBQzFDLGlCQUFxQyxTQUFTLEVBQzlDLFNBQTZCLFNBQVM7SUFFdEMsT0FBTyxJQUFJLE1BQU0sQ0FDZiwwQkFBMEIsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQ3hDLHFCQUFxQixDQUFDLElBQUksR0FBRyxLQUFLLEVBQUUsY0FBYyxFQUFFLE1BQU0sQ0FBQyxFQUMzRCxrQkFBa0IsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQ2hDLG1CQUFtQixDQUFDLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFLFdBQVcsRUFBRSxVQUFVLElBQUksV0FBVyxDQUFDLEVBQzVFLEVBQUUsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQ2pCLENBQUM7QUFDSixDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSwwQkFBMEIsQ0FBQyxJQUFJLEdBQUcsQ0FBQztJQUNqRCxPQUFPLElBQUksc0JBQXNCLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQUVEOztHQUVHO0FBQ0gsU0FBUyxxQkFBcUIsQ0FDNUIsSUFBSSxHQUFHLENBQUMsRUFDUixpQkFBcUMsU0FBUyxFQUM5QyxTQUE2QixTQUFTO0lBRXRDLE9BQU8sSUFBSSxpQkFBaUIsQ0FDMUIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQ1osY0FBYyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFLG9CQUFvQixDQUFDLEVBQ3hFLE1BQU0sSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsRUFBRSxvQkFBb0IsQ0FBQyxFQUNoRSxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsRUFBRSxvQkFBb0IsQ0FBQyxDQUN2RCxDQUFDO0FBQ0osQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFTLGtCQUFrQixDQUFDLElBQUksR0FBRyxDQUFDO0lBQ2xDLE9BQU8sSUFBSSxjQUFjLENBQUMsMEJBQTBCLENBQUMsSUFBSSxDQUFDLEVBQUUseUJBQXlCLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkcsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFTLHlCQUF5QixDQUFDLElBQUksR0FBRyxDQUFDO0lBQ3pDLE9BQU8sSUFBSSxxQkFBcUIsQ0FDOUIsMEJBQTBCLENBQUMsSUFBSSxDQUFDLEVBQ2hDLDBCQUEwQixDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsRUFDcEMsMEJBQTBCLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUNyQyxDQUFDO0FBQ0osQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxtQkFBbUIsQ0FDakMsSUFBSSxHQUFHLENBQUMsRUFDUixjQUFrQyxTQUFTLEVBQzNDLGFBQWlDLFNBQVM7SUFFMUMsT0FBTyxJQUFJLGVBQWUsQ0FDeEIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQ1osSUFBSSxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUNoQixJQUFJLEVBQUUsQ0FBQyxXQUFXLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUMvQixJQUFJLEVBQUUsQ0FBQyxVQUFVLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUM5QixJQUFJLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQ2hCLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQ3RDLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQ3hDLElBQUksT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FDaEQsQ0FBQztBQUNKLENBQUMifQ==