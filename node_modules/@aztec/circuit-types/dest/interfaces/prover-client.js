var _a, _BlockProofError_name;
import { __classPrivateFieldGet } from "tslib";
import { Fr } from '@aztec/circuits.js';
import { booleanConfigHelper, numberConfigHelper } from '@aztec/foundation/config';
export const proverConfigMappings = {
    nodeUrl: {
        env: 'AZTEC_NODE_URL',
        description: 'The URL to the Aztec node to take proving jobs from',
    },
    realProofs: {
        env: 'PROVER_REAL_PROOFS',
        description: 'Whether to construct real proofs',
        ...booleanConfigHelper(),
    },
    proverAgentEnabled: {
        env: 'PROVER_AGENT_ENABLED',
        description: 'Whether this prover has a local prover agent',
        ...booleanConfigHelper(true),
    },
    proverAgentPollInterval: {
        env: 'PROVER_AGENT_POLL_INTERVAL_MS',
        description: 'The interval agents poll for jobs at',
        ...numberConfigHelper(100),
    },
    proverAgentConcurrency: {
        env: 'PROVER_AGENT_CONCURRENCY',
        description: 'The maximum number of proving jobs to be run in parallel',
        ...numberConfigHelper(1),
    },
    proverJobTimeoutMs: {
        env: 'PROVER_JOB_TIMEOUT_MS',
        description: 'Jobs are retried if not kept alive for this long',
        ...numberConfigHelper(60000),
    },
    proverJobPollIntervalMs: {
        env: 'PROVER_JOB_POLL_INTERVAL_MS',
        description: 'The interval to check job health status',
        ...numberConfigHelper(1000),
    },
    proverId: {
        env: 'PROVER_ID',
        parseEnv: (val) => parseProverId(val),
        description: 'Identifier of the prover',
    },
    proverTestDelayMs: {
        env: 'PROVER_TEST_DELAY_MS',
        description: 'Artificial delay to introduce to all operations to the test prover.',
        ...numberConfigHelper(0),
    },
};
function parseProverId(str) {
    return Fr.fromString(str.startsWith('0x') ? str : Buffer.from(str, 'utf8').toString('hex'));
}
export class BlockProofError extends Error {
    constructor(message, txHashes) {
        super(message);
        this.txHashes = txHashes;
        this.name = __classPrivateFieldGet(_a, _a, "f", _BlockProofError_name);
    }
    static isBlockProofError(err) {
        return err && typeof err === 'object' && err.name === __classPrivateFieldGet(_a, _a, "f", _BlockProofError_name);
    }
}
_a = BlockProofError;
_BlockProofError_name = { value: 'BlockProofError' };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmVyLWNsaWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcmZhY2VzL3Byb3Zlci1jbGllbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDeEMsT0FBTyxFQUEyQixtQkFBbUIsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBOEI1RyxNQUFNLENBQUMsTUFBTSxvQkFBb0IsR0FBcUM7SUFDcEUsT0FBTyxFQUFFO1FBQ1AsR0FBRyxFQUFFLGdCQUFnQjtRQUNyQixXQUFXLEVBQUUscURBQXFEO0tBQ25FO0lBQ0QsVUFBVSxFQUFFO1FBQ1YsR0FBRyxFQUFFLG9CQUFvQjtRQUN6QixXQUFXLEVBQUUsa0NBQWtDO1FBQy9DLEdBQUcsbUJBQW1CLEVBQUU7S0FDekI7SUFDRCxrQkFBa0IsRUFBRTtRQUNsQixHQUFHLEVBQUUsc0JBQXNCO1FBQzNCLFdBQVcsRUFBRSw4Q0FBOEM7UUFDM0QsR0FBRyxtQkFBbUIsQ0FBQyxJQUFJLENBQUM7S0FDN0I7SUFDRCx1QkFBdUIsRUFBRTtRQUN2QixHQUFHLEVBQUUsK0JBQStCO1FBQ3BDLFdBQVcsRUFBRSxzQ0FBc0M7UUFDbkQsR0FBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUM7S0FDM0I7SUFDRCxzQkFBc0IsRUFBRTtRQUN0QixHQUFHLEVBQUUsMEJBQTBCO1FBQy9CLFdBQVcsRUFBRSwwREFBMEQ7UUFDdkUsR0FBRyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7S0FDekI7SUFDRCxrQkFBa0IsRUFBRTtRQUNsQixHQUFHLEVBQUUsdUJBQXVCO1FBQzVCLFdBQVcsRUFBRSxrREFBa0Q7UUFDL0QsR0FBRyxrQkFBa0IsQ0FBQyxLQUFNLENBQUM7S0FDOUI7SUFDRCx1QkFBdUIsRUFBRTtRQUN2QixHQUFHLEVBQUUsNkJBQTZCO1FBQ2xDLFdBQVcsRUFBRSx5Q0FBeUM7UUFDdEQsR0FBRyxrQkFBa0IsQ0FBQyxJQUFLLENBQUM7S0FDN0I7SUFDRCxRQUFRLEVBQUU7UUFDUixHQUFHLEVBQUUsV0FBVztRQUNoQixRQUFRLEVBQUUsQ0FBQyxHQUFXLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUM7UUFDN0MsV0FBVyxFQUFFLDBCQUEwQjtLQUN4QztJQUNELGlCQUFpQixFQUFFO1FBQ2pCLEdBQUcsRUFBRSxzQkFBc0I7UUFDM0IsV0FBVyxFQUFFLHFFQUFxRTtRQUNsRixHQUFHLGtCQUFrQixDQUFDLENBQUMsQ0FBQztLQUN6QjtDQUNGLENBQUM7QUFFRixTQUFTLGFBQWEsQ0FBQyxHQUFXO0lBQ2hDLE9BQU8sRUFBRSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQzlGLENBQUM7QUFrQkQsTUFBTSxPQUFPLGVBQWdCLFNBQVEsS0FBSztJQUl4QyxZQUFZLE9BQWUsRUFBa0IsUUFBa0I7UUFDN0QsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRDRCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFGdEQsU0FBSSxHQUFHLHVCQUFBLEVBQWUsaUNBQU0sQ0FBQztJQUl0QyxDQUFDO0lBRUQsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQVE7UUFDL0IsT0FBTyxHQUFHLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLEdBQUcsQ0FBQyxJQUFJLEtBQUssdUJBQUEsRUFBZSxpQ0FBTSxDQUFDO0lBQzlFLENBQUM7OztBQVRNLGlDQUFRLGlCQUFpQixFQUFwQixDQUFxQiJ9