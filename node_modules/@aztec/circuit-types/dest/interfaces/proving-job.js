export function makeProofAndVerificationKey(proof, verificationKey) {
    return { proof, verificationKey };
}
export function makePublicInputsAndRecursiveProof(inputs, proof, verificationKey) {
    const result = {
        inputs,
        proof,
        verificationKey,
    };
    return result;
}
export var ProvingRequestType;
(function (ProvingRequestType) {
    ProvingRequestType[ProvingRequestType["PRIVATE_KERNEL_EMPTY"] = 0] = "PRIVATE_KERNEL_EMPTY";
    ProvingRequestType[ProvingRequestType["PUBLIC_VM"] = 1] = "PUBLIC_VM";
    ProvingRequestType[ProvingRequestType["PUBLIC_KERNEL_INNER"] = 2] = "PUBLIC_KERNEL_INNER";
    ProvingRequestType[ProvingRequestType["PUBLIC_KERNEL_MERGE"] = 3] = "PUBLIC_KERNEL_MERGE";
    ProvingRequestType[ProvingRequestType["PUBLIC_KERNEL_TAIL"] = 4] = "PUBLIC_KERNEL_TAIL";
    ProvingRequestType[ProvingRequestType["BASE_ROLLUP"] = 5] = "BASE_ROLLUP";
    ProvingRequestType[ProvingRequestType["MERGE_ROLLUP"] = 6] = "MERGE_ROLLUP";
    ProvingRequestType[ProvingRequestType["EMPTY_BLOCK_ROOT_ROLLUP"] = 7] = "EMPTY_BLOCK_ROOT_ROLLUP";
    ProvingRequestType[ProvingRequestType["BLOCK_ROOT_ROLLUP"] = 8] = "BLOCK_ROOT_ROLLUP";
    ProvingRequestType[ProvingRequestType["BLOCK_MERGE_ROLLUP"] = 9] = "BLOCK_MERGE_ROLLUP";
    ProvingRequestType[ProvingRequestType["ROOT_ROLLUP"] = 10] = "ROOT_ROLLUP";
    ProvingRequestType[ProvingRequestType["BASE_PARITY"] = 11] = "BASE_PARITY";
    ProvingRequestType[ProvingRequestType["ROOT_PARITY"] = 12] = "ROOT_PARITY";
    // Recursive Client IVC verification to connect private -> public or rollup
    ProvingRequestType[ProvingRequestType["TUBE_PROOF"] = 13] = "TUBE_PROOF";
})(ProvingRequestType || (ProvingRequestType = {}));
export function mapProvingRequestTypeToCircuitName(type) {
    switch (type) {
        case ProvingRequestType.PRIVATE_KERNEL_EMPTY:
            return 'private-kernel-empty';
        case ProvingRequestType.PUBLIC_VM:
            return 'avm-circuit';
        case ProvingRequestType.PUBLIC_KERNEL_INNER:
            return 'public-kernel-inner';
        case ProvingRequestType.PUBLIC_KERNEL_MERGE:
            return 'public-kernel-merge';
        case ProvingRequestType.PUBLIC_KERNEL_TAIL:
            return 'public-kernel-tail';
        case ProvingRequestType.BASE_ROLLUP:
            return 'base-rollup';
        case ProvingRequestType.MERGE_ROLLUP:
            return 'merge-rollup';
        case ProvingRequestType.EMPTY_BLOCK_ROOT_ROLLUP:
            return 'empty-block-root-rollup';
        case ProvingRequestType.BLOCK_ROOT_ROLLUP:
            return 'block-root-rollup';
        case ProvingRequestType.BLOCK_MERGE_ROLLUP:
            return 'block-merge-rollup';
        case ProvingRequestType.ROOT_ROLLUP:
            return 'root-rollup';
        case ProvingRequestType.BASE_PARITY:
            return 'base-parity';
        case ProvingRequestType.ROOT_PARITY:
            return 'root-parity';
        case ProvingRequestType.TUBE_PROOF:
            return 'tube-circuit';
        default:
            throw new Error(`Cannot find circuit name for proving request type: ${type}`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmluZy1qb2IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW50ZXJmYWNlcy9wcm92aW5nLWpvYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFxQ0EsTUFBTSxVQUFVLDJCQUEyQixDQUN6QyxLQUFRLEVBQ1IsZUFBb0M7SUFFcEMsT0FBTyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsQ0FBQztBQUNwQyxDQUFDO0FBUUQsTUFBTSxVQUFVLGlDQUFpQyxDQUMvQyxNQUFTLEVBQ1QsS0FBd0IsRUFDeEIsZUFBb0M7SUFFcEMsTUFBTSxNQUFNLEdBQXdDO1FBQ2xELE1BQU07UUFDTixLQUFLO1FBQ0wsZUFBZTtLQUNoQixDQUFDO0lBQ0YsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQU9ELE1BQU0sQ0FBTixJQUFZLGtCQW1CWDtBQW5CRCxXQUFZLGtCQUFrQjtJQUM1QiwyRkFBb0IsQ0FBQTtJQUNwQixxRUFBUyxDQUFBO0lBRVQseUZBQW1CLENBQUE7SUFDbkIseUZBQW1CLENBQUE7SUFDbkIsdUZBQWtCLENBQUE7SUFFbEIseUVBQVcsQ0FBQTtJQUNYLDJFQUFZLENBQUE7SUFDWixpR0FBdUIsQ0FBQTtJQUN2QixxRkFBaUIsQ0FBQTtJQUNqQix1RkFBa0IsQ0FBQTtJQUNsQiwwRUFBVyxDQUFBO0lBRVgsMEVBQVcsQ0FBQTtJQUNYLDBFQUFXLENBQUE7SUFDWCwyRUFBMkU7SUFDM0Usd0VBQVUsQ0FBQTtBQUNaLENBQUMsRUFuQlcsa0JBQWtCLEtBQWxCLGtCQUFrQixRQW1CN0I7QUFFRCxNQUFNLFVBQVUsa0NBQWtDLENBQUMsSUFBd0I7SUFDekUsUUFBUSxJQUFJLEVBQUUsQ0FBQztRQUNiLEtBQUssa0JBQWtCLENBQUMsb0JBQW9CO1lBQzFDLE9BQU8sc0JBQXNCLENBQUM7UUFDaEMsS0FBSyxrQkFBa0IsQ0FBQyxTQUFTO1lBQy9CLE9BQU8sYUFBYSxDQUFDO1FBQ3ZCLEtBQUssa0JBQWtCLENBQUMsbUJBQW1CO1lBQ3pDLE9BQU8scUJBQXFCLENBQUM7UUFDL0IsS0FBSyxrQkFBa0IsQ0FBQyxtQkFBbUI7WUFDekMsT0FBTyxxQkFBcUIsQ0FBQztRQUMvQixLQUFLLGtCQUFrQixDQUFDLGtCQUFrQjtZQUN4QyxPQUFPLG9CQUFvQixDQUFDO1FBQzlCLEtBQUssa0JBQWtCLENBQUMsV0FBVztZQUNqQyxPQUFPLGFBQWEsQ0FBQztRQUN2QixLQUFLLGtCQUFrQixDQUFDLFlBQVk7WUFDbEMsT0FBTyxjQUFjLENBQUM7UUFDeEIsS0FBSyxrQkFBa0IsQ0FBQyx1QkFBdUI7WUFDN0MsT0FBTyx5QkFBeUIsQ0FBQztRQUNuQyxLQUFLLGtCQUFrQixDQUFDLGlCQUFpQjtZQUN2QyxPQUFPLG1CQUFtQixDQUFDO1FBQzdCLEtBQUssa0JBQWtCLENBQUMsa0JBQWtCO1lBQ3hDLE9BQU8sb0JBQW9CLENBQUM7UUFDOUIsS0FBSyxrQkFBa0IsQ0FBQyxXQUFXO1lBQ2pDLE9BQU8sYUFBYSxDQUFDO1FBQ3ZCLEtBQUssa0JBQWtCLENBQUMsV0FBVztZQUNqQyxPQUFPLGFBQWEsQ0FBQztRQUN2QixLQUFLLGtCQUFrQixDQUFDLFdBQVc7WUFDakMsT0FBTyxhQUFhLENBQUM7UUFDdkIsS0FBSyxrQkFBa0IsQ0FBQyxVQUFVO1lBQ2hDLE9BQU8sY0FBYyxDQUFDO1FBQ3hCO1lBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyxzREFBc0QsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNsRixDQUFDO0FBQ0gsQ0FBQyJ9