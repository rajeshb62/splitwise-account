/**
 * Checks if a call stack is unresolved.
 */
export function isNoirCallStackUnresolved(callStack) {
    return typeof callStack[0] === 'string';
}
/**
 * An error during the simulation of a function call.
 */
export class SimulationError extends Error {
    constructor(originalMessage, functionErrorStack, noirErrorStack, options) {
        super(originalMessage, options);
        this.originalMessage = originalMessage;
        this.functionErrorStack = functionErrorStack;
        this.noirErrorStack = noirErrorStack;
        const getMessage = () => this.getMessage();
        const getStack = () => this.getStack();
        Object.defineProperties(this, {
            message: {
                configurable: false,
                enumerable: true,
                /**
                 * Getter for the custom error message. It has to be defined here because JS errors have the message property defined
                 * in the error itself, not its prototype. Thus if we define it as a class getter will be shadowed.
                 * @returns The message.
                 */
                get() {
                    return getMessage();
                },
            },
            stack: {
                configurable: false,
                enumerable: true,
                /**
                 * Getter for the custom error stack. It has to be defined here due to the same issue as the message.
                 * @returns The stack.
                 */
                get() {
                    return getStack();
                },
                /**
                 * We need a setter to avoid the error "TypeError: Cannot set property stack of #<SimulationError> which has only a getter"
                 * whenever we are traversing a nested error chain. However, we don't want to allow setting the stack, since the simulation
                 * error is always gonna be the root of the error chain.
                 * @param value
                 */
                set(_) { },
            },
        });
    }
    getMessage() {
        if (this.noirErrorStack && !isNoirCallStackUnresolved(this.noirErrorStack) && this.noirErrorStack.length) {
            return `${this.originalMessage} '${this.noirErrorStack[this.noirErrorStack.length - 1].locationText}'`;
        }
        return this.originalMessage;
    }
    getOriginalMessage() {
        return this.originalMessage;
    }
    setOriginalMessage(message) {
        this.originalMessage = message;
    }
    /**
     * Enriches the error with the name of a contract that failed.
     * @param contractAddress - The address of the contract
     * @param contractName - The corresponding name
     */
    enrichWithContractName(contractAddress, contractName) {
        this.functionErrorStack.forEach(failingFunction => {
            if (failingFunction.contractAddress.equals(contractAddress)) {
                failingFunction.contractName = contractName;
            }
        });
    }
    /**
     * Enriches the error with the name of a function that failed.
     * @param contractAddress - The address of the contract
     * @param functionSelector - The selector of the function
     * @param functionName - The corresponding name
     */
    enrichWithFunctionName(contractAddress, functionSelector, functionName) {
        this.functionErrorStack.forEach(failingFunction => {
            if (failingFunction.contractAddress.equals(contractAddress) &&
                failingFunction.functionSelector.equals(functionSelector)) {
                failingFunction.functionName = functionName;
            }
        });
    }
    getStack() {
        const functionCallStack = this.getCallStack();
        const noirCallStack = this.getNoirCallStack();
        // Try to resolve the contract and function names of the stack of failing functions.
        const stackLines = [
            ...functionCallStack.map(failingFunction => {
                return `at ${failingFunction.contractName ?? failingFunction.contractAddress.toString()}.${failingFunction.functionName ?? failingFunction.functionSelector.toString()}`;
            }),
            ...noirCallStack.map(errorLocation => typeof errorLocation === 'string'
                ? `at opcode ${errorLocation}`
                : `at ${errorLocation.locationText} (${errorLocation.filePath}:${errorLocation.line}:${errorLocation.column})`),
        ];
        return [`Simulation error: ${this.message}`, ...stackLines.reverse()].join('\n');
    }
    /**
     * The aztec function stack that failed during simulation.
     */
    getCallStack() {
        return this.functionErrorStack;
    }
    /**
     * Returns the noir call stack inside the first function that failed during simulation.
     * @returns The noir call stack.
     */
    getNoirCallStack() {
        return this.noirErrorStack || [];
    }
    /**
     * Sets the noir call stack.
     * @param callStack - The noir call stack.
     */
    setNoirCallStack(callStack) {
        this.noirErrorStack = callStack;
    }
    toJSON() {
        return {
            originalMessage: this.originalMessage,
            functionErrorStack: this.functionErrorStack,
            noirErrorStack: this.noirErrorStack,
        };
    }
    static fromJSON(obj) {
        return new SimulationError(obj.originalMessage, obj.functionErrorStack, obj.noirErrorStack);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltdWxhdGlvbl9lcnJvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9zaW11bGF0aW9uX2Vycm9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXdEQTs7R0FFRztBQUNILE1BQU0sVUFBVSx5QkFBeUIsQ0FBQyxTQUF3QjtJQUNoRSxPQUFPLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUMxQyxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxLQUFLO0lBQ3hDLFlBQ1UsZUFBdUIsRUFDdkIsa0JBQXFDLEVBQ3JDLGNBQThCLEVBQ3RDLE9BQXNCO1FBRXRCLEtBQUssQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFMeEIsb0JBQWUsR0FBZixlQUFlLENBQVE7UUFDdkIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFtQjtRQUNyQyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFJdEMsTUFBTSxVQUFVLEdBQUcsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzNDLE1BQU0sUUFBUSxHQUFHLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN2QyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFO1lBQzVCLE9BQU8sRUFBRTtnQkFDUCxZQUFZLEVBQUUsS0FBSztnQkFDbkIsVUFBVSxFQUFFLElBQUk7Z0JBQ2hCOzs7O21CQUlHO2dCQUNILEdBQUc7b0JBQ0QsT0FBTyxVQUFVLEVBQUUsQ0FBQztnQkFDdEIsQ0FBQzthQUNGO1lBQ0QsS0FBSyxFQUFFO2dCQUNMLFlBQVksRUFBRSxLQUFLO2dCQUNuQixVQUFVLEVBQUUsSUFBSTtnQkFDaEI7OzttQkFHRztnQkFDSCxHQUFHO29CQUNELE9BQU8sUUFBUSxFQUFFLENBQUM7Z0JBQ3BCLENBQUM7Z0JBQ0Q7Ozs7O21CQUtHO2dCQUNILEdBQUcsQ0FBQyxDQUFx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