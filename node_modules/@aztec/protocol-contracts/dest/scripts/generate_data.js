import { CANONICAL_AUTH_REGISTRY_ADDRESS, DEPLOYER_CONTRACT_ADDRESS, FEE_JUICE_ADDRESS, Fr, MULTI_CALL_ENTRYPOINT_ADDRESS, REGISTERER_CONTRACT_ADDRESS, ROUTER_ADDRESS, getContractInstanceFromDeployParams, } from '@aztec/circuits.js';
import { createConsoleLogger } from '@aztec/foundation/log';
import { loadContractArtifact } from '@aztec/types/abi';
import fs from 'fs/promises';
import path from 'path';
import { buildProtocolContractTree } from '../build_protocol_contract_tree.js';
const log = createConsoleLogger('aztec:autogenerate');
const noirContractsRoot = '../../noir-projects/noir-contracts';
const srcPath = path.join(noirContractsRoot, './target');
const destArtifactsDir = './artifacts';
const outputFilePath = './src/protocol_contract_data.ts';
const salt = new Fr(1);
const contractAddressMapping = {
    AuthRegistry: CANONICAL_AUTH_REGISTRY_ADDRESS,
    ContractInstanceDeployer: DEPLOYER_CONTRACT_ADDRESS,
    ContractClassRegisterer: REGISTERER_CONTRACT_ADDRESS,
    MultiCallEntrypoint: MULTI_CALL_ENTRYPOINT_ADDRESS,
    FeeJuice: FEE_JUICE_ADDRESS,
    Router: ROUTER_ADDRESS,
};
async function clearDestDir() {
    try {
        await fs.access(destArtifactsDir);
        // If the directory exists, remove it recursively.
        await fs.rm(destArtifactsDir, { recursive: true, force: true });
    }
    catch (err) {
        if (err.code === 'ENOENT') {
            // If the directory does not exist, do nothing.
        }
        else {
            log(`Error removing dest directory: ${err}`);
        }
    }
    await fs.mkdir(destArtifactsDir, { recursive: true });
}
function getPrivateFunctionNames(artifact) {
    return artifact.functions.filter(fn => fn.custom_attributes.includes('private')).map(fn => fn.name);
}
async function copyArtifact(srcName, destName) {
    const src = path.join(srcPath, `${srcName}.json`);
    const artifact = JSON.parse(await fs.readFile(src, 'utf8'));
    const dest = path.join(destArtifactsDir, `${destName}.json`);
    await fs.copyFile(src, dest);
    return artifact;
}
async function copyVks(srcName, destName, fnNames) {
    const deskVksDir = path.join(destArtifactsDir, 'keys', destName);
    await fs.mkdir(deskVksDir, { recursive: true });
    for (const fnName of fnNames) {
        const src = path.join(srcPath, 'keys', `${srcName}-${fnName}.vk.data.json`);
        const dest = path.join(deskVksDir, `${fnName}.vk.data.json`);
        await fs.copyFile(src, dest);
    }
}
function computeContractLeaf(artifact) {
    const instance = getContractInstanceFromDeployParams(loadContractArtifact(artifact), { salt });
    return instance.address;
}
function computeRoot(names, leaves) {
    const data = names.map((name, i) => ({ address: new Fr(contractAddressMapping[name]), leaf: leaves[i] }));
    const tree = buildProtocolContractTree(data);
    return Fr.fromBuffer(tree.root);
}
async function generateDeclarationFile(destName) {
    const content = `
    import { type NoirCompiledContract } from '@aztec/types/noir';
    const circuit: NoirCompiledContract;
    export = circuit;
  `;
    await fs.writeFile(path.join(destArtifactsDir, `${destName}.d.json.ts`), content);
}
function generateNames(names) {
    return `
    export const protocolContractNames = [
      ${names.map(name => `'${name}'`).join(',\n')}
    ] as const;

    export type ProtocolContractName = typeof protocolContractNames[number];
  `;
}
function generateArtifacts(names) {
    const imports = names
        .map(name => {
        return `
      import ${name}Json from '../artifacts/${name}.json' assert { type: 'json' };
    `;
    })
        .join('\n');
    const exports = names.map(name => `${name}: loadContractArtifact(${name}Json as NoirCompiledContract)`).join(',\n');
    return `
    ${imports}

    export const ProtocolContractArtifact: Record<ProtocolContractName, ContractArtifact> = {
      ${exports}
    };
  `;
}
function generateSalts(names) {
    return `
    export const ProtocolContractSalt: Record<ProtocolContractName, Fr> = {
      ${names.map(name => `${name}: new Fr(${salt.toNumber()})`).join(',\n')}
    };
  `;
}
function generateContractAddresses(names) {
    const addresses = names.map(name => `${name}: AztecAddress.fromBigInt(${contractAddressMapping[name]}n)`).join(',\n');
    return `
    export const ProtocolContractAddress: Record<ProtocolContractName, AztecAddress> = {
      ${addresses}
    };
  `;
}
function generateContractLeaves(names, leaves) {
    return `
    export const ProtocolContractLeaf = {
      ${leaves.map((leaf, i) => `${names[i]}: Fr.fromString('${leaf.toString()}')`).join(',\n')}
    };
  `;
}
function generateRoot(names, leaves) {
    const root = computeRoot(names, leaves);
    return `
    export const protocolContractTreeRoot = Fr.fromString('${root.toString()}');
  `;
}
async function generateOutputFile(names, leaves) {
    const content = `
    // GENERATED FILE - DO NOT EDIT. RUN \`yarn generate\` or \`yarn generate:data\`
    import { AztecAddress, Fr } from '@aztec/circuits.js';
    import { type ContractArtifact } from '@aztec/foundation/abi';
    import { loadContractArtifact } from '@aztec/types/abi';
    import { type NoirCompiledContract } from '@aztec/types/noir';

    ${generateNames(names)}

    ${generateArtifacts(names)}

    ${generateSalts(names)}

    ${generateContractAddresses(names)}

    ${generateContractLeaves(names, leaves)}

    ${generateRoot(names, leaves)}
  `;
    await fs.writeFile(outputFilePath, content);
}
async function main() {
    await clearDestDir();
    const srcNames = JSON.parse(await fs.readFile(path.join(noirContractsRoot, 'protocol_contracts.json'), 'utf8'));
    const leaves = [];
    const destNames = srcNames.map(n => n.split('-')[1]);
    for (let i = 0; i < srcNames.length; i++) {
        const srcName = srcNames[i];
        const destName = destNames[i];
        const artifact = await copyArtifact(srcName, destName);
        const fnNames = getPrivateFunctionNames(artifact);
        await copyVks(srcName, destName, fnNames);
        await generateDeclarationFile(destName);
        leaves.push(computeContractLeaf(artifact));
    }
    await generateOutputFile(destNames, leaves);
}
try {
    await main();
}
catch (err) {
    log(`Error copying protocol contract artifacts: ${err}`);
    process.exit(1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zY3JpcHRzL2dlbmVyYXRlX2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLCtCQUErQixFQUMvQix5QkFBeUIsRUFDekIsaUJBQWlCLEVBQ2pCLEVBQUUsRUFDRiw2QkFBNkIsRUFDN0IsMkJBQTJCLEVBQzNCLGNBQWMsRUFDZCxtQ0FBbUMsR0FDcEMsTUFBTSxvQkFBb0IsQ0FBQztBQUM1QixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUd4RCxPQUFPLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDN0IsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRXhCLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRS9FLE1BQU0sR0FBRyxHQUFHLG1CQUFtQixDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFFdEQsTUFBTSxpQkFBaUIsR0FBRyxvQ0FBb0MsQ0FBQztBQUMvRCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3pELE1BQU0sZ0JBQWdCLEdBQUcsYUFBYSxDQUFDO0FBQ3ZDLE1BQU0sY0FBYyxHQUFHLGlDQUFpQyxDQUFDO0FBRXpELE1BQU0sSUFBSSxHQUFHLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXZCLE1BQU0sc0JBQXNCLEdBQStCO0lBQ3pELFlBQVksRUFBRSwrQkFBK0I7SUFDN0Msd0JBQXdCLEVBQUUseUJBQXlCO0lBQ25ELHVCQUF1QixFQUFFLDJCQUEyQjtJQUNwRCxtQkFBbUIsRUFBRSw2QkFBNkI7SUFDbEQsUUFBUSxFQUFFLGlCQUFpQjtJQUMzQixNQUFNLEVBQUUsY0FBYztDQUN2QixDQUFD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