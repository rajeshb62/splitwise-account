/**
 * Rollup ABI.
 */
export declare const RollupAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_fpcJuicePortal";
        readonly type: "address";
        readonly internalType: "contract IFeeJuicePortal";
    }, {
        readonly name: "_vkTreeRoot";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "_protocolContractTreeRoot";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "_ares";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "_validators";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "CLAIM_DURATION_IN_L2_SLOTS";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "EPOCH_DURATION";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "FEE_JUICE_PORTAL";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IFeeJuicePortal";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "GENESIS_TIME";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "INBOX";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IInbox";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "L1_BLOCK_AT_GENESIS";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "OUTBOX";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IOutbox";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "PROOF_COMMITMENT_ESCROW";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IProofCommitmentEscrow";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "PROOF_COMMITMENT_MIN_BOND_AMOUNT_IN_TST";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "SLOT_DURATION";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "TARGET_COMMITTEE_SIZE";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "VERSION";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "addValidator";
    readonly inputs: readonly [{
        readonly name: "_validator";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "archive";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "archiveAt";
    readonly inputs: readonly [{
        readonly name: "_blockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "blocks";
    readonly inputs: readonly [{
        readonly name: "blockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "archive";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "blockHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "slotNumber";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "canProposeAtTime";
    readonly inputs: readonly [{
        readonly name: "_ts";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "_archive";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }, {
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "canPrune";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "claimEpochProofRight";
    readonly inputs: readonly [{
        readonly name: "_quote";
        readonly type: "tuple";
        readonly internalType: "struct EpochProofQuoteLib.SignedEpochProofQuote";
        readonly components: readonly [{
            readonly name: "quote";
            readonly type: "tuple";
            readonly internalType: "struct EpochProofQuoteLib.EpochProofQuote";
            readonly components: readonly [{
                readonly name: "epochToProve";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "validUntilSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "bondAmount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "basisPointFee";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly name: "signature";
            readonly type: "tuple";
            readonly internalType: "struct SignatureLib.Signature";
            readonly components: readonly [{
                readonly name: "isEmpty";
                readonly type: "bool";
                readonly internalType: "bool";
            }, {
                readonly name: "v";
                readonly type: "uint8";
                readonly internalType: "uint8";
            }, {
                readonly name: "r";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "s";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "computeTxsEffectsHash";
    readonly inputs: readonly [{
        readonly name: "_body";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "eip712Domain";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "fields";
        readonly type: "bytes1";
        readonly internalType: "bytes1";
    }, {
        readonly name: "name";
        readonly type: "string";
        readonly internalType: "string";
    }, {
        readonly name: "version";
        readonly type: "string";
        readonly internalType: "string";
    }, {
        readonly name: "chainId";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "verifyingContract";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "salt";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "extensions";
        readonly type: "uint256[]";
        readonly internalType: "uint256[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "epochProofVerifier";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IVerifier";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "epochs";
    readonly inputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly outputs: readonly [{
        readonly name: "sampleSeed";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "nextSeed";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getClaimableEpoch";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getCurrentEpoch";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getCurrentEpochCommittee";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getCurrentProposer";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getCurrentSlot";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getEpochAt";
    readonly inputs: readonly [{
        readonly name: "_ts";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getEpochAtSlot";
    readonly inputs: readonly [{
        readonly name: "_slotNumber";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly stateMutability: "pure";
}, {
    readonly type: "function";
    readonly name: "getEpochCommittee";
    readonly inputs: readonly [{
        readonly name: "_epoch";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getEpochForBlock";
    readonly inputs: readonly [{
        readonly name: "blockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getEpochProofPublicInputs";
    readonly inputs: readonly [{
        readonly name: "_epochSize";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "_args";
        readonly type: "bytes32[7]";
        readonly internalType: "bytes32[7]";
    }, {
        readonly name: "_fees";
        readonly type: "bytes32[]";
        readonly internalType: "bytes32[]";
    }, {
        readonly name: "_aggregationObject";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32[]";
        readonly internalType: "bytes32[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getEpochToProve";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getPendingBlockNumber";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getProposerAt";
    readonly inputs: readonly [{
        readonly name: "_ts";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getProvenBlockNumber";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getSlotAt";
    readonly inputs: readonly [{
        readonly name: "_ts";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getTimestampForSlot";
    readonly inputs: readonly [{
        readonly name: "_slotNumber";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getValidatorAt";
    readonly inputs: readonly [{
        readonly name: "_index";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getValidatorCount";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getValidators";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address[]";
        readonly internalType: "address[]";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "isValidator";
    readonly inputs: readonly [{
        readonly name: "_validator";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "owner";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "proofClaim";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "epochToProve";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }, {
        readonly name: "basisPointFee";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "bondAmount";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "bondProvider";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "proposerClaimant";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "propose";
    readonly inputs: readonly [{
        readonly name: "_header";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }, {
        readonly name: "_archive";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "_blockHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "_txHashes";
        readonly type: "bytes32[]";
        readonly internalType: "bytes32[]";
    }, {
        readonly name: "_signatures";
        readonly type: "tuple[]";
        readonly internalType: "struct SignatureLib.Signature[]";
        readonly components: readonly [{
            readonly name: "isEmpty";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "v";
            readonly type: "uint8";
            readonly internalType: "uint8";
        }, {
            readonly name: "r";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "s";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }];
    }, {
        readonly name: "_body";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "proposeAndClaim";
    readonly inputs: readonly [{
        readonly name: "_header";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }, {
        readonly name: "_archive";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "_blockHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "_txHashes";
        readonly type: "bytes32[]";
        readonly internalType: "bytes32[]";
    }, {
        readonly name: "_signatures";
        readonly type: "tuple[]";
        readonly internalType: "struct SignatureLib.Signature[]";
        readonly components: readonly [{
            readonly name: "isEmpty";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "v";
            readonly type: "uint8";
            readonly internalType: "uint8";
        }, {
            readonly name: "r";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "s";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }];
    }, {
        readonly name: "_body";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }, {
        readonly name: "_quote";
        readonly type: "tuple";
        readonly internalType: "struct EpochProofQuoteLib.SignedEpochProofQuote";
        readonly components: readonly [{
            readonly name: "quote";
            readonly type: "tuple";
            readonly internalType: "struct EpochProofQuoteLib.EpochProofQuote";
            readonly components: readonly [{
                readonly name: "epochToProve";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "validUntilSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "bondAmount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "basisPointFee";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly name: "signature";
            readonly type: "tuple";
            readonly internalType: "struct SignatureLib.Signature";
            readonly components: readonly [{
                readonly name: "isEmpty";
                readonly type: "bool";
                readonly internalType: "bool";
            }, {
                readonly name: "v";
                readonly type: "uint8";
                readonly internalType: "uint8";
            }, {
                readonly name: "r";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "s";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "protocolContractTreeRoot";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "prune";
    readonly inputs: readonly [];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "quoteToDigest";
    readonly inputs: readonly [{
        readonly name: "quote";
        readonly type: "tuple";
        readonly internalType: "struct EpochProofQuoteLib.EpochProofQuote";
        readonly components: readonly [{
            readonly name: "epochToProve";
            readonly type: "uint256";
            readonly internalType: "Epoch";
        }, {
            readonly name: "validUntilSlot";
            readonly type: "uint256";
            readonly internalType: "Slot";
        }, {
            readonly name: "bondAmount";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "prover";
            readonly type: "address";
            readonly internalType: "address";
        }, {
            readonly name: "basisPointFee";
            readonly type: "uint32";
            readonly internalType: "uint32";
        }];
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "removeValidator";
    readonly inputs: readonly [{
        readonly name: "_validator";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "renounceOwnership";
    readonly inputs: readonly [];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "setAssumeProvenThroughBlockNumber";
    readonly inputs: readonly [{
        readonly name: "blockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "setEpochVerifier";
    readonly inputs: readonly [{
        readonly name: "_verifier";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "setProtocolContractTreeRoot";
    readonly inputs: readonly [{
        readonly name: "_protocolContractTreeRoot";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "setVkTreeRoot";
    readonly inputs: readonly [{
        readonly name: "_vkTreeRoot";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "setupEpoch";
    readonly inputs: readonly [];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "status";
    readonly inputs: readonly [{
        readonly name: "myHeaderBlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "provenBlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "provenArchive";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "pendingBlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "pendingArchive";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "archiveOfMyBlock";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "provenEpochNumber";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "submitEpochRootProof";
    readonly inputs: readonly [{
        readonly name: "_epochSize";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "_args";
        readonly type: "bytes32[7]";
        readonly internalType: "bytes32[7]";
    }, {
        readonly name: "_fees";
        readonly type: "bytes32[]";
        readonly internalType: "bytes32[]";
    }, {
        readonly name: "_aggregationObject";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }, {
        readonly name: "_proof";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "tips";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "pendingBlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "provenBlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "transferOwnership";
    readonly inputs: readonly [{
        readonly name: "newOwner";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "validateEpochProofRightClaim";
    readonly inputs: readonly [{
        readonly name: "_quote";
        readonly type: "tuple";
        readonly internalType: "struct EpochProofQuoteLib.SignedEpochProofQuote";
        readonly components: readonly [{
            readonly name: "quote";
            readonly type: "tuple";
            readonly internalType: "struct EpochProofQuoteLib.EpochProofQuote";
            readonly components: readonly [{
                readonly name: "epochToProve";
                readonly type: "uint256";
                readonly internalType: "Epoch";
            }, {
                readonly name: "validUntilSlot";
                readonly type: "uint256";
                readonly internalType: "Slot";
            }, {
                readonly name: "bondAmount";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }, {
                readonly name: "prover";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "basisPointFee";
                readonly type: "uint32";
                readonly internalType: "uint32";
            }];
        }, {
            readonly name: "signature";
            readonly type: "tuple";
            readonly internalType: "struct SignatureLib.Signature";
            readonly components: readonly [{
                readonly name: "isEmpty";
                readonly type: "bool";
                readonly internalType: "bool";
            }, {
                readonly name: "v";
                readonly type: "uint8";
                readonly internalType: "uint8";
            }, {
                readonly name: "r";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "s";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "validateHeader";
    readonly inputs: readonly [{
        readonly name: "_header";
        readonly type: "bytes";
        readonly internalType: "bytes";
    }, {
        readonly name: "_signatures";
        readonly type: "tuple[]";
        readonly internalType: "struct SignatureLib.Signature[]";
        readonly components: readonly [{
            readonly name: "isEmpty";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "v";
            readonly type: "uint8";
            readonly internalType: "uint8";
        }, {
            readonly name: "r";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "s";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }];
    }, {
        readonly name: "_digest";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "_currentTime";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "_txsEffectsHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "_flags";
        readonly type: "tuple";
        readonly internalType: "struct DataStructures.ExecutionFlags";
        readonly components: readonly [{
            readonly name: "ignoreDA";
            readonly type: "bool";
            readonly internalType: "bool";
        }, {
            readonly name: "ignoreSignatures";
            readonly type: "bool";
            readonly internalType: "bool";
        }];
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "vkTreeRoot";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly name: "EIP712DomainChanged";
    readonly inputs: readonly [];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "L2BlockProposed";
    readonly inputs: readonly [{
        readonly name: "blockNumber";
        readonly type: "uint256";
        readonly indexed: true;
        readonly internalType: "uint256";
    }, {
        readonly name: "archive";
        readonly type: "bytes32";
        readonly indexed: true;
        readonly internalType: "bytes32";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "L2ProofVerified";
    readonly inputs: readonly [{
        readonly name: "blockNumber";
        readonly type: "uint256";
        readonly indexed: true;
        readonly internalType: "uint256";
    }, {
        readonly name: "proverId";
        readonly type: "bytes32";
        readonly indexed: true;
        readonly internalType: "bytes32";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "OwnershipTransferred";
    readonly inputs: readonly [{
        readonly name: "previousOwner";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "newOwner";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "ProofRightClaimed";
    readonly inputs: readonly [{
        readonly name: "epoch";
        readonly type: "uint256";
        readonly indexed: true;
        readonly internalType: "Epoch";
    }, {
        readonly name: "bondProvider";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "proposer";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }, {
        readonly name: "bondAmount";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }, {
        readonly name: "currentSlot";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "Slot";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "PrunedPending";
    readonly inputs: readonly [{
        readonly name: "provenBlockNumber";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }, {
        readonly name: "pendingBlockNumber";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "error";
    readonly name: "HeaderLib__InvalidHeaderSize";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "HeaderLib__InvalidSlotNumber";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
}, {
    readonly type: "error";
    readonly name: "InvalidShortString";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Leonidas__InsufficientAttestations";
    readonly inputs: readonly [{
        readonly name: "minimumNeeded";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "provided";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Leonidas__InsufficientAttestationsProvided";
    readonly inputs: readonly [{
        readonly name: "minimumNeeded";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "provided";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Leonidas__InvalidProposer";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "actual";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "OwnableInvalidOwner";
    readonly inputs: readonly [{
        readonly name: "owner";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "OwnableUnauthorizedAccount";
    readonly inputs: readonly [{
        readonly name: "account";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InsufficientBondAmount";
    readonly inputs: readonly [{
        readonly name: "minimum";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "provided";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InsufficientFundsInEscrow";
    readonly inputs: readonly [{
        readonly name: "required";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "available";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidArchive";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidBlockHash";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidBlockNumber";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidChainId";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidEpoch";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidInHash";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidPreviousArchive";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidPreviousBlockHash";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidProof";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidTimestamp";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__InvalidVersion";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__NoEpochToProve";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__NotClaimingCorrectEpoch";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "Epoch";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__NotInClaimPhase";
    readonly inputs: readonly [{
        readonly name: "currentSlotInEpoch";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "claimDuration";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__NothingToPrune";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__ProofRightAlreadyClaimed";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Rollup__QuoteExpired";
    readonly inputs: readonly [{
        readonly name: "currentSlot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }, {
        readonly name: "quoteSlot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__SlotAlreadyInChain";
    readonly inputs: readonly [{
        readonly name: "lastSlot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }, {
        readonly name: "proposedSlot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__TimestampInFuture";
    readonly inputs: readonly [{
        readonly name: "max";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "Timestamp";
    }];
}, {
    readonly type: "error";
    readonly name: "Rollup__UnavailableTxs";
    readonly inputs: readonly [{
        readonly name: "txsHash";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }];
}, {
    readonly type: "error";
    readonly name: "SampleLib__IndexOutOfBounds";
    readonly inputs: readonly [{
        readonly name: "requested";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "bound";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "SignatureLib__CannotVerifyEmpty";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "SignatureLib__InvalidSignature";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "recovered";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "StringTooLong";
    readonly inputs: readonly [{
        readonly name: "str";
        readonly type: "string";
        readonly internalType: "string";
    }];
}, {
    readonly type: "error";
    readonly name: "TxsDecoder__InvalidLogsLength";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}];
//# sourceMappingURL=RollupAbi.d.ts.map