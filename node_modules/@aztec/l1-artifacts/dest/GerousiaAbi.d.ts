/**
 * Gerousia ABI.
 */
export declare const GerousiaAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_registry";
        readonly type: "address";
        readonly internalType: "contract IRegistry";
    }, {
        readonly name: "_n";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "_m";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "LIFETIME_IN_ROUNDS";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "M";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "N";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "REGISTRY";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IRegistry";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "computeRound";
    readonly inputs: readonly [{
        readonly name: "_slot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "getApella";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract IApella";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "pushProposal";
    readonly inputs: readonly [{
        readonly name: "_roundNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "rounds";
    readonly inputs: readonly [{
        readonly name: "instance";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "roundNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "lastVote";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }, {
        readonly name: "leader";
        readonly type: "address";
        readonly internalType: "contract IPayload";
    }, {
        readonly name: "executed";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "vote";
    readonly inputs: readonly [{
        readonly name: "_proposal";
        readonly type: "address";
        readonly internalType: "contract IPayload";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "yeaCount";
    readonly inputs: readonly [{
        readonly name: "_instance";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "_round";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "_proposal";
        readonly type: "address";
        readonly internalType: "contract IPayload";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "event";
    readonly name: "ProposalPushed";
    readonly inputs: readonly [{
        readonly name: "proposal";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "contract IPayload";
    }, {
        readonly name: "round";
        readonly type: "uint256";
        readonly indexed: true;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "VoteCast";
    readonly inputs: readonly [{
        readonly name: "proposal";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "contract IPayload";
    }, {
        readonly name: "round";
        readonly type: "uint256";
        readonly indexed: true;
        readonly internalType: "uint256";
    }, {
        readonly name: "voter";
        readonly type: "address";
        readonly indexed: true;
        readonly internalType: "address";
    }];
    readonly anonymous: false;
}, {
    readonly type: "error";
    readonly name: "Gerousia__CanOnlyPushProposalInPast";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Gerousia__FailedToPropose";
    readonly inputs: readonly [{
        readonly name: "proposal";
        readonly type: "address";
        readonly internalType: "contract IPayload";
    }];
}, {
    readonly type: "error";
    readonly name: "Gerousia__InstanceHaveNoCode";
    readonly inputs: readonly [{
        readonly name: "instance";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Gerousia__InsufficientVotes";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Gerousia__InvalidNAndMValues";
    readonly inputs: readonly [{
        readonly name: "N";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "M";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Gerousia__NCannotBeLargerTHanM";
    readonly inputs: readonly [{
        readonly name: "N";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "M";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Gerousia__OnlyProposerCanVote";
    readonly inputs: readonly [{
        readonly name: "caller";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "proposer";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Gerousia__ProposalAlreadyExecuted";
    readonly inputs: readonly [{
        readonly name: "roundNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Gerousia__ProposalCannotBeAddressZero";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Gerousia__ProposalHaveNoCode";
    readonly inputs: readonly [{
        readonly name: "proposal";
        readonly type: "address";
        readonly internalType: "contract IPayload";
    }];
}, {
    readonly type: "error";
    readonly name: "Gerousia__ProposalTooOld";
    readonly inputs: readonly [{
        readonly name: "roundNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "currentRoundNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Gerousia__VoteAlreadyCastForSlot";
    readonly inputs: readonly [{
        readonly name: "slot";
        readonly type: "uint256";
        readonly internalType: "Slot";
    }];
}];
//# sourceMappingURL=GerousiaAbi.d.ts.map