/**
 * Outbox ABI.
 */
export declare const OutboxAbi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
        readonly name: "_rollup";
        readonly type: "address";
        readonly internalType: "address";
    }];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "ROLLUP";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "address";
        readonly internalType: "contract Rollup";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "consume";
    readonly inputs: readonly [{
        readonly name: "_message";
        readonly type: "tuple";
        readonly internalType: "struct DataStructures.L2ToL1Msg";
        readonly components: readonly [{
            readonly name: "sender";
            readonly type: "tuple";
            readonly internalType: "struct DataStructures.L2Actor";
            readonly components: readonly [{
                readonly name: "actor";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "version";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly name: "recipient";
            readonly type: "tuple";
            readonly internalType: "struct DataStructures.L1Actor";
            readonly components: readonly [{
                readonly name: "actor";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "chainId";
                readonly type: "uint256";
                readonly internalType: "uint256";
            }];
        }, {
            readonly name: "content";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }];
    }, {
        readonly name: "_l2BlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "_leafIndex";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "_path";
        readonly type: "bytes32[]";
        readonly internalType: "bytes32[]";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "function";
    readonly name: "getRootData";
    readonly inputs: readonly [{
        readonly name: "_l2BlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "root";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "minHeight";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "hasMessageBeenConsumedAtBlockAndIndex";
    readonly inputs: readonly [{
        readonly name: "_l2BlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "_leafIndex";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
        readonly internalType: "bool";
    }];
    readonly stateMutability: "view";
}, {
    readonly type: "function";
    readonly name: "insert";
    readonly inputs: readonly [{
        readonly name: "_l2BlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "_root";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "_minHeight";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
}, {
    readonly type: "event";
    readonly name: "MessageConsumed";
    readonly inputs: readonly [{
        readonly name: "l2BlockNumber";
        readonly type: "uint256";
        readonly indexed: true;
        readonly internalType: "uint256";
    }, {
        readonly name: "root";
        readonly type: "bytes32";
        readonly indexed: true;
        readonly internalType: "bytes32";
    }, {
        readonly name: "messageHash";
        readonly type: "bytes32";
        readonly indexed: true;
        readonly internalType: "bytes32";
    }, {
        readonly name: "leafIndex";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "event";
    readonly name: "RootAdded";
    readonly inputs: readonly [{
        readonly name: "l2BlockNumber";
        readonly type: "uint256";
        readonly indexed: true;
        readonly internalType: "uint256";
    }, {
        readonly name: "root";
        readonly type: "bytes32";
        readonly indexed: true;
        readonly internalType: "bytes32";
    }, {
        readonly name: "minHeight";
        readonly type: "uint256";
        readonly indexed: false;
        readonly internalType: "uint256";
    }];
    readonly anonymous: false;
}, {
    readonly type: "error";
    readonly name: "MerkleLib__InvalidRoot";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "actual";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "leaf";
        readonly type: "bytes32";
        readonly internalType: "bytes32";
    }, {
        readonly name: "leafIndex";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__AlreadyNullified";
    readonly inputs: readonly [{
        readonly name: "l2BlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "leafIndex";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__BlockNotProven";
    readonly inputs: readonly [{
        readonly name: "l2BlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__InsertingInvalidRoot";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Outbox__InvalidChainId";
    readonly inputs: readonly [];
}, {
    readonly type: "error";
    readonly name: "Outbox__InvalidPathLength";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }, {
        readonly name: "actual";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__InvalidRecipient";
    readonly inputs: readonly [{
        readonly name: "expected";
        readonly type: "address";
        readonly internalType: "address";
    }, {
        readonly name: "actual";
        readonly type: "address";
        readonly internalType: "address";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__NothingToConsumeAtBlock";
    readonly inputs: readonly [{
        readonly name: "l2BlockNumber";
        readonly type: "uint256";
        readonly internalType: "uint256";
    }];
}, {
    readonly type: "error";
    readonly name: "Outbox__Unauthorized";
    readonly inputs: readonly [];
}];
//# sourceMappingURL=OutboxAbi.d.ts.map