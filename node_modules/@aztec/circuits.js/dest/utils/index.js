// Define these utils here as their design is very specific to kernel's accumulated data and not general enough to be put in foundation.
// Returns number of non-empty items in an array.
export function countAccumulatedItems(arr) {
    return arr.reduce((num, item, i) => {
        if (!item.isEmpty()) {
            if (num !== i) {
                throw new Error('Non-empty items must be placed continuously from index 0.');
            }
            return num + 1;
        }
        return num;
    }, 0);
}
// Merges two arrays of length N into an array of length N.
export function mergeAccumulatedData(arr0, arr1, length = arr0.length) {
    const numNonEmptyItems0 = countAccumulatedItems(arr0);
    const numNonEmptyItems1 = countAccumulatedItems(arr1);
    if (numNonEmptyItems0 + numNonEmptyItems1 > length) {
        throw new Error('Combined non-empty items exceeded the maximum allowed.');
    }
    const arr = [...arr0];
    arr1.slice(0, numNonEmptyItems1).forEach((item, i) => (arr[i + numNonEmptyItems0] = item));
    return arr;
}
// Sort items by a provided compare function. All empty items are padded to the right.
function genericSort(arr, compareFn, ascending = true) {
    return [...arr].sort((a, b) => {
        if (a.isEmpty()) {
            return 1; // Move empty items to the right.
        }
        if (b.isEmpty()) {
            return -1; // Move non-empty items to the left.
        }
        return ascending ? compareFn(a, b) : compareFn(b, a);
    });
}
function compareByCounter(a, b) {
    return a.counter - b.counter;
}
export function sortByCounter(arr, ascending = true) {
    return genericSort(arr, compareByCounter, ascending);
}
export function isEmptyArray(arr) {
    return arr.every(item => item.isEmpty());
}
export function getNonEmptyItems(arr) {
    return arr.filter(item => !item.isEmpty());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsd0lBQXdJO0FBRXhJLGlEQUFpRDtBQUNqRCxNQUFNLFVBQVUscUJBQXFCLENBQW9CLEdBQVE7SUFDL0QsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7WUFDcEIsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7Z0JBQ2QsTUFBTSxJQUFJLEtBQUssQ0FBQywyREFBMkQsQ0FBQyxDQUFDO1lBQy9FLENBQUM7WUFDRCxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUM7UUFDakIsQ0FBQztRQUNELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQ1IsQ0FBQztBQUVELDJEQUEyRDtBQUMzRCxNQUFNLFVBQVUsb0JBQW9CLENBQ2xDLElBQWlCLEVBQ2pCLElBQWlCLEVBQ2pCLFNBQVksSUFBSSxDQUFDLE1BQVc7SUFFNUIsTUFBTSxpQkFBaUIsR0FBRyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN0RCxNQUFNLGlCQUFpQixHQUFHLHFCQUFxQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3RELElBQUksaUJBQWlCLEdBQUcsaUJBQWlCLEdBQUcsTUFBTSxFQUFFLENBQUM7UUFDbkQsTUFBTSxJQUFJLEtBQUssQ0FBQyx3REFBd0QsQ0FBQyxDQUFDO0lBQzVFLENBQUM7SUFFRCxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFnQixDQUFDO0lBQ3JDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLGlCQUFpQixDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMzRixPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFFRCxzRkFBc0Y7QUFDdEYsU0FBUyxXQUFXLENBQ2xCLEdBQWdCLEVBQ2hCLFNBQWlDLEVBQ2pDLFlBQXFCLElBQUk7SUFFekIsT0FBTyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzVCLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7WUFDaEIsT0FBTyxDQUFDLENBQUMsQ0FBQyxpQ0FBaUM7UUFDN0MsQ0FBQztRQUNELElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7WUFDaEIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLG9DQUFvQztRQUNqRCxDQUFDO1FBQ0QsT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQyxDQUFnQixDQUFDO0FBQ3BCLENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUFvQixDQUFJLEVBQUUsQ0FBSTtJQUNyRCxPQUFPLENBQUMsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUMvQixDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsR0FBZ0IsRUFDaEIsWUFBcUIsSUFBSTtJQUV6QixPQUFPLFdBQVcsQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFDdkQsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQW9CLEdBQVE7SUFDdEQsT0FBTyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7QUFDM0MsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBb0IsR0FBUTtJQUMxRCxPQUFPLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDO0FBQzdDLENBQUMifQ==