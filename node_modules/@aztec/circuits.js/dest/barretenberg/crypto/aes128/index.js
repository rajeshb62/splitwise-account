import { BarretenbergSync, RawBuffer } from '@aztec/bb.js';
import { Buffer } from 'buffer';
/**
 * AES-128-CBC encryption/decryption.
 */
export class Aes128 {
    /**
     * Encrypt a buffer using AES-128-CBC.
     * @param data - Data to encrypt.
     * @param iv - AES initialization vector.
     * @param key - Key to encrypt with.
     * @returns Encrypted data.
     */
    encryptBufferCBC(data, iv, key) {
        const rawLength = data.length;
        const numPaddingBytes = 16 - (rawLength % 16);
        const paddingBuffer = Buffer.alloc(numPaddingBytes);
        // input num bytes needs to be a multiple of 16 and at least 1 byte
        // node uses PKCS#7-Padding scheme, where padding byte value = the number of padding bytes
        paddingBuffer.fill(numPaddingBytes);
        const input = Buffer.concat([data, paddingBuffer]);
        const api = BarretenbergSync.getSingleton();
        return Buffer.from(api.aesEncryptBufferCbc(new RawBuffer(input), new RawBuffer(iv), new RawBuffer(key), input.length));
    }
    /**
     * Decrypt a buffer using AES-128-CBC.
     * @param data - Data to decrypt.
     * @param iv - AES initialization vector.
     * @param key - Key to decrypt with.
     * @returns Decrypted data.
     */
    decryptBufferCBC(data, iv, key) {
        const api = BarretenbergSync.getSingleton();
        const paddedBuffer = Buffer.from(api.aesDecryptBufferCbc(new RawBuffer(data), new RawBuffer(iv), new RawBuffer(key), data.length));
        const paddingToRemove = paddedBuffer[paddedBuffer.length - 1];
        return paddedBuffer.subarray(0, paddedBuffer.length - paddingToRemove);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnL2NyeXB0by9hZXMxMjgvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUzRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRWhDOztHQUVHO0FBQ0gsTUFBTSxPQUFPLE1BQU07SUFDakI7Ozs7OztPQU1HO0lBQ0ksZ0JBQWdCLENBQUMsSUFBZ0IsRUFBRSxFQUFjLEVBQUUsR0FBZTtRQUN2RSxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQzlCLE1BQU0sZUFBZSxHQUFHLEVBQUUsR0FBRyxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUM5QyxNQUFNLGFBQWEsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQ3BELG1FQUFtRTtRQUNuRSwwRkFBMEY7UUFDMUYsYUFBYSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNwQyxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7UUFFbkQsTUFBTSxHQUFHLEdBQUcsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDNUMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUNoQixHQUFHLENBQUMsbUJBQW1CLENBQUMsSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUNuRyxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNJLGdCQUFnQixDQUFDLElBQWdCLEVBQUUsRUFBYyxFQUFFLEdBQWU7UUFDdkUsTUFBTSxHQUFHLEdBQUcsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDNUMsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FDOUIsR0FBRyxDQUFDLG1CQUFtQixDQUFDLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FDakcsQ0FBQztRQUNGLE1BQU0sZUFBZSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzlELE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsWUFBWSxDQUFDLE1BQU0sR0FBRyxlQUFlLENBQUMsQ0FBQztJQUN6RSxDQUFDO0NBQ0YifQ==