import { poseidon2HashWithSeparator } from '@aztec/foundation/crypto';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { GeneratorIndex, HEADER_LENGTH } from '../constants.gen.js';
import { ContentCommitment } from './content_commitment.js';
import { GlobalVariables } from './global_variables.js';
import { AppendOnlyTreeSnapshot } from './rollup/append_only_tree_snapshot.js';
import { StateReference } from './state_reference.js';
/** A header of an L2 block. */
export class Header {
    constructor(
    /** Snapshot of archive before the block is applied. */
    lastArchive, 
    /** Hash of the body of an L2 block. */
    contentCommitment, 
    /** State reference. */
    state, 
    /** Global variables of an L2 block. */
    globalVariables, 
    /** Total fees in the block, computed by the root rollup circuit */
    totalFees) {
        this.lastArchive = lastArchive;
        this.contentCommitment = contentCommitment;
        this.state = state;
        this.globalVariables = globalVariables;
        this.totalFees = totalFees;
    }
    static getFields(fields) {
        // Note: The order here must match the order in the HeaderLib solidity library.
        return [
            fields.lastArchive,
            fields.contentCommitment,
            fields.state,
            fields.globalVariables,
            fields.totalFees,
        ];
    }
    static from(fields) {
        return new Header(...Header.getFields(fields));
    }
    getSize() {
        return (this.lastArchive.getSize() +
            this.contentCommitment.getSize() +
            this.state.getSize() +
            this.globalVariables.getSize() +
            this.totalFees.size);
    }
    toBuffer() {
        return serializeToBuffer(...Header.getFields(this));
    }
    toFields() {
        const fields = serializeToFields(...Header.getFields(this));
        if (fields.length !== HEADER_LENGTH) {
            throw new Error(`Invalid number of fields for Header. Expected ${HEADER_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    clone() {
        return Header.fromBuffer(this.toBuffer());
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new Header(reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(ContentCommitment), reader.readObject(StateReference), reader.readObject(GlobalVariables), reader.readObject(Fr));
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new Header(AppendOnlyTreeSnapshot.fromFields(reader), ContentCommitment.fromFields(reader), StateReference.fromFields(reader), GlobalVariables.fromFields(reader), reader.readField());
    }
    static empty(fields = {}) {
        return Header.from({
            lastArchive: AppendOnlyTreeSnapshot.zero(),
            contentCommitment: ContentCommitment.empty(),
            state: StateReference.empty(),
            globalVariables: GlobalVariables.empty(),
            totalFees: Fr.ZERO,
            ...fields,
        });
    }
    isEmpty() {
        return (this.lastArchive.isZero() &&
            this.contentCommitment.isEmpty() &&
            this.state.isEmpty() &&
            this.globalVariables.isEmpty());
    }
    /**
     * Serializes this instance into a string.
     * @returns Encoded string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    static fromString(str) {
        const buffer = Buffer.from(str.replace(/^0x/i, ''), 'hex');
        return Header.fromBuffer(buffer);
    }
    hash() {
        return poseidon2HashWithSeparator(this.toFields(), GeneratorIndex.BLOCK_HASH);
    }
    [inspect.custom]() {
        return `Header {
  lastArchive: ${inspect(this.lastArchive)},
  contentCommitment.numTx: ${this.contentCommitment.numTxs.toNumber()},
  contentCommitment.txsEffectsHash: ${this.contentCommitment.txsEffectsHash.toString('hex')},
  contentCommitment.inHash: ${this.contentCommitment.inHash.toString('hex')},
  contentCommitment.outHash: ${this.contentCommitment.outHash.toString('hex')},
  state.l1ToL2MessageTree: ${inspect(this.state.l1ToL2MessageTree)},
  state.noteHashTree: ${inspect(this.state.partial.noteHashTree)},
  state.nullifierTree: ${inspect(this.state.partial.nullifierTree)},
  state.publicDataTree: ${inspect(this.state.partial.publicDataTree)},
  globalVariables: ${inspect(this.globalVariables)},
  totalFees: ${this.totalFees},
}`;
    }
    equals(other) {
        return (this.contentCommitment.equals(other.contentCommitment) &&
            this.state.equals(other.state) &&
            this.globalVariables.equals(other.globalVariables) &&
            this.totalFees.equals(other.totalFees) &&
            this.lastArchive.equals(other.lastArchive));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cnVjdHMvaGVhZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRzlHLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsT0FBTyxFQUFFLGNBQWMsRUFBRSxhQUFhLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXRELCtCQUErQjtBQUMvQixNQUFNLE9BQU8sTUFBTTtJQUNqQjtJQUNFLHVEQUF1RDtJQUNoRCxXQUFtQztJQUMxQyx1Q0FBdUM7SUFDaEMsaUJBQW9DO0lBQzNDLHVCQUF1QjtJQUNoQixLQUFxQjtJQUM1Qix1Q0FBdUM7SUFDaEMsZUFBZ0M7SUFDdkMsbUVBQW1FO0lBQzVELFNBQWE7UUFSYixnQkFBVyxHQUFYLFdBQVcsQ0FBd0I7UUFFbkMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUVwQyxVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUVyQixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFFaEMsY0FBUyxHQUFULFNBQVMsQ0FBSTtJQUNuQixDQUFDO0lBRUosTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUF3QjtRQUN2Qywr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