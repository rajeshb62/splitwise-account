/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import { type FieldsOf } from '@aztec/foundation/types';
import { inspect } from 'util';
import { CallContext } from './call_context.js';
/**
 * Represents a request to call a public function.
 */
export declare class PublicCallRequest {
    callContext: CallContext;
    argsHash: Fr;
    counter: number;
    constructor(callContext: CallContext, argsHash: Fr, counter: number);
    getSize(): number;
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer(): Buffer;
    /**
     * Deserialize this from a buffer.
     * @param buffer - The bufferable type from which to deserialize.
     * @returns The deserialized instance of PublicCallRequest.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PublicCallRequest;
    /**
     * Create PublicCallRequest from a fields dictionary.
     * @param fields - The dictionary.
     * @returns A PublicCallRequest object.
     */
    static from(fields: FieldsOf<PublicCallRequest>): PublicCallRequest;
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields: FieldsOf<PublicCallRequest>): readonly [CallContext, Fr, number];
    toFields(): Fr[];
    static fromFields(fields: Fr[] | FieldReader): PublicCallRequest;
    static empty(): PublicCallRequest;
    isEmpty(): boolean;
    [inspect.custom](): string;
}
//# sourceMappingURL=public_call_request.d.ts.map