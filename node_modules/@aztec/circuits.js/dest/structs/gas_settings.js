import { compact } from '@aztec/foundation/collection';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
import { DEFAULT_GAS_LIMIT, DEFAULT_INCLUSION_FEE, DEFAULT_MAX_FEE_PER_GAS, DEFAULT_TEARDOWN_GAS_LIMIT, GAS_SETTINGS_LENGTH, } from '../constants.gen.js';
import { Gas, GasDimensions } from './gas.js';
import { GasFees } from './gas_fees.js';
/** Gas usage and fees limits set by the transaction sender for different dimensions and phases. */
export class GasSettings {
    constructor(gasLimits, teardownGasLimits, maxFeesPerGas, inclusionFee) {
        this.gasLimits = gasLimits;
        this.teardownGasLimits = teardownGasLimits;
        this.maxFeesPerGas = maxFeesPerGas;
        this.inclusionFee = inclusionFee;
    }
    getSize() {
        return this.toBuffer().length;
    }
    static from(args) {
        return new GasSettings(Gas.from(args.gasLimits), Gas.from(args.teardownGasLimits), GasFees.from(args.maxFeesPerGas), args.inclusionFee);
    }
    clone() {
        return new GasSettings(this.gasLimits.clone(), this.teardownGasLimits.clone(), this.maxFeesPerGas.clone(), this.inclusionFee);
    }
    /** Returns the maximum fee to be paid according to gas limits and max fees set. */
    getFeeLimit() {
        return GasDimensions.reduce((acc, dimension) => this.maxFeesPerGas
            .get(dimension)
            .mul(new Fr(this.gasLimits.get(dimension)))
            .add(acc), Fr.ZERO).add(this.inclusionFee);
    }
    /** Zero-value gas settings. */
    static empty() {
        return new GasSettings(Gas.empty(), Gas.empty(), GasFees.empty(), Fr.ZERO);
    }
    /** Default gas settings to use when user has not provided them. */
    static default(overrides = {}) {
        return GasSettings.from({
            gasLimits: { l2Gas: DEFAULT_GAS_LIMIT, daGas: DEFAULT_GAS_LIMIT },
            teardownGasLimits: { l2Gas: DEFAULT_TEARDOWN_GAS_LIMIT, daGas: DEFAULT_TEARDOWN_GAS_LIMIT },
            maxFeesPerGas: { feePerL2Gas: new Fr(DEFAULT_MAX_FEE_PER_GAS), feePerDaGas: new Fr(DEFAULT_MAX_FEE_PER_GAS) },
            inclusionFee: new Fr(DEFAULT_INCLUSION_FEE),
            ...compact(overrides),
        });
    }
    /** Default gas settings with no teardown */
    static teardownless() {
        return GasSettings.default({ teardownGasLimits: Gas.from({ l2Gas: 0, daGas: 0 }) });
    }
    /** Gas settings to use for simulating a contract call. */
    static simulation() {
        return GasSettings.default();
    }
    isEmpty() {
        return (this.gasLimits.isEmpty() &&
            this.teardownGasLimits.isEmpty() &&
            this.maxFeesPerGas.isEmpty() &&
            this.inclusionFee.isZero());
    }
    equals(other) {
        return (this.gasLimits.equals(other.gasLimits) &&
            this.teardownGasLimits.equals(other.teardownGasLimits) &&
            this.maxFeesPerGas.equals(other.maxFeesPerGas) &&
            this.inclusionFee.equals(other.inclusionFee));
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new GasSettings(reader.readObject(Gas), reader.readObject(Gas), reader.readObject(GasFees), reader.readObject(Fr));
    }
    toBuffer() {
        return serializeToBuffer(...GasSettings.getFields(this));
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new GasSettings(reader.readObject(Gas), reader.readObject(Gas), reader.readObject(GasFees), reader.readField());
    }
    toFields() {
        const fields = serializeToFields(...GasSettings.getFields(this));
        if (fields.length !== GAS_SETTINGS_LENGTH) {
            throw new Error(`Invalid number of fields for GasSettings. Expected ${GAS_SETTINGS_LENGTH} but got ${fields.length}`);
        }
        return fields;
    }
    static getFields(fields) {
        return [fields.gasLimits, fields.teardownGasLimits, fields.maxFeesPerGas, fields.inclusionFee];
    }
    /** Returns total gas limits. */
    getLimits() {
        return this.gasLimits;
    }
    /** Returns how much gas is available for execution of setup and app phases (ie total limit minus teardown). */
    getInitialAvailable() {
        return this.gasLimits.sub(this.teardownGasLimits);
    }
    /** Returns how much gas is available for execution of teardown phase. */
    getTeardownLimits() {
        return this.teardownGasLimits;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2FzX3NldHRpbmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cnVjdHMvZ2FzX3NldHRpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUc5RyxPQUFPLEVBQ0wsaUJBQWlCLEVBQ2pCLHFCQUFxQixFQUNyQix1QkFBdUIsRUFDdkIsMEJBQTBCLEVBQzFCLG1CQUFtQixHQUNwQixNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBQzlDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFeEMsbUdBQW1HO0FBQ25HLE1BQU0sT0FBTyxXQUFXO0lBQ3RCLFlBQ2tCLFNBQWMsRUFDZCxpQkFBc0IsRUFDdEIsYUFBc0IsRUFDdEIsWUFBZ0I7UUFIaEIsY0FBUyxHQUFULFNBQVMsQ0FBSztRQUNkLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBSztRQUN0QixrQkFBYSxHQUFiLGFBQWEsQ0FBUztRQUN0QixpQkFBWSxHQUFaLFlBQVksQ0FBSTtJQUMvQixDQUFDO0lBRUosT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQztJQUNoQyxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUtYO1FBQ0MsT0FBTyxJQUFJLFdBQVcsQ0FDcEIsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQ3hCLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLEVBQ2hD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