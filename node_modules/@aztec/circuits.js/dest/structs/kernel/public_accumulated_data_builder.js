import { padArrayEnd } from '@aztec/foundation/collection';
import { MAX_ENCRYPTED_LOGS_PER_TX, MAX_L2_TO_L1_MSGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_HASHES_PER_TX, MAX_NULLIFIERS_PER_TX, MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, MAX_UNENCRYPTED_LOGS_PER_TX, } from '../../constants.gen.js';
import { Gas } from '../gas.js';
import { ScopedL2ToL1Message } from '../l2_to_l1_message.js';
import { LogHash, ScopedLogHash } from '../log_hash.js';
import { ScopedNoteHash } from '../note_hash.js';
import { Nullifier } from '../nullifier.js';
import { PublicCallRequest } from '../public_call_request.js';
import { PublicDataUpdateRequest } from '../public_data_update_request.js';
import { PublicAccumulatedData } from './public_accumulated_data.js';
/**
 * TESTS-ONLY CLASS
 * Builder for PublicAccumulatedData, used to conveniently construct instances for testing,
 * as PublicAccumulatedData is (or will shortly be) immutable.
 *
 */
export class PublicAccumulatedDataBuilder {
    constructor() {
        this.noteHashes = [];
        this.nullifiers = [];
        this.l2ToL1Msgs = [];
        this.noteEncryptedLogsHashes = [];
        this.encryptedLogsHashes = [];
        this.unencryptedLogsHashes = [];
        this.publicDataUpdateRequests = [];
        this.publicCallStack = [];
        this.gasUsed = Gas.empty();
    }
    pushNoteHash(newNoteHash) {
        this.noteHashes.push(newNoteHash);
        return this;
    }
    withNoteHashes(noteHashes) {
        this.noteHashes = noteHashes;
        return this;
    }
    pushNullifier(newNullifier) {
        this.nullifiers.push(newNullifier);
        return this;
    }
    withNullifiers(nullifiers) {
        this.nullifiers = nullifiers;
        return this;
    }
    pushL2ToL1Msg(newL2ToL1Msg) {
        this.l2ToL1Msgs.push(newL2ToL1Msg);
        return this;
    }
    withL2ToL1Msgs(l2ToL1Msgs) {
        this.l2ToL1Msgs = l2ToL1Msgs;
        return this;
    }
    pushNoteEncryptedLogsHash(noteEncryptedLogsHash) {
        this.noteEncryptedLogsHashes.push(noteEncryptedLogsHash);
        return this;
    }
    withNoteEncryptedLogsHashes(noteEncryptedLogsHashes) {
        this.noteEncryptedLogsHashes = noteEncryptedLogsHashes;
        return this;
    }
    pushEncryptedLogsHash(encryptedLogsHash) {
        this.encryptedLogsHashes.push(encryptedLogsHash);
        return this;
    }
    withEncryptedLogsHashes(encryptedLogsHashes) {
        this.encryptedLogsHashes = encryptedLogsHashes;
        return this;
    }
    pushUnencryptedLogsHash(unencryptedLogsHash) {
        this.unencryptedLogsHashes.push(unencryptedLogsHash);
        return this;
    }
    withUnencryptedLogsHashes(unencryptedLogsHashes) {
        this.unencryptedLogsHashes = unencryptedLogsHashes;
        return this;
    }
    pushPublicDataUpdateRequest(publicDataUpdateRequest) {
        this.publicDataUpdateRequests.push(publicDataUpdateRequest);
        return this;
    }
    withPublicDataUpdateRequests(publicDataUpdateRequests) {
        this.publicDataUpdateRequests = publicDataUpdateRequests;
        return this;
    }
    pushPublicCall(publicCall) {
        this.publicCallStack.push(publicCall);
        return this;
    }
    withPublicCallStack(publicCallStack) {
        this.publicCallStack = publicCallStack;
        return this;
    }
    withGasUsed(gasUsed) {
        this.gasUsed = gasUsed;
        return this;
    }
    build() {
        return new PublicAccumulatedData(padArrayEnd(this.noteHashes, ScopedNoteHash.empty(), MAX_NOTE_HASHES_PER_TX), padArrayEnd(this.nullifiers, Nullifier.empty(), MAX_NULLIFIERS_PER_TX), padArrayEnd(this.l2ToL1Msgs, ScopedL2ToL1Message.empty(), MAX_L2_TO_L1_MSGS_PER_TX), padArrayEnd(this.noteEncryptedLogsHashes, LogHash.empty(), MAX_NOTE_ENCRYPTED_LOGS_PER_TX), padArrayEnd(this.encryptedLogsHashes, ScopedLogHash.empty(), MAX_ENCRYPTED_LOGS_PER_TX), padArrayEnd(this.unencryptedLogsHashes, ScopedLogHash.empty(), MAX_UNENCRYPTED_LOGS_PER_TX), padArrayEnd(this.publicDataUpdateRequests, PublicDataUpdateRequest.empty(), MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX), padArrayEnd(this.publicCallStack, PublicCallRequest.empty(), MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX), this.gasUsed);
    }
    static fromPublicAccumulatedData(publicAccumulatedData) {
        return new PublicAccumulatedDataBuilder()
            .withNoteHashes(publicAccumulatedData.noteHashes)
            .withNullifiers(publicAccumulatedData.nullifiers)
            .withL2ToL1Msgs(publicAccumulatedData.l2ToL1Msgs)
            .withNoteEncryptedLogsHashes(publicAccumulatedData.noteEncryptedLogsHashes)
            .withEncryptedLogsHashes(publicAccumulatedData.encryptedLogsHashes)
            .withUnencryptedLogsHashes(publicAccumulatedData.unencryptedLogsHashes)
            .withPublicDataUpdateRequests(publicAccumulatedData.publicDataUpdateRequests)
            .withPublicCallStack(publicAccumulatedData.publicCallStack)
            .withGasUsed(publicAccumulatedData.gasUsed);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FjY3VtdWxhdGVkX2RhdGFfYnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3RzL2tlcm5lbC9wdWJsaWNfYWNjdW11bGF0ZWRfZGF0YV9idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUUzRCxPQUFPLEVBQ0wseUJBQXlCLEVBQ3pCLHdCQUF3QixFQUN4Qiw4QkFBOEIsRUFDOUIsc0JBQXNCLEVBQ3RCLHFCQUFxQixFQUNyQixtQ0FBbUMsRUFDbkMsc0NBQXNDLEVBQ3RDLDJCQUEyQixHQUM1QixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDaEMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDN0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRXJFOzs7OztHQUtHO0FBQ0gsTUFBTSxPQUFPLDRCQUE0QjtJQUF6QztRQUNVLGVBQVUsR0FBcUIsRUFBRSxDQUFDO1FBQ2xDLGVBQVUsR0FBZ0IsRUFBRSxDQUFDO1FBQzdCLGVBQVUsR0FBMEIsRUFBRSxDQUFDO1FBQ3ZDLDRCQUF1QixHQUFjLEVBQUUsQ0FBQztRQUN4Qyx3QkFBbUIsR0FBb0IsRUFBRSxDQUFDO1FBQzFDLDBC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