/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, type Tuple } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX } from '../../constants.gen.js';
import { Gas } from '../gas.js';
import { PublicCallRequest } from '../public_call_request.js';
import { PublicInnerCallRequest } from '../public_inner_call_request.js';
import { PublicValidationRequestArrayLengths, PublicValidationRequests } from '../public_validation_requests.js';
import { CombinedConstantData } from './combined_constant_data.js';
import { PublicAccumulatedData, PublicAccumulatedDataArrayLengths } from './public_accumulated_data.js';
/**
 * Call stack item on a public call.
 */
export declare class VMCircuitPublicInputs {
    constants: CombinedConstantData;
    callRequest: PublicCallRequest;
    publicCallStack: Tuple<PublicInnerCallRequest, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX>;
    previousValidationRequestArrayLengths: PublicValidationRequestArrayLengths;
    validationRequests: PublicValidationRequests;
    previousAccumulatedDataArrayLengths: PublicAccumulatedDataArrayLengths;
    accumulatedData: PublicAccumulatedData;
    startSideEffectCounter: number;
    endSideEffectCounter: number;
    startGasLeft: Gas;
    transactionFee: Fr;
    reverted: boolean;
    constructor(constants: CombinedConstantData, callRequest: PublicCallRequest, publicCallStack: Tuple<PublicInnerCallRequest, typeof MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX>, previousValidationRequestArrayLengths: PublicValidationRequestArrayLengths, validationRequests: PublicValidationRequests, previousAccumulatedDataArrayLengths: PublicAccumulatedDataArrayLengths, accumulatedData: PublicAccumulatedData, startSideEffectCounter: number, endSideEffectCounter: number, startGasLeft: Gas, transactionFee: Fr, reverted: boolean);
    toBuffer(): Buffer;
    clone(): VMCircuitPublicInputs;
    toString(): string;
    static fromString(str: string): VMCircuitPublicInputs;
    static fromBuffer(buffer: Buffer | BufferReader): VMCircuitPublicInputs;
    static empty(): VMCircuitPublicInputs;
    static fromFields(fields: Fr[] | FieldReader): VMCircuitPublicInputs;
    [inspect.custom](): string;
}
//# sourceMappingURL=vm_circuit_public_inputs.d.ts.map