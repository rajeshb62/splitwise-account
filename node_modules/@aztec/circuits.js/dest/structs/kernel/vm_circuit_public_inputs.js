import { makeTuple } from '@aztec/foundation/array';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX } from '../../constants.gen.js';
import { Gas } from '../gas.js';
import { PublicCallRequest } from '../public_call_request.js';
import { PublicInnerCallRequest } from '../public_inner_call_request.js';
import { PublicValidationRequestArrayLengths, PublicValidationRequests } from '../public_validation_requests.js';
import { CombinedConstantData } from './combined_constant_data.js';
import { PublicAccumulatedData, PublicAccumulatedDataArrayLengths } from './public_accumulated_data.js';
/**
 * Call stack item on a public call.
 */
export class VMCircuitPublicInputs {
    constructor(constants, callRequest, publicCallStack, previousValidationRequestArrayLengths, validationRequests, previousAccumulatedDataArrayLengths, accumulatedData, startSideEffectCounter, endSideEffectCounter, startGasLeft, transactionFee, reverted) {
        this.constants = constants;
        this.callRequest = callRequest;
        this.publicCallStack = publicCallStack;
        this.previousValidationRequestArrayLengths = previousValidationRequestArrayLengths;
        this.validationRequests = validationRequests;
        this.previousAccumulatedDataArrayLengths = previousAccumulatedDataArrayLengths;
        this.accumulatedData = accumulatedData;
        this.startSideEffectCounter = startSideEffectCounter;
        this.endSideEffectCounter = endSideEffectCounter;
        this.startGasLeft = startGasLeft;
        this.transactionFee = transactionFee;
        this.reverted = reverted;
    }
    toBuffer() {
        return serializeToBuffer(this.constants, this.callRequest, this.publicCallStack, this.previousValidationRequestArrayLengths, this.validationRequests, this.previousAccumulatedDataArrayLengths, this.accumulatedData, this.startSideEffectCounter, this.endSideEffectCounter, this.startGasLeft, this.transactionFee, this.reverted);
    }
    clone() {
        return VMCircuitPublicInputs.fromBuffer(this.toBuffer());
    }
    toString() {
        return this.toBuffer().toString('hex');
    }
    static fromString(str) {
        return VMCircuitPublicInputs.fromBuffer(Buffer.from(str, 'hex'));
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new VMCircuitPublicInputs(reader.readObject(CombinedConstantData), reader.readObject(PublicCallRequest), reader.readArray(MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, PublicInnerCallRequest), reader.readObject(PublicValidationRequestArrayLengths), reader.readObject(PublicValidationRequests), reader.readObject(PublicAccumulatedDataArrayLengths), reader.readObject(PublicAccumulatedData), reader.readNumber(), reader.readNumber(), reader.readObject(Gas), reader.readObject(Fr), reader.readBoolean());
    }
    static empty() {
        return new VMCircuitPublicInputs(CombinedConstantData.empty(), PublicCallRequest.empty(), makeTuple(MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, PublicInnerCallRequest.empty), PublicValidationRequestArrayLengths.empty(), PublicValidationRequests.empty(), PublicAccumulatedDataArrayLengths.empty(), PublicAccumulatedData.empty(), 0, 0, Gas.empty(), Fr.ZERO, false);
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new VMCircuitPublicInputs(CombinedConstantData.fromFields(reader), PublicCallRequest.fromFields(reader), reader.readArray(MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, PublicInnerCallRequest), PublicValidationRequestArrayLengths.fromFields(reader), PublicValidationRequests.fromFields(reader), PublicAccumulatedDataArrayLengths.fromFields(reader), PublicAccumulatedData.fromFields(reader), reader.readU32(), reader.readU32(), Gas.fromFields(reader), reader.readField(), reader.readBoolean());
    }
    [inspect.custom]() {
        return `VMCircuitPublicInputs {
      constants: ${inspect(this.constants)},
      callRequest: ${inspect(this.callRequest)}
      previousValidationRequestArrayLengths: ${inspect(this.previousValidationRequestArrayLengths)},
      validationRequests: ${inspect(this.validationRequests)},
      previousAccumulatedDataArrayLengths: ${inspect(this.previousAccumulatedDataArrayLengths)},
      accumulatedData: ${inspect(this.accumulatedData)},
      startSideEffectCounter: ${this.startSideEffectCounter},
      endSideEffectCounter: ${this.endSideEffectCounter},
      startGasLeft: ${this.startGasLeft},
      transactionFee: ${this.transactionFee},
      reverted: ${this.reverted},
      }`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidm1fY2lyY3VpdF9wdWJsaWNfaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0cnVjdHMva2VybmVsL3ZtX2NpcmN1aXRfcHVibGljX2lucHV0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFjLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFdkcsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUvQixPQUFPLEVBQUUsbUNBQW1DLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQzlELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxtQ0FBbUMsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2pILE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ25FLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRXhHOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQUNoQyxZQUNTLFNBQStCLEVBQy9CLFdBQThCLEVBQzlCLGVBQTBGLEVBQzFGLHFDQUEwRSxFQUMxRSxrQkFBNEMsRUFDNUMsbUNBQXNFLEVBQ3RFLGVBQXNDLEVBQ3RDLHNCQUE4QixFQUM5QixvQkFBNEIsRUFDNUIsWUFBaUIsRUFDakIsY0FBa0IsRUFDbEIsUUFBaUI7UUFYakIsY0FBUyxHQUFULFNBQVMsQ0FBc0I7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