import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { FUNCTION_TREE_HEIGHT, PROTOCOL_CONTRACT_TREE_HEIGHT } from '../../constants.gen.js';
import { PublicKeys } from '../../types/public_keys.js';
import { MembershipWitness } from '../membership_witness.js';
import { PrivateCircuitPublicInputs } from '../private_circuit_public_inputs.js';
import { VerificationKeyAsFields } from '../verification_key.js';
/**
 * Private call data.
 */
export class PrivateCallData {
    constructor(
    /**
     * Public inputs of the private function circuit.
     */
    publicInputs, 
    /**
     * The verification key for the function being invoked.
     */
    vk, 
    /**
     * Artifact hash of the contract class for this private call.
     */
    contractClassArtifactHash, 
    /**
     * Public bytecode commitment for the contract class for this private call.
     */
    contractClassPublicBytecodeCommitment, 
    /**
     * Public keys hash of the contract instance.
     */
    publicKeys, 
    /**
     * Salted initialization hash of the contract instance.
     */
    saltedInitializationHash, 
    /**
     * The membership witness for the function leaf corresponding to the function being invoked.
     */
    functionLeafMembershipWitness, protocolContractSiblingPath, 
    /**
     * The hash of the ACIR of the function being invoked.
     */
    acirHash) {
        this.publicInputs = publicInputs;
        this.vk = vk;
        this.contractClassArtifactHash = contractClassArtifactHash;
        this.contractClassPublicBytecodeCommitment = contractClassPublicBytecodeCommitment;
        this.publicKeys = publicKeys;
        this.saltedInitializationHash = saltedInitializationHash;
        this.functionLeafMembershipWitness = functionLeafMembershipWitness;
        this.protocolContractSiblingPath = protocolContractSiblingPath;
        this.acirHash = acirHash;
    }
    /**
     * Serialize into a field array. Low-level utility.
     * @param fields - Object with fields.
     * @returns The array.
     */
    static getFields(fields) {
        return [
            fields.publicInputs,
            fields.vk,
            fields.contractClassArtifactHash,
            fields.contractClassPublicBytecodeCommitment,
            fields.publicKeys,
            fields.saltedInitializationHash,
            fields.functionLeafMembershipWitness,
            fields.protocolContractSiblingPath,
            fields.acirHash,
        ];
    }
    static from(fields) {
        return new PrivateCallData(...PrivateCallData.getFields(fields));
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(...PrivateCallData.getFields(this));
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateCallData(reader.readObject(PrivateCircuitPublicInputs), reader.readObject(VerificationKeyAsFields), reader.readObject(Fr), reader.readObject(Fr), reader.readObject(PublicKeys), reader.readObject(Fr), reader.readObject(MembershipWitness.deserializer(FUNCTION_TREE_HEIGHT)), reader.readArray(PROTOCOL_CONTRACT_TREE_HEIGHT, Fr), reader.readObject(Fr));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZV9jYWxsX2RhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9rZXJuZWwvcHJpdmF0ZV9jYWxsX2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQWMsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUcxRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDakYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFakU7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQUMxQjtJQUNFOztPQUVHO0lBQ0ksWUFBd0M7SUFDL0M7O09BRUc7SUFDSSxFQUEyQjtJQUNsQzs7T0FFRztJQUNJLHlCQUE2QjtJQUNwQzs7T0FFRztJQUNJLHFDQUF5QztJQUNoRDs7T0FFRztJQUNJLFVBQXNCO0lBQzdCOztPQUVHO0lBQ0ksd0JBQTRCO0lBQ25DOztPQUVHO0lBQ0ksNkJBQTZFLEVBQzdFLDJCQUE0RTtJQUNuRjs7T0FFRztJQUNJLFFBQVk7UUE3QlosaUJBQVksR0FBWixZQUFZLENBQTRCO1FBSXhDLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBSTNCLDhCQUF5QixHQUF6Qix5QkFBeUIsQ0FBSTtRQUk3QiwwQ0FBcUMsR0FBckMscUNBQXFDLENBQUk7UUFJekMsZUFBVSxHQUFWLFVBQVUsQ0FBWTtRQUl0Qiw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQUk7UUFJNUIsa0NBQTZCLEdBQTdCLDZCQUE2QixDQUFnRDtRQUM3RSxnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQWlEO1FBSTVFLGFBQVEsR0FBUixRQUFRLENBQUk7SUFDbEIsQ0FBQztJQUVKOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQWlDO1FBQ2hELE9BQU87WUFDTCxNQUFNLENBQUMsWUFBWTtZQUNuQixNQUFNLENBQUMsRUFBRTtZQUNULE1BQU0sQ0FBQyx5QkFBeUI7WUFDaEMsTUFBTSxDQUFDLHFDQUFxQztZQUM1QyxNQUFNLENBQUMsVUFBVTtZQUNqQixNQUFNLENBQUMsd0JBQXdCO1lBQy9CLE1BQU0sQ0FBQyw2QkFBNkI7WUFDcEMsTUFBTSxDQUFDLDJCQUEyQjtZQUNsQyxNQUFNLENBQUMsUUFBUTtTQUNQLENBQUM7SUFDYixDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFpQztRQUMzQyxPQUFPLElBQUksZUFBZSxDQUFDLEdBQUcsZUFBZSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRDs7O09BR0c7SUFDSCxRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNkI7UUFDN0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxPQUFPLElBQUksZUFBZSxDQUN4QixNQUFNLENBQUMsVUFBVSxDQUFDLDBCQUEwQixDQUFDLEVBQzdDLE1BQU0sQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsRUFDMUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFDckIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFDckIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFDN0IsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFDckIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxFQUN2RSxNQUFNLENBQUMsU0FBUyxDQUFDLDZCQUE2QixFQUFFLEVBQUUsQ0FBQyxFQUNuRCxNQUFNLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUN0QixDQUFDO0lBQ0osQ0FBQztDQUNGIn0=