import { AztecAddress } from '@aztec/foundation/aztec-address';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { PrivateValidationRequests } from '../private_validation_requests.js';
import { PublicCallRequest } from '../public_call_request.js';
import { CombinedConstantData } from './combined_constant_data.js';
import { PrivateAccumulatedData } from './private_accumulated_data.js';
/**
 * Public inputs to the inner private kernel circuit
 */
export class PrivateKernelCircuitPublicInputs {
    constructor(
    /**
     * The side effect counter that non-revertible side effects are all beneath.
     */
    minRevertibleSideEffectCounter, 
    /**
     * Validation requests accumulated from public functions.
     */
    validationRequests, 
    /**
     * Data accumulated from both public and private circuits.
     */
    end, 
    /**
     * Data which is not modified by the circuits.
     */
    constants, 
    /**
     * The call request for the public teardown function
     */
    publicTeardownCallRequest, 
    /**
     * The address of the fee payer for the transaction
     */
    feePayer) {
        this.minRevertibleSideEffectCounter = minRevertibleSideEffectCounter;
        this.validationRequests = validationRequests;
        this.end = end;
        this.constants = constants;
        this.publicTeardownCallRequest = publicTeardownCallRequest;
        this.feePayer = feePayer;
    }
    toBuffer() {
        return serializeToBuffer(this.minRevertibleSideEffectCounter, this.validationRequests, this.end, this.constants, this.publicTeardownCallRequest, this.feePayer);
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns A new instance of PrivateKernelInnerCircuitPublicInputs.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateKernelCircuitPublicInputs(reader.readObject(Fr), reader.readObject(PrivateValidationRequests), reader.readObject(PrivateAccumulatedData), reader.readObject(CombinedConstantData), reader.readObject(PublicCallRequest), reader.readObject(AztecAddress));
    }
    static empty() {
        return new PrivateKernelCircuitPublicInputs(Fr.zero(), PrivateValidationRequests.empty(), PrivateAccumulatedData.empty(), CombinedConstantData.empty(), PublicCallRequest.empty(), AztecAddress.ZERO);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZV9rZXJuZWxfY2lyY3VpdF9wdWJsaWNfaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0cnVjdHMva2VybmVsL3ByaXZhdGVfa2VybmVsX2NpcmN1aXRfcHVibGljX2lucHV0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDL0QsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUU5RSxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUM5RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUV2RTs7R0FFRztBQUNILE1BQU0sT0FBTyxnQ0FBZ0M7SUFDM0M7SUFDRTs7T0FFRztJQUNJLDhCQUFrQztJQUN6Qzs7T0FFRztJQUNJLGtCQUE2QztJQUNwRDs7T0FFRztJQUNJLEdBQTJCO0lBQ2xDOztPQUVHO0lBQ0ksU0FBK0I7SUFDdEM7O09BRUc7SUFDSSx5QkFBNEM7SUFDbkQ7O09BRUc7SUFDSSxRQUFzQjtRQXBCdEIsbUNBQThCLEdBQTlCLDhCQUE4QixDQUFJO1FBSWxDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBMkI7UUFJN0MsUUFBRyxHQUFILEdBQUcsQ0FBd0I7UUFJM0IsY0FBUyxHQUFULFNBQVMsQ0FBc0I7UUFJL0IsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUFtQjtRQUk1QyxhQUFRLEdBQVIsUUFBUSxDQUFjO0lBQzVCLENBQUM7SUFFSixRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FDdEIsSUFBSSxDQUFDLDhCQUE4QixFQUNuQyxJQUFJLENBQUMsa0JBQWtCLEVBQ3ZCLElBQUksQ0FBQyxHQUFHLEVBQ1IsSUFBSSxDQUFDLFNBQVMsRUFDZCxJQUFJLENBQUMseUJBQXlCLEVBQzlCLElBQUksQ0FBQyxRQUFRLENBQ2QsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUE2QjtRQUM3QyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxnQ0FBZ0MsQ0FDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFDckIsTUFBTSxDQUFDLFVBQVUsQ0FBQyx5QkFBeUIsQ0FBQyxFQUM1QyxNQUFNLENBQUMsVUFBVSxDQUFDLHNCQUFzQixDQUFDLEVBQ3pDLE1BQU0sQ0FBQyxVQUFVLENBQUMsb0JBQW9CLENBQUMsRUFDdkMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUNwQyxNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxDQUNoQyxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLO1FBQ1YsT0FBTyxJQUFJLGdDQUFnQyxDQUN6QyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQ1QseUJBQXlCLENBQUMsS0FBSyxFQUFFLEVBQ2pDLHNCQUFzQixDQUFDLEtBQUssRUFBRSxFQUM5QixvQkFBb0IsQ0FBQyxLQUFLLEVBQUUsRUFDNUIsaUJBQWlCLENBQUMsS0FBSyxFQUFFLEVBQ3pCLFlBQVksQ0FBQyxJQUFJLENBQ2xCLENBQUM7SUFDSixDQUFDO0NBQ0YifQ==