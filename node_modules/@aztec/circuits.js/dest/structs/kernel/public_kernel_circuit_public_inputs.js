import { AztecAddress } from '@aztec/foundation/aztec-address';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { PublicCallRequest } from '../public_call_request.js';
import { PublicValidationRequests } from '../public_validation_requests.js';
import { RevertCode } from '../revert_code.js';
import { CombinedConstantData } from './combined_constant_data.js';
import { PublicAccumulatedData } from './public_accumulated_data.js';
/**
 * Outputs from the public kernel circuits.
 * All Public kernels use this shape for outputs.
 */
export class PublicKernelCircuitPublicInputs {
    constructor(
    /**
     * Data which is not modified by the circuits.
     */
    constants, 
    /**
     * Validation requests accumulated from public functions.
     */
    validationRequests, 
    /**
     * Accumulated side effects and enqueued calls that are not revertible.
     */
    endNonRevertibleData, 
    /**
     * Data accumulated from both public and private circuits.
     */
    end, 
    /**
     * Counter of the last side effect.
     */
    endSideEffectCounter, 
    /**
     * The call request for the public teardown function
     */
    publicTeardownCallRequest, 
    /**
     * The address of the fee payer for the transaction
     */
    feePayer, 
    /**
     * Indicates whether execution of the public circuit reverted.
     */
    revertCode) {
        this.constants = constants;
        this.validationRequests = validationRequests;
        this.endNonRevertibleData = endNonRevertibleData;
        this.end = end;
        this.endSideEffectCounter = endSideEffectCounter;
        this.publicTeardownCallRequest = publicTeardownCallRequest;
        this.feePayer = feePayer;
        this.revertCode = revertCode;
    }
    toBuffer() {
        return serializeToBuffer(this.constants, this.validationRequests, this.endNonRevertibleData, this.end, this.endSideEffectCounter, this.publicTeardownCallRequest, this.feePayer, this.revertCode);
    }
    clone() {
        return PublicKernelCircuitPublicInputs.fromBuffer(this.toBuffer());
    }
    toString() {
        return this.toBuffer().toString('hex');
    }
    static fromString(str) {
        return PublicKernelCircuitPublicInputs.fromBuffer(Buffer.from(str, 'hex'));
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns A new instance of PublicKernelCircuitPublicInputs.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicKernelCircuitPublicInputs(reader.readObject(CombinedConstantData), reader.readObject(PublicValidationRequests), reader.readObject(PublicAccumulatedData), reader.readObject(PublicAccumulatedData), reader.readNumber(), reader.readObject(PublicCallRequest), reader.readObject(AztecAddress), reader.readObject(RevertCode));
    }
    static empty() {
        return new PublicKernelCircuitPublicInputs(CombinedConstantData.empty(), PublicValidationRequests.empty(), PublicAccumulatedData.empty(), PublicAccumulatedData.empty(), 0, PublicCallRequest.empty(), AztecAddress.ZERO, RevertCode.OK);
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new PublicKernelCircuitPublicInputs(CombinedConstantData.fromFields(reader), PublicValidationRequests.fromFields(reader), PublicAccumulatedData.fromFields(reader), PublicAccumulatedData.fromFields(reader), reader.readU32(), PublicCallRequest.fromFields(reader), AztecAddress.fromFields(reader), RevertCode.fromField(reader.readField()));
    }
    [inspect.custom]() {
        return `PublicKernelCircuitPublicInputs {
      constants: ${inspect(this.constants)},
      validationRequests: ${inspect(this.validationRequests)},
      endNonRevertibleData: ${inspect(this.endNonRevertibleData)},
      end: ${inspect(this.end)},
      endSideEffectCounter: ${this.endSideEffectCounter},
      publicTeardownCallRequest: ${inspect(this.publicTeardownCallRequest)},
      feePayer: ${this.feePayer},
      revertCode: ${this.revertCode},
      }`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2tlcm5lbF9jaXJjdWl0X3B1YmxpY19pbnB1dHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9rZXJuZWwvcHVibGljX2tlcm5lbF9jaXJjdWl0X3B1YmxpY19pbnB1dHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRS9ELE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFM0YsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUvQixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDL0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDbkUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFckU7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLCtCQUErQjtJQUMxQztJQUNFOztPQUVHO0lBQ0ksU0FBK0I7SUFDdEM7O09BRUc7SUFDSSxrQkFBNEM7SUFDbkQ7O09BRUc7SUFDSSxvQkFBMkM7SUFDbEQ7O09BRUc7SUFDSSxHQUEwQjtJQUNqQzs7T0FFRztJQUNJLG9CQUE0QjtJQUNuQzs7T0FFRztJQUNJLHlCQUE0QztJQUNuRDs7T0FFRztJQUNJLFFBQXNCO0lBQzdCOztPQUVHO0lBQ0ksVUFBc0I7UUE1QnRCLGNBQVMsR0FBVCxTQUFTLENBQXNCO1FBSS9CLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBMEI7UUFJNUMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUF1QjtRQUkzQyxRQUFHLEdBQUgsR0FBRyxDQUF1QjtR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