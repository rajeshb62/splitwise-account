import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { Header } from '../header.js';
export class PrivateKernelEmptyInputData {
    constructor(header, chainId, version, vkTreeRoot, protocolContractTreeRoot) {
        this.header = header;
        this.chainId = chainId;
        this.version = version;
        this.vkTreeRoot = vkTreeRoot;
        this.protocolContractTreeRoot = protocolContractTreeRoot;
    }
    toBuffer() {
        return serializeToBuffer(this.header, this.chainId, this.version, this.vkTreeRoot, this.protocolContractTreeRoot);
    }
    toString() {
        return this.toBuffer().toString('hex');
    }
    static fromBuffer(buf) {
        const reader = BufferReader.asReader(buf);
        return new PrivateKernelEmptyInputData(reader.readObject(Header), reader.readObject(Fr), reader.readObject(Fr), reader.readObject(Fr), reader.readObject(Fr));
    }
    static fromString(str) {
        return PrivateKernelEmptyInputData.fromBuffer(Buffer.from(str, 'hex'));
    }
    static from(fields) {
        return new PrivateKernelEmptyInputData(fields.header, fields.chainId, fields.version, fields.vkTreeRoot, fields.protocolContractTreeRoot);
    }
}
export class PrivateKernelEmptyInputs {
    constructor(emptyNested, header, chainId, version, vkTreeRoot, protocolContractTreeRoot) {
        this.emptyNested = emptyNested;
        this.header = header;
        this.chainId = chainId;
        this.version = version;
        this.vkTreeRoot = vkTreeRoot;
        this.protocolContractTreeRoot = protocolContractTreeRoot;
    }
    toBuffer() {
        return serializeToBuffer(this.emptyNested, this.header, this.chainId, this.version, this.vkTreeRoot, this.protocolContractTreeRoot);
    }
    static from(fields) {
        return new PrivateKernelEmptyInputs(fields.emptyNested, fields.header, fields.chainId, fields.version, fields.vkTreeRoot, fields.protocolContractTreeRoot);
    }
}
export class EmptyNestedCircuitInputs {
    toBuffer() {
        return Buffer.alloc(0);
    }
}
export class EmptyNestedData {
    constructor(proof, vk) {
        this.proof = proof;
        this.vk = vk;
    }
    toBuffer() {
        return serializeToBuffer(this.proof, this.vk);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZV9rZXJuZWxfZW1wdHlfaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0cnVjdHMva2VybmVsL3ByaXZhdGVfa2VybmVsX2VtcHR5X2lucHV0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBSTlFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFJdEMsTUFBTSxPQUFPLDJCQUEyQjtJQUN0QyxZQUNrQixNQUFjLEVBQ2QsT0FBVyxFQUNYLE9BQVcsRUFDWCxVQUFjLEVBQ2Qsd0JBQTRCO1FBSjVCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxZQUFPLEdBQVAsT0FBTyxDQUFJO1FBQ1gsWUFBTyxHQUFQLE9BQU8sQ0FBSTtRQUNYLGVBQVUsR0FBVixVQUFVLENBQUk7UUFDZCw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQUk7SUFDM0MsQ0FBQztJQUVKLFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7SUFDcEgsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBVztRQUMzQixNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFDLE9BQU8sSUFBSSwyQkFBMkIsQ0FDcEMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFDekIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFDckIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFDckIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFDckIsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FDdEIsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQVc7UUFDM0IsT0FBTywyQkFBMkIsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUE2QztRQUN2RCxPQUFPLElBQUksMkJBQTJCLENBQ3BDLE1BQU0sQ0FBQyxNQUFNLEVBQ2IsTUFBTSxDQUFDLE9BQU8sRUFDZCxNQUFNLENBQUMsT0FBTyxFQUNkLE1BQU0sQ0FBQyxVQUFVLEVBQ2pCLE1BQU0sQ0FBQyx3QkFBd0IsQ0FDaEMsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyx3QkFBd0I7SUFDbkMsWUFDa0IsV0FBNEIsRUFDNUIsTUFBYyxFQUNkLE9BQVcsRUFDWCxPQUFXLEVBQ1gsVUFBYyxFQUNkLHdCQUE0QjtRQUw1QixnQkFBVyxHQUFYLFdBQVcsQ0FBaUI7UUFDNUIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLFlBQU8sR0FBUCxPQUFPLENBQUk7UUFDWCxZQUFPLEdBQVAsT0FBTyxDQUFJO1FBQ1gsZUFBVSxHQUFWLFVBQVUsQ0FBSTtRQUNkLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBSTtJQUMzQyxDQUFDO0lBRUosUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQ3RCLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxNQUFNLEVBQ1gsSUFBSSxDQUFDLE9BQU8sRUFDWixJQUFJLENBQUMsT0FBTyxFQUNaLElBQUksQ0FBQyxVQUFVLEVBQ2YsSUFBSSxDQUFDLHdCQUF3QixDQUM5QixDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBMEM7UUFDcEQsT0FBTyxJQUFJLHdCQUF3QixDQUNqQyxNQUFNLENBQUMsV0FBVyxFQUNsQixNQUFNLENBQUMsTUFBTSxFQUNiLE1BQU0sQ0FBQyxPQUFPLEVBQ2QsTUFBTSxDQUFDLE9BQU8sRUFDZCxNQUFNLENBQUMsVUFBVSxFQUNqQixNQUFNLENBQUMsd0JBQXdCLENBQ2hDLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sd0JBQXdCO0lBQ25DLFFBQVE7UUFDTixPQUFPLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDekIsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLGVBQWU7SUFDMUIsWUFDa0IsS0FBb0QsRUFDcEQsRUFBMkI7UUFEM0IsVUFBSyxHQUFMLEtBQUssQ0FBK0M7UUFDcEQsT0FBRSxHQUFGLEVBQUUsQ0FBeUI7SUFDMUMsQ0FBQztJQUVKLFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Q0FDRiJ9