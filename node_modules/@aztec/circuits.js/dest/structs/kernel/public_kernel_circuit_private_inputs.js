import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { EnqueuedCallData } from './enqueued_call_data.js';
import { PublicKernelData } from './public_kernel_data.js';
/**
 * Inputs to the public kernel circuit.
 */
export class PublicKernelCircuitPrivateInputs {
    constructor(
    /**
     * Kernels are recursive and this is the data from the previous kernel.
     */
    previousKernel, 
    /**
     * Public calldata assembled from the execution result and proof.
     */
    enqueuedCall) {
        this.previousKernel = previousKernel;
        this.enqueuedCall = enqueuedCall;
    }
    /**
     * Serializes the object to a buffer.
     * @returns - Buffer representation of the object.
     */
    toBuffer() {
        return serializeToBuffer(this.previousKernel, this.enqueuedCall);
    }
    /**
     * Serializes the object to a hex string.
     * @returns - Hex string representation of the object.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /**
     * Deserializes the object from a buffer.
     * @param buffer - Buffer to deserialize.
     * @returns - Deserialized object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const previousKernel = reader.readObject(PublicKernelData);
        const enqueuedCall = reader.readObject(EnqueuedCallData);
        return new PublicKernelCircuitPrivateInputs(previousKernel, enqueuedCall);
    }
    /**
     * Deserializes the object from a hex string.
     * @param str - Hex string to deserialize.
     * @returns - Deserialized object.
     */
    static fromString(str) {
        return PublicKernelCircuitPrivateInputs.fromBuffer(Buffer.from(str, 'hex'));
    }
    /**
     * Clones the object.
     * @returns - Cloned object.
     */
    clone() {
        return PublicKernelCircuitPrivateInputs.fromBuffer(this.toBuffer());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2tlcm5lbF9jaXJjdWl0X3ByaXZhdGVfaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0cnVjdHMva2VybmVsL3B1YmxpY19rZXJuZWxfY2lyY3VpdF9wcml2YXRlX2lucHV0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFOUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFM0Q7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZ0NBQWdDO0lBQzNDO0lBQ0U7O09BRUc7SUFDYSxjQUFnQztJQUNoRDs7T0FFRztJQUNhLFlBQThCO1FBSjlCLG1CQUFjLEdBQWQsY0FBYyxDQUFrQjtRQUloQyxpQkFBWSxHQUFaLFlBQVksQ0FBa0I7SUFDN0MsQ0FBQztJQUVKOzs7T0FHRztJQUNILFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRDs7O09BR0c7SUFDSCxRQUFRO1FBQ04sT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUE2QjtRQUM3QyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE1BQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUMzRCxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDekQsT0FBTyxJQUFJLGdDQUFnQyxDQUFDLGNBQWMsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBVztRQUMzQixPQUFPLGdDQUFnQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlFLENBQUM7SUFFRDs7O09BR0c7SUFDSCxLQUFLO1FBQ0gsT0FBTyxnQ0FBZ0MsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDdEUsQ0FBQztDQUNGIn0=