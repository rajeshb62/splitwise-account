import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { KeyValidationHint, noteHashReadRequestHintsFromBuffer, nullifierReadRequestHintsFromBuffer, } from '../read_request_hints/index.js';
import { TransientDataIndexHint } from '../transient_data_index_hint.js';
export { TransientDataIndexHint } from '../transient_data_index_hint.js';
export class PrivateKernelResetHints {
    constructor(
    /**
     * Contains hints for the transient read requests to localize corresponding commitments.
     */
    noteHashReadRequestHints, 
    /**
     * Contains hints for the nullifier read requests to locate corresponding pending or settled nullifiers.
     */
    nullifierReadRequestHints, 
    /**
     * Contains hints for key validation request.
     */
    keyValidationHints, 
    /**
     * Contains hints for the transient note hashes to locate corresponding nullifiers.
     */
    transientDataIndexHints, 
    /**
     * The "final" minRevertibleSideEffectCounter of a tx, to split the data for squashing.
     * Not the minRevertibleSideEffectCounter at the point the reset circuit is run.
     */
    validationRequestsSplitCounter) {
        this.noteHashReadRequestHints = noteHashReadRequestHints;
        this.nullifierReadRequestHints = nullifierReadRequestHints;
        this.keyValidationHints = keyValidationHints;
        this.transientDataIndexHints = transientDataIndexHints;
        this.validationRequestsSplitCounter = validationRequestsSplitCounter;
    }
    toBuffer() {
        return serializeToBuffer(this.noteHashReadRequestHints, this.nullifierReadRequestHints, this.keyValidationHints, this.transientDataIndexHints, this.validationRequestsSplitCounter);
    }
    trimToSizes(numNoteHashReadRequestPending, numNoteHashReadRequestSettled, numNullifierReadRequestPending, numNullifierReadRequestSettled, numKeyValidationRequests, numTransientDataIndexHints) {
        return new PrivateKernelResetHints(this.noteHashReadRequestHints.trimToSizes(numNoteHashReadRequestPending, numNoteHashReadRequestSettled), this.nullifierReadRequestHints.trimToSizes(numNullifierReadRequestPending, numNullifierReadRequestSettled), this.keyValidationHints.slice(0, numKeyValidationRequests), this.transientDataIndexHints.slice(0, numTransientDataIndexHints), this.validationRequestsSplitCounter);
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer, numNoteHashReadRequestPending, numNoteHashReadRequestSettled, numNullifierReadRequestPending, numNullifierReadRequestSettled, numNullifierKeys, numTransientDataIndexHints) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateKernelResetHints(reader.readObject({
            fromBuffer: buf => noteHashReadRequestHintsFromBuffer(buf, numNoteHashReadRequestPending, numNoteHashReadRequestSettled),
        }), reader.readObject({
            fromBuffer: buf => nullifierReadRequestHintsFromBuffer(buf, numNullifierReadRequestPending, numNullifierReadRequestSettled),
        }), reader.readArray(numNullifierKeys, KeyValidationHint), reader.readArray(numTransientDataIndexHints, TransientDataIndexHint), reader.readNumber());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZV9rZXJuZWxfcmVzZXRfaGludHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9rZXJuZWwvcHJpdmF0ZV9rZXJuZWxfcmVzZXRfaGludHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBYyxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTFGLE9BQU8sRUFDTCxpQkFBaUIsRUFHakIsa0NBQWtDLEVBQ2xDLG1DQUFtQyxHQUNwQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRXpFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRXpFLE1BQU0sT0FBTyx1QkFBdUI7SUFRbEM7SUFDRTs7T0FFRztJQUNJLHdCQUFnRjtJQUN2Rjs7T0FFRztJQUNJLHlCQUFvRjtJQUMzRjs7T0FFRztJQUNJLGtCQUFxRTtJQUM1RTs7T0FFRztJQUNJLHVCQUFzRjtJQUM3Rjs7O09BR0c7SUFDSSw4QkFBc0M7UUFqQnRDLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FBd0Q7UUFJaEYsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUEyRDtRQUlwRix1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW1EO1FBSXJFLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBK0Q7UUFLdEYsbUNBQThCLEdBQTlCLDhCQUE4QixDQUFRO0lBQzVDLENBQUM7SUFFSixRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FDdEIsSUFBSSxDQUFDLHdCQUF3QixFQUM3QixJQUFJLENBQUMseUJBQXlCLEVBQzlCLElBQUksQ0FBQyxrQkFBa0IsRUFDdkIsSUFBSSxDQUFDLHVCQUF1QixFQUM1QixJQUFJLENBQUMsOEJBQThCLENBQ3BDLENBQUM7SUFDSixDQUFDO0lBRUQsV0FBVyxDQVFULDZCQUFnRCxFQUNoRCw2QkFBZ0QsRUFDaEQsOEJBQWtELEVBQ2xELDhCQUFrRCxFQUNsRCx3QkFBcUQsRUFDckQsMEJBQTBEO1FBUzFELE9BQU8sSUFBSSx1QkFBdUIsQ0FDaEMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFdBQVcsQ0FBQyw2QkFBNkIsRUFBRSw2QkFBNkIsQ0FBQyxFQUN2RyxJQUFJLENBQUMseUJBQXlCLENBQUMsV0FBVyxDQUFDLDhCQUE4QixFQUFFLDhCQUE4QixDQUFDLEVBQzFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLHdCQUF3QixDQUd4RCxFQUNELElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLDBCQUEwQixDQUcvRCxFQUNELElBQUksQ0FBQyw4QkFBOEIsQ0FDcEMsQ0FBQztJQUNKLENBQUM7SUFDRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FRZixNQUE2QixFQUM3Qiw2QkFBNEMsRUFDNUMsNkJBQTRDLEVBQzVDLDhCQUE4QyxFQUM5Qyw4QkFBOEMsRUFDOUMsZ0JBQXlDLEVBQ3pDLDBCQUEwRDtRQVMxRCxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSx1QkFBdUIsQ0FDaEMsTUFBTSxDQUFDLFVBQVUsQ0FBQztZQUNoQixVQUFVLEVBQUUsR0FBRyxDQUFDLEVBQUUsQ0FDaEIsa0NBQWtDLENBQUMsR0FBRyxFQUFFLDZCQUE2QixFQUFFLDZCQUE2QixDQUFDO1NBQ3hHLENBQUMsRUFDRixNQUFNLENBQUMsVUFBVSxDQUFDO1lBQ2hCLFVBQVUsRUFBRSxHQUFHLENBQUMsRUFBRSxDQUNoQixtQ0FBbUMsQ0FBQyxHQUFHLEVBQUUsOEJBQThCLEVBQUUsOEJBQThCLENBQUM7U0FDM0csQ0FBQyxFQUNGLE1BQU0sQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsaUJBQWlCLENBQUMsRUFDckQsTUFBTSxDQUFDLFNBQVMsQ0FBQywwQkFBMEIsRUFBRSxzQkFBc0IsQ0FBQyxFQUNwRSxNQUFNLENBQUMsVUFBVSxFQUFFLENBQ3BCLENBQUM7SUFDSixDQUFDO0NBQ0YifQ==