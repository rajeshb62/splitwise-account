import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { L1_TO_L2_MSG_TREE_HEIGHT, MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_TX, MAX_NOTE_HASH_READ_REQUESTS_PER_TX, MAX_NULLIFIER_READ_REQUESTS_PER_TX, MAX_PUBLIC_DATA_HINTS, NOTE_HASH_TREE_HEIGHT, } from '../../constants.gen.js';
import { nullifierNonExistentReadRequestHintsFromBuffer, } from '../non_existent_read_request_hints.js';
import { PartialStateReference } from '../partial_state_reference.js';
import { PublicDataLeafHint } from '../public_data_leaf_hint.js';
import { nullifierReadRequestHintsFromBuffer } from '../read_request_hints/index.js';
import { TreeLeafReadRequestHint } from '../tree_leaf_read_request_hint.js';
import { PublicKernelData } from './public_kernel_data.js';
export class PublicKernelTailCircuitPrivateInputs {
    constructor(
    /**
     * Kernels are recursive and this is the data from the previous kernel.
     */
    previousKernel, noteHashReadRequestHints, 
    /**
     * Contains hints for the nullifier read requests to locate corresponding pending or settled nullifiers.
     */
    nullifierReadRequestHints, 
    /**
     * Contains hints for the nullifier non existent read requests.
     */
    nullifierNonExistentReadRequestHints, l1ToL2MsgReadRequestHints, publicDataHints, startState) {
        this.previousKernel = previousKernel;
        this.noteHashReadRequestHints = noteHashReadRequestHints;
        this.nullifierReadRequestHints = nullifierReadRequestHints;
        this.nullifierNonExistentReadRequestHints = nullifierNonExistentReadRequestHints;
        this.l1ToL2MsgReadRequestHints = l1ToL2MsgReadRequestHints;
        this.publicDataHints = publicDataHints;
        this.startState = startState;
    }
    toBuffer() {
        return serializeToBuffer(this.previousKernel, this.noteHashReadRequestHints, this.nullifierReadRequestHints, this.nullifierNonExistentReadRequestHints, this.l1ToL2MsgReadRequestHints, this.publicDataHints, this.startState);
    }
    toString() {
        return this.toBuffer().toString('hex');
    }
    static fromString(str) {
        return PublicKernelTailCircuitPrivateInputs.fromBuffer(Buffer.from(str, 'hex'));
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicKernelTailCircuitPrivateInputs(reader.readObject(PublicKernelData), reader.readArray(MAX_NOTE_HASH_READ_REQUESTS_PER_TX, {
            fromBuffer: buf => TreeLeafReadRequestHint.fromBuffer(buf, NOTE_HASH_TREE_HEIGHT),
        }), nullifierReadRequestHintsFromBuffer(reader, MAX_NULLIFIER_READ_REQUESTS_PER_TX, MAX_NULLIFIER_READ_REQUESTS_PER_TX), nullifierNonExistentReadRequestHintsFromBuffer(reader), reader.readArray(MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_TX, {
            fromBuffer: buf => TreeLeafReadRequestHint.fromBuffer(buf, L1_TO_L2_MSG_TREE_HEIGHT),
        }), reader.readArray(MAX_PUBLIC_DATA_HINTS, PublicDataLeafHint), reader.readObject(PartialStateReference));
    }
    clone() {
        return PublicKernelTailCircuitPrivateInputs.fromBuffer(this.toBuffer());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2tlcm5lbF90YWlsX2NpcmN1aXRfcHJpdmF0ZV9pbnB1dHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9rZXJuZWwvcHVibGljX2tlcm5lbF90YWlsX2NpcmN1aXRfcHJpdmF0ZV9pbnB1dHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBYyxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTFGLE9BQU8sRUFDTCx3QkFBd0IsRUFDeEIscUNBQXFDLEVBQ3JDLGtDQUFrQyxFQUNsQyxrQ0FBa0MsRUFDbEMscUJBQXFCLEVBQ3JCLHFCQUFxQixHQUN0QixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFFTCw4Q0FBOEMsR0FDL0MsTUFBTSx1Q0FBdUMsQ0FBQztBQUMvQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUNqRSxPQUFPLEVBQWtDLG1DQUFtQyxFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDckgsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDNUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFM0QsTUFBTSxPQUFPLG9DQUFvQztJQUMvQztJQUNFOztPQUVHO0lBQ2EsY0FBZ0MsRUFDaEMsd0JBR2Y7SUFDRDs7T0FFRztJQUNhLHlCQUdmO0lBQ0Q7O09BRUc7SUFDYSxvQ0FBMEUsRUFDMUUseUJBR2YsRUFDZSxlQUF3RSxFQUN4RSxVQUFpQztRQXJCakMsbUJBQWMsR0FBZCxjQUFjLENBQWtCO1FBQ2hDLDZCQUF3QixHQUF4Qix3QkFBd0IsQ0FHdkM7UUFJZSw4QkFBeUIsR0FBekIseUJBQXlCLENBR3hDO1FBSWUseUNBQW9DLEdBQXBDLG9DQUFvQyxDQUFzQztRQUMxRSw4QkFBeUIsR0FBekIseUJBQXlCLENBR3hDO1FBQ2Usb0JBQWUsR0FBZixlQUFlLENBQXlEO1FBQ3hFLGVBQVUsR0FBVixVQUFVLENBQXVCO0lBQ2hELENBQUM7SUFFSixRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FDdEIsSUFBSSxDQUFDLGNBQWMsRUFDbkIsSUFBSSxDQUFDLHdCQUF3QixFQUM3QixJQUFJLENBQUMseUJBQXlCLEVBQzlCLElBQUksQ0FBQyxvQ0FBb0MsRUFDekMsSUFBSSxDQUFDLHlCQUF5QixFQUM5QixJQUFJLENBQUMsZUFBZSxFQUNwQixJQUFJLENBQUMsVUFBVSxDQUNoQixDQUFDO0lBQ0osQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsR0FBVztRQUMzQixPQUFPLG9DQUFvQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFRCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQTZCO1FBQzdDLE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLG9DQUFvQyxDQUM3QyxNQUFNLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLEVBQ25DLE1BQU0sQ0FBQyxTQUFTLENBQUMsa0NBQWtDLEVBQUU7WUFDbkQsVUFBVSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxxQkFBcUIsQ0FBQztTQUNsRixDQUFDLEVBQ0YsbUNBQW1DLENBQ2pDLE1BQU0sRUFDTixrQ0FBa0MsRUFDbEMsa0NBQWtDLENBQ25DLEVBQ0QsOENBQThDLENBQUMsTUFBTSxDQUFDLEVBQ3RELE1BQU0sQ0FBQyxTQUFTLENBQUMscUNBQXFDLEVBQUU7WUFDdEQsVUFBVSxFQUFFLEdBQUcsQ0FBQyxFQUFFLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSx3QkFBd0IsQ0FBQztTQUNyRixDQUFDLEVBQ0YsTUFBTSxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsRUFBRSxrQkFBa0IsQ0FBQyxFQUMzRCxNQUFNLENBQUMsVUFBVSxDQUFDLHFCQUFxQixDQUFDLENBQ3pDLENBQUM7SUFDSixDQUFDO0lBRUQsS0FBSztRQUNILE9BQU8sb0NBQW9DLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQzFFLENBQUM7Q0FDRiJ9