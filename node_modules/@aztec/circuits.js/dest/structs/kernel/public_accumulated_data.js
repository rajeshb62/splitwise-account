import { makeTuple } from '@aztec/foundation/array';
import { arraySerializedSizeOfNonEmpty } from '@aztec/foundation/collection';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { MAX_ENCRYPTED_LOGS_PER_TX, MAX_L2_TO_L1_MSGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_HASHES_PER_TX, MAX_NULLIFIERS_PER_TX, MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, MAX_UNENCRYPTED_LOGS_PER_TX, NUM_PUBLIC_ACCUMULATED_DATA_ARRAYS, } from '../../constants.gen.js';
import { countAccumulatedItems } from '../../utils/index.js';
import { Gas } from '../gas.js';
import { ScopedL2ToL1Message } from '../l2_to_l1_message.js';
import { LogHash, ScopedLogHash } from '../log_hash.js';
import { ScopedNoteHash } from '../note_hash.js';
import { Nullifier } from '../nullifier.js';
import { PublicCallRequest } from '../public_call_request.js';
import { PublicDataUpdateRequest } from '../public_data_update_request.js';
export class PublicAccumulatedData {
    constructor(
    /**
     * The new note hashes made in this transaction.
     */
    noteHashes, 
    /**
     * The new nullifiers made in this transaction.
     */
    nullifiers, 
    /**
     * All the new L2 to L1 messages created in this transaction.
     */
    l2ToL1Msgs, 
    /**
     * Accumulated encrypted note logs hashes from all the previous kernel iterations.
     * Note: Truncated to 31 bytes to fit in Fr.
     */
    noteEncryptedLogsHashes, 
    /**
     * Accumulated encrypted logs hashes from all the previous kernel iterations.
     * Note: Truncated to 31 bytes to fit in Fr.
     */
    encryptedLogsHashes, 
    /**
     * Accumulated unencrypted logs hashes from all the previous kernel iterations.
     * Note: Truncated to 31 bytes to fit in Fr.
     */
    unencryptedLogsHashes, 
    /**
     * All the public data update requests made in this transaction.
     */
    publicDataUpdateRequests, 
    /**
     * Current public call stack.
     */
    publicCallStack, 
    /** Gas used so far by the transaction. */
    gasUsed) {
        this.noteHashes = noteHashes;
        this.nullifiers = nullifiers;
        this.l2ToL1Msgs = l2ToL1Msgs;
        this.noteEncryptedLogsHashes = noteEncryptedLogsHashes;
        this.encryptedLogsHashes = encryptedLogsHashes;
        this.unencryptedLogsHashes = unencryptedLogsHashes;
        this.publicDataUpdateRequests = publicDataUpdateRequests;
        this.publicCallStack = publicCallStack;
        this.gasUsed = gasUsed;
    }
    getSize() {
        return (arraySerializedSizeOfNonEmpty(this.noteHashes) +
            arraySerializedSizeOfNonEmpty(this.nullifiers) +
            arraySerializedSizeOfNonEmpty(this.l2ToL1Msgs) +
            arraySerializedSizeOfNonEmpty(this.noteEncryptedLogsHashes) +
            arraySerializedSizeOfNonEmpty(this.encryptedLogsHashes) +
            arraySerializedSizeOfNonEmpty(this.unencryptedLogsHashes) +
            arraySerializedSizeOfNonEmpty(this.publicDataUpdateRequests) +
            arraySerializedSizeOfNonEmpty(this.publicCallStack) +
            this.gasUsed.toBuffer().length);
    }
    toBuffer() {
        return serializeToBuffer(this.noteHashes, this.nullifiers, this.l2ToL1Msgs, this.noteEncryptedLogsHashes, this.encryptedLogsHashes, this.unencryptedLogsHashes, this.publicDataUpdateRequests, this.publicCallStack, this.gasUsed);
    }
    toString() {
        return this.toBuffer().toString('hex');
    }
    isEmpty() {
        return (this.noteHashes.every(x => x.isEmpty()) &&
            this.nullifiers.every(x => x.isEmpty()) &&
            this.l2ToL1Msgs.every(x => x.isEmpty()) &&
            this.noteEncryptedLogsHashes.every(x => x.isEmpty()) &&
            this.encryptedLogsHashes.every(x => x.isEmpty()) &&
            this.unencryptedLogsHashes.every(x => x.isEmpty()) &&
            this.publicDataUpdateRequests.every(x => x.isEmpty()) &&
            this.publicCallStack.every(x => x.isEmpty()) &&
            this.gasUsed.isEmpty());
    }
    [inspect.custom]() {
        // print out the non-empty fields
        return `PublicAccumulatedData {
  noteHashes: [${this.noteHashes
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}],
  nullifiers: [${this.nullifiers
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}],
  l2ToL1Msgs: [${this.l2ToL1Msgs
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}],
  noteEncryptedLogsHashes: [${this.noteEncryptedLogsHashes
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}],
  encryptedLogsHashes: [${this.encryptedLogsHashes
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}],
  unencryptedLogsHashes: [${this.unencryptedLogsHashes
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}],
  publicDataUpdateRequests: [${this.publicDataUpdateRequests
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}],
  publicCallStack: [${this.publicCallStack
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}],
  gasUsed: [${inspect(this.gasUsed)}]
}`;
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new this(reader.readArray(MAX_NOTE_HASHES_PER_TX, ScopedNoteHash), reader.readArray(MAX_NULLIFIERS_PER_TX, Nullifier), reader.readArray(MAX_L2_TO_L1_MSGS_PER_TX, ScopedL2ToL1Message), reader.readArray(MAX_NOTE_ENCRYPTED_LOGS_PER_TX, LogHash), reader.readArray(MAX_ENCRYPTED_LOGS_PER_TX, ScopedLogHash), reader.readArray(MAX_UNENCRYPTED_LOGS_PER_TX, ScopedLogHash), reader.readArray(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataUpdateRequest), reader.readArray(MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, PublicCallRequest), reader.readObject(Gas));
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new this(reader.readArray(MAX_NOTE_HASHES_PER_TX, ScopedNoteHash), reader.readArray(MAX_NULLIFIERS_PER_TX, Nullifier), reader.readArray(MAX_L2_TO_L1_MSGS_PER_TX, ScopedL2ToL1Message), reader.readArray(MAX_NOTE_ENCRYPTED_LOGS_PER_TX, LogHash), reader.readArray(MAX_ENCRYPTED_LOGS_PER_TX, ScopedLogHash), reader.readArray(MAX_UNENCRYPTED_LOGS_PER_TX, ScopedLogHash), reader.readArray(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataUpdateRequest), reader.readArray(MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, PublicCallRequest), reader.readObject(Gas));
    }
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str) {
        return this.fromBuffer(Buffer.from(str, 'hex'));
    }
    static empty() {
        return new this(makeTuple(MAX_NOTE_HASHES_PER_TX, ScopedNoteHash.empty), makeTuple(MAX_NULLIFIERS_PER_TX, Nullifier.empty), makeTuple(MAX_L2_TO_L1_MSGS_PER_TX, ScopedL2ToL1Message.empty), makeTuple(MAX_NOTE_ENCRYPTED_LOGS_PER_TX, LogHash.empty), makeTuple(MAX_ENCRYPTED_LOGS_PER_TX, ScopedLogHash.empty), makeTuple(MAX_UNENCRYPTED_LOGS_PER_TX, ScopedLogHash.empty), makeTuple(MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataUpdateRequest.empty), makeTuple(MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX, PublicCallRequest.empty), Gas.empty());
    }
}
export class PublicAccumulatedDataArrayLengths {
    constructor(noteHashes, nullifiers, l2ToL1Msgs, noteEncryptedLogsHashes, encryptedLogsHashes, unencryptedLogsHashes, publicDataUpdateRequests, publicCallStack) {
        this.noteHashes = noteHashes;
        this.nullifiers = nullifiers;
        this.l2ToL1Msgs = l2ToL1Msgs;
        this.noteEncryptedLogsHashes = noteEncryptedLogsHashes;
        this.encryptedLogsHashes = encryptedLogsHashes;
        this.unencryptedLogsHashes = unencryptedLogsHashes;
        this.publicDataUpdateRequests = publicDataUpdateRequests;
        this.publicCallStack = publicCallStack;
    }
    static new(data) {
        return new PublicAccumulatedDataArrayLengths(countAccumulatedItems(data.noteHashes), countAccumulatedItems(data.nullifiers), countAccumulatedItems(data.l2ToL1Msgs), countAccumulatedItems(data.noteEncryptedLogsHashes), countAccumulatedItems(data.encryptedLogsHashes), countAccumulatedItems(data.unencryptedLogsHashes), countAccumulatedItems(data.publicDataUpdateRequests), countAccumulatedItems(data.publicCallStack));
    }
    getSize() {
        return NUM_PUBLIC_ACCUMULATED_DATA_ARRAYS;
    }
    toBuffer() {
        return serializeToBuffer(this.noteHashes, this.nullifiers, this.l2ToL1Msgs, this.noteEncryptedLogsHashes, this.encryptedLogsHashes, this.unencryptedLogsHashes, this.publicDataUpdateRequests, this.publicCallStack);
    }
    toString() {
        return this.toBuffer().toString('hex');
    }
    isEmpty() {
        return (this.noteHashes == 0 &&
            this.nullifiers == 0 &&
            this.l2ToL1Msgs == 0 &&
            this.noteEncryptedLogsHashes == 0 &&
            this.encryptedLogsHashes == 0 &&
            this.unencryptedLogsHashes == 0 &&
            this.publicDataUpdateRequests == 0 &&
            this.publicCallStack == 0);
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new this(reader.readNumber(), reader.readNumber(), reader.readNumber(), reader.readNumber(), reader.readNumber(), reader.readNumber(), reader.readNumber(), reader.readNumber());
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new this(reader.readU32(), reader.readU32(), reader.readU32(), reader.readU32(), reader.readU32(), reader.readU32(), reader.readU32(), reader.readU32());
    }
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str) {
        return this.fromBuffer(Buffer.from(str, 'hex'));
    }
    static empty() {
        return new this(0, 0, 0, 0, 0, 0, 0, 0);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FjY3VtdWxhdGVkX2RhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9rZXJuZWwvcHVibGljX2FjY3VtdWxhdGVkX2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRTdFLE9BQU8sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFjLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFdkcsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUvQixPQUFPLEVBQ0wseUJBQXlCLEVBQ3pCLHdCQUF3QixFQUN4Qiw4QkFBOEIsRUFDOUIsc0JBQXNCLEVBQ3RCLHFCQUFxQixFQUNyQixtQ0FBbUMsRUFDbkMsc0NBQXNDLEVBQ3RDLDJCQUEyQixFQUMzQixrQ0FBa0MsR0FDbkMsTUFBTSx3QkFBd0IsQ0FBQztBQUNoQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUUzRSxNQUFNLE9BQU8scUJBQXFCO0lBQ2hDO0lBQ0U7O09BRUc7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