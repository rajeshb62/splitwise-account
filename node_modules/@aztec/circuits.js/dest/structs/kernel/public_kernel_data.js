import { makeTuple } from '@aztec/foundation/array';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { NESTED_RECURSIVE_PROOF_LENGTH, VK_TREE_HEIGHT } from '../../constants.gen.js';
import { ClientIvcProof } from '../client_ivc_proof.js';
import { RecursiveProof, makeEmptyRecursiveProof } from '../recursive_proof.js';
import { VerificationKeyData } from '../verification_key.js';
import { PublicKernelCircuitPublicInputs } from './public_kernel_circuit_public_inputs.js';
/**
 * Data of the previous public kernel iteration in the chain of kernels.
 */
export class PublicKernelData {
    constructor(
    /**
     * Public inputs of the previous kernel.
     */
    publicInputs, 
    /**
     * Proof of the previous kernel.
     */
    proof, 
    /**
     * Verification key of the previous kernel.
     */
    vk, 
    /**
     * Index of the previous kernel's vk in a tree of vks.
     */
    vkIndex, 
    /**
     * Sibling path of the previous kernel's vk in a tree of vks.
     */
    vkPath, 
    /**
     * TODO(https://github.com/AztecProtocol/aztec-packages/issues/7369) this should be tube-proved for the first iteration and replace proof above
     */
    clientIvcProof = ClientIvcProof.empty()) {
        this.publicInputs = publicInputs;
        this.proof = proof;
        this.vk = vk;
        this.vkIndex = vkIndex;
        this.vkPath = vkPath;
        this.clientIvcProof = clientIvcProof;
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new this(reader.readObject(PublicKernelCircuitPublicInputs), RecursiveProof.fromBuffer(reader, NESTED_RECURSIVE_PROOF_LENGTH), reader.readObject(VerificationKeyData), reader.readNumber(), reader.readArray(VK_TREE_HEIGHT, Fr), reader.readObject(ClientIvcProof));
    }
    static empty() {
        return new this(PublicKernelCircuitPublicInputs.empty(), makeEmptyRecursiveProof(NESTED_RECURSIVE_PROOF_LENGTH), VerificationKeyData.makeFakeHonk(), 0, makeTuple(VK_TREE_HEIGHT, Fr.zero), ClientIvcProof.empty());
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.publicInputs, this.proof, this.vk, this.vkIndex, this.vkPath, this.clientIvcProof);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2tlcm5lbF9kYXRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0cnVjdHMva2VybmVsL3B1YmxpY19rZXJuZWxfZGF0YS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQWMsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUUxRixPQUFPLEVBQUUsNkJBQTZCLEVBQUUsY0FBYyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdkYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxjQUFjLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVoRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUUzRjs7R0FFRztBQUNILE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0I7SUFDRTs7T0FFRztJQUNJLFlBQTZDO0lBQ3BEOztPQUVHO0lBQ0ksS0FBMkQ7SUFDbEU7O09BRUc7SUFDSSxFQUF1QjtJQUM5Qjs7T0FFRztJQUNJLE9BQWU7SUFDdEI7O09BRUc7SUFDSSxNQUF3QztJQUUvQzs7T0FFRztJQUNJLGlCQUFpQyxjQUFjLENBQUMsS0FBSyxFQUFFO1FBckJ2RCxpQkFBWSxHQUFaLFlBQVksQ0FBaUM7UUFJN0MsVUFBSyxHQUFMLEtBQUssQ0FBc0Q7UUFJM0QsT0FBRSxHQUFGLEVBQUUsQ0FBcUI7UUFJdkIsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUlmLFdBQU0sR0FBTixNQUFNLENBQWtDO1FBS3hDLG1CQUFjLEdBQWQsY0FBYyxDQUF5QztJQUM3RCxDQUFDO0lBRUosTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUE2QjtRQUM3QyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxJQUFJLENBQ2IsTUFBTSxDQUFDLFVBQVUsQ0FBQywrQkFBK0IsQ0FBQyxFQUNsRCxjQUFjLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSw2QkFBNkIsQ0FBQyxFQUNoRSxNQUFNLENBQUMsVUFBVSxDQUFDLG1CQUFtQixDQUFDLEVBQ3RDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFDbkIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsRUFBRSxDQUFDLEVBQ3BDLE1BQU0sQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQ2xDLENBQUM7SUFDSixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUs7UUFDVixPQUFPLElBQUksSUFBSSxDQUNiLCtCQUErQixDQUFDLEtBQUssRUFBRSxFQUN2Qyx1QkFBdUIsQ0FBdUMsNkJBQTZCLENBQUMsRUFDNUYsbUJBQW1CLENBQUMsWUFBWSxFQUFFLEVBQ2xDLENBQUMsRUFDRCxTQUFTLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFDbEMsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUN2QixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDbkgsQ0FBQztDQUNGIn0=