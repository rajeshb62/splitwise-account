import { makeTuple } from '@aztec/foundation/array';
import { arraySerializedSizeOfNonEmpty } from '@aztec/foundation/collection';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_TX, MAX_NOTE_HASH_READ_REQUESTS_PER_TX, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX, MAX_NULLIFIER_READ_REQUESTS_PER_TX, MAX_PUBLIC_DATA_READS_PER_TX, NUM_PUBLIC_VALIDATION_REQUEST_ARRAYS, } from '../constants.gen.js';
import { countAccumulatedItems } from '../utils/index.js';
import { PublicDataRead } from './public_data_read.js';
import { ScopedReadRequest } from './read_request.js';
import { RollupValidationRequests } from './rollup_validation_requests.js';
import { TreeLeafReadRequest } from './tree_leaf_read_request.js';
/**
 * Validation requests accumulated during the execution of the transaction.
 */
export class PublicValidationRequests {
    constructor(
    /**
     * Validation requests that cannot be fulfilled in the current context (private or public), and must be instead be
     * forwarded to the rollup for it to take care of them.
     */
    forRollup, noteHashReadRequests, 
    /**
     * All the nullifier read requests made in this transaction.
     */
    nullifierReadRequests, 
    /**
     * The nullifier read requests made in this transaction.
     */
    nullifierNonExistentReadRequests, l1ToL2MsgReadRequests, 
    /**
     * All the public data reads made in this transaction.
     */
    publicDataReads) {
        this.forRollup = forRollup;
        this.noteHashReadRequests = noteHashReadRequests;
        this.nullifierReadRequests = nullifierReadRequests;
        this.nullifierNonExistentReadRequests = nullifierNonExistentReadRequests;
        this.l1ToL2MsgReadRequests = l1ToL2MsgReadRequests;
        this.publicDataReads = publicDataReads;
    }
    getSize() {
        return (this.forRollup.getSize() +
            arraySerializedSizeOfNonEmpty(this.noteHashReadRequests) +
            arraySerializedSizeOfNonEmpty(this.nullifierReadRequests) +
            arraySerializedSizeOfNonEmpty(this.nullifierNonExistentReadRequests) +
            arraySerializedSizeOfNonEmpty(this.l1ToL2MsgReadRequests) +
            arraySerializedSizeOfNonEmpty(this.publicDataReads));
    }
    toBuffer() {
        return serializeToBuffer(this.forRollup, this.noteHashReadRequests, this.nullifierReadRequests, this.nullifierNonExistentReadRequests, this.l1ToL2MsgReadRequests, this.publicDataReads);
    }
    toString() {
        return this.toBuffer().toString('hex');
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new PublicValidationRequests(reader.readObject(RollupValidationRequests), reader.readArray(MAX_NOTE_HASH_READ_REQUESTS_PER_TX, TreeLeafReadRequest), reader.readArray(MAX_NULLIFIER_READ_REQUESTS_PER_TX, ScopedReadRequest), reader.readArray(MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX, ScopedReadRequest), reader.readArray(MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_TX, TreeLeafReadRequest), reader.readArray(MAX_PUBLIC_DATA_READS_PER_TX, PublicDataRead));
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicValidationRequests(reader.readObject(RollupValidationRequests), reader.readArray(MAX_NOTE_HASH_READ_REQUESTS_PER_TX, TreeLeafReadRequest), reader.readArray(MAX_NULLIFIER_READ_REQUESTS_PER_TX, ScopedReadRequest), reader.readArray(MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX, ScopedReadRequest), reader.readArray(MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_TX, TreeLeafReadRequest), reader.readArray(MAX_PUBLIC_DATA_READS_PER_TX, PublicDataRead));
    }
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str) {
        return PublicValidationRequests.fromBuffer(Buffer.from(str, 'hex'));
    }
    static empty() {
        return new PublicValidationRequests(RollupValidationRequests.empty(), makeTuple(MAX_NOTE_HASH_READ_REQUESTS_PER_TX, TreeLeafReadRequest.empty), makeTuple(MAX_NULLIFIER_READ_REQUESTS_PER_TX, ScopedReadRequest.empty), makeTuple(MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX, ScopedReadRequest.empty), makeTuple(MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_TX, TreeLeafReadRequest.empty), makeTuple(MAX_PUBLIC_DATA_READS_PER_TX, PublicDataRead.empty));
    }
    [inspect.custom]() {
        return `PublicValidationRequests {
  forRollup: ${inspect(this.forRollup)},
  noteHashReadRequests: [${this.noteHashReadRequests
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}],
  nullifierReadRequests: [${this.nullifierReadRequests
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}],
  nullifierNonExistentReadRequests: [${this.nullifierNonExistentReadRequests
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}],
  l1ToL2MsgReadRequests: [${this.l1ToL2MsgReadRequests
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}],
  publicDataReads: [${this.publicDataReads
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}]
}`;
    }
}
export class PublicValidationRequestArrayLengths {
    constructor(noteHashReadRequests, nullifierReadRequests, nullifierNonExistentReadRequests, l1ToL2MsgReadRequests, publicDataReads) {
        this.noteHashReadRequests = noteHashReadRequests;
        this.nullifierReadRequests = nullifierReadRequests;
        this.nullifierNonExistentReadRequests = nullifierNonExistentReadRequests;
        this.l1ToL2MsgReadRequests = l1ToL2MsgReadRequests;
        this.publicDataReads = publicDataReads;
    }
    static new(requests) {
        return new PublicValidationRequestArrayLengths(countAccumulatedItems(requests.noteHashReadRequests), countAccumulatedItems(requests.nullifierReadRequests), countAccumulatedItems(requests.nullifierNonExistentReadRequests), countAccumulatedItems(requests.l1ToL2MsgReadRequests), countAccumulatedItems(requests.publicDataReads));
    }
    getSize() {
        return NUM_PUBLIC_VALIDATION_REQUEST_ARRAYS;
    }
    toBuffer() {
        return serializeToBuffer(this.noteHashReadRequests, this.nullifierReadRequests, this.nullifierNonExistentReadRequests, this.l1ToL2MsgReadRequests, this.publicDataReads);
    }
    toString() {
        return this.toBuffer().toString('hex');
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new PublicValidationRequestArrayLengths(reader.readU32(), reader.readU32(), reader.readU32(), reader.readU32(), reader.readU32());
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PublicValidationRequestArrayLengths(reader.readNumber(), reader.readNumber(), reader.readNumber(), reader.readNumber(), reader.readNumber());
    }
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str) {
        return PublicValidationRequestArrayLengths.fromBuffer(Buffer.from(str, 'hex'));
    }
    static empty() {
        return new PublicValidationRequestArrayLengths(0, 0, 0, 0, 0);
    }
    [inspect.custom]() {
        return `PublicValidationRequestArrayLengths {
  noteHashReadRequests: ${this.noteHashReadRequests},
  nullifierReadRequests: ${this.nullifierReadRequests},
  nullifierNonExistentReadRequests: ${this.nullifierNonExistentReadRequests},
  l1ToL2MsgReadRequests: ${this.l1ToL2MsgReadRequests},
  publicDataReads: ${this.publicDataReads}
}`;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX3ZhbGlkYXRpb25fcmVxdWVzdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RydWN0cy9wdWJsaWNfdmFsaWRhdGlvbl9yZXF1ZXN0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFN0UsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQWMsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV2RyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRS9CLE9BQU8sRUFDTCxxQ0FBcUMsRUFDckMsa0NBQWtDLEVBQ2xDLCtDQUErQyxFQUMvQyxrQ0FBa0MsRUFDbEMsNEJBQTRCLEVBQzVCLG9DQUFvQyxHQUNyQyxNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzFELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUVsRTs7R0FFRztBQUNILE1BQU0sT0FBTyx3QkFBd0I7SUFDbkM7SUFDRTs7O09BR0c7SUFDSSxTQUFtQyxFQUNuQyxvQkFBMkY7SUFDbEc7O09BRUc7SUFDSSxxQkFBMEY7SUFDakc7O09BRUc7SUFDSSxnQ0FHTixFQUNNLHFCQUErRjtJQUN0Rzs7T0FFRztJQUNJLGVBQTJFO1FBakIzRSxjQUFTLEdBQVQsU0FBUyxDQUEwQjtRQUNuQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXVFO1FB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