import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
import { AZTEC_EPOCH_DURATION } from '../../constants.gen.js';
import { AppendOnlyTreeSnapshot } from './append_only_tree_snapshot.js';
import { FeeRecipient } from './block_root_or_block_merge_public_inputs.js';
import { PreviousRollupBlockData } from './previous_rollup_block_data.js';
/**
 * Represents inputs of the root rollup circuit.
 */
export class RootRollupInputs {
    constructor(
    /**
     * The previous rollup data.
     * Note: Root rollup circuit is the latest circuit the chain of circuits and the previous rollup data is the data
     * from 2 block merge circuits.
     */
    previousRollupData, 
    /** Identifier of the prover for this root rollup. */
    proverId) {
        this.previousRollupData = previousRollupData;
        this.proverId = proverId;
    }
    /**
     * Serializes the inputs to a buffer.
     * @returns - The inputs serialized to a buffer.
     */
    toBuffer() {
        return serializeToBuffer(...RootRollupInputs.getFields(this));
    }
    /**
     * Serializes the inputs to a hex string.
     * @returns The instance serialized to a hex string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /**
     * Creates a new instance from fields.
     * @param fields - Fields to create the instance from.
     * @returns A new RootRollupInputs instance.
     */
    static from(fields) {
        return new RootRollupInputs(...RootRollupInputs.getFields(fields));
    }
    /**
     * Extracts fields from an instance.
     * @param fields - Fields to create the instance from.
     * @returns An array of fields.
     */
    static getFields(fields) {
        return [fields.previousRollupData, fields.proverId];
    }
    /**
     * Deserializes the inputs from a buffer.
     * @param buffer - A buffer to deserialize from.
     * @returns A new RootRollupInputs instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new RootRollupInputs([reader.readObject(PreviousRollupBlockData), reader.readObject(PreviousRollupBlockData)], Fr.fromBuffer(reader));
    }
    /**
     * Deserializes the inputs from a hex string.
     * @param str - A hex string to deserialize from.
     * @returns A new RootRollupInputs instance.
     */
    static fromString(str) {
        return RootRollupInputs.fromBuffer(Buffer.from(str, 'hex'));
    }
}
/**
 * Represents public inputs of the root rollup circuit.
 *
 * NOTE: in practice, we'll hash all of this up into a single public input, for cheap on-chain verification.
 */
export class RootRollupPublicInputs {
    constructor(
    /** Snapshot of archive tree before/after this rollup been processed */
    previousArchive, endArchive, previousBlockHash, endBlockHash, 
    // This is a u64 in nr, but GlobalVariables contains this as a u64 and is mapped to ts as a field, so I'm doing the same here
    endTimestamp, endBlockNumber, outHash, fees, vkTreeRoot, protocolContractTreeRoot, proverId) {
        this.previousArchive = previousArchive;
        this.endArchive = endArchive;
        this.previousBlockHash = previousBlockHash;
        this.endBlockHash = endBlockHash;
        this.endTimestamp = endTimestamp;
        this.endBlockNumber = endBlockNumber;
        this.outHash = outHash;
        this.fees = fees;
        this.vkTreeRoot = vkTreeRoot;
        this.protocolContractTreeRoot = protocolContractTreeRoot;
        this.proverId = proverId;
    }
    static getFields(fields) {
        return [
            fields.previousArchive,
            fields.endArchive,
            fields.previousBlockHash,
            fields.endBlockHash,
            fields.endTimestamp,
            fields.endBlockNumber,
            fields.outHash,
            fields.fees,
            fields.vkTreeRoot,
            fields.protocolContractTreeRoot,
            fields.proverId,
        ];
    }
    toBuffer() {
        return serializeToBuffer(...RootRollupPublicInputs.getFields(this));
    }
    toFields() {
        return serializeToFields(...RootRollupPublicInputs.getFields(this));
    }
    static from(fields) {
        return new RootRollupPublicInputs(...RootRollupPublicInputs.getFields(fields));
    }
    /**
     * Deserializes a buffer into a `RootRollupPublicInputs` object.
     * @param buffer - The buffer to deserialize.
     * @returns The deserialized `RootRollupPublicInputs` object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new RootRollupPublicInputs(reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readArray(AZTEC_EPOCH_DURATION, FeeRecipient), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader));
    }
    toString() {
        return this.toBuffer().toString('hex');
    }
    static fromString(str) {
        return RootRollupPublicInputs.fromBuffer(Buffer.from(str, 'hex'));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9vdF9yb2xsdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9yb2xsdXAvcm9vdF9yb2xsdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQWMsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUc3RyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN4RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDNUUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFMUU7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZ0JBQWdCO0lBQzNCO0lBQ0U7Ozs7T0FJRztJQUNJLGtCQUFzRTtJQUM3RSxxREFBcUQ7SUFDOUMsUUFBWTtRQUZaLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0Q7UUFFdEUsYUFBUSxHQUFSLFFBQVEsQ0FBSTtJQUNsQixDQUFDO0lBRUo7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBa0M7UUFDNUMsT0FBTyxJQUFJLGdCQUFnQixDQUFDLEdBQUcsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDckUsQ0FB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