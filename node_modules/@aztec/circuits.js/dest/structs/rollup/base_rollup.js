import { makeTuple } from '@aztec/foundation/array';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { ARCHIVE_HEIGHT, MAX_TOTAL_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PUBLIC_DATA_TREE_HEIGHT, } from '../../constants.gen.js';
import { ClientIvcProof } from '../client_ivc_proof.js';
import { GlobalVariables } from '../global_variables.js';
import { KernelData } from '../kernel/kernel_data.js';
import { MembershipWitness } from '../membership_witness.js';
import { PartialStateReference } from '../partial_state_reference.js';
import { PublicDataHint } from '../public_data_hint.js';
import { PublicDataTreeLeaf, PublicDataTreeLeafPreimage } from '../trees/index.js';
import { AppendOnlyTreeSnapshot } from './append_only_tree_snapshot.js';
import { StateDiffHints } from './state_diff_hints.js';
/**
 * Data which is forwarded through the base rollup circuits unchanged.
 */
export class ConstantRollupData {
    constructor(
    /** Archive tree snapshot at the very beginning of the entire rollup. */
    lastArchive, 
    /**
     * Root of the verification key tree.
     */
    vkTreeRoot, 
    /**
     * Root of the protocol contract tree.
     */
    protocolContractTreeRoot, 
    /**
     * Global variables for the block
     */
    globalVariables) {
        this.lastArchive = lastArchive;
        this.vkTreeRoot = vkTreeRoot;
        this.protocolContractTreeRoot = protocolContractTreeRoot;
        this.globalVariables = globalVariables;
    }
    static from(fields) {
        return new ConstantRollupData(...ConstantRollupData.getFields(fields));
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new ConstantRollupData(reader.readObject(AppendOnlyTreeSnapshot), Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readObject(GlobalVariables));
    }
    static getFields(fields) {
        return [fields.lastArchive, fields.vkTreeRoot, fields.protocolContractTreeRoot, fields.globalVariables];
    }
    static empty() {
        return new ConstantRollupData(AppendOnlyTreeSnapshot.zero(), Fr.ZERO, Fr.ZERO, GlobalVariables.empty());
    }
    toBuffer() {
        return serializeToBuffer(...ConstantRollupData.getFields(this));
    }
}
/**
 * Inputs to the base rollup circuit.
 */
export class BaseRollupInputs {
    constructor(
    /** Data of the 2 kernels that preceded this base rollup circuit. */
    kernelData, 
    /** Partial state reference at the start of the rollup. */
    start, 
    /** Hints used while proving state diff validity. */
    stateDiffHints, 
    /** Public data read hint for accessing the balance of the fee payer. */
    feePayerFeeJuiceBalanceReadHint, 
    /**
     * The public data writes to be inserted in the tree, sorted high slot to low slot.
     */
    sortedPublicDataWrites, 
    /**
     * The indexes of the sorted public data writes to the original ones.
     */
    sortedPublicDataWritesIndexes, 
    /**
     * The public data writes which need to be updated to perform the batch insertion of the new public data writes.
     * See `StandardIndexedTree.batchInsert` function for more details.
     */
    lowPublicDataWritesPreimages, 
    /**
     * Membership witnesses for the nullifiers which need to be updated to perform the batch insertion of the new
     * nullifiers.
     */
    lowPublicDataWritesMembershipWitnesses, 
    /**
     * Membership witnesses of blocks referred by each of the 2 kernels.
     */
    archiveRootMembershipWitness, 
    /**
     * Data which is not modified by the base rollup circuit.
     */
    constants) {
        this.kernelData = kernelData;
        this.start = start;
        this.stateDiffHints = stateDiffHints;
        this.feePayerFeeJuiceBalanceReadHint = feePayerFeeJuiceBalanceReadHint;
        this.sortedPublicDataWrites = sortedPublicDataWrites;
        this.sortedPublicDataWritesIndexes = sortedPublicDataWritesIndexes;
        this.lowPublicDataWritesPreimages = lowPublicDataWritesPreimages;
        this.lowPublicDataWritesMembershipWitnesses = lowPublicDataWritesMembershipWitnesses;
        this.archiveRootMembershipWitness = archiveRootMembershipWitness;
        this.constants = constants;
    }
    static from(fields) {
        return new BaseRollupInputs(...BaseRollupInputs.getFields(fields));
    }
    static getFields(fields) {
        return [
            fields.kernelData,
            fields.start,
            fields.stateDiffHints,
            fields.feePayerFeeJuiceBalanceReadHint,
            fields.sortedPublicDataWrites,
            fields.sortedPublicDataWritesIndexes,
            fields.lowPublicDataWritesPreimages,
            fields.lowPublicDataWritesMembershipWitnesses,
            fields.archiveRootMembershipWitness,
            fields.constants,
        ];
    }
    /**
     * Serializes the inputs to a buffer.
     * @returns The inputs serialized to a buffer.
     */
    toBuffer() {
        return serializeToBuffer(...BaseRollupInputs.getFields(this));
    }
    /**
     * Serializes the inputs to a hex string.
     * @returns The instance serialized to a hex string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /**
     * Deserializes the inputs from a buffer.
     * @param buffer - The buffer to deserialize from.
     * @returns A new BaseRollupInputs instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new BaseRollupInputs(reader.readObject(KernelData), reader.readObject(PartialStateReference), reader.readObject(StateDiffHints), reader.readObject(PublicDataHint), reader.readArray(MAX_TOTAL_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataTreeLeaf), reader.readNumbers(MAX_TOTAL_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX), reader.readArray(MAX_TOTAL_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataTreeLeafPreimage), reader.readArray(MAX_TOTAL_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, {
            fromBuffer: buffer => MembershipWitness.fromBuffer(buffer, PUBLIC_DATA_TREE_HEIGHT),
        }), MembershipWitness.fromBuffer(reader, ARCHIVE_HEIGHT), reader.readObject(ConstantRollupData));
    }
    /**
     * Deserializes the inputs from a hex string.
     * @param str - A hex string to deserialize from.
     * @returns A new BaseRollupInputs instance.
     */
    static fromString(str) {
        return BaseRollupInputs.fromBuffer(Buffer.from(str, 'hex'));
    }
    static empty() {
        return new BaseRollupInputs(KernelData.empty(), PartialStateReference.empty(), StateDiffHints.empty(), PublicDataHint.empty(), makeTuple(MAX_TOTAL_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataTreeLeaf.empty), makeTuple(MAX_TOTAL_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, () => 0), makeTuple(MAX_TOTAL_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, PublicDataTreeLeafPreimage.empty), makeTuple(MAX_TOTAL_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX, () => MembershipWitness.empty(PUBLIC_DATA_TREE_HEIGHT)), MembershipWitness.empty(ARCHIVE_HEIGHT), ConstantRollupData.empty());
    }
}
export class TubeInputs {
    constructor(clientIVCData) {
        this.clientIVCData = clientIVCData;
    }
    static from(fields) {
        return new TubeInputs(...TubeInputs.getFields(fields));
    }
    static getFields(fields) {
        return [fields.clientIVCData];
    }
    /**
     * Serializes the inputs to a buffer.
     * @returns The inputs serialized to a buffer.
     */
    toBuffer() {
        return serializeToBuffer(...TubeInputs.getFields(this));
    }
    /**
     * Serializes the inputs to a hex string.
     * @returns The instance serialized to a hex string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /**
     * Deserializes the inputs from a buffer.
     * @param buffer - The buffer to deserialize from.
     * @returns A new TubeInputs instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new TubeInputs(reader.readObject(ClientIvcProof));
    }
    isEmpty() {
        return this.clientIVCData.isEmpty();
    }
    /**
     * Deserializes the inputs from a hex string.
     * @param str - A hex string to deserialize from.
     * @returns A new TubeInputs instance.
     */
    static fromString(str) {
        return TubeInputs.fromBuffer(Buffer.from(str, 'hex'));
    }
    static empty() {
        return new TubeInputs(ClientIvcProof.empty());
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZV9yb2xsdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9yb2xsdXAvYmFzZV9yb2xsdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFjLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHMUYsT0FBTyxFQUNMLGNBQWMsRUFDZCw0Q0FBNEMsRUFDNUMsdUJBQXVCLEdBQ3hCLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDdEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXhELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25GLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV2RDs7R0FFRztBQUNILE1BQU0sT0FBTyxrQkFBa0I7SUFDN0I7SUFDRSx3RUFBd0U7SUFDakUsV0FBbUM7SUFDMUM7O09BRUc7SUFDSSxVQUFjO0lBQ3JCOztPQUVHO0lBQ0ksd0JBQTRCO0lBQ25DOztPQUVHO0lBQ0ksZUFBZ0M7UUFaaEMsZ0JBQVcsR0FBWCxX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