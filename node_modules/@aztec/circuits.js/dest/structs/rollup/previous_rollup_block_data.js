import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { NESTED_RECURSIVE_PROOF_LENGTH, VK_TREE_HEIGHT } from '../../constants.gen.js';
import { MembershipWitness } from '../membership_witness.js';
import { RecursiveProof } from '../recursive_proof.js';
import { VerificationKeyAsFields } from '../verification_key.js';
import { BlockRootOrBlockMergePublicInputs } from './block_root_or_block_merge_public_inputs.js';
/**
 * Represents the data of a previous block merge or block root rollup circuit.
 */
export class PreviousRollupBlockData {
    constructor(
    /**
     * Public inputs to the block merge or block root rollup circuit.
     */
    blockRootOrBlockMergePublicInputs, 
    /**
     * The proof of the block merge or block root rollup circuit.
     */
    proof, 
    /**
     * The verification key of the block merge or block root rollup circuit.
     */
    vk, 
    /**
     * Sibling path of the rollup circuit's vk in a big tree of rollup circuit vks.
     */
    vkWitness) {
        this.blockRootOrBlockMergePublicInputs = blockRootOrBlockMergePublicInputs;
        this.proof = proof;
        this.vk = vk;
        this.vkWitness = vkWitness;
    }
    /**
     * Serializes previous rollup data to a buffer.
     * @returns The buffer of the serialized previous rollup data.
     */
    toBuffer() {
        return serializeToBuffer(this.blockRootOrBlockMergePublicInputs, this.proof, this.vk, this.vkWitness);
    }
    /**
     * Deserializes previous rollup data from a buffer.
     * @param buffer - A buffer to deserialize from.
     * @returns A new PreviousRollupData instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PreviousRollupBlockData(reader.readObject(BlockRootOrBlockMergePublicInputs), RecursiveProof.fromBuffer(reader, NESTED_RECURSIVE_PROOF_LENGTH), reader.readObject(VerificationKeyAsFields), MembershipWitness.fromBuffer(reader, VK_TREE_HEIGHT));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJldmlvdXNfcm9sbHVwX2Jsb2NrX2RhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9yb2xsdXAvcHJldmlvdXNfcm9sbHVwX2Jsb2NrX2RhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTlFLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxjQUFjLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN2RixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDdkQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDakUsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFFakc7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBQ2xDO0lBQ0U7O09BRUc7SUFDSSxpQ0FBb0U7SUFDM0U7O09BRUc7SUFDSSxLQUEyRDtJQUNsRTs7T0FFRztJQUNJLEVBQTJCO0lBQ2xDOztPQUVHO0lBQ0ksU0FBbUQ7UUFabkQsc0NBQWlDLEdBQWpDLGlDQUFpQyxDQUFtQztRQUlwRSxVQUFLLEdBQUwsS0FBSyxDQUFzRDtRQUkzRCxPQUFFLEdBQUYsRUFBRSxDQUF5QjtRQUkzQixjQUFTLEdBQVQsU0FBUyxDQUEwQztJQUN6RCxDQUFDO0lBRUo7OztPQUdHO0lBQ0ksUUFBUTtRQUNiLE9BQU8saUJBQWlCLENBQUMsSUFBSSxDQUFDLGlDQUFpQyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDeEcsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQTZCO1FBQ3BELE1BQU0sTUFBTSxHQUFHLFlBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsT0FBTyxJQUFJLHVCQUF1QixDQUNoQyxNQUFNLENBQUMsVUFBVSxDQUFDLGlDQUFpQyxDQUFDLEVBQ3BELGNBQWMsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLDZCQUE2QixDQUFDLEVBQ2hFLE1BQU0sQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsRUFDMUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FDckQsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9