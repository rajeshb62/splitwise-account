import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { ARCHIVE_HEIGHT, L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH, NESTED_RECURSIVE_PROOF_LENGTH, NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP, } from '../../constants.gen.js';
import { RootParityInput } from '../parity/root_parity_input.js';
import { AppendOnlyTreeSnapshot } from './append_only_tree_snapshot.js';
import { PreviousRollupData } from './previous_rollup_data.js';
/**
 * Represents inputs of the block root rollup circuit.
 */
export class BlockRootRollupInputs {
    constructor(
    /**
     * The previous rollup data from 2 merge or base rollup circuits.
     */
    previousRollupData, 
    /**
     * The original and converted roots of the L1 to L2 messages subtrees.
     */
    l1ToL2Roots, 
    /**
     * New L1 to L2 messages.
     */
    newL1ToL2Messages, 
    /**
     * Sibling path of the new L1 to L2 message tree root.
     */
    newL1ToL2MessageTreeRootSiblingPath, 
    /**
     * Snapshot of the L1 to L2 message tree at the start of the rollup.
     */
    startL1ToL2MessageTreeSnapshot, 
    /**
     * Snapshot of the historical block roots tree at the start of the rollup.
     */
    startArchiveSnapshot, 
    /**
     * Sibling path of the new block tree root.
     */
    newArchiveSiblingPath, 
    /**
     * The hash of the block preceding this one.
     */
    previousBlockHash, 
    /**
     * TODO(#7346): Temporarily added prover_id while we verify block-root proofs on L1
     */
    proverId) {
        this.previousRollupData = previousRollupData;
        this.l1ToL2Roots = l1ToL2Roots;
        this.newL1ToL2Messages = newL1ToL2Messages;
        this.newL1ToL2MessageTreeRootSiblingPath = newL1ToL2MessageTreeRootSiblingPath;
        this.startL1ToL2MessageTreeSnapshot = startL1ToL2MessageTreeSnapshot;
        this.startArchiveSnapshot = startArchiveSnapshot;
        this.newArchiveSiblingPath = newArchiveSiblingPath;
        this.previousBlockHash = previousBlockHash;
        this.proverId = proverId;
    }
    /**
     * Serializes the inputs to a buffer.
     * @returns - The inputs serialized to a buffer.
     */
    toBuffer() {
        return serializeToBuffer(...BlockRootRollupInputs.getFields(this));
    }
    /**
     * Serializes the inputs to a hex string.
     * @returns The instance serialized to a hex string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /**
     * Creates a new instance from fields.
     * @param fields - Fields to create the instance from.
     * @returns A new RootRollupInputs instance.
     */
    static from(fields) {
        return new BlockRootRollupInputs(...BlockRootRollupInputs.getFields(fields));
    }
    /**
     * Extracts fields from an instance.
     * @param fields - Fields to create the instance from.
     * @returns An array of fields.
     */
    static getFields(fields) {
        return [
            fields.previousRollupData,
            fields.l1ToL2Roots,
            fields.newL1ToL2Messages,
            fields.newL1ToL2MessageTreeRootSiblingPath,
            fields.startL1ToL2MessageTreeSnapshot,
            fields.startArchiveSnapshot,
            fields.newArchiveSiblingPath,
            fields.previousBlockHash,
            fields.proverId,
        ];
    }
    /**
     * Deserializes the inputs from a buffer.
     * @param buffer - A buffer to deserialize from.
     * @returns A new RootRollupInputs instance.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new BlockRootRollupInputs([reader.readObject(PreviousRollupData), reader.readObject(PreviousRollupData)], RootParityInput.fromBuffer(reader, NESTED_RECURSIVE_PROOF_LENGTH), reader.readArray(NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP, Fr), reader.readArray(L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH, Fr), reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), reader.readArray(ARCHIVE_HEIGHT, Fr), Fr.fromBuffer(reader), Fr.fromBuffer(reader));
    }
    /**
     * Deserializes the inputs from a hex string.
     * @param str - A hex string to deserialize from.
     * @returns A new RootRollupInputs instance.
     */
    static fromString(str) {
        return BlockRootRollupInputs.fromBuffer(Buffer.from(str, 'hex'));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2tfcm9vdF9yb2xsdXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3RydWN0cy9yb2xsdXAvYmxvY2tfcm9vdF9yb2xsdXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQWMsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUcxRixPQUFPLEVBQ0wsY0FBYyxFQUNkLHdDQUF3QyxFQUN4Qyw2QkFBNkIsRUFDN0IsbUNBQW1DLEdBQ3BDLE1BQU0sd0JBQXdCLENBQUM7QUFDaEMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRS9EOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHFCQUFxQjtJQUNoQztJQUNFOztPQUVHO0lBQ0ksa0JBQTREO0lBQ25FOztPQUVHO0lBQ0ksV0FBa0U7SUFDekU7O09BRUc7SUFDSSxpQkFBd0U7SUFDL0U7O09BRUc7SUFDSSxtQ0FBK0Y7SUFDdEc7O09BRUc7SUFDSSw4QkFBc0Q7SUFDN0Q7O09BRUc7SUFDSSxvQkFBNEM7SUFDbkQ7O09BRUc7SUFDSSxxQkFBdUQ7SUFDOUQ7O09BRUc7SUFDSSxpQkFBcUI7SUFDNUI7O09BRUc7SUFDSSxRQUFZO1FBaENaLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBMEM7UUFJNUQsZ0JBQVcsR0FBWCxXQUFXLENBQXVEO1FBSWxFLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBdUQ7UUFJeEUsd0NBQW1DLEdBQW5DLG1DQUFtQyxDQUE0RDtRQUkvRixtQ0FBOEIsR0FBOUIsOEJBQThCLENBQXdCO1FBSXRELHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBd0I7UUFJNUMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFrQztRQUl2RCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQUk7UUFJckIsYUFBUSxHQUFSLFFBQVEsQ0FBSTtJQUNsQixDQUFDO0lBRUo7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLE9BQU8saUJBQWlCLENBQUMsR0FBRyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBdUM7UUFDakQsT0FBTyxJQUFJLHFCQUFxQixDQUFDLEdBQUcscUJBQXFCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQXVDO1FBQ3RELE9BQU87WUFDTCxNQUFNLENBQUMsa0JBQWtCO1lBQ3pCLE1BQU0sQ0FBQyxXQUFXO1lBQ2xCLE1BQU0sQ0FBQyxpQkFBaUI7WUFDeEIsTUFBTSxDQUFDLG1DQUFtQztZQUMxQyxNQUFNLENBQUMsOEJBQThCO1lBQ3JDLE1BQU0sQ0FBQyxvQkFBb0I7WUFDM0IsTUFBTSxDQUFDLHFCQUFxQjtZQUM1QixNQUFNLENBQUMsaUJBQWlCO1lBQ3hCLE1BQU0sQ0FBQyxRQUFRO1NBQ1AsQ0FBQztJQUNiLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUE2QjtRQUM3QyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxxQkFBcUIsQ0FDOUIsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLEVBQUUsTUFBTSxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEVBQzlFLGVBQWUsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLDZCQUE2QixDQUFDLEVBQ2pFLE1BQU0sQ0FBQyxTQUFTLENBQUMsbUNBQW1DLEVBQUUsRUFBRSxDQUFDLEVBQ3pELE1BQU0sQ0FBQyxTQUFTLENBQUMsd0NBQXdDLEVBQUUsRUFBRSxDQUFDLEVBQzlELE1BQU0sQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUN6QyxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsRUFDcEMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsRUFDckIsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FDdEIsQ0FBQztJQUNKLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFXO1FBQzNCLE9BQU8scUJBQXFCLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbkUsQ0FBQztDQUNGIn0=