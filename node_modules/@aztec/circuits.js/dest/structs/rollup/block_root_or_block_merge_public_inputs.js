import { EthAddress } from '@aztec/foundation/eth-address';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
import { AZTEC_EPOCH_DURATION } from '../../constants.gen.js';
import { GlobalVariables } from '../global_variables.js';
import { AppendOnlyTreeSnapshot } from './append_only_tree_snapshot.js';
/**
 * Output of the block root and block merge rollup circuits.
 */
export class BlockRootOrBlockMergePublicInputs {
    constructor(
    /**
     * Archive tree immediately before this block range.
     */
    previousArchive, 
    /**
     * Archive tree after adding this block range.
     */
    newArchive, 
    /**
     * Identifier of the previous block before the range.
     */
    previousBlockHash, 
    /**
     * Identifier of the last block in the range.
     */
    endBlockHash, 
    /**
     * Global variables for the first block in the range.
     */
    startGlobalVariables, 
    /**
     * Global variables for the last block in the range.
     */
    endGlobalVariables, 
    /**
     * SHA256 hash of outhash. Used to make public inputs constant-sized (to then be unpacked on-chain).
     * Note: Truncated to 31 bytes to fit in Fr.
     */
    outHash, 
    /**
     * The summed `transaction_fee`s and recipients of the constituent blocks.
     */
    fees, 
    /**
     * Root of the verification key tree.
     */
    vkTreeRoot, 
    /**
     * Root of the protocol contract tree.
     */
    protocolContractTreeRoot, 
    /**
     * TODO(#7346): Temporarily added prover_id while we verify block-root proofs on L1
     */
    proverId) {
        this.previousArchive = previousArchive;
        this.newArchive = newArchive;
        this.previousBlockHash = previousBlockHash;
        this.endBlockHash = endBlockHash;
        this.startGlobalVariables = startGlobalVariables;
        this.endGlobalVariables = endGlobalVariables;
        this.outHash = outHash;
        this.fees = fees;
        this.vkTreeRoot = vkTreeRoot;
        this.protocolContractTreeRoot = protocolContractTreeRoot;
        this.proverId = proverId;
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized public inputs.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new BlockRootOrBlockMergePublicInputs(reader.readObject(AppendOnlyTreeSnapshot), reader.readObject(AppendOnlyTreeSnapshot), Fr.fromBuffer(reader), Fr.fromBuffer(reader), reader.readObject(GlobalVariables), reader.readObject(GlobalVariables), Fr.fromBuffer(reader), reader.readArray(AZTEC_EPOCH_DURATION, FeeRecipient), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader));
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(this.previousArchive, this.newArchive, this.previousBlockHash, this.endBlockHash, this.startGlobalVariables, this.endGlobalVariables, this.outHash, this.fees, this.vkTreeRoot, this.protocolContractTreeRoot, this.proverId);
    }
    /**
     * Serialize this as a hex string.
     * @returns - The hex string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /**
     * Deserializes from a hex string.
     * @param str - A hex string to deserialize from.
     * @returns A new BaseOrMergeRollupPublicInputs instance.
     */
    static fromString(str) {
        return BlockRootOrBlockMergePublicInputs.fromBuffer(Buffer.from(str, 'hex'));
    }
}
export class FeeRecipient {
    constructor(recipient, value) {
        this.recipient = recipient;
        this.value = value;
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new FeeRecipient(reader.readObject(EthAddress), Fr.fromBuffer(reader));
    }
    toBuffer() {
        return serializeToBuffer(this.recipient, this.value);
    }
    static getFields(fields) {
        return [fields.recipient, fields.value];
    }
    toFields() {
        return serializeToFields(...FeeRecipient.getFields(this));
    }
    isEmpty() {
        return this.value.isZero() && this.recipient.isZero();
    }
    toFriendlyJSON() {
        if (this.isEmpty()) {
            return {};
        }
        return { recipient: this.recipient.toString(), value: this.value.toString() };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2tfcm9vdF9vcl9ibG9ja19tZXJnZV9wdWJsaWNfaW5wdXRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0cnVjdHMvcm9sbHVwL2Jsb2NrX3Jvb3Rfb3JfYmxvY2tfbWVyZ2VfcHVibGljX2lucHV0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDM0QsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQWMsaUJBQWlCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUc3RyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDekQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFFeEU7O0dBRUc7QUFDSCxNQUFNLE9BQU8saUNBQWlDO0lBQzVDO0lBQ0U7O09BRUc7SUFDSSxlQUF1QztJQUM5Qzs7T0FFRztJQUNJLFVBQWtDO0lBQ3pDOztPQUVHO0lBQ0ksaUJBQXFCO0lBQzVCOztPQUVHO0lBQ0ksWUFBZ0I7SUFDdkI7O09BRUc7SUFDSSxvQkFBcUM7SUFDNUM7O09BRUc7SUFDSSxrQkFBbUM7SUFDMUM7OztPQUdHO0lBQ0ksT0FBVztJQUNsQjs7T0FFRztJQUNJLElBQXNEO0lBQzdEOztPQUVHO0lBQ0ksVUFBYztJQUNyQjs7T0FFRztJQUNJLHdCQUE0QjtJQUNuQzs7T0FFRztJQUNJLFFBQVk7UUF6Q1osb0JBQWUsR0FBZixlQUFlLENBQXdCO1FBSXZDLGVBQVUsR0FBVixVQUFVLENBQXdCO1FBSWxDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBSTtRQUlyQixpQkFBWSxHQUFaLFlBQVksQ0FBSTtRQUloQix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQWlCO1FBSXJDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBaUI7UUFLbkMsWUFBTyxHQUFQLE9BQU8sQ0FBSTtRQUlYLFNBQUksR0FBSixJQUFJLENBQWtEO1FBSXRELGVBQVUsR0FBVixVQUFVLENBQUk7UUFJZCw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQUk7UUFJNUIsYUFBUSxHQUFSLFFBQVEsQ0FBSTtJQUNsQixDQUFDO0lBRUo7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNkI7UUFDN0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxPQUFPLElBQUksaUNBQWlDLENBQzFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsc0JBQXNCLENBQUMsRUFDekMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxzQkFBc0IsQ0FBQyxFQUN6QyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixNQUFNLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxFQUNsQyxNQUFNLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxFQUNsQyxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixNQUFNLENBQUMsU0FBUyxDQUFDLG9CQUFvQixFQUFFLFlBQVksQ0FBQyxFQUNwRCxFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxFQUNyQixFQUFFLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUN0QixDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUN0QixJQUFJLENBQUMsZUFBZSxFQUNwQixJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksQ0FBQyxpQkFBaUIsRUFDdEIsSUFBSSxDQUFDLFlBQVksRUFDakIsSUFBSSxDQUFDLG9CQUFvQixFQUN6QixJQUFJLENBQUMsa0JBQWtCLEVBQ3ZCLElBQUksQ0FBQyxPQUFPLEVBQ1osSUFBSSxDQUFDLElBQUksRUFDVCxJQUFJLENBQUMsVUFBVSxFQUNmLElBQUksQ0FBQyx3QkFBd0IsRUFDN0IsSUFBSSxDQUFDLFFBQVEsQ0FDZCxDQUFDO0lBQ0osQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLEdBQVc7UUFDM0IsT0FBTyxpQ0FBaUMsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMvRSxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sWUFBWTtJQUN2QixZQUFtQixTQUFxQixFQUFTLEtBQVM7UUFBdkMsY0FBUyxHQUFULFNBQVMsQ0FBWTtRQUFTLFVBQUssR0FBTCxLQUFLLENBQUk7SUFBRyxDQUFDO0lBRTlELE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNkI7UUFDN0MsTUFBTSxNQUFNLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxPQUFPLElBQUksWUFBWSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUE4QjtRQUM3QyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFVLENBQUM7SUFDbkQsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDeEQsQ0FBQztJQUVELGNBQWM7UUFDWixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDO1lBQ25CLE9BQU8sRUFBRSxDQUFDO1FBQ1osQ0FBQztRQUNELE9BQU8sRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO0lBQ2hGLENBQUM7Q0FDRiJ9