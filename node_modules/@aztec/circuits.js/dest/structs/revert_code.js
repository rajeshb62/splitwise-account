import { Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader } from '@aztec/foundation/serialize';
import { inspect } from 'util';
var RevertCodeEnum;
(function (RevertCodeEnum) {
    RevertCodeEnum[RevertCodeEnum["OK"] = 0] = "OK";
    RevertCodeEnum[RevertCodeEnum["APP_LOGIC_REVERTED"] = 1] = "APP_LOGIC_REVERTED";
    RevertCodeEnum[RevertCodeEnum["TEARDOWN_REVERTED"] = 2] = "TEARDOWN_REVERTED";
    RevertCodeEnum[RevertCodeEnum["BOTH_REVERTED"] = 3] = "BOTH_REVERTED";
})(RevertCodeEnum || (RevertCodeEnum = {}));
function isRevertCodeEnum(value) {
    return (value === RevertCodeEnum.OK ||
        value === RevertCodeEnum.APP_LOGIC_REVERTED ||
        value === RevertCodeEnum.TEARDOWN_REVERTED ||
        value === RevertCodeEnum.BOTH_REVERTED);
}
/**
 * Wrapper class over a field to safely represent a revert code.
 */
export class RevertCode {
    constructor(e) {
        this.code = e.valueOf();
    }
    equals(other) {
        return this.code === other.code;
    }
    isOK() {
        return this.equals(RevertCode.OK);
    }
    getDescription() {
        switch (this.code) {
            case RevertCodeEnum.OK:
                return 'OK';
            case RevertCodeEnum.APP_LOGIC_REVERTED:
                return 'Application logic reverted';
            case RevertCodeEnum.TEARDOWN_REVERTED:
                return 'Teardown reverted';
            case RevertCodeEnum.BOTH_REVERTED:
                return 'Both reverted';
            default:
                return `Unknown RevertCode: ${this.code}`;
        }
    }
    toHashPreimage() {
        const padding = Buffer.alloc(RevertCode.PREIMAGE_SIZE_IN_BYTES - RevertCode.PACKED_SIZE_IN_BYTES);
        return Buffer.concat([padding, this.toBuffer()]);
    }
    toBuffer() {
        const b = Buffer.alloc(RevertCode.PACKED_SIZE_IN_BYTES);
        b.writeUInt8(this.code, 0);
        return b;
    }
    toField() {
        return new Fr(this.toBuffer());
    }
    getSerializedLength() {
        return this.toBuffer().length;
    }
    static fromField(fr) {
        if (!isRevertCodeEnum(fr.toNumber())) {
            throw new Error(`Invalid RevertCode: ${fr.toNumber()}`);
        }
        return new RevertCode(fr.toNumber());
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return RevertCode.fromField(reader.readField());
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        const code = reader.readBytes(RevertCode.PACKED_SIZE_IN_BYTES).readUInt8(0);
        if (!isRevertCodeEnum(code)) {
            throw new Error(`Invalid RevertCode: ${code}`);
        }
        return new RevertCode(code);
    }
    static random() {
        return new RevertCode(Math.floor(Math.random() * RevertCode.NUM_OPTIONS));
    }
    [inspect.custom]() {
        return `RevertCode<${this.code.toString()}>`;
    }
}
RevertCode.OK = new RevertCode(RevertCodeEnum.OK);
RevertCode.APP_LOGIC_REVERTED = new RevertCode(RevertCodeEnum.APP_LOGIC_REVERTED);
RevertCode.TEARDOWN_REVERTED = new RevertCode(RevertCodeEnum.TEARDOWN_REVERTED);
RevertCode.BOTH_REVERTED = new RevertCode(RevertCodeEnum.BOTH_REVERTED);
/**
 * Having different serialization methods allows for
 * decoupling the serialization for producing the content commitment hash
 * (where we use fields)
 * from serialization for transmitting the data.
 */
RevertCode.PREIMAGE_SIZE_IN_BYTES = 32;
RevertCode.PACKED_SIZE_IN_BYTES = 1;
RevertCode.NUM_OPTIONS = 4;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV2ZXJ0X2NvZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc3RydWN0cy9yZXZlcnRfY29kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV4RSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRS9CLElBQUssY0FLSjtBQUxELFdBQUssY0FBYztJQUNqQiwrQ0FBTSxDQUFBO0lBQ04sK0VBQXNCLENBQUE7SUFDdEIsNkVBQXFCLENBQUE7SUFDckIscUVBQWlCLENBQUE7QUFDbkIsQ0FBQyxFQUxJLGNBQWMsS0FBZCxjQUFjLFFBS2xCO0FBRUQsU0FBUyxnQkFBZ0IsQ0FBQyxLQUFhO0lBQ3JDLE9BQU8sQ0FDTCxLQUFLLEtBQUssY0FBYyxDQUFDLEVBQUU7UUFDM0IsS0FBSyxLQUFLLGNBQWMsQ0FBQyxrQkFBa0I7UUFDM0MsS0FBSyxLQUFLLGNBQWMsQ0FBQyxpQkFBaUI7UUFDMUMsS0FBSyxLQUFLLGNBQWMsQ0FBQyxhQUFhLENBQ3ZDLENBQUM7QUFDSixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sVUFBVTtJQUVyQixZQUFvQixDQUFpQjtRQUNuQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBTU0sTUFBTSxDQUFDLEtBQWlCO1FBQzdCLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDO0lBQ2xDLENBQUM7SUFFTSxJQUFJO1FBQ1QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRU0sY0FBYztRQUNuQixRQUFRLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztZ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