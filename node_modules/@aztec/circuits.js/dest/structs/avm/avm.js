import { Fr } from '@aztec/foundation/fields';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { PublicKeys } from '../../types/public_keys.js';
import { Gas } from '../gas.js';
import { PublicCircuitPublicInputs } from '../public_circuit_public_inputs.js';
import { Vector } from '../shared.js';
// TODO: Consider just using Tuple.
export class AvmKeyValueHint {
    constructor(key, value) {
        this.key = key;
        this.value = value;
    }
    /**
     * Serializes the inputs to a buffer.
     * @returns - The inputs serialized to a buffer.
     */
    toBuffer() {
        return serializeToBuffer(...AvmKeyValueHint.getFields(this));
    }
    /**
     * Serializes the inputs to a hex string.
     * @returns The instance serialized to a hex string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /**
     * Is the struct empty?
     * @returns whether all members are empty.
     */
    isEmpty() {
        return this.key.isEmpty() && this.value.isEmpty();
    }
    /**
     * Creates a new instance from fields.
     * @param fields - Fields to create the instance from.
     * @returns A new AvmHint instance.
     */
    static from(fields) {
        return new AvmKeyValueHint(...AvmKeyValueHint.getFields(fields));
    }
    /**
     * Extracts fields from an instance.
     * @param fields - Fields to create the instance from.
     * @returns An array of fields.
     */
    static getFields(fields) {
        return [fields.key, fields.value];
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buff) {
        const reader = BufferReader.asReader(buff);
        return new AvmKeyValueHint(Fr.fromBuffer(reader), Fr.fromBuffer(reader));
    }
    /**
     * Deserializes from a hex string.
     * @param str - Hex string to read from.
     * @returns The deserialized instance.
     */
    static fromString(str) {
        return AvmKeyValueHint.fromBuffer(Buffer.from(str, 'hex'));
    }
}
export class AvmExternalCallHint {
    /**
     * Creates a new instance.
     * @param success whether the external call was successful (= did NOT revert).
     * @param returnData the data returned by the external call.
     * @param gasUsed gas used by the external call (not including the cost of the CALL opcode itself).
     * @param endSideEffectCounter value of side effect counter at the end of the external call.
     */
    constructor(success, returnData, gasUsed, endSideEffectCounter) {
        this.success = success;
        this.gasUsed = gasUsed;
        this.endSideEffectCounter = endSideEffectCounter;
        this.returnData = new Vector(returnData);
    }
    /**
     * Serializes the inputs to a buffer.
     * @returns - The inputs serialized to a buffer.
     */
    toBuffer() {
        return serializeToBuffer(...AvmExternalCallHint.getFields(this));
    }
    /**
     * Serializes the inputs to a hex string.
     * @returns The instance serialized to a hex string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /**
     * Is the struct empty?
     * @returns whether all members are empty.
     */
    isEmpty() {
        return (this.success.isZero() &&
            this.returnData.items.length == 0 &&
            this.gasUsed.isEmpty() &&
            this.endSideEffectCounter.isZero());
    }
    /**
     * Creates a new instance from fields.
     * @param fields - Fields to create the instance from.
     * @returns A new AvmHint instance.
     */
    static from(fields) {
        return new AvmExternalCallHint(fields.success, fields.returnData.items, fields.gasUsed, fields.endSideEffectCounter);
    }
    /**
     * Extracts fields from an instance.
     * @param fields - Fields to create the instance from.
     * @returns An array of fields.
     */
    static getFields(fields) {
        return [fields.success, fields.returnData, fields.gasUsed, fields.endSideEffectCounter];
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buff) {
        const reader = BufferReader.asReader(buff);
        return new AvmExternalCallHint(Fr.fromBuffer(reader), reader.readVector(Fr), reader.readObject(Gas), Fr.fromBuffer(reader));
    }
    /**
     * Deserializes from a hex string.
     * @param str - Hex string to read from.
     * @returns The deserialized instance.
     */
    static fromString(str) {
        return AvmExternalCallHint.fromBuffer(Buffer.from(str, 'hex'));
    }
}
export class AvmContractInstanceHint {
    constructor(address, exists, salt, deployer, contractClassId, initializationHash, publicKeys) {
        this.address = address;
        this.exists = exists;
        this.salt = salt;
        this.deployer = deployer;
        this.contractClassId = contractClassId;
        this.initializationHash = initializationHash;
        this.publicKeys = publicKeys;
    }
    /**
     * Serializes the inputs to a buffer.
     * @returns - The inputs serialized to a buffer.
     */
    toBuffer() {
        return serializeToBuffer(...AvmContractInstanceHint.getFields(this));
    }
    /**
     * Serializes the inputs to a hex string.
     * @returns The instance serialized to a hex string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /**
     * Is the struct empty?
     * @returns whether all members are empty.
     */
    isEmpty() {
        return (this.address.isZero() &&
            this.exists.isZero() &&
            this.salt.isZero() &&
            this.deployer.isZero() &&
            this.contractClassId.isZero() &&
            this.initializationHash.isZero() &&
            this.publicKeys.isEmpty());
    }
    /**
     * Creates a new instance from fields.
     * @param fields - Fields to create the instance from.
     * @returns A new AvmHint instance.
     */
    static from(fields) {
        return new AvmContractInstanceHint(...AvmContractInstanceHint.getFields(fields));
    }
    /**
     * Extracts fields from an instance.
     * @param fields - Fields to create the instance from.
     * @returns An array of fields.
     */
    static getFields(fields) {
        return [
            fields.address,
            fields.exists,
            fields.salt,
            fields.deployer,
            fields.contractClassId,
            fields.initializationHash,
            fields.publicKeys,
        ];
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buff) {
        const reader = BufferReader.asReader(buff);
        return new AvmContractInstanceHint(Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), Fr.fromBuffer(reader), PublicKeys.fromBuffer(reader));
    }
    /**
     * Deserializes from a hex string.
     * @param str - Hex string to read from.
     * @returns The deserialized instance.
     */
    static fromString(str) {
        return AvmContractInstanceHint.fromBuffer(Buffer.from(str, 'hex'));
    }
}
// TODO(dbanks12): rename AvmCircuitHints
export class AvmExecutionHints {
    constructor(storageValues, noteHashExists, nullifierExists, l1ToL2MessageExists, externalCalls, contractInstances) {
        this.storageValues = new Vector(storageValues);
        this.noteHashExists = new Vector(noteHashExists);
        this.nullifierExists = new Vector(nullifierExists);
        this.l1ToL2MessageExists = new Vector(l1ToL2MessageExists);
        this.externalCalls = new Vector(externalCalls);
        this.contractInstances = new Vector(contractInstances);
    }
    /**
     * Return an empty instance.
     * @returns an empty instance.
     */
    empty() {
        return new AvmExecutionHints([], [], [], [], [], []);
    }
    /**
     * Serializes the inputs to a buffer.
     * @returns - The inputs serialized to a buffer.
     */
    toBuffer() {
        return serializeToBuffer(...AvmExecutionHints.getFields(this));
    }
    /**
     * Serializes the inputs to a hex string.
     * @returns The instance serialized to a hex string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /**
     * Is the struct empty?
     * @returns whether all members are empty.
     */
    isEmpty() {
        return (this.storageValues.items.length == 0 &&
            this.noteHashExists.items.length == 0 &&
            this.nullifierExists.items.length == 0 &&
            this.l1ToL2MessageExists.items.length == 0 &&
            this.externalCalls.items.length == 0 &&
            this.contractInstances.items.length == 0);
    }
    /**
     * Creates a new instance from fields.
     * @param fields - Fields to create the instance from.
     * @returns A new AvmExecutionHints instance.
     */
    static from(fields) {
        return new AvmExecutionHints(fields.storageValues.items, fields.noteHashExists.items, fields.nullifierExists.items, fields.l1ToL2MessageExists.items, fields.externalCalls.items, fields.contractInstances.items);
    }
    /**
     * Extracts fields from an instance.
     * @param fields - Fields to create the instance from.
     * @returns An array of fields.
     */
    static getFields(fields) {
        return [
            fields.storageValues,
            fields.noteHashExists,
            fields.nullifierExists,
            fields.l1ToL2MessageExists,
            fields.externalCalls,
            fields.contractInstances,
        ];
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buff) {
        const reader = BufferReader.asReader(buff);
        return new AvmExecutionHints(reader.readVector(AvmKeyValueHint), reader.readVector(AvmKeyValueHint), reader.readVector(AvmKeyValueHint), reader.readVector(AvmKeyValueHint), reader.readVector(AvmExternalCallHint), reader.readVector(AvmContractInstanceHint));
    }
    /**
     * Deserializes from a hex string.
     * @param str - Hex string to read from.
     * @returns The deserialized instance.
     */
    static fromString(str) {
        return AvmCircuitInputs.fromBuffer(Buffer.from(str, 'hex'));
    }
    /**
     * Construct an empty instance.
     * @returns The empty instance.
     */
    static empty() {
        return new AvmExecutionHints([], [], [], [], [], []);
    }
}
export class AvmCircuitInputs {
    constructor(functionName, // only informational
    bytecode, calldata, publicInputs, avmHints) {
        this.functionName = functionName;
        this.bytecode = bytecode;
        this.calldata = calldata;
        this.publicInputs = publicInputs;
        this.avmHints = avmHints;
    }
    /**
     * Serializes the inputs to a buffer.
     * @returns - The inputs serialized to a buffer.
     */
    toBuffer() {
        const functionNameBuffer = Buffer.from(this.functionName);
        return serializeToBuffer(functionNameBuffer.length, functionNameBuffer, this.bytecode.length, this.bytecode, this.calldata.length, this.calldata, this.publicInputs.toBuffer(), this.avmHints.toBuffer());
    }
    /**
     * Serializes the inputs to a hex string.
     * @returns The instance serialized to a hex string.
     */
    toString() {
        return this.toBuffer().toString('hex');
    }
    /**
     * Is the struct empty?
     * @returns whether all members are empty.
     */
    isEmpty() {
        return (this.functionName.length == 0 &&
            this.bytecode.length == 0 &&
            this.calldata.length == 0 &&
            this.publicInputs.isEmpty() &&
            this.avmHints.isEmpty());
    }
    /**
     * Creates a new instance from fields.
     * @param fields - Fields to create the instance from.
     * @returns A new AvmCircuitInputs instance.
     */
    static from(fields) {
        return new AvmCircuitInputs(...AvmCircuitInputs.getFields(fields));
    }
    /**
     * Extracts fields from an instance.
     * @param fields - Fields to create the instance from.
     * @returns An array of fields.
     */
    static getFields(fields) {
        return [fields.functionName, fields.bytecode, fields.calldata, fields.publicInputs, fields.avmHints];
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buff) {
        const reader = BufferReader.asReader(buff);
        return new AvmCircuitInputs(
        /*functionName=*/ reader.readBuffer().toString(), 
        /*bytecode=*/ reader.readBuffer(), 
        /*calldata=*/ reader.readVector(Fr), PublicCircuitPublicInputs.fromBuffer(reader), AvmExecutionHints.fromBuffer(reader));
    }
    /**
     * Deserializes from a hex string.
     * @param str - Hex string to read from.
     * @returns The deserialized instance.
     */
    static fromString(str) {
        return AvmCircuitInputs.fromBuffer(Buffer.from(str, 'hex'));
    }
}
//# sourceMappingURL=data:application/json;base64,