/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { type Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, type Tuple } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { MAX_KEY_VALIDATION_REQUESTS_PER_TX, MAX_NOTE_HASH_READ_REQUESTS_PER_TX, MAX_NULLIFIER_READ_REQUESTS_PER_TX } from '../constants.gen.js';
import { OptionalNumber } from './optional_number.js';
import { ScopedReadRequest } from './read_request.js';
import { RollupValidationRequests } from './rollup_validation_requests.js';
import { ScopedKeyValidationRequestAndGenerator } from './scoped_key_validation_request_and_generator.js';
/**
 * Validation requests accumulated during the execution of the transaction.
 */
export declare class PrivateValidationRequests {
    /**
     * Validation requests that cannot be fulfilled in the current context (private or public), and must be instead be
     * forwarded to the rollup for it to take care of them.
     */
    forRollup: RollupValidationRequests;
    /**
     * All the read requests made in this transaction.
     */
    noteHashReadRequests: Tuple<ScopedReadRequest, typeof MAX_NOTE_HASH_READ_REQUESTS_PER_TX>;
    /**
     * All the nullifier read requests made in this transaction.
     */
    nullifierReadRequests: Tuple<ScopedReadRequest, typeof MAX_NULLIFIER_READ_REQUESTS_PER_TX>;
    /**
     * All the key validation requests made in this transaction.
     */
    scopedKeyValidationRequestsAndGenerators: Tuple<ScopedKeyValidationRequestAndGenerator, typeof MAX_KEY_VALIDATION_REQUESTS_PER_TX>;
    /**
     * The counter to split the data for squashing.
     * A revertible nullifier and a non-revertible note hash will not be squashed.
     * It should be the "final" minRevertibleSideEffectCounter of a tx.
     */
    splitCounter: OptionalNumber;
    constructor(
    /**
     * Validation requests that cannot be fulfilled in the current context (private or public), and must be instead be
     * forwarded to the rollup for it to take care of them.
     */
    forRollup: RollupValidationRequests, 
    /**
     * All the read requests made in this transaction.
     */
    noteHashReadRequests: Tuple<ScopedReadRequest, typeof MAX_NOTE_HASH_READ_REQUESTS_PER_TX>, 
    /**
     * All the nullifier read requests made in this transaction.
     */
    nullifierReadRequests: Tuple<ScopedReadRequest, typeof MAX_NULLIFIER_READ_REQUESTS_PER_TX>, 
    /**
     * All the key validation requests made in this transaction.
     */
    scopedKeyValidationRequestsAndGenerators: Tuple<ScopedKeyValidationRequestAndGenerator, typeof MAX_KEY_VALIDATION_REQUESTS_PER_TX>, 
    /**
     * The counter to split the data for squashing.
     * A revertible nullifier and a non-revertible note hash will not be squashed.
     * It should be the "final" minRevertibleSideEffectCounter of a tx.
     */
    splitCounter: OptionalNumber);
    getSize(): number;
    toBuffer(): Buffer;
    toString(): string;
    static fromFields(fields: Fr[] | FieldReader): PrivateValidationRequests;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PrivateValidationRequests;
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str: string): PrivateValidationRequests;
    static empty(): PrivateValidationRequests;
    [inspect.custom](): string;
}
//# sourceMappingURL=private_validation_requests.d.ts.map