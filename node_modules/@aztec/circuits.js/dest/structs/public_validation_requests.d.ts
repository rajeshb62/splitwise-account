/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { type Fr } from '@aztec/foundation/fields';
import { BufferReader, FieldReader, type Tuple } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_TX, MAX_NOTE_HASH_READ_REQUESTS_PER_TX, MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX, MAX_NULLIFIER_READ_REQUESTS_PER_TX, MAX_PUBLIC_DATA_READS_PER_TX } from '../constants.gen.js';
import { PublicDataRead } from './public_data_read.js';
import { ScopedReadRequest } from './read_request.js';
import { RollupValidationRequests } from './rollup_validation_requests.js';
import { TreeLeafReadRequest } from './tree_leaf_read_request.js';
/**
 * Validation requests accumulated during the execution of the transaction.
 */
export declare class PublicValidationRequests {
    /**
     * Validation requests that cannot be fulfilled in the current context (private or public), and must be instead be
     * forwarded to the rollup for it to take care of them.
     */
    forRollup: RollupValidationRequests;
    noteHashReadRequests: Tuple<TreeLeafReadRequest, typeof MAX_NOTE_HASH_READ_REQUESTS_PER_TX>;
    /**
     * All the nullifier read requests made in this transaction.
     */
    nullifierReadRequests: Tuple<ScopedReadRequest, typeof MAX_NULLIFIER_READ_REQUESTS_PER_TX>;
    /**
     * The nullifier read requests made in this transaction.
     */
    nullifierNonExistentReadRequests: Tuple<ScopedReadRequest, typeof MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX>;
    l1ToL2MsgReadRequests: Tuple<TreeLeafReadRequest, typeof MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_TX>;
    /**
     * All the public data reads made in this transaction.
     */
    publicDataReads: Tuple<PublicDataRead, typeof MAX_PUBLIC_DATA_READS_PER_TX>;
    constructor(
    /**
     * Validation requests that cannot be fulfilled in the current context (private or public), and must be instead be
     * forwarded to the rollup for it to take care of them.
     */
    forRollup: RollupValidationRequests, noteHashReadRequests: Tuple<TreeLeafReadRequest, typeof MAX_NOTE_HASH_READ_REQUESTS_PER_TX>, 
    /**
     * All the nullifier read requests made in this transaction.
     */
    nullifierReadRequests: Tuple<ScopedReadRequest, typeof MAX_NULLIFIER_READ_REQUESTS_PER_TX>, 
    /**
     * The nullifier read requests made in this transaction.
     */
    nullifierNonExistentReadRequests: Tuple<ScopedReadRequest, typeof MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_TX>, l1ToL2MsgReadRequests: Tuple<TreeLeafReadRequest, typeof MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_TX>, 
    /**
     * All the public data reads made in this transaction.
     */
    publicDataReads: Tuple<PublicDataRead, typeof MAX_PUBLIC_DATA_READS_PER_TX>);
    getSize(): number;
    toBuffer(): Buffer;
    toString(): string;
    static fromFields(fields: Fr[] | FieldReader): PublicValidationRequests;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PublicValidationRequests;
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str: string): PublicValidationRequests;
    static empty(): PublicValidationRequests;
    [inspect.custom](): string;
}
export declare class PublicValidationRequestArrayLengths {
    noteHashReadRequests: number;
    nullifierReadRequests: number;
    nullifierNonExistentReadRequests: number;
    l1ToL2MsgReadRequests: number;
    publicDataReads: number;
    constructor(noteHashReadRequests: number, nullifierReadRequests: number, nullifierNonExistentReadRequests: number, l1ToL2MsgReadRequests: number, publicDataReads: number);
    static new(requests: PublicValidationRequests): PublicValidationRequestArrayLengths;
    getSize(): number;
    toBuffer(): Buffer;
    toString(): string;
    static fromFields(fields: Fr[] | FieldReader): PublicValidationRequestArrayLengths;
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer: Buffer | BufferReader): PublicValidationRequestArrayLengths;
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str: string): PublicValidationRequestArrayLengths;
    static empty(): PublicValidationRequestArrayLengths;
    [inspect.custom](): string;
}
//# sourceMappingURL=public_validation_requests.d.ts.map