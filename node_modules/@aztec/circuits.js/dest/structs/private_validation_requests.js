import { makeTuple } from '@aztec/foundation/array';
import { arraySerializedSizeOfNonEmpty } from '@aztec/foundation/collection';
import { BufferReader, FieldReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { inspect } from 'util';
import { MAX_KEY_VALIDATION_REQUESTS_PER_TX, MAX_NOTE_HASH_READ_REQUESTS_PER_TX, MAX_NULLIFIER_READ_REQUESTS_PER_TX, } from '../constants.gen.js';
import { OptionalNumber } from './optional_number.js';
import { ScopedReadRequest } from './read_request.js';
import { RollupValidationRequests } from './rollup_validation_requests.js';
import { ScopedKeyValidationRequestAndGenerator } from './scoped_key_validation_request_and_generator.js';
/**
 * Validation requests accumulated during the execution of the transaction.
 */
export class PrivateValidationRequests {
    constructor(
    /**
     * Validation requests that cannot be fulfilled in the current context (private or public), and must be instead be
     * forwarded to the rollup for it to take care of them.
     */
    forRollup, 
    /**
     * All the read requests made in this transaction.
     */
    noteHashReadRequests, 
    /**
     * All the nullifier read requests made in this transaction.
     */
    nullifierReadRequests, 
    /**
     * All the key validation requests made in this transaction.
     */
    scopedKeyValidationRequestsAndGenerators, 
    /**
     * The counter to split the data for squashing.
     * A revertible nullifier and a non-revertible note hash will not be squashed.
     * It should be the "final" minRevertibleSideEffectCounter of a tx.
     */
    splitCounter) {
        this.forRollup = forRollup;
        this.noteHashReadRequests = noteHashReadRequests;
        this.nullifierReadRequests = nullifierReadRequests;
        this.scopedKeyValidationRequestsAndGenerators = scopedKeyValidationRequestsAndGenerators;
        this.splitCounter = splitCounter;
    }
    getSize() {
        return (this.forRollup.getSize() +
            arraySerializedSizeOfNonEmpty(this.noteHashReadRequests) +
            arraySerializedSizeOfNonEmpty(this.nullifierReadRequests) +
            arraySerializedSizeOfNonEmpty(this.scopedKeyValidationRequestsAndGenerators) +
            this.splitCounter.getSize());
    }
    toBuffer() {
        return serializeToBuffer(this.forRollup, this.noteHashReadRequests, this.nullifierReadRequests, this.scopedKeyValidationRequestsAndGenerators, this.splitCounter);
    }
    toString() {
        return this.toBuffer().toString('hex');
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new PrivateValidationRequests(reader.readObject(RollupValidationRequests), reader.readArray(MAX_NOTE_HASH_READ_REQUESTS_PER_TX, ScopedReadRequest), reader.readArray(MAX_NULLIFIER_READ_REQUESTS_PER_TX, ScopedReadRequest), reader.readArray(MAX_KEY_VALIDATION_REQUESTS_PER_TX, ScopedKeyValidationRequestAndGenerator), reader.readObject(OptionalNumber));
    }
    /**
     * Deserializes from a buffer or reader, corresponding to a write in cpp.
     * @param buffer - Buffer or reader to read from.
     * @returns Deserialized object.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PrivateValidationRequests(reader.readObject(RollupValidationRequests), reader.readArray(MAX_NOTE_HASH_READ_REQUESTS_PER_TX, ScopedReadRequest), reader.readArray(MAX_NULLIFIER_READ_REQUESTS_PER_TX, ScopedReadRequest), reader.readArray(MAX_KEY_VALIDATION_REQUESTS_PER_TX, ScopedKeyValidationRequestAndGenerator), reader.readObject(OptionalNumber));
    }
    /**
     * Deserializes from a string, corresponding to a write in cpp.
     * @param str - String to read from.
     * @returns Deserialized object.
     */
    static fromString(str) {
        return PrivateValidationRequests.fromBuffer(Buffer.from(str, 'hex'));
    }
    static empty() {
        return new PrivateValidationRequests(RollupValidationRequests.empty(), makeTuple(MAX_NOTE_HASH_READ_REQUESTS_PER_TX, ScopedReadRequest.empty), makeTuple(MAX_NULLIFIER_READ_REQUESTS_PER_TX, ScopedReadRequest.empty), makeTuple(MAX_KEY_VALIDATION_REQUESTS_PER_TX, ScopedKeyValidationRequestAndGenerator.empty), OptionalNumber.empty());
    }
    [inspect.custom]() {
        return `PrivateValidationRequests {
  forRollup: ${inspect(this.forRollup)},
  noteHashReadRequests: [${this.noteHashReadRequests
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}],
  nullifierReadRequests: [${this.nullifierReadRequests
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}],
  scopedKeyValidationRequestsAndGenerators: [${this.scopedKeyValidationRequestsAndGenerators
            .filter(x => !x.isEmpty())
            .map(h => inspect(h))
            .join(', ')}],
  splitCounter: ${this.splitCounter}
  `;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZV92YWxpZGF0aW9uX3JlcXVlc3RzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cnVjdHMvcHJpdmF0ZV92YWxpZGF0aW9uX3JlcXVlc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUU3RSxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBYyxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXZHLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsT0FBTyxFQUNMLGtDQUFrQyxFQUNsQyxrQ0FBa0MsRUFDbEMsa0NBQWtDLEdBQ25DLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzNFLE9BQU8sRUFBRSxzQ0FBc0MsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBRTFHOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHlCQUF5QjtJQUNwQztJQUNFOzs7T0FHRztJQUNJLFNBQW1DO0lBQzFDOztPQUVHO0lBQ0ksb0JBQXlGO0lBQ2hHOztPQUVHO0lBQ0kscUJBQTBGO0lBQ2pHOztPQUVHO0lBQ0ksd0NBR047SUFDRDs7OztPQUlHO0lBQ0ksWUFBNEI7UUFyQjVCLGNBQVMsR0FBVCxTQUFTLENBQTBCO1FBSW5DLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBcUU7UUFJekYsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFxRTtRQUkxRiw2Q0FBd0MsR0FBeEMsd0NBQXdDLENBRzlDO1FBTU0saUJBQVksR0FBWixZQUFZ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