import { FunctionSelector } from '@aztec/foundation/abi';
import { AztecAddress } from '@aztec/foundation/aztec-address';
import { BufferReader, FieldReader, serializeToBuffer, serializeToFields } from '@aztec/foundation/serialize';
import { CALL_CONTEXT_LENGTH } from '../constants.gen.js';
/**
 * Call context.
 */
export class CallContext {
    constructor(
    /**
     * Address of the account which represents the entity who invoked the call.
     */
    msgSender, 
    /**
     * The contract address being called.
     */
    contractAddress, 
    /**
     * Function selector of the function being called.
     */
    functionSelector, 
    /**
     * Determines whether the call is modifying state.
     */
    isStaticCall) {
        this.msgSender = msgSender;
        this.contractAddress = contractAddress;
        this.functionSelector = functionSelector;
        this.isStaticCall = isStaticCall;
    }
    /**
     * Returns a new instance of CallContext with zero msg sender, storage contract address.
     * @returns A new instance of CallContext with zero msg sender, storage contract address.
     */
    static empty() {
        return new CallContext(AztecAddress.ZERO, AztecAddress.ZERO, FunctionSelector.empty(), false);
    }
    isEmpty() {
        return (this.msgSender.isZero() && this.contractAddress.isZero() && this.functionSelector.isEmpty() && !this.isStaticCall);
    }
    static from(fields) {
        return new CallContext(...CallContext.getFields(fields));
    }
    static getFields(fields) {
        return [fields.msgSender, fields.contractAddress, fields.functionSelector, fields.isStaticCall];
    }
    /**
     * Serialize this as a buffer.
     * @returns The buffer.
     */
    toBuffer() {
        return serializeToBuffer(...CallContext.getFields(this));
    }
    toFields() {
        const fields = serializeToFields(...CallContext.getFields(this));
        if (fields.length !== CALL_CONTEXT_LENGTH) {
            throw new Error(`Invalid number of fields for CallContext. Expected ${CALL_CONTEXT_LENGTH}, got ${fields.length}`);
        }
        return fields;
    }
    /**
     * Deserialize this from a buffer.
     * @param buffer - The bufferable type from which to deserialize.
     * @returns The deserialized instance of CallContext.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new CallContext(reader.readObject(AztecAddress), reader.readObject(AztecAddress), reader.readObject(FunctionSelector), reader.readBoolean());
    }
    static fromFields(fields) {
        const reader = FieldReader.asReader(fields);
        return new CallContext(reader.readObject(AztecAddress), reader.readObject(AztecAddress), reader.readObject(FunctionSelector), reader.readBoolean());
    }
    equals(callContext) {
        return (callContext.msgSender.equals(this.msgSender) &&
            callContext.contractAddress.equals(this.contractAddress) &&
            callContext.functionSelector.equals(this.functionSelector) &&
            callContext.isStaticCall === this.isStaticCall);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsbF9jb250ZXh0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cnVjdHMvY2FsbF9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUUvRCxPQUFPLEVBQUUsWUFBWSxFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRzlHLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRTFEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFdBQVc7SUFDdEI7SUFDRTs7T0FFRztJQUNJLFNBQXVCO0lBQzlCOztPQUVHO0lBQ0ksZUFBNkI7SUFDcEM7O09BRUc7SUFDSSxnQkFBa0M7SUFDekM7O09BRUc7SUFDSSxZQUFxQjtRQVpyQixjQUFTLEdBQVQsU0FBUyxDQUFjO1FBSXZCLG9CQUFlLEdBQWYsZUFBZSxDQUFjO1FBSTdCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFJbEMsaUJBQVksR0FBWixZQUFZLENBQVM7SUFDM0IsQ0FBQztJQUVKOzs7T0FHRztJQUNJLE1BQU0sQ0FBQyxLQUFLO1FBQ2pCLE9BQU8sSUFBSSxXQUFXLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLEtBQUssRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hHLENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxDQUNMLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUNsSCxDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBNkI7UUFDdkMsT0FBTyxJQUFJLFdBQVcsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUE2QjtRQUM1QyxPQUFPLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsWUFBWSxDQUFVLENBQUM7SUFDM0csQ0FBQztJQUVEOzs7T0FHRztJQUNILFFBQVE7UUFDTixPQUFPLGlCQUFpQixDQUFDLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxRQUFRO1FBQ04sTUFBTSxNQUFNLEdBQUcsaUJBQWlCLENBQUMsR0FBRyxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDakUsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLG1CQUFtQixFQUFFLENBQUM7WUFDMUMsTUFBTSxJQUFJLEtBQUssQ0FDYixzREFBc0QsbUJBQW1CLFNBQVMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUNsRyxDQUFDO1FBQ0osQ0FBQztRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUE2QjtRQUM3QyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxXQUFXLENBQ3BCLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQy9CLE1BQU0sQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQy9CLE1BQU0sQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsRUFDbkMsTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUNyQixDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBMEI7UUFDMUMsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QyxPQUFPLElBQUksV0FBVyxDQUNwQixNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxFQUMvQixNQUFNLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQyxFQUMvQixNQUFNLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLEVBQ25DLE1BQU0sQ0FBQyxXQUFXLEVBQUUsQ0FDckIsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsV0FBd0I7UUFDN0IsT0FBTyxDQUNMLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDNUMsV0FBVyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztZQUN4RCxXQUFXLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztZQUMxRCxXQUFXLENBQUMsWUFBWSxLQUFLLElBQUksQ0FBQyxZQUFZLENBQy9DLENBQUM7SUFDSixDQUFDO0NBQ0YifQ==