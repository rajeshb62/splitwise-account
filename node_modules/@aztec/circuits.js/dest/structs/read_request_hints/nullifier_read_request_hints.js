import { makeTuple } from '@aztec/foundation/array';
import { MAX_NULLIFIER_READ_REQUESTS_PER_TX, NULLIFIER_TREE_HEIGHT } from '../../constants.gen.js';
import { NullifierLeafPreimage } from '../trees/index.js';
import { PendingReadHint, ReadRequestResetHints, ReadRequestState, ReadRequestStatus, SettledReadHint, } from './read_request_hints.js';
export function nullifierReadRequestHintsFromBuffer(buffer, numPendingReads, numSettledReads) {
    return ReadRequestResetHints.fromBuffer(buffer, MAX_NULLIFIER_READ_REQUESTS_PER_TX, numPendingReads, numSettledReads, NULLIFIER_TREE_HEIGHT, NullifierLeafPreimage);
}
export class NullifierReadRequestHintsBuilder {
    constructor(maxPending, maxSettled) {
        this.maxPending = maxPending;
        this.maxSettled = maxSettled;
        this.numPendingReadHints = 0;
        this.numSettledReadHints = 0;
        this.hints = new ReadRequestResetHints(makeTuple(MAX_NULLIFIER_READ_REQUESTS_PER_TX, ReadRequestStatus.nada), makeTuple(maxPending, () => PendingReadHint.nada(MAX_NULLIFIER_READ_REQUESTS_PER_TX)), makeTuple(maxSettled, () => SettledReadHint.nada(MAX_NULLIFIER_READ_REQUESTS_PER_TX, NULLIFIER_TREE_HEIGHT, NullifierLeafPreimage.empty)));
    }
    static empty(maxPending, maxSettled) {
        return new NullifierReadRequestHintsBuilder(maxPending, maxSettled).toHints();
    }
    addPendingReadRequest(readRequestIndex, nullifierIndex) {
        if (this.numPendingReadHints === this.maxPending) {
            throw new Error('Cannot add more pending read request.');
        }
        this.hints.readRequestStatuses[readRequestIndex] = new ReadRequestStatus(ReadRequestState.PENDING, this.numPendingReadHints);
        this.hints.pendingReadHints[this.numPendingReadHints] = new PendingReadHint(readRequestIndex, nullifierIndex);
        this.numPendingReadHints++;
    }
    addSettledReadRequest(readRequestIndex, membershipWitness, leafPreimage) {
        if (this.numSettledReadHints === this.maxSettled) {
            throw new Error('Cannot add more settled read request.');
        }
        this.hints.readRequestStatuses[readRequestIndex] = new ReadRequestStatus(ReadRequestState.SETTLED, this.numSettledReadHints);
        this.hints.settledReadHints[this.numSettledReadHints] = new SettledReadHint(readRequestIndex, membershipWitness, leafPreimage);
        this.numSettledReadHints++;
    }
    toHints() {
        return this.hints;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVsbGlmaWVyX3JlYWRfcmVxdWVzdF9oaW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHJ1Y3RzL3JlYWRfcmVxdWVzdF9oaW50cy9udWxsaWZpZXJfcmVhZF9yZXF1ZXN0X2hpbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUlwRCxPQUFPLEVBQUUsa0NBQWtDLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUVuRyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMxRCxPQUFPLEVBQ0wsZUFBZSxFQUNmLHFCQUFxQixFQUNyQixnQkFBZ0IsRUFDaEIsaUJBQWlCLEVBQ2pCLGVBQWUsR0FDaEIsTUFBTSx5QkFBeUIsQ0FBQztBQVVqQyxNQUFNLFVBQVUsbUNBQW1DLENBQ2pELE1BQTZCLEVBQzdCLGVBQXdCLEVBQ3hCLGVBQXdCO0lBRXhCLE9BQU8scUJBQXFCLENBQUMsVUFBVSxDQUNyQyxNQUFNLEVBQ04sa0NBQWtDLEVBQ2xDLGVBQWUsRUFDZixlQUFlLEVBQ2YscUJBQXFCLEVBQ3JCLHFCQUFxQixDQUN0QixDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sT0FBTyxnQ0FBZ0M7SUFLM0MsWUFBNEIsVUFBbUIsRUFBa0IsVUFBbUI7UUFBeEQsZUFBVSxHQUFWLFVBQVUsQ0FBUztRQUFrQixlQUFVLEdBQVYsVUFBVSxDQUFTO1FBSDVFLHdCQUFtQixHQUFHLENBQUMsQ0FBQztRQUN4Qix3QkFBbUIsR0FBRyxDQUFDLENBQUM7UUFHOUIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLHFCQUFxQixDQUNwQyxTQUFTLENBQUMsa0NBQWtDLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQ3JFLFNBQVMsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLEVBQ3JGLFNBQVMsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLENBQ3pCLGVBQWUsQ0FBQyxJQUFJLENBQUMsa0NBQWtDLEVBQUUscUJBQXFCLEVBQUUscUJBQXFCLENBQUMsS0FBSyxDQUFDLENBQzdHLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsS0FBSyxDQUFpRCxVQUFtQixFQUFFLFVBQW1CO1FBQ25HLE9BQU8sSUFBSSxnQ0FBZ0MsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDaEYsQ0FBQztJQUVELHFCQUFxQixDQUFDLGdCQUF3QixFQUFFLGNBQXNCO1FBQ3BFLElBQUksSUFBSSxDQUFDLG1CQUFtQixLQUFLLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNqRCxNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7UUFDM0QsQ0FBQztRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxJQUFJLGlCQUFpQixDQUN0RSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQ3hCLElBQUksQ0FBQyxtQkFBbUIsQ0FDekIsQ0FBQztRQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsSUFBSSxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsY0FBYyxDQUFDLENBQUM7UUFDOUcsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELHFCQUFxQixDQUNuQixnQkFBd0IsRUFDeEIsaUJBQWtFLEVBQ2xFLFlBQThCO1FBRTlCLElBQUksSUFBSSxDQUFDLG1CQUFtQixLQUFLLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNqRCxNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7UUFDM0QsQ0FBQztRQUNELElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxJQUFJLGlCQUFpQixDQUN0RSxnQkFBZ0IsQ0FBQyxPQUFPLEVBQ3hCLElBQUksQ0FBQyxtQkFBbUIsQ0FDekIsQ0FBQztRQUNGLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsSUFBSSxlQUFlLENBQ3pFLGdCQUFnQixFQUNoQixpQkFBaUIsRUFDakIsWUFBWSxDQUNiLENBQUM7UUFDRixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztJQUM3QixDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0NBQ0YifQ==