import { makeTuple } from '@aztec/foundation/array';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { MembershipWitness } from '../membership_witness.js';
export var ReadRequestState;
(function (ReadRequestState) {
    ReadRequestState[ReadRequestState["NADA"] = 0] = "NADA";
    ReadRequestState[ReadRequestState["PENDING"] = 1] = "PENDING";
    ReadRequestState[ReadRequestState["SETTLED"] = 2] = "SETTLED";
})(ReadRequestState || (ReadRequestState = {}));
export class ReadRequestStatus {
    constructor(state, hintIndex) {
        this.state = state;
        this.hintIndex = hintIndex;
    }
    static nada() {
        return new ReadRequestStatus(ReadRequestState.NADA, 0);
    }
    static pending(hintIndex) {
        return new ReadRequestStatus(ReadRequestState.PENDING, hintIndex);
    }
    static settled(hintIndex) {
        return new ReadRequestStatus(ReadRequestState.SETTLED, hintIndex);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new ReadRequestStatus(reader.readNumber(), reader.readNumber());
    }
    toBuffer() {
        return serializeToBuffer(this.state, this.hintIndex);
    }
}
export class PendingReadHint {
    constructor(readRequestIndex, pendingValueIndex) {
        this.readRequestIndex = readRequestIndex;
        this.pendingValueIndex = pendingValueIndex;
    }
    static nada(readRequestLen) {
        return new PendingReadHint(readRequestLen, 0);
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new PendingReadHint(reader.readNumber(), reader.readNumber());
    }
    toBuffer() {
        return serializeToBuffer(this.readRequestIndex, this.pendingValueIndex);
    }
}
export class SettledReadHint {
    constructor(readRequestIndex, membershipWitness, leafPreimage) {
        this.readRequestIndex = readRequestIndex;
        this.membershipWitness = membershipWitness;
        this.leafPreimage = leafPreimage;
    }
    static nada(readRequestLen, treeHeight, emptyLeafPreimage) {
        return new SettledReadHint(readRequestLen, MembershipWitness.empty(treeHeight), emptyLeafPreimage());
    }
    static fromBuffer(buffer, treeHeight, leafPreimage) {
        const reader = BufferReader.asReader(buffer);
        return new SettledReadHint(reader.readNumber(), MembershipWitness.fromBuffer(reader, treeHeight), reader.readObject(leafPreimage));
    }
    toBuffer() {
        return serializeToBuffer(this.readRequestIndex, this.membershipWitness, this.leafPreimage);
    }
}
/**
 * Hints for read request reset circuit.
 */
export class ReadRequestResetHints {
    constructor(readRequestStatuses, 
    /**
     * The hints for read requests reading pending values.
     */
    pendingReadHints, 
    /**
     * The hints for read requests reading settled values.
     */
    settledReadHints) {
        this.readRequestStatuses = readRequestStatuses;
        this.pendingReadHints = pendingReadHints;
        this.settledReadHints = settledReadHints;
    }
    trimToSizes(numPendingReads, numSettledReads) {
        return new ReadRequestResetHints(this.readRequestStatuses, this.pendingReadHints.slice(0, numPendingReads), this.settledReadHints.slice(0, numSettledReads));
    }
    /**
     * Deserializes from a buffer or reader.
     * @param buffer - Buffer or reader to read from.
     * @returns The deserialized instance.
     */
    static fromBuffer(buffer, readRequestLen, numPendingReads, numSettledReads, treeHeight, leafPreimageFromBuffer) {
        const reader = BufferReader.asReader(buffer);
        return new ReadRequestResetHints(reader.readArray(readRequestLen, ReadRequestStatus), reader.readArray(numPendingReads, PendingReadHint), reader.readArray(numSettledReads, {
            fromBuffer: r => SettledReadHint.fromBuffer(r, treeHeight, leafPreimageFromBuffer),
        }));
    }
    toBuffer() {
        return serializeToBuffer(this.readRequestStatuses, this.pendingReadHints, this.settledReadHints);
    }
}
export class ReadRequestResetStates {
    constructor(states, pendingReadHints) {
        this.states = states;
        this.pendingReadHints = pendingReadHints;
    }
    static empty(numReads) {
        return new ReadRequestResetStates(makeTuple(numReads, () => ReadRequestState.NADA), []);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZF9yZXF1ZXN0X2hpbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N0cnVjdHMvcmVhZF9yZXF1ZXN0X2hpbnRzL3JlYWRfcmVxdWVzdF9oaW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBK0IsaUJBQWlCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUUzRyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUU3RCxNQUFNLENBQU4sSUFBWSxnQkFJWDtBQUpELFdBQVksZ0JBQWdCO0lBQzFCLHVEQUFRLENBQUE7SUFDUiw2REFBVyxDQUFBO0lBQ1gsNkRBQVcsQ0FBQTtBQUNiLENBQUMsRUFKVyxnQkFBZ0IsS0FBaEIsZ0JBQWdCLFFBSTNCO0FBRUQsTUFBTSxPQUFPLGlCQUFpQjtJQUM1QixZQUFtQixLQUF1QixFQUFTLFNBQWlCO1FBQWpELFVBQUssR0FBTCxLQUFLLENBQWtCO1FBQVMsY0FBUyxHQUFULFNBQVMsQ0FBUTtJQUFHLENBQUM7SUFFeEUsTUFBTSxDQUFDLElBQUk7UUFDVCxPQUFPLElBQUksaUJBQWlCLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQWlCO1FBQzlCLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBaUI7UUFDOUIsT0FBTyxJQUFJLGlCQUFpQixDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUE2QjtRQUM3QyxNQUFN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