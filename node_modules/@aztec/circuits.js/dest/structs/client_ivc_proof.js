import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import * as fs from 'fs/promises';
import path from 'path';
/**
 * TODO(https://github.com/AztecProtocol/aztec-packages/issues/7370) refactory this to
 * eventually we read all these VKs from the data tree instead of passing them
 */
export class ClientIvcProof {
    constructor(
    // produced by the sequencer when making the tube proof
    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/7370): Need to precompute private kernel tail VK so we can verify this immediately in the tx pool
    // which parts of these are needed to quickly verify that we have a correct IVC proof
    instVkBuffer, pgAccBuffer, clientIvcProofBuffer, translatorVkBuffer, eccVkBuffer) {
        this.instVkBuffer = instVkBuffer;
        this.pgAccBuffer = pgAccBuffer;
        this.clientIvcProofBuffer = clientIvcProofBuffer;
        this.translatorVkBuffer = translatorVkBuffer;
        this.eccVkBuffer = eccVkBuffer;
    }
    isEmpty() {
        return this.clientIvcProofBuffer.length === 0;
    }
    static empty() {
        return new ClientIvcProof(Buffer.from(''), Buffer.from(''), Buffer.from(''), Buffer.from(''), Buffer.from(''));
    }
    /**
     * TODO(#7371): eventually remove client_ivc_prove_output_all_msgpack and properly handle these accumulators and VKs
     * Create a ClientIvcProof from the result of client_ivc_prove_output_all or client_ivc_prove_output_all_msgpack
     * @param directory the directory of results
     * @returns the encapsulated client ivc proof
     */
    static async readFromOutputDirectory(directory) {
        const [instVkBuffer, pgAccBuffer, clientIvcProofBuffer, translatorVkBuffer, eccVkBuffer] = await Promise.all(['final_decider_vk', 'pg_acc', 'client_ivc_proof', 'translator_vk', 'ecc_vk'].map(fileName => fs.readFile(path.join(directory, fileName))));
        return new ClientIvcProof(instVkBuffer, pgAccBuffer, clientIvcProofBuffer, translatorVkBuffer, eccVkBuffer);
    }
    /**
     * TODO(#7371): eventually remove client_ivc_prove_output_all_msgpack and properly handle these accumulators and VKs
     * Serialize a ClientIvcProof to the files expected by prove_tube
     *
     * Example usage:
     *  await runInDirectory(bbWorkingDirectory, async (dir: string) => {
     *    await privateTx.clientIvcProof!.writeToOutputDirectory(bbWorkingDirectory);
     *    const result = await generateTubeProof(bbPath, dir, logger.info)
     *    expect(result.status).toBe(BB_RESULT.SUCCESS)
     *  });
     * @param proof the ClientIvcProof from readFromOutputDirectory
     * @param directory the directory of results
     */
    async writeToOutputDirectory(directory) {
        const { instVkBuffer, pgAccBuffer, clientIvcProofBuffer, translatorVkBuffer, eccVkBuffer } = this;
        const fileData = [
            ['final_decider_vk', instVkBuffer],
            ['pg_acc', pgAccBuffer],
            ['client_ivc_proof', clientIvcProofBuffer],
            ['translator_vk', translatorVkBuffer],
            ['ecc_vk', eccVkBuffer],
        ];
        await Promise.all(fileData.map(([fileName, buffer]) => fs.writeFile(path.join(directory, fileName), buffer)));
    }
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new ClientIvcProof(reader.readBuffer(), reader.readBuffer(), reader.readBuffer(), reader.readBuffer(), reader.readBuffer());
    }
    toBuffer() {
        return serializeToBuffer(this.instVkBuffer.length, this.instVkBuffer, this.pgAccBuffer.length, this.pgAccBuffer, this.clientIvcProofBuffer.length, this.clientIvcProofBuffer, this.translatorVkBuffer.length, this.translatorVkBuffer, this.eccVkBuffer.length, this.eccVkBuffer);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50X2l2Y19wcm9vZi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3RzL2NsaWVudF9pdmNfcHJvb2YudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTlFLE9BQU8sS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ2xDLE9BQU8sSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUV4Qjs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sY0FBYztJQUN6QjtJQUNFLHVEQUF1RDtJQUN2RCxnS0FBZ0s7SUFDaEsscUZBQXFGO0lBQzlFLFlBQW9CLEVBQ3BCLFdBQW1CLEVBQ25CLG9CQUE0QixFQUM1QixrQkFBMEIsRUFDMUIsV0FBbUI7UUFKbkIsaUJBQVksR0FBWixZQUFZLENBQVE7UUFDcEIsZ0JBQVcsR0FBWCxXQUFXLENBQVE7UUFDbkIseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFRO1FBQzVCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBUTtRQUMxQixnQkFBVyxHQUFYLFdBQVcsQ0FBUTtJQUN6QixDQUFDO0lBRUcsT0FBTztRQUNaLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLO1FBQ1YsT0FBTyxJQUFJLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNqSCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLHVCQUF1QixDQUFDLFNBQWlCO1FBQ3BELE1BQU0sQ0FBQyxZQUFZLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFFLGtCQUFrQixFQUFFLFdBQVcsQ0FBQyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FDMUcsQ0FBQyxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsZUFBZSxFQUFFLFFBQVEsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUMzRixFQUFFLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQzVDLENBQ0YsQ0FBQztRQUNGLE9BQU8sSUFBSSxjQUFjLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxrQkFBa0IsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUM5RyxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7OztPQVlHO0lBQ0gsS0FBSyxDQUFDLHNCQUFzQixDQUFDLFNBQWlCO1FBQzVDLE1BQU0sRUFBRSxZQUFZLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFFLGtCQUFrQixFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQztRQUNsRyxNQUFNLFFBQVEsR0FBRztZQUNmLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxDQUFDO1lBQ2xDLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQztZQUN2QixDQUFDLGtCQUFrQixFQUFFLG9CQUFvQixDQUFDO1lBQzFDLENBQUMsZUFBZSxFQUFFLGtCQUFrQixDQUFDO1lBQ3JDLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQztTQUNmLENBQUM7UUFDWCxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoSCxDQUFDO0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUE2QjtRQUM3QyxNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE9BQU8sSUFBSSxjQUFjLENBQ3ZCLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFDbkIsTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUNuQixNQUFNLENBQUMsVUFBVSxFQUFFLEVBQ25CLE1BQU0sQ0FBQyxVQUFVLEVBQUUsRUFDbkIsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUNwQixDQUFDO0lBQ0osQ0FBQztJQUVNLFFBQVE7UUFDYixPQUFPLGlCQUFpQixDQUN0QixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFDeEIsSUFBSSxDQUFDLFlBQVksRUFDakIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQ3ZCLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEVBQ2hDLElBQUksQ0FBQyxvQkFBb0IsRUFDekIsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFDOUIsSUFBSSxDQUFDLGtCQUFrQixFQUN2QixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFDdkIsSUFBSSxDQUFDLFdBQVcsQ0FDakIsQ0FBQztJQUNKLENBQUM7Q0FDRiJ9