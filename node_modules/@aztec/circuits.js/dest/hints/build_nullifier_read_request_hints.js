import { AztecAddress } from '@aztec/foundation/aztec-address';
import { padArrayEnd } from '@aztec/foundation/collection';
import { MAX_NULLIFIER_READ_REQUESTS_PER_TX, } from '../constants.gen.js';
import { siloNullifier } from '../hash/hash.js';
import { Nullifier, NullifierReadRequestHintsBuilder, PendingReadHint, ReadRequest, ReadRequestResetStates, ReadRequestState, ScopedReadRequest, } from '../structs/index.js';
import { countAccumulatedItems, getNonEmptyItems } from '../utils/index.js';
import { ScopedValueCache } from './scoped_value_cache.js';
export function isValidNullifierReadRequest(readRequest, nullifier) {
    return (readRequest.value.equals(nullifier.value) &&
        nullifier.contractAddress.equals(readRequest.contractAddress) &&
        readRequest.counter > nullifier.counter);
}
export function getNullifierReadRequestResetStates(nullifierReadRequests, nullifiers, futureNullifiers) {
    const resetStates = ReadRequestResetStates.empty(MAX_NULLIFIER_READ_REQUESTS_PER_TX);
    const nullifierMap = new Map();
    getNonEmptyItems(nullifiers).forEach((nullifier, index) => {
        const value = nullifier.value.toBigInt();
        const arr = nullifierMap.get(value) ?? [];
        arr.push({ nullifier, index });
        nullifierMap.set(value, arr);
    });
    const futureNullifiersMap = new ScopedValueCache(futureNullifiers);
    const numReadRequests = countAccumulatedItems(nullifierReadRequests);
    for (let i = 0; i < numReadRequests; ++i) {
        const readRequest = nullifierReadRequests[i];
        const pendingNullifier = nullifierMap
            .get(readRequest.value.toBigInt())
            ?.find(({ nullifier }) => isValidNullifierReadRequest(readRequest, nullifier));
        if (pendingNullifier !== undefined) {
            resetStates.states[i] = ReadRequestState.PENDING;
            resetStates.pendingReadHints.push(new PendingReadHint(i, pendingNullifier.index));
        }
        else if (!futureNullifiersMap
            .get(readRequest)
            .some(futureNullifier => isValidNullifierReadRequest(readRequest, futureNullifier))) {
            resetStates.states[i] = ReadRequestState.SETTLED;
        }
    }
    return resetStates;
}
export async function buildNullifierReadRequestHintsFromResetStates(oracle, nullifierReadRequests, resetStates, maxPending = MAX_NULLIFIER_READ_REQUESTS_PER_TX, maxSettled = MAX_NULLIFIER_READ_REQUESTS_PER_TX, siloed = false) {
    const builder = new NullifierReadRequestHintsBuilder(maxPending, maxSettled);
    resetStates.pendingReadHints.forEach(hint => {
        builder.addPendingReadRequest(hint.readRequestIndex, hint.pendingValueIndex);
    });
    for (let i = 0; i < resetStates.states.length; i++) {
        if (resetStates.states[i] === ReadRequestState.SETTLED) {
            const readRequest = nullifierReadRequests[i];
            const siloedValue = siloed ? readRequest.value : siloNullifier(readRequest.contractAddress, readRequest.value);
            const membershipWitnessWithPreimage = await oracle.getNullifierMembershipWitness(siloedValue);
            builder.addSettledReadRequest(i, membershipWitnessWithPreimage.membershipWitness, membershipWitnessWithPreimage.leafPreimage);
        }
    }
    return builder.toHints();
}
export async function buildNullifierReadRequestHints(oracle, nullifierReadRequests, nullifiers, futureNullifiers, maxPending = MAX_NULLIFIER_READ_REQUESTS_PER_TX, maxSettled = MAX_NULLIFIER_READ_REQUESTS_PER_TX, siloed = false) {
    const resetStates = getNullifierReadRequestResetStates(nullifierReadRequests, nullifiers, futureNullifiers);
    return await buildNullifierReadRequestHintsFromResetStates(oracle, nullifierReadRequests, resetStates, maxPending, maxSettled, siloed);
}
export function buildSiloedNullifierReadRequestHints(oracle, nullifierReadRequests, nullifiers, maxPending = MAX_NULLIFIER_READ_REQUESTS_PER_TX, maxSettled = MAX_NULLIFIER_READ_REQUESTS_PER_TX) {
    // Nullifiers outputted from public kernels are already siloed while read requests are not.
    // Siloing the read request values and set the contract addresses to zero to find the matching nullifier contexts.
    const siloedReadRequests = padArrayEnd(getNonEmptyItems(nullifierReadRequests).map(r => new ReadRequest(siloNullifier(r.contractAddress, r.value), r.counter).scope(AztecAddress.ZERO)), ScopedReadRequest.empty(), MAX_NULLIFIER_READ_REQUESTS_PER_TX);
    const scopedNullifiers = nullifiers.map(n => new Nullifier(n.value, n.counter, n.noteHash).scope(AztecAddress.ZERO));
    return buildNullifierReadRequestHints(oracle, siloedReadRequests, scopedNullifiers, [], maxPending, maxSettled, true);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRfbnVsbGlmaWVyX3JlYWRfcmVxdWVzdF9oaW50cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9oaW50cy9idWlsZF9udWxsaWZpZXJfcmVhZF9yZXF1ZXN0X2hpbnRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUMvRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFLM0QsT0FBTyxFQUVMLGtDQUFrQyxHQUVuQyxNQUFNLHFCQUFxQixDQUFDO0FBQzdCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUNoRCxPQUFPLEVBRUwsU0FBUyxFQUNULGdDQUFnQyxFQUNoQyxlQUFlLEVBQ2YsV0FBVyxFQUNYLHNCQUFzQixFQUN0QixnQkFBZ0IsRUFFaEIsaUJBQWlCLEdBQ2xCLE1BQU0scUJBQXFCLENBQUM7QUFDN0IsT0FBTyxFQUFFLHFCQUFxQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDNUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFM0QsTUFBTSxVQUFVLDJCQUEyQixDQUFDLFdBQThCLEVBQUUsU0FBMEI7SUFDcEcsT0FBTyxDQUNMLFdBQVcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFDekMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGVBQWUsQ0FBQztRQUM3RCxXQUFXLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQ3hDLENBQUM7QUFDSixDQUFDO0FBT0QsTUFBTSxVQUFVLGtDQUFrQyxDQUNoRCxxQkFBMEYsRUFDMUYsVUFBZ0UsRUFDaEUsZ0JBQW1DO0lBRW5DLE1BQU0sV0FBVyxHQUFHLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxrQ0FBa0MsQ0FB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