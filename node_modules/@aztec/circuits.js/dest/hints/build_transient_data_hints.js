import { TransientDataIndexHint, countAccumulatedItems, isValidNoteHashReadRequest, isValidNullifierReadRequest, } from '@aztec/circuits.js';
import { padArrayEnd } from '@aztec/foundation/collection';
import { ScopedValueCache } from './scoped_value_cache.js';
export function buildTransientDataHints(noteHashes, nullifiers, futureNoteHashReads, futureNullifierReads, noteHashNullifierCounterMap, validationRequestsSplitCounter, noteHashesLength = noteHashes.length, nullifiersLength = nullifiers.length) {
    const futureNoteHashReadsMap = new ScopedValueCache(futureNoteHashReads);
    const futureNullifierReadsMap = new ScopedValueCache(futureNullifierReads);
    const nullifierIndexMap = new Map();
    nullifiers.forEach((n, i) => nullifierIndexMap.set(n.counter, i));
    const hints = [];
    const numNoteHashes = countAccumulatedItems(noteHashes);
    for (let noteHashIndex = 0; noteHashIndex < numNoteHashes; noteHashIndex++) {
        const noteHash = noteHashes[noteHashIndex];
        const noteHashNullifierCounter = noteHashNullifierCounterMap.get(noteHash.counter);
        // The note hash might not be linked to a nullifier or it might be read in the future
        if (!noteHashNullifierCounter ||
            futureNoteHashReadsMap.get(noteHash).find(read => isValidNoteHashReadRequest(read, noteHash))) {
            continue;
        }
        const nullifierIndex = nullifierIndexMap.get(noteHashNullifierCounter);
        // We might not have the corresponding nullifier yet
        if (nullifierIndex === undefined) {
            continue;
        }
        const nullifier = nullifiers[nullifierIndex];
        // Cannot nullify a non-revertible note hash with a revertible nullifier.
        if (noteHash.counter < validationRequestsSplitCounter && nullifier.counter >= validationRequestsSplitCounter) {
            continue;
        }
        // If the following errors show up, something's wrong with how we build the noteHashNullifierCounterMap in client_execution_context.ts.
        if (nullifier.counter < noteHash.counter) {
            throw new Error('Hinted nullifier has smaller counter than note hash.');
        }
        if (!nullifier.contractAddress.equals(noteHash.contractAddress)) {
            throw new Error('Contract address of hinted note hash does not match.');
        }
        if (!nullifier.nullifiedNoteHash.equals(noteHash.value)) {
            // If the hinted note hash has a different value, it means the nullifier is nullifying a siloed note hash.
            // We don't squash them and both values will be emitted.
            // The private kernel tail will check that the nullified note hash matches a siloed note hash in the same tx.
            continue;
        }
        // The nullifier might be read in the future
        if (futureNullifierReadsMap.get(nullifier).find(read => isValidNullifierReadRequest(read, nullifier))) {
            continue;
        }
        hints.push(new TransientDataIndexHint(nullifierIndex, noteHashIndex));
    }
    return {
        numTransientData: hints.length,
        hints: padArrayEnd(hints, new TransientDataIndexHint(nullifiersLength, noteHashesLength), nullifiersLength),
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRfdHJhbnNpZW50X2RhdGFfaGludHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaGludHMvYnVpbGRfdHJhbnNpZW50X2RhdGFfaGludHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUlMLHNCQUFzQixFQUN0QixxQkFBcUIsRUFDckIsMEJBQTBCLEVBQzFCLDJCQUEyQixHQUM1QixNQUFNLG9CQUFvQixDQUFDO0FBQzVCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUczRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUUzRCxNQUFNLFVBQVUsdUJBQXVCLENBQ3JDLFVBQWtELEVBQ2xELFVBQWtELEVBQ2xELG1CQUF3QyxFQUN4QyxvQkFBeUMsRUFDekMsMkJBQWdELEVBQ2hELDhCQUFzQyxFQUN0QyxtQkFBb0MsVUFBVSxDQUFDLE1BQXlCLEVBQ3hFLG1CQUFtQyxVQUFVLENBQUMsTUFBd0I7SUFFdEUsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDekUsTUFBTSx1QkFBdUIsR0FBRyxJQUFJLGdCQUFnQixDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFFM0UsTUFBTSxpQkFBaUIsR0FBd0IsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUN6RCxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVsRSxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7SUFDakIsTUFBTSxhQUFhLEdBQUcscUJBQXFCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDeEQsS0FBSyxJQUFJLGFBQWEsR0FBRyxDQUFDLEVBQUUsYUFBYSxHQUFHLGFBQWEsRUFBRSxhQUFhLEVBQUUsRUFBRSxDQUFDO1FBQzNFLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUMzQyxNQUFNLHdCQUF3QixHQUFHLDJCQUEyQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkYscUZBQXFGO1FBQ3JGLElBQ0UsQ0FBQyx3QkFBd0I7WUFDekIsc0JBQXNCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLDBCQUEwQixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUM3RixDQUFDO1lBQ0QsU0FBUztRQUNYLENBQUM7UUFFRCxNQUFNLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUN2RSxvREFBb0Q7UUFDcEQsSUFBSSxjQUFjLEtBQUssU0FBUyxFQUFFLENBQUM7WUFDakMsU0FBUztRQUNYLENBQUM7UUFFRCxNQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDN0MseUVBQXlFO1FBQ3pFLElBQUksUUFBUSxDQUFDLE9BQU8sR0FBRyw4QkFBOEIsSUFBSSxTQUFTLENBQUMsT0FBTyxJQUFJLDhCQUE4QixFQUFFLENBQUM7WUFDN0csU0FBUztRQUNYLENBQUM7UUFFRCx1SUFBdUk7UUFDdkksSUFBSSxTQUFTLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN6QyxNQUFNLElBQUksS0FBSyxDQUFDLHNEQUFzRCxDQUFDLENBQUM7UUFDMUUsQ0FBQztRQUNELElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQztZQUNoRSxNQUFNLElBQUksS0FBSyxDQUFDLHNEQUFzRCxDQUFDLENBQUM7UUFDMUUsQ0FBQztRQUVELElBQUksQ0FBQyxTQUFTLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3hELDBHQUEwRztZQUMxRyx3REFBd0Q7WUFDeEQsNkdBQTZHO1lBQzdHLFNBQVM7UUFDWCxDQUFDO1FBRUQsNENBQTRDO1FBQzVDLElBQUksdUJBQXVCLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLDJCQUEyQixDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFDdEcsU0FBUztRQUNYLENBQUM7UUFFRCxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksc0JBQXNCLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVELE9BQU87UUFDTCxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsTUFBTTtRQUM5QixLQUFLLEVBQUUsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLHNCQUFzQixDQUFDLGdCQUFnQixFQUFFLGdCQUFnQixDQUFDLEVBQUUsZ0JBQWdCLENBQUM7S0FDNUcsQ0FBQztBQUNKLENBQUMifQ==