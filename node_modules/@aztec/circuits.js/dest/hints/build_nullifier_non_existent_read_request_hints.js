import { padArrayEnd } from '@aztec/foundation/collection';
import { MAX_NULLIFIERS_PER_TX, } from '../constants.gen.js';
import { siloNullifier } from '../hash/index.js';
import { Nullifier } from '../structs/index.js';
import { NullifierNonExistentReadRequestHintsBuilder } from '../structs/non_existent_read_request_hints.js';
import { countAccumulatedItems } from '../utils/index.js';
function sortNullifiersByValues(nullifiers) {
    const numNullifiers = countAccumulatedItems(nullifiers);
    const sorted = nullifiers
        .slice(0, numNullifiers)
        .map((nullifier, originalIndex) => ({ nullifier, originalIndex }))
        .sort((a, b) => (b.nullifier.value.lt(a.nullifier.value) ? 1 : -1));
    const sortedIndexHints = [];
    for (let i = 0; i < numNullifiers; ++i) {
        sortedIndexHints[sorted[i].originalIndex] = i;
    }
    return {
        sortedValues: padArrayEnd(sorted.map(s => s.nullifier), Nullifier.empty(), MAX_NULLIFIERS_PER_TX),
        sortedIndexHints: padArrayEnd(sortedIndexHints, 0, MAX_NULLIFIERS_PER_TX),
    };
}
export async function buildNullifierNonExistentReadRequestHints(oracle, nullifierNonExistentReadRequests, pendingNullifiers) {
    const { sortedValues, sortedIndexHints } = sortNullifiersByValues(pendingNullifiers);
    const builder = new NullifierNonExistentReadRequestHintsBuilder(sortedValues, sortedIndexHints);
    const numPendingNullifiers = countAccumulatedItems(pendingNullifiers);
    const numReadRequests = countAccumulatedItems(nullifierNonExistentReadRequests);
    for (let i = 0; i < numReadRequests; ++i) {
        const readRequest = nullifierNonExistentReadRequests[i];
        const siloedValue = siloNullifier(readRequest.contractAddress, readRequest.value);
        const { membershipWitness, leafPreimage } = await oracle.getLowNullifierMembershipWitness(siloedValue);
        let nextPendingValueIndex = sortedValues.findIndex(v => !v.value.lt(siloedValue));
        if (nextPendingValueIndex == -1) {
            nextPendingValueIndex = numPendingNullifiers;
        }
        else if (sortedValues[nextPendingValueIndex].value.equals(siloedValue) &&
            sortedValues[nextPendingValueIndex].counter < readRequest.counter) {
            throw new Error('Nullifier DOES exists in the pending set at the time of reading, but there is a NonExistentReadRequest for it.');
        }
        builder.addHint(membershipWitness, leafPreimage, nextPendingValueIndex);
    }
    return builder.toHints();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRfbnVsbGlmaWVyX25vbl9leGlzdGVudF9yZWFkX3JlcXVlc3RfaGludHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaGludHMvYnVpbGRfbnVsbGlmaWVyX25vbl9leGlzdGVudF9yZWFkX3JlcXVlc3RfaGludHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBSTNELE9BQU8sRUFDTCxxQkFBcUIsR0FHdEIsTUFBTSxxQkFBcUIsQ0FBQztBQUM3QixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLFNBQVMsRUFBOEIsTUFBTSxxQkFBcUIsQ0FBQztBQUU1RSxPQUFPLEVBQUUsMkNBQTJDLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUU1RyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQVkxRCxTQUFTLHNCQUFzQixDQUM3QixVQUEwRDtJQUUxRCxNQUFNLGFBQWEsR0FBRyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN4RCxNQUFNLE1BQU0sR0FBRyxVQUFVO1NBQ3RCLEtBQUssQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDO1NBQ3ZCLEdBQUcsQ0FBQyxDQUFDLFNBQVMsRUFBRSxhQUFhLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxTQUFTLEVBQUUsYUFBYSxFQUFFLENBQUMsQ0FBQztTQUNqRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUV0RSxNQUFNLGdCQUFnQixHQUFhLEVBQUUsQ0FBQztJQUN0QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsYUFBYSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDdkMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsT0FBTztRQUNMLFlBQVksRUFBRSxXQUFXLENBQ3ZCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQzVCLFNBQVMsQ0FBQyxLQUFLLEVBQUUsRUFDakIscUJBQXFCLENBQ3RCO1FBQ0QsZ0JBQWdCLEVBQUUsV0FBVyxDQUFDLGdCQUFnQixFQUFFLENBQUMsRUFBRSxxQkFBcUIsQ0FBQztLQUMxRSxDQUFDO0FBQ0osQ0FBQztBQUVELE1BQU0sQ0FBQyxLQUFLLFVBQVUseUNBQXlDLENBQzdELE1BRUMsRUFDRCxnQ0FBa0gsRUFDbEgsaUJBQWlFO0lBRWpFLE1BQU0sRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxzQkFBc0IsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRXJGLE1BQU0sT0FBTyxHQUFHLElBQUksMkNBQTJDLENBQUMsWUFBWSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFFaEcsTUFBTSxvQkFBb0IsR0FBRyxxQkFBcUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3RFLE1BQU0sZUFBZSxHQUFHLHFCQUFxQixDQUFDLGdDQUFnQyxDQUFDLENBQUM7SUFDaEYsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGVBQWUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDO1FBQ3pDLE1BQU0sV0FBVyxHQUFHLGdDQUFnQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sV0FBVyxHQUFHLGFBQWEsQ0FBQyxXQUFXLENBQUMsZUFBZSxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVsRixNQUFNLEVBQUUsaUJBQWlCLEVBQUUsWUFBWSxFQUFFLEdBQUcsTUFBTSxNQUFNLENBQUMsZ0NBQWdDLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFdkcsSUFBSSxxQkFBcUIsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ2xGLElBQUkscUJBQXFCLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQztZQUNoQyxxQkFBcUIsR0FBRyxvQkFBb0IsQ0FBQztRQUMvQyxDQUFDO2FBQU0sSUFDTCxZQUFZLENBQUMscUJBQXFCLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQztZQUM3RCxZQUFZLENBQUMscUJBQXFCLENBQUMsQ0FBQyxPQUFPLEdBQUcsV0FBVyxDQUFDLE9BQU8sRUFDakUsQ0FBQztZQUNELE1BQU0sSUFBSSxLQUFLLENBQ2IsZ0hBQWdILENBQ2pILENBQUM7UUFDSixDQUFDO1FBRUQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxZQUFZLEVBQUUscUJBQXFCLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsT0FBTyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDM0IsQ0FBQyJ9