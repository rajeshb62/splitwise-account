import { pedersenHash, poseidon2Hash, poseidon2HashWithSeparator } from '@aztec/foundation/crypto';
import { Fr } from '@aztec/foundation/fields';
import { FUNCTION_TREE_HEIGHT, GeneratorIndex } from '../constants.gen.js';
import { MerkleTreeCalculator } from '../merkle/index.js';
// Memoize the merkle tree calculators to avoid re-computing the zero-hash for each level in each call
let privateFunctionTreeCalculator;
const PRIVATE_FUNCTION_SIZE = 2;
/** Returns a Merkle tree for the set of private functions in a contract. */
export function computePrivateFunctionsTree(fns) {
    return getPrivateFunctionTreeCalculator().computeTree(computePrivateFunctionLeaves(fns));
}
/** Returns the Merkle tree root for the set of private functions in a contract. */
export function computePrivateFunctionsRoot(fns) {
    return Fr.fromBuffer(getPrivateFunctionTreeCalculator().computeTreeRoot(computePrivateFunctionLeaves(fns)));
}
function computePrivateFunctionLeaves(fns) {
    const leaves = [...fns].sort((a, b) => a.selector.value - b.selector.value);
    return leaves.map(computePrivateFunctionLeaf);
}
/** Returns the leaf for a given private function. */
export function computePrivateFunctionLeaf(fn) {
    return poseidon2HashWithSeparator([fn.selector, fn.vkHash], GeneratorIndex.FUNCTION_LEAF).toBuffer();
}
function getPrivateFunctionTreeCalculator() {
    if (!privateFunctionTreeCalculator) {
        const functionTreeZeroLeaf = pedersenHash(new Array(PRIVATE_FUNCTION_SIZE).fill(0)).toBuffer();
        privateFunctionTreeCalculator = new MerkleTreeCalculator(FUNCTION_TREE_HEIGHT, functionTreeZeroLeaf, (left, right) => poseidon2Hash([left, right]).toBuffer());
    }
    return privateFunctionTreeCalculator;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpdmF0ZV9mdW5jdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250cmFjdC9wcml2YXRlX2Z1bmN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLDBCQUEwQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbkcsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUMzRSxPQUFPLEVBQW1CLG9CQUFvQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFHM0Usc0dBQXNHO0FBQ3RHLElBQUksNkJBQStELENBQUM7QUFFcEUsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLENBQUM7QUFFaEMsNEVBQTRFO0FBQzVFLE1BQU0sVUFBVSwyQkFBMkIsQ0FBQyxHQUFzQjtJQUNoRSxPQUFPLGdDQUFnQyxFQUFFLENBQUMsV0FBVyxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDM0YsQ0FBQztBQUVELG1GQUFtRjtBQUNuRixNQUFNLFVBQVUsMkJBQTJCLENBQUMsR0FBc0I7SUFDaEUsT0FBTyxFQUFFLENBQUMsVUFBVSxDQUFDLGdDQUFnQyxFQUFFLENBQUMsZUFBZSxDQUFDLDRCQUE0QixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5RyxDQUFDO0FBRUQsU0FBUyw0QkFBNEIsQ0FBQyxHQUFzQjtJQUMxRCxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1RSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRUQscURBQXFEO0FBQ3JELE1BQU0sVUFBVSwwQkFBMEIsQ0FBQyxFQUFtQjtJQUM1RCxPQUFPLDBCQUEwQixDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEVBQUUsY0FBYyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0FBQ3ZHLENBQUM7QUFFRCxTQUFTLGdDQUFnQztJQUN2QyxJQUFJLENBQUMsNkJBQTZCLEVBQUUsQ0FBQztRQUNuQyxNQUFNLG9CQUFvQixHQUFHLFlBQVksQ0FBQyxJQUFJLEtBQUssQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQy9GLDZCQUE2QixHQUFHLElBQUksb0JBQW9CLENBQ3RELG9CQUFvQixFQUNwQixvQkFBb0IsRUFDcEIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FDekQsQ0FBQztJQUNKLENBQUM7SUFDRCxPQUFPLDZCQUE2QixDQUFDO0FBQ3ZDLENBQUMifQ==