import { FunctionSelector, getDefaultInitializer, } from '@aztec/foundation/abi';
import { AztecAddress } from '@aztec/foundation/aztec-address';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader, numToUInt8, serializeToBuffer } from '@aztec/foundation/serialize';
import { getContractClassFromArtifact } from '../contract/contract_class.js';
import { computeContractClassId } from '../contract/contract_class_id.js';
import { PublicKeys } from '../types/public_keys.js';
import { computeContractAddressFromInstance, computeInitializationHash, computeInitializationHashFromEncodedArgs, } from './contract_address.js';
const VERSION = 1;
export class SerializableContractInstance {
    constructor(instance) {
        this.version = VERSION;
        if (instance.version !== VERSION) {
            throw new Error(`Unexpected contract class version ${instance.version}`);
        }
        this.salt = instance.salt;
        this.deployer = instance.deployer;
        this.contractClassId = instance.contractClassId;
        this.initializationHash = instance.initializationHash;
        this.publicKeys = instance.publicKeys;
    }
    toBuffer() {
        return serializeToBuffer(numToUInt8(this.version), this.salt, this.deployer, this.contractClassId, this.initializationHash, this.publicKeys);
    }
    /** Returns a copy of this object with its address included. */
    withAddress(address) {
        return { ...this, address };
    }
    static fromBuffer(bufferOrReader) {
        const reader = BufferReader.asReader(bufferOrReader);
        return new SerializableContractInstance({
            version: reader.readUInt8(),
            salt: reader.readObject(Fr),
            deployer: reader.readObject(AztecAddress),
            contractClassId: reader.readObject(Fr),
            initializationHash: reader.readObject(Fr),
            publicKeys: reader.readObject(PublicKeys),
        });
    }
    static random(opts = {}) {
        return new SerializableContractInstance({
            version: VERSION,
            salt: Fr.random(),
            deployer: AztecAddress.random(),
            contractClassId: Fr.random(),
            initializationHash: Fr.random(),
            publicKeys: PublicKeys.random(),
            ...opts,
        });
    }
    static default() {
        return new SerializableContractInstance({
            version: VERSION,
            salt: Fr.zero(),
            deployer: AztecAddress.zero(),
            contractClassId: Fr.zero(),
            initializationHash: Fr.zero(),
            publicKeys: PublicKeys.default(),
        });
    }
}
/**
 * Generates a Contract Instance from the deployment params.
 * @param artifact - The account contract build artifact.
 * @param opts - Options for the deployment.
 * @returns - The contract instance
 */
export function getContractInstanceFromDeployParams(artifact, opts) {
    const args = opts.constructorArgs ?? [];
    const salt = opts.salt ?? Fr.random();
    const constructorArtifact = getConstructorArtifact(artifact, opts.constructorArtifact);
    const deployer = opts.deployer ?? AztecAddress.ZERO;
    const contractClass = getContractClassFromArtifact(artifact);
    const contractClassId = computeContractClassId(contractClass);
    const initializationHash = constructorArtifact && opts?.skipArgsDecoding
        ? computeInitializationHashFromEncodedArgs(FunctionSelector.fromNameAndParameters(constructorArtifact?.name, constructorArtifact?.parameters), args)
        : computeInitializationHash(constructorArtifact, args);
    const publicKeys = opts.publicKeys ?? PublicKeys.default();
    const instance = {
        contractClassId,
        initializationHash,
        publicKeys,
        salt,
        deployer,
        version: 1,
    };
    return { ...instance, address: computeContractAddressFromInstance(instance) };
}
function getConstructorArtifact(artifact, requestedConstructorArtifact) {
    if (typeof requestedConstructorArtifact === 'string') {
        const found = artifact.functions.find(fn => fn.name === requestedConstructorArtifact);
        if (!found) {
            throw new Error(`No constructor found with name ${requestedConstructorArtifact}`);
        }
        return found;
    }
    return requestedConstructorArtifact ?? getDefaultInitializer(artifact);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfaW5zdGFuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJhY3QvY29udHJhY3RfaW5zdGFuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUdMLGdCQUFnQixFQUNoQixxQkFBcUIsR0FDdEIsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDL0QsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFHMUYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDN0UsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDMUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3JELE9BQU8sRUFDTCxrQ0FBa0MsRUFDbEMseUJBQXlCLEVBQ3pCLHdDQUF3QyxHQUN6QyxNQUFNLHVCQUF1QixDQUFDO0FBRy9CLE1BQU0sT0FBTyxHQUFHLENBQVUsQ0FBQztBQUUzQixNQUFNLE9BQU8sNEJBQTRCO0lBUXZDLFlBQVksUUFBMEI7UUFQdEIsWUFBTyxHQUFHLE9BQU8sQ0FBQztRQVFoQyxJQUFJLFFBQVEsQ0FBQyxPQUFPLEtBQUssT0FBTyxFQUFFLENBQUM7WUFDakMsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQ0FBcUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDM0UsQ0FBQztRQUNELElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQztRQUMxQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDbEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxRQUFRLENBQUMsZUFBZSxD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