import { FunctionSelector, FunctionType } from '@aztec/foundation/abi';
import { Fr } from '@aztec/foundation/fields';
import { PUBLIC_DISPATCH_SELECTOR } from '../constants.gen.js';
import { computeArtifactHash } from './artifact_hash.js';
import { computeContractClassIdWithPreimage } from './contract_class_id.js';
const cmpFunctionArtifacts = (a, b) => a.selector.toField().cmp(b.selector.toField());
/** Creates a ContractClass from a contract compilation artifact. */
export function getContractClassFromArtifact(artifact) {
    const artifactHash = 'artifactHash' in artifact ? artifact.artifactHash : computeArtifactHash(artifact);
    const artifactPublicFunctions = artifact.functions
        .filter(f => f.functionType === FunctionType.PUBLIC)
        .map(f => ({
        selector: FunctionSelector.fromNameAndParameters(f.name, f.parameters),
        bytecode: f.bytecode,
    }))
        .sort(cmpFunctionArtifacts);
    let packedBytecode = Buffer.alloc(0);
    let dispatchFunction = undefined;
    if (artifactPublicFunctions.length > 0) {
        dispatchFunction = artifactPublicFunctions.find(f => f.selector.equals(FunctionSelector.fromField(new Fr(PUBLIC_DISPATCH_SELECTOR))));
        if (!dispatchFunction) {
            throw new Error('A contract with public functions should define a public_dispatch(Field) function as its public entrypoint.');
        }
        packedBytecode = dispatchFunction.bytecode;
    }
    const privateFunctions = artifact.functions
        .filter(f => f.functionType === FunctionType.PRIVATE)
        .map(getContractClassPrivateFunctionFromArtifact)
        .sort(cmpFunctionArtifacts);
    const contractClass = {
        version: 1,
        artifactHash,
        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/8985): Remove public functions.
        publicFunctions: dispatchFunction ? [dispatchFunction] : [],
        packedBytecode,
        privateFunctions,
    };
    return { ...contractClass, ...computeContractClassIdWithPreimage(contractClass) };
}
export function getContractClassPrivateFunctionFromArtifact(f) {
    return {
        selector: FunctionSelector.fromNameAndParameters(f.name, f.parameters),
        vkHash: computeVerificationKeyHash(f.verificationKey),
    };
}
/**
 * Calculates the hash of a verification key.
 * Returns zero for consistency with Noir.
 */
export function computeVerificationKeyHash(_verificationKeyInBase64) {
    // return Fr.fromBuffer(hashVK(Buffer.from(verificationKeyInBase64, 'hex')));
    return Fr.ZERO;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfY2xhc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJhY3QvY29udHJhY3RfY2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFnRCxnQkFBZ0IsRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNySCxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFOUMsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDL0QsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDekQsT0FBTyxFQUFnQyxrQ0FBa0MsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBTTFHLE1BQU0sb0JBQW9CLEdBQUcsQ0FBMkMsQ0FBSSxFQUFFLENBQUksRUFBRSxFQUFFLENBQ3BGLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztBQUVqRCxvRUFBb0U7QUFDcEUsTUFBTSxVQUFVLDRCQUE0QixDQUMxQyxRQUFxRDtJQUVyRCxNQUFNLFlBQVksR0FBRyxjQUFjLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN4RyxNQUFNLHVCQUF1QixHQUFxQyxRQUFRLENBQUMsU0FBUztTQUNqRixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxLQUFLLFlBQVksQ0FBQyxNQUFNLENBQUM7U0FDbkQsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNULFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUM7UUFDdEUsUUFBUSxFQUFFLENBQUMsQ0FBQyxRQUFRO0tBQ3JCLENBQUMsQ0FBQztTQUNGLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBRTlCLElBQUksY0FBYyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckMsSUFBSSxnQkFBZ0IsR0FBK0IsU0FBUyxDQUFDO0lBQzdELElBQUksdUJBQXVCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3ZDLGdCQUFnQixHQUFHLHVCQUF1QixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUNsRCxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDLENBQ2hGLENBQUM7UUFDRixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztZQUN0QixNQUFNLElBQUksS0FBSyxDQUNiLDRHQUE0RyxDQUM3RyxDQUFDO1FBQ0osQ0FBQztRQUNELGNBQWMsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7SUFDN0MsQ0FBQztJQUVELE1BQU0sZ0JBQWdCLEdBQXNDLFFBQVEsQ0FBQyxTQUFTO1NBQzNFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxZQUFZLEtBQUssWUFBWSxDQUFDLE9BQU8sQ0FBQztTQUNwRCxHQUFHLENBQUMsMkNBQTJDLENBQUM7U0FDaEQsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7SUFFOUIsTUFBTSxhQUFhLEdBQWtCO1FBQ25DLE9BQU8sRUFBRSxDQUFDO1FBQ1YsWUFBWTtRQUNaLDhGQUE4RjtRQUM5RixlQUFlLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUMzRCxjQUFjO1FBQ2QsZ0JBQWdCO0tBQ2pCLENBQUM7SUFDRixPQUFPLEVBQUUsR0FBRyxhQUFhLEVBQUUsR0FBRyxrQ0FBa0MsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO0FBQ3BGLENBQUM7QUFFRCxNQUFNLFVBQVUsMkNBQTJDLENBQ3pELENBQW1CO0lBRW5CLE9BQU87UUFDTCxRQUFRLEVBQUUsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsVUFBVSxDQUFDO1FBQ3RFLE1BQU0sRUFBRSwwQkFBMEIsQ0FBQyxDQUFDLENBQUMsZUFBZ0IsQ0FBQztLQUN2RCxDQUFDO0FBQ0osQ0FBQztBQUVEOzs7R0FHRztBQUNILE1BQU0sVUFBVSwwQkFBMEIsQ0FBQyx3QkFBZ0M7SUFDekUsNkVBQTZFO0lBQzdFLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQztBQUNqQixDQUFDIn0=