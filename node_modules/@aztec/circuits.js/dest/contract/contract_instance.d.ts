/// <reference types="node" resolution-mode="require"/>
/// <reference types="node" resolution-mode="require"/>
import { type ContractArtifact, type FunctionArtifact } from '@aztec/foundation/abi';
import { AztecAddress } from '@aztec/foundation/aztec-address';
import { Fr } from '@aztec/foundation/fields';
import { BufferReader } from '@aztec/foundation/serialize';
import { type FieldsOf } from '@aztec/foundation/types';
import { PublicKeys } from '../types/public_keys.js';
import { type ContractInstance, type ContractInstanceWithAddress } from './interfaces/contract_instance.js';
export declare class SerializableContractInstance {
    readonly version: 1;
    readonly salt: Fr;
    readonly deployer: AztecAddress;
    readonly contractClassId: Fr;
    readonly initializationHash: Fr;
    readonly publicKeys: PublicKeys;
    constructor(instance: ContractInstance);
    toBuffer(): Buffer;
    /** Returns a copy of this object with its address included. */
    withAddress(address: AztecAddress): ContractInstanceWithAddress;
    static fromBuffer(bufferOrReader: Buffer | BufferReader): SerializableContractInstance;
    static random(opts?: Partial<FieldsOf<ContractInstance>>): SerializableContractInstance;
    static default(): SerializableContractInstance;
}
/**
 * Generates a Contract Instance from the deployment params.
 * @param artifact - The account contract build artifact.
 * @param opts - Options for the deployment.
 * @returns - The contract instance
 */
export declare function getContractInstanceFromDeployParams(artifact: ContractArtifact, opts: {
    constructorArtifact?: FunctionArtifact | string;
    constructorArgs?: any[];
    skipArgsDecoding?: boolean;
    salt?: Fr;
    publicKeys?: PublicKeys;
    deployer?: AztecAddress;
}): ContractInstanceWithAddress;
//# sourceMappingURL=contract_instance.d.ts.map