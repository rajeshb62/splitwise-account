import { poseidon2HashWithSeparator } from '@aztec/foundation/crypto';
import { Fr } from '@aztec/foundation/fields';
import { GeneratorIndex } from '../constants.gen.js';
import { computePrivateFunctionsRoot } from './private_function.js';
/**
 * Returns the id of a contract class computed as its hash.
 *
 * ```
 * version = 1
 * private_function_leaves = private_functions.map(fn => pedersen([fn.function_selector as Field, fn.vk_hash], GENERATOR__FUNCTION_LEAF))
 * private_functions_root = merkleize(private_function_leaves)
 * bytecode_commitment = calculate_commitment(packed_bytecode)
 * contract_class_id = pedersen([version, artifact_hash, private_functions_root, bytecode_commitment], GENERATOR__CLASS_IDENTIFIER)
 * ```
 * @param contractClass - Contract class.
 * @returns The identifier.
 */
export function computeContractClassId(contractClass) {
    return computeContractClassIdWithPreimage(contractClass).id;
}
/** Computes a contract class id and returns it along with its preimage. */
export function computeContractClassIdWithPreimage(contractClass) {
    const artifactHash = contractClass.artifactHash;
    const privateFunctionsRoot = 'privateFunctionsRoot' in contractClass
        ? contractClass.privateFunctionsRoot
        : computePrivateFunctionsRoot(contractClass.privateFunctions);
    const publicBytecodeCommitment = 'publicBytecodeCommitment' in contractClass
        ? contractClass.publicBytecodeCommitment
        : computePublicBytecodeCommitment(contractClass.packedBytecode);
    const id = poseidon2HashWithSeparator([artifactHash, privateFunctionsRoot, publicBytecodeCommitment], GeneratorIndex.CONTRACT_LEAF);
    return { id, artifactHash, privateFunctionsRoot, publicBytecodeCommitment };
}
/** Returns the preimage of a contract class id given a contract class. */
export function computeContractClassIdPreimage(contractClass) {
    const privateFunctionsRoot = computePrivateFunctionsRoot(contractClass.privateFunctions);
    const publicBytecodeCommitment = computePublicBytecodeCommitment(contractClass.packedBytecode);
    return { artifactHash: contractClass.artifactHash, privateFunctionsRoot, publicBytecodeCommitment };
}
// TODO(#5860): Replace with actual implementation
// Changed to work with canonical contracts that may have non-deterministic noir compiles and we want to keep the address constant
export function computePublicBytecodeCommitment(_bytecode) {
    return new Fr(5);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJhY3RfY2xhc3NfaWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29udHJhY3QvY29udHJhY3RfY2xhc3NfaWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDdEUsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTlDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVyRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUVwRTs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsYUFBc0Q7SUFDM0YsT0FBTyxrQ0FBa0MsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFDOUQsQ0FBQztBQUVELDJFQUEyRTtBQUMzRSxNQUFNLFVBQVUsa0NBQWtDLENBQ2hELGFBQXNEO0lBRXRELE1BQU0sWUFBWSxHQUFHLGFBQWEsQ0FBQyxZQUFZLENBQUM7SUFDaEQsTUFBTSxvQkFBb0IsR0FDeEIsc0JBQXNCLElBQUksYUFBYTtRQUNyQyxDQUFDLENBQUMsYUFBYSxDQUFDLG9CQUFvQjtRQUNwQyxDQUFDLENBQUMsMkJBQTJCLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDbEUsTUFBTSx3QkFBd0IsR0FDNUIsMEJBQTBCLElBQUksYUFBYTtRQUN6QyxDQUFDLENBQUMsYUFBYSxDQUFDLHdCQUF3QjtRQUN4QyxDQUFDLENBQUMsK0JBQStCLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3BFLE1BQU0sRUFBRSxHQUFHLDBCQUEwQixDQUNuQyxDQUFDLFlBQVksRUFBRSxvQkFBb0IsRUFBRSx3QkFBd0IsQ0FBQyxFQUM5RCxjQUFjLENBQUMsYUFBYSxDQUM3QixDQUFDO0lBQ0YsT0FBTyxFQUFFLEVBQUUsRUFBRSxZQUFZLEVBQUUsb0JBQW9CLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQztBQUM5RSxDQUFDO0FBRUQsMEVBQTBFO0FBQzFFLE1BQU0sVUFBVSw4QkFBOEIsQ0FBQyxhQUE0QjtJQUN6RSxNQUFNLG9CQUFvQixHQUFHLDJCQUEyQixDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3pGLE1BQU0sd0JBQXdCLEdBQUcsK0JBQStCLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQy9GLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxDQUFDLFlBQVksRUFBRSxvQkFBb0IsRUFBRSx3QkFBd0IsRUFBRSxDQUFDO0FBQ3RHLENBQUM7QUFTRCxrREFBa0Q7QUFDbEQsa0lBQWtJO0FBQ2xJLE1BQU0sVUFBVSwrQkFBK0IsQ0FBQyxTQUFpQjtJQUMvRCxPQUFPLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25CLENBQUMifQ==