import { type AztecAddress } from '@aztec/foundation/aztec-address';
import { EthAddress } from '@aztec/foundation/eth-address';
import { type Fr } from '@aztec/foundation/fields';
import { type DebugLogger } from '@aztec/foundation/log';
import type { Abi, Narrow } from 'abitype';
import { type Account, type Chain, type Hex, type HttpTransport, type PublicClient, type WalletClient } from 'viem';
import { type HDAccount, type PrivateKeyAccount } from 'viem/accounts';
import { type L1ContractAddresses } from './l1_contract_addresses.js';
/**
 * Return type of the deployL1Contract function.
 */
export type DeployL1Contracts = {
    /**
     * Wallet Client Type.
     */
    walletClient: WalletClient<HttpTransport, Chain, Account>;
    /**
     * Public Client Type.
     */
    publicClient: PublicClient<HttpTransport, Chain>;
    /**
     * The currently deployed l1 contract addresses
     */
    l1ContractAddresses: L1ContractAddresses;
};
/**
 * Contract artifacts
 */
export interface ContractArtifacts {
    /**
     * The contract abi.
     */
    contractAbi: Narrow<Abi | readonly unknown[]>;
    /**
     * The contract bytecode
     */
    contractBytecode: Hex;
}
/**
 * All L1 Contract Artifacts for deployment
 */
export interface L1ContractArtifactsForDeployment {
    /**
     * Inbox contract artifacts
     */
    inbox: ContractArtifacts;
    /**
     * Outbox contract artifacts
     */
    outbox: ContractArtifacts;
    /**
     * Registry contract artifacts
     */
    registry: ContractArtifacts;
    /**
     * Rollup contract artifacts
     */
    rollup: ContractArtifacts;
    /**
     * The token to pay for gas. This will be bridged to L2 via the feeJuicePortal below
     */
    feeJuice: ContractArtifacts;
    /**
     * Fee juice portal contract artifacts. Optional for now as gas is not strictly enforced
     */
    feeJuicePortal: ContractArtifacts;
    /**
     * Nomismatokopio contract artifacts.
     */
    nomismatokopio: ContractArtifacts;
    /**
     * Sysstia contract artifacts.
     */
    sysstia: ContractArtifacts;
    /**
     * Gerousia contract artifacts.
     */
    gerousia: ContractArtifacts;
    /**
     * Apella contract artifacts.
     */
    apella: ContractArtifacts;
}
export declare const l1Artifacts: L1ContractArtifactsForDeployment;
export interface DeployL1ContractsArgs {
    /**
     * The address of the L2 Fee Juice contract.
     */
    l2FeeJuiceAddress: AztecAddress;
    /**
     * The vk tree root.
     */
    vkTreeRoot: Fr;
    /**
     * The protocol contract tree root.
     */
    protocolContractTreeRoot: Fr;
    /**
     * The block number to assume proven through.
     */
    assumeProvenThrough?: number;
    /**
     * The salt for CREATE2 deployment.
     */
    salt: number | undefined;
    /**
     * The initial validators for the rollup contract.
     */
    initialValidators?: EthAddress[];
}
export type L1Clients = {
    publicClient: PublicClient<HttpTransport, Chain>;
    walletClient: WalletClient<HttpTransport, Chain, Account>;
};
/**
 * Creates a wallet and a public viem client for interacting with L1.
 * @param rpcUrl - RPC URL to connect to L1.
 * @param mnemonicOrPrivateKeyOrHdAccount - Mnemonic or account for the wallet client.
 * @param chain - Optional chain spec (defaults to local foundry).
 * @returns - A wallet and a public client.
 */
export declare function createL1Clients(rpcUrl: string, mnemonicOrPrivateKeyOrHdAccount: string | `0x${string}` | HDAccount | PrivateKeyAccount, chain?: Chain): L1Clients;
/**
 * Deploys the aztec L1 contracts; Rollup & (optionally) Decoder Helper.
 * @param rpcUrl - URL of the ETH RPC to use for deployment.
 * @param account - Private Key or HD Account that will deploy the contracts.
 * @param chain - The chain instance to deploy to.
 * @param logger - A logger object.
 * @param args - Arguments for initialization of L1 contracts
 * @returns A list of ETH addresses of the deployed contracts.
 */
export declare const deployL1Contracts: (rpcUrl: string, account: HDAccount | PrivateKeyAccount, chain: Chain, logger: DebugLogger, args: DeployL1ContractsArgs) => Promise<DeployL1Contracts>;
/**
 * Compiles a contract source code using the provided solc compiler.
 * @param fileName - Contract file name (eg UltraHonkVerifier.sol)
 * @param contractName - Contract name within the file (eg HonkVerifier)
 * @param source - Source code to compile
 * @param solc - Solc instance
 * @returns ABI and bytecode of the compiled contract
 */
export declare function compileContract(fileName: string, contractName: string, source: string, solc: {
    compile: (source: string) => string;
}): {
    abi: Narrow<Abi | readonly unknown[]>;
    bytecode: Hex;
};
/**
 * Helper function to deploy ETH contracts.
 * @param walletClient - A viem WalletClient.
 * @param publicClient - A viem PublicClient.
 * @param abi - The ETH contract's ABI (as abitype's Abi).
 * @param bytecode  - The ETH contract's bytecode.
 * @param args - Constructor arguments for the contract.
 * @param maybeSalt - Optional salt for CREATE2 deployment (does not wait for deployment tx to be mined if set, does not send tx if contract already exists).
 * @returns The ETH address the contract was deployed to.
 */
export declare function deployL1Contract(walletClient: WalletClient<HttpTransport, Chain, Account>, publicClient: PublicClient<HttpTransport, Chain>, abi: Narrow<Abi | readonly unknown[]>, bytecode: Hex, args?: readonly unknown[], maybeSalt?: Hex, logger?: DebugLogger): Promise<{
    address: EthAddress;
    txHash: Hex | undefined;
}>;
//# sourceMappingURL=deploy_l1_contracts.d.ts.map